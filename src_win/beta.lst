
beta.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800200  00003956  000039ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003956  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014d  008002fa  008002fa  00003ae4  2**0
                  ALLOC
  3 .debug_aranges 000004e0  00000000  00000000  00003ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000e17  00000000  00000000  00003fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000135b6  00000000  00000000  00004ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000049a0  00000000  00000000  00018391  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004573  00000000  00000000  0001cd31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009d0  00000000  00000000  000212a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002403  00000000  00000000  00021c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000021b5  00000000  00000000  00024077  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  0002622c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__ctors_end>
       4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
       8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
       c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      10:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      14:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      18:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      1c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      20:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      24:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      28:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      2c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      30:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      34:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      38:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      3c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      40:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      44:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      48:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      4c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      50:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      54:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      58:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      5c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      60:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      64:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      68:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      6c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      70:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      74:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      78:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      7c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      80:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      84:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      88:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      8c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      90:	0c 94 95 08 	jmp	0x112a	; 0x112a <__vector_36>
      94:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      98:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_38>
      9c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      a0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      a4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      a8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      ac:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      b0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      b4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      b8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      bc:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__vector_47>
      c0:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <__vector_48>
      c4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      c8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      cc:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      d0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      d4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      d8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      dc:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      e0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>

000000e4 <__c.1790>:
      e4:	6e 61 6e 00                                         nan.

000000e8 <__c.1788>:
      e8:	69 6e 66 00                                         inf.

000000ec <marquee_list>:
      ec:	48 02                                               H.

000000ee <bank1_list>:
      ee:	70 02 86 02 9c 02                                   p.....

000000f4 <__timer0Compare>:
      f4:	42 03 00 6e 00 02 47 00 35 00 02 44 00 06 05 03     B..n..G.5..D....
     104:	46 03 00 6e 00 04 48 00 35 00 04 44 00 04 35 03     F..n..H.5..D..5.

00000114 <__timer1Compare>:
     114:	4a 03 01 6f 00 02 88 00 36 00 02 80 00 06 ff 02     J..o....6.......
     124:	4e 03 01 6f 00 04 8a 00 36 00 04 80 00 04 02 03     N..o....6.......
     134:	52 03 01 6f 00 08 8c 00 36 00 08 80 00 02 05 03     R..o....6.......

00000144 <__timer2Compare>:
     144:	56 03 02 70 00 02 b3 00 37 00 02 b0 00 06 fc 02     V..p....7.......
     154:	5a 03 02 70 00 04 b4 00 37 00 04 b0 00 04 41 03     Z..p....7.....A.

00000164 <__timer3Compare>:
     164:	5e 03 03 71 00 02 98 00 38 00 02 90 00 06 29 03     ^..q....8.....).
     174:	62 03 03 71 00 04 9a 00 38 00 04 90 00 04 2c 03     b..q....8.....,.
     184:	66 03 03 71 00 08 9c 00 38 00 08 90 00 02 2f 03     f..q....8...../.

00000194 <__timer4Compare>:
     194:	6a 03 04 72 00 02 a8 00 39 00 02 a0 00 06 38 03     j..r....9.....8.
     1a4:	6e 03 04 72 00 04 aa 00 39 00 04 a0 00 04 3b 03     n..r....9.....;.
     1b4:	72 03 04 72 00 08 ac 00 39 00 08 a0 00 02 3e 03     r..r....9.....>.

000001c4 <__timer5Compare>:
     1c4:	76 03 05 73 00 02 28 01 3a 00 02 20 01 06 4a 03     v..s..(.:.. ..J.
     1d4:	7a 03 05 73 00 04 2a 01 3a 00 04 20 01 04 4d 03     z..s..*.:.. ..M.
     1e4:	7e 03 05 73 00 08 2c 01 3a 00 08 20 01 02 50 03     ~..s..,.:.. ..P.

000001f4 <pgm_Timers>:
     1f4:	82 03 46 00 45 00 00 00 02 33 88 44 00 01 44 00     ..F.E....3.D..D.
     204:	02 45 00 08 00 00 01 f4 00 6e 00 01 35 00 01 00     .E.......n..5...
     214:	00 00 00 01 00 00 01 00 00 01 00 00 8d 03 84 00     ................
     224:	81 00 ff 00 03 ff df 80 00 01 80 00 02 81 00 08     ................
     234:	81 00 10 14 01 6f 00 01 36 00 01 86 00 6f 00 20     .....o..6....o. 
     244:	36 00 20 81 00 40 00 00 98 03 b2 00 b1 00 00 ff     6. ..@..........
     254:	02 33 88 b0 00 01 b0 00 02 b1 00 08 00 00 01 44     .3.............D
     264:	01 70 00 01 37 00 01 00 00 00 00 01 00 00 01 00     .p..7...........
     274:	00 01 00 00 a3 03 94 00 91 00 ff 00 03 ff df 90     ................
     284:	00 01 90 00 02 91 00 08 91 00 10 64 01 71 00 01     ...........d.q..
     294:	38 00 01 96 00 71 00 20 38 00 20 91 00 40 32 03     8....q. 8. ..@2.
     2a4:	ae 03 a4 00 a1 00 ff 00 03 ff df a0 00 01 a0 00     ................
     2b4:	02 a1 00 08 a1 00 10 94 01 72 00 01 39 00 01 a6     .........r..9...
     2c4:	00 72 00 20 39 00 20 a1 00 40 44 03 b9 03 24 01     .r. 9. ..@D...$.
     2d4:	21 01 ff 00 03 ff df 20 01 01 20 01 02 21 01 08     !...... .. ..!..
     2e4:	21 01 10 c4 01 73 00 01 3a 00 01 26 01 73 00 20     !....s..:..&.s. 
     2f4:	3a 00 20 21 01 40 47 03                             :. !.@G.

000002fc <_B4>:
     2fc:	55 03 10                                            U..

000002ff <_B5>:
     2ff:	55 03 20                                            U. 

00000302 <_B6>:
     302:	55 03 40                                            U.@

00000305 <_B7>:
     305:	55 03 80                                            U..

00000308 <_C0>:
     308:	5b 03 01                                            [..

0000030b <_C1>:
     30b:	5b 03 02                                            [..

0000030e <_C2>:
     30e:	5b 03 04                                            [..

00000311 <_C3>:
     311:	5b 03 08                                            [..

00000314 <_C4>:
     314:	5b 03 10                                            [..

00000317 <_C5>:
     317:	5b 03 20                                            [. 

0000031a <_D2>:
     31a:	61 03 04                                            a..

0000031d <_D3>:
     31d:	61 03 08                                            a..

00000320 <_D5>:
     320:	61 03 20                                            a. 

00000323 <_D6>:
     323:	61 03 40                                            a.@

00000326 <_D7>:
     326:	61 03 80                                            a..

00000329 <_E3>:
     329:	67 03 08                                            g..

0000032c <_E4>:
     32c:	67 03 10                                            g..

0000032f <_E5>:
     32f:	67 03 20                                            g. 

00000332 <_E7>:
     332:	67 03 80                                            g..

00000335 <_G5>:
     335:	6d 03 20                                            m. 

00000338 <_H3>:
     338:	73 03 08                                            s..

0000033b <_H4>:
     33b:	73 03 10                                            s..

0000033e <_H5>:
     33e:	73 03 20                                            s. 

00000341 <_H6>:
     341:	73 03 40                                            s.@

00000344 <_L0>:
     344:	79 03 01                                            y..

00000347 <_L1>:
     347:	79 03 02                                            y..

0000034a <_L3>:
     34a:	79 03 08                                            y..

0000034d <_L4>:
     34d:	79 03 10                                            y..

00000350 <_L5>:
     350:	79 03 20                                            y. 

00000353 <AVcc_MV>:
     353:	88 13                                               ..

00000355 <_PORTB>:
     355:	25 00 24 00 23 00                                   %.$.#.

0000035b <_PORTC>:
     35b:	28 00 27 00 26 00                                   (.'.&.

00000361 <_PORTD>:
     361:	2b 00 2a 00 29 00                                   +.*.).

00000367 <_PORTE>:
     367:	2e 00 2d 00 2c 00                                   ..-.,.

0000036d <_PORTG>:
     36d:	34 00 33 00 32 00                                   4.3.2.

00000373 <_PORTH>:
     373:	02 01 01 01 00 01                                   ......

00000379 <_PORTL>:
     379:	0b 01 0a 01 09 01                                   ......

0000037f <c_servoPWM>:
     37f:	7f 0b 77 0b                                         ..w.

00000383 <__c.1911>:
     383:	20 45 72 72 6f 72 3a 25 64 0d 0a 00                  Error:%d...

0000038f <__c.1909>:
     38f:	55 73 65 72 00                                      User.

00000394 <__c.1907>:
     394:	57 65 62 62 6f 74 4c 69 62 00                       WebbotLib.

0000039e <atoz>:
     39e:	ee 3e 9c 7a 9e 8e f6 2e 0c 78 ae 1c aa 2a 3a ce     .>.z.....x...*:.
     3ae:	e6 0a b6 1e 38 7c b8 6e 76 da                       ....8|.nv.

000003b8 <digits>:
     3b8:	fc 60 da f2 66 b6 3e e0 fe e6                       .`..f.>...

000003c2 <c_hw_uart>:
     3c2:	67 11 1d 12 39 12 f2 11 24 12 08 12 00 40 7a 10     g...9...$....@z.
     3d2:	f3 5a 00 a0 72 4e 18 09 00 10 a5 d4 e8 00 00 e8     .Z..rN..........
     3e2:	76 48 17 00 00 e4 0b 54 02 00 00 ca 9a 3b 00 00     vH.....T.....;..
     3f2:	00 e1 f5 05 00 00 80 96 98 00 00 00 40 42 0f 00     ............@B..
     402:	00 00 a0 86 01 00 00 00 10 27 00 00 00 00 e8 03     .........'......
     412:	00 00 00 00 64 00 00 00 00 00 0a 00 00 00 00 00     ....d...........
     422:	01 00 00 00 00 00 2c 76 d8 88 dc 67 4f 08 23 df     ......,v...gO.#.
     432:	c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51     ...Y.......S.:.Q
     442:	99 76 96 e8 e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c     .v.....&....b.@|
     452:	6f fc ef bc 9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a     o.....@...o....Z
     462:	2a f7 5c 93 6b 6c f9 67 6d c1 1b fc e0 e4 0d 47     *.\.kl.gm......G
     472:	fe f5 20 e6 b5 00 d0 ed 90 2e 03 00 94 35 77 05     .. ..........5w.
     482:	00 80 84 1e 08 00 00 20 4e 0a 00 00 00 c8 0c 33     ....... N......3
     492:	33 33 33 0f 98 6e 12 83 11 41 ef 8d 21 14 89 3b     333..n...A..!..;
     4a2:	e6 55 16 cf fe e6 db 18 d1 84 4b 38 1b f7 7c 1d     .U........K8..|.
     4b2:	90 1d a4 bb e4 24 20 32 84 72 5e 22 81 00 c9 f1     .....$ 2.r^"....
     4c2:	24 ec a1 e5 3d 27                                   $...='

000004c8 <__ctors_start>:
     4c8:	bc 02       	muls	r27, r28
     4ca:	fb 09       	sbc	r31, r11
     4cc:	fd 09       	sbc	r31, r13

000004ce <__ctors_end>:
     4ce:	11 24       	eor	r1, r1
     4d0:	1f be       	out	0x3f, r1	; 63
     4d2:	cf ef       	ldi	r28, 0xFF	; 255
     4d4:	d1 e2       	ldi	r29, 0x21	; 33
     4d6:	de bf       	out	0x3e, r29	; 62
     4d8:	cd bf       	out	0x3d, r28	; 61

000004da <__do_copy_data>:
     4da:	12 e0       	ldi	r17, 0x02	; 2
     4dc:	a0 e0       	ldi	r26, 0x00	; 0
     4de:	b2 e0       	ldi	r27, 0x02	; 2
     4e0:	e6 e5       	ldi	r30, 0x56	; 86
     4e2:	f9 e3       	ldi	r31, 0x39	; 57
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <.do_copy_data_start>

000004e6 <.do_copy_data_loop>:
     4e6:	05 90       	lpm	r0, Z+
     4e8:	0d 92       	st	X+, r0

000004ea <.do_copy_data_start>:
     4ea:	aa 3f       	cpi	r26, 0xFA	; 250
     4ec:	b1 07       	cpc	r27, r17
     4ee:	d9 f7       	brne	.-10     	; 0x4e6 <.do_copy_data_loop>

000004f0 <__do_clear_bss>:
     4f0:	14 e0       	ldi	r17, 0x04	; 4
     4f2:	aa ef       	ldi	r26, 0xFA	; 250
     4f4:	b2 e0       	ldi	r27, 0x02	; 2
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <.do_clear_bss_start>

000004f8 <.do_clear_bss_loop>:
     4f8:	1d 92       	st	X+, r1

000004fa <.do_clear_bss_start>:
     4fa:	a7 34       	cpi	r26, 0x47	; 71
     4fc:	b1 07       	cpc	r27, r17
     4fe:	e1 f7       	brne	.-8      	; 0x4f8 <.do_clear_bss_loop>

00000500 <__do_global_ctors>:
     500:	14 e0       	ldi	r17, 0x04	; 4
     502:	ce ec       	ldi	r28, 0xCE	; 206
     504:	d4 e0       	ldi	r29, 0x04	; 4
     506:	04 c0       	rjmp	.+8      	; 0x510 <.do_global_ctors_start>

00000508 <.do_global_ctors_loop>:
     508:	22 97       	sbiw	r28, 0x02	; 2
     50a:	fe 01       	movw	r30, r28
     50c:	0e 94 a5 1c 	call	0x394a	; 0x394a <__tablejump__>

00000510 <.do_global_ctors_start>:
     510:	c8 3c       	cpi	r28, 0xC8	; 200
     512:	d1 07       	cpc	r29, r17
     514:	c9 f7       	brne	.-14     	; 0x508 <.do_global_ctors_loop>
     516:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <main>
     51a:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <exit>

0000051e <__bad_interrupt>:
     51e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000522 <_Z41__static_initialization_and_destruction_0ii>:
// This is the main loop
TICK_COUNT appControl(LOOP_COUNT loopCount, TICK_COUNT loopStart) {

	test_motor.compute();
  	return HEXAPOD_LOOP_DURATION;
}
     522:	df 93       	push	r29
     524:	cf 93       	push	r28
     526:	00 d0       	rcall	.+0      	; 0x528 <_Z41__static_initialization_and_destruction_0ii+0x6>
     528:	00 d0       	rcall	.+0      	; 0x52a <_Z41__static_initialization_and_destruction_0ii+0x8>
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	9a 83       	std	Y+2, r25	; 0x02
     530:	89 83       	std	Y+1, r24	; 0x01
     532:	7c 83       	std	Y+4, r23	; 0x04
     534:	6b 83       	std	Y+3, r22	; 0x03
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	9a 81       	ldd	r25, Y+2	; 0x02
     53a:	81 30       	cpi	r24, 0x01	; 1
     53c:	91 05       	cpc	r25, r1
     53e:	a9 f4       	brne	.+42     	; 0x56a <_Z41__static_initialization_and_destruction_0ii+0x48>
     540:	8b 81       	ldd	r24, Y+3	; 0x03
     542:	9c 81       	ldd	r25, Y+4	; 0x04
     544:	2f ef       	ldi	r18, 0xFF	; 255
     546:	8f 3f       	cpi	r24, 0xFF	; 255
     548:	92 07       	cpc	r25, r18
     54a:	79 f4       	brne	.+30     	; 0x56a <_Z41__static_initialization_and_destruction_0ii+0x48>
#include "protocol.h"
#include "services.h"
#include "smart_motor.h"


Protocol test;
     54c:	8a ef       	ldi	r24, 0xFA	; 250
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN8ProtocolC1Ev>
PingService ping;
     554:	83 e3       	ldi	r24, 0x33	; 51
     556:	93 e0       	ldi	r25, 0x03	; 3
     558:	0e 94 bf 06 	call	0xd7e	; 0xd7e <_ZN11PingServiceC1Ev>

SmartMotor test_motor(servo1);
     55c:	88 e3       	ldi	r24, 0x38	; 56
     55e:	93 e0       	ldi	r25, 0x03	; 3
     560:	21 ee       	ldi	r18, 0xE1	; 225
     562:	33 e0       	ldi	r19, 0x03	; 3
     564:	b9 01       	movw	r22, r18
     566:	0e 94 1c 07 	call	0xe38	; 0xe38 <_ZN10SmartMotorC1ER5Servo>
// This is the main loop
TICK_COUNT appControl(LOOP_COUNT loopCount, TICK_COUNT loopStart) {

	test_motor.compute();
  	return HEXAPOD_LOOP_DURATION;
}
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	cf 91       	pop	r28
     574:	df 91       	pop	r29
     576:	08 95       	ret

00000578 <_GLOBAL__I_test>:
     578:	df 93       	push	r29
     57a:	cf 93       	push	r28
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	6f ef       	ldi	r22, 0xFF	; 255
     586:	7f ef       	ldi	r23, 0xFF	; 255
     588:	0e 94 91 02 	call	0x522	; 0x522 <_Z41__static_initialization_and_destruction_0ii>
     58c:	cf 91       	pop	r28
     58e:	df 91       	pop	r29
     590:	08 95       	ret

00000592 <appControl>:
	return 0;
}


// This is the main loop
TICK_COUNT appControl(LOOP_COUNT loopCount, TICK_COUNT loopStart) {
     592:	df 93       	push	r29
     594:	cf 93       	push	r28
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	28 97       	sbiw	r28, 0x08	; 8
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
     5a6:	69 83       	std	Y+1, r22	; 0x01
     5a8:	7a 83       	std	Y+2, r23	; 0x02
     5aa:	8b 83       	std	Y+3, r24	; 0x03
     5ac:	9c 83       	std	Y+4, r25	; 0x04
     5ae:	2d 83       	std	Y+5, r18	; 0x05
     5b0:	3e 83       	std	Y+6, r19	; 0x06
     5b2:	4f 83       	std	Y+7, r20	; 0x07
     5b4:	58 87       	std	Y+8, r21	; 0x08

	test_motor.compute();
     5b6:	88 e3       	ldi	r24, 0x38	; 56
     5b8:	93 e0       	ldi	r25, 0x03	; 3
     5ba:	0e 94 d6 07 	call	0xfac	; 0xfac <_ZN10SmartMotor7computeEv>
  	return HEXAPOD_LOOP_DURATION;
     5be:	80 ea       	ldi	r24, 0xA0	; 160
     5c0:	96 e8       	ldi	r25, 0x86	; 134
     5c2:	a1 e0       	ldi	r26, 0x01	; 1
     5c4:	b0 e0       	ldi	r27, 0x00	; 0
}
     5c6:	bc 01       	movw	r22, r24
     5c8:	cd 01       	movw	r24, r26
     5ca:	28 96       	adiw	r28, 0x08	; 8
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	cf 91       	pop	r28
     5d8:	df 91       	pop	r29
     5da:	08 95       	ret

000005dc <_ZN8Actuator8setSpeedEa>:
class Actuator{
public:
	Actuator(__ACTUATOR* cstr){
		m_cstr = cstr;
	}
	void setSpeed(DRIVE_SPEED speed){
     5dc:	df 93       	push	r29
     5de:	cf 93       	push	r28
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <_ZN8Actuator8setSpeedEa+0x6>
     5e2:	0f 92       	push	r0
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	9a 83       	std	Y+2, r25	; 0x02
     5ea:	89 83       	std	Y+1, r24	; 0x01
     5ec:	6b 83       	std	Y+3, r22	; 0x03
		__act_setSpeed(m_cstr,speed);
     5ee:	e9 81       	ldd	r30, Y+1	; 0x01
     5f0:	fa 81       	ldd	r31, Y+2	; 0x02
     5f2:	80 81       	ld	r24, Z
     5f4:	91 81       	ldd	r25, Z+1	; 0x01
     5f6:	6b 81       	ldd	r22, Y+3	; 0x03
     5f8:	0e 94 39 0c 	call	0x1872	; 0x1872 <__act_setSpeed>
	}
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	cf 91       	pop	r28
     604:	df 91       	pop	r29
     606:	08 95       	ret

00000608 <appInitSoftware>:
	initHardware();
}


// Initialise the software
TICK_COUNT appInitSoftware(TICK_COUNT loopStart){
     608:	df 93       	push	r29
     60a:	cf 93       	push	r28
     60c:	00 d0       	rcall	.+0      	; 0x60e <appInitSoftware+0x6>
     60e:	00 d0       	rcall	.+0      	; 0x610 <appInitSoftware+0x8>
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	69 83       	std	Y+1, r22	; 0x01
     616:	7a 83       	std	Y+2, r23	; 0x02
     618:	8b 83       	std	Y+3, r24	; 0x03
     61a:	9c 83       	std	Y+4, r25	; 0x04
	//uart1.setPollingMode(false);
	test.init(&uart1);
     61c:	8a ef       	ldi	r24, 0xFA	; 250
     61e:	92 e0       	ldi	r25, 0x02	; 2
     620:	2f ee       	ldi	r18, 0xEF	; 239
     622:	33 e0       	ldi	r19, 0x03	; 3
     624:	b9 01       	movw	r22, r18
     626:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_ZN8Protocol4initEP6UartHW>
	servo1.setSpeed(0);
     62a:	81 ee       	ldi	r24, 0xE1	; 225
     62c:	93 e0       	ldi	r25, 0x03	; 3
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN8Actuator8setSpeedEa>

	test_motor.set_position(50,5000);
     634:	88 e3       	ldi	r24, 0x38	; 56
     636:	93 e0       	ldi	r25, 0x03	; 3
     638:	62 e3       	ldi	r22, 0x32	; 50
     63a:	48 e8       	ldi	r20, 0x88	; 136
     63c:	53 e1       	ldi	r21, 0x13	; 19
     63e:	0e 94 60 07 	call	0xec0	; 0xec0 <_ZN10SmartMotor12set_positionEai>

    //ping.init(&test);
	return 0;
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	a0 e0       	ldi	r26, 0x00	; 0
     648:	b0 e0       	ldi	r27, 0x00	; 0
}
     64a:	bc 01       	movw	r22, r24
     64c:	cd 01       	movw	r24, r26
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	cf 91       	pop	r28
     658:	df 91       	pop	r29
     65a:	08 95       	ret

0000065c <appInitHardware>:

SmartMotor test_motor(servo1);


// Initialise the hardware
void appInitHardware(void) {
     65c:	df 93       	push	r29
     65e:	cf 93       	push	r28
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
	initHardware();
     664:	0e 94 80 08 	call	0x1100	; 0x1100 <initHardware>
}
     668:	cf 91       	pop	r28
     66a:	df 91       	pop	r29
     66c:	08 95       	ret

0000066e <__iCliRetVal>:
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
     66e:	df 93       	push	r29
     670:	cf 93       	push	r28
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
     676:	f8 94       	cli
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	cf 91       	pop	r28
     67c:	df 91       	pop	r29
     67e:	08 95       	ret

00000680 <__iRestore>:
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
     680:	df 93       	push	r29
     682:	cf 93       	push	r28
     684:	00 d0       	rcall	.+0      	; 0x686 <__iRestore+0x6>
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	9a 83       	std	Y+2, r25	; 0x02
     68c:	89 83       	std	Y+1, r24	; 0x01
     68e:	ef e5       	ldi	r30, 0x5F	; 95
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	a9 81       	ldd	r26, Y+1	; 0x01
     694:	ba 81       	ldd	r27, Y+2	; 0x02
     696:	8c 91       	ld	r24, X
     698:	80 83       	st	Z, r24
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	cf 91       	pop	r28
     6a0:	df 91       	pop	r29
     6a2:	08 95       	ret

000006a4 <_ZN6PacketC2Ev>:
#include <stdio.h>
#include <string.h>
#include "protocol.h"

Packet::Packet()
     6a4:	df 93       	push	r29
     6a6:	cf 93       	push	r28
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <_ZN6PacketC2Ev+0x6>
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
     6ae:	9a 83       	std	Y+2, r25	; 0x02
     6b0:	89 83       	std	Y+1, r24	; 0x01
{
	command = PROT_ERROR;
     6b2:	e9 81       	ldd	r30, Y+1	; 0x01
     6b4:	fa 81       	ldd	r31, Y+2	; 0x02
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	80 83       	st	Z, r24
	len = 0;
     6ba:	e9 81       	ldd	r30, Y+1	; 0x01
     6bc:	fa 81       	ldd	r31, Y+2	; 0x02
     6be:	11 82       	std	Z+1, r1	; 0x01
}
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	cf 91       	pop	r28
     6c6:	df 91       	pop	r29
     6c8:	08 95       	ret

000006ca <_ZN6PacketC1Ev>:
#include <stdio.h>
#include <string.h>
#include "protocol.h"

Packet::Packet()
     6ca:	df 93       	push	r29
     6cc:	cf 93       	push	r28
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <_ZN6PacketC1Ev+0x6>
     6d0:	cd b7       	in	r28, 0x3d	; 61
     6d2:	de b7       	in	r29, 0x3e	; 62
     6d4:	9a 83       	std	Y+2, r25	; 0x02
     6d6:	89 83       	std	Y+1, r24	; 0x01
{
	command = PROT_ERROR;
     6d8:	e9 81       	ldd	r30, Y+1	; 0x01
     6da:	fa 81       	ldd	r31, Y+2	; 0x02
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	80 83       	st	Z, r24
	len = 0;
     6e0:	e9 81       	ldd	r30, Y+1	; 0x01
     6e2:	fa 81       	ldd	r31, Y+2	; 0x02
     6e4:	11 82       	std	Z+1, r1	; 0x01
}
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	cf 91       	pop	r28
     6ec:	df 91       	pop	r29
     6ee:	08 95       	ret

000006f0 <_ZN8Protocol4initEP6UartHW>:
	memset(in, 0, Protocol::BUFFER_SIZE);
	memset(out, 0, Protocol::BUFFER_SIZE);
	haveMessage = false;
}

void Protocol::init(UartHW *uart)
     6f0:	df 93       	push	r29
     6f2:	cf 93       	push	r28
     6f4:	00 d0       	rcall	.+0      	; 0x6f6 <_ZN8Protocol4initEP6UartHW+0x6>
     6f6:	00 d0       	rcall	.+0      	; 0x6f8 <_ZN8Protocol4initEP6UartHW+0x8>
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	9a 83       	std	Y+2, r25	; 0x02
     6fe:	89 83       	std	Y+1, r24	; 0x01
     700:	7c 83       	std	Y+4, r23	; 0x04
     702:	6b 83       	std	Y+3, r22	; 0x03
{
	_uart = uart;
     704:	e9 81       	ldd	r30, Y+1	; 0x01
     706:	fa 81       	ldd	r31, Y+2	; 0x02
     708:	8b 81       	ldd	r24, Y+3	; 0x03
     70a:	9c 81       	ldd	r25, Y+4	; 0x04
     70c:	95 87       	std	Z+13, r25	; 0x0d
     70e:	84 87       	std	Z+12, r24	; 0x0c
}
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	cf 91       	pop	r28
     71a:	df 91       	pop	r29
     71c:	08 95       	ret

0000071e <_ZN8Protocol7receiveEv>:
	DUMP(c, 0x01);

	*_uart<<'\n';
}

bool Protocol::receive()
     71e:	df 93       	push	r29
     720:	cf 93       	push	r28
     722:	00 d0       	rcall	.+0      	; 0x724 <_ZN8Protocol7receiveEv+0x6>
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	9a 83       	std	Y+2, r25	; 0x02
     72a:	89 83       	std	Y+1, r24	; 0x01
        	in_offset = 0;
			_write("true", 4);
        	return true;
		}
    }*/
	return false;
     72c:	80 e0       	ldi	r24, 0x00	; 0
}
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	cf 91       	pop	r28
     734:	df 91       	pop	r29
     736:	08 95       	ret

00000738 <_ZN8Protocol4sendER6Packet>:

void Protocol::send(Packet &msg)
     738:	df 93       	push	r29
     73a:	cf 93       	push	r28
     73c:	00 d0       	rcall	.+0      	; 0x73e <_ZN8Protocol4sendER6Packet+0x6>
     73e:	00 d0       	rcall	.+0      	; 0x740 <_ZN8Protocol4sendER6Packet+0x8>
     740:	00 d0       	rcall	.+0      	; 0x742 <_ZN8Protocol4sendER6Packet+0xa>
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	9c 83       	std	Y+4, r25	; 0x04
     748:	8b 83       	std	Y+3, r24	; 0x03
     74a:	7e 83       	std	Y+6, r23	; 0x06
     74c:	6d 83       	std	Y+5, r22	; 0x05
{
    if((out_offset + msg.len + 2) < Protocol::BUFFER_SIZE)
     74e:	eb 81       	ldd	r30, Y+3	; 0x03
     750:	fc 81       	ldd	r31, Y+4	; 0x04
     752:	87 a9       	ldd	r24, Z+55	; 0x37
     754:	28 2f       	mov	r18, r24
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	ed 81       	ldd	r30, Y+5	; 0x05
     75a:	fe 81       	ldd	r31, Y+6	; 0x06
     75c:	81 81       	ldd	r24, Z+1	; 0x01
     75e:	88 2f       	mov	r24, r24
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	82 0f       	add	r24, r18
     764:	93 1f       	adc	r25, r19
     766:	02 96       	adiw	r24, 0x02	; 2
     768:	84 31       	cpi	r24, 0x14	; 20
     76a:	91 05       	cpc	r25, r1
     76c:	0c f0       	brlt	.+2      	; 0x770 <_ZN8Protocol4sendER6Packet+0x38>
     76e:	54 c0       	rjmp	.+168    	; 0x818 <_ZN8Protocol4sendER6Packet+0xe0>
    {
        out[out_offset++] = msg.command;
     770:	eb 81       	ldd	r30, Y+3	; 0x03
     772:	fc 81       	ldd	r31, Y+4	; 0x04
     774:	57 a9       	ldd	r21, Z+55	; 0x37
     776:	25 2f       	mov	r18, r21
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	ed 81       	ldd	r30, Y+5	; 0x05
     77c:	fe 81       	ldd	r31, Y+6	; 0x06
     77e:	40 81       	ld	r20, Z
     780:	8b 81       	ldd	r24, Y+3	; 0x03
     782:	9c 81       	ldd	r25, Y+4	; 0x04
     784:	82 0f       	add	r24, r18
     786:	93 1f       	adc	r25, r19
     788:	fc 01       	movw	r30, r24
     78a:	b2 96       	adiw	r30, 0x22	; 34
     78c:	40 83       	st	Z, r20
     78e:	85 2f       	mov	r24, r21
     790:	8f 5f       	subi	r24, 0xFF	; 255
     792:	eb 81       	ldd	r30, Y+3	; 0x03
     794:	fc 81       	ldd	r31, Y+4	; 0x04
     796:	87 ab       	std	Z+55, r24	; 0x37
        out[out_offset++] = msg.len;
     798:	eb 81       	ldd	r30, Y+3	; 0x03
     79a:	fc 81       	ldd	r31, Y+4	; 0x04
     79c:	57 a9       	ldd	r21, Z+55	; 0x37
     79e:	25 2f       	mov	r18, r21
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	ed 81       	ldd	r30, Y+5	; 0x05
     7a4:	fe 81       	ldd	r31, Y+6	; 0x06
     7a6:	41 81       	ldd	r20, Z+1	; 0x01
     7a8:	8b 81       	ldd	r24, Y+3	; 0x03
     7aa:	9c 81       	ldd	r25, Y+4	; 0x04
     7ac:	82 0f       	add	r24, r18
     7ae:	93 1f       	adc	r25, r19
     7b0:	fc 01       	movw	r30, r24
     7b2:	b2 96       	adiw	r30, 0x22	; 34
     7b4:	40 83       	st	Z, r20
     7b6:	85 2f       	mov	r24, r21
     7b8:	8f 5f       	subi	r24, 0xFF	; 255
     7ba:	eb 81       	ldd	r30, Y+3	; 0x03
     7bc:	fc 81       	ldd	r31, Y+4	; 0x04
     7be:	87 ab       	std	Z+55, r24	; 0x37
        for(int i=0;i<msg.len;i++)
     7c0:	1a 82       	std	Y+2, r1	; 0x02
     7c2:	19 82       	std	Y+1, r1	; 0x01
     7c4:	1f c0       	rjmp	.+62     	; 0x804 <_ZN8Protocol4sendER6Packet+0xcc>
            out[out_offset++] = msg.data[i];
     7c6:	eb 81       	ldd	r30, Y+3	; 0x03
     7c8:	fc 81       	ldd	r31, Y+4	; 0x04
     7ca:	67 a9       	ldd	r22, Z+55	; 0x37
     7cc:	46 2f       	mov	r20, r22
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	29 81       	ldd	r18, Y+1	; 0x01
     7d2:	3a 81       	ldd	r19, Y+2	; 0x02
     7d4:	8d 81       	ldd	r24, Y+5	; 0x05
     7d6:	9e 81       	ldd	r25, Y+6	; 0x06
     7d8:	82 0f       	add	r24, r18
     7da:	93 1f       	adc	r25, r19
     7dc:	fc 01       	movw	r30, r24
     7de:	32 96       	adiw	r30, 0x02	; 2
     7e0:	20 81       	ld	r18, Z
     7e2:	8b 81       	ldd	r24, Y+3	; 0x03
     7e4:	9c 81       	ldd	r25, Y+4	; 0x04
     7e6:	84 0f       	add	r24, r20
     7e8:	95 1f       	adc	r25, r21
     7ea:	fc 01       	movw	r30, r24
     7ec:	b2 96       	adiw	r30, 0x22	; 34
     7ee:	20 83       	st	Z, r18
     7f0:	86 2f       	mov	r24, r22
     7f2:	8f 5f       	subi	r24, 0xFF	; 255
     7f4:	eb 81       	ldd	r30, Y+3	; 0x03
     7f6:	fc 81       	ldd	r31, Y+4	; 0x04
     7f8:	87 ab       	std	Z+55, r24	; 0x37
{
    if((out_offset + msg.len + 2) < Protocol::BUFFER_SIZE)
    {
        out[out_offset++] = msg.command;
        out[out_offset++] = msg.len;
        for(int i=0;i<msg.len;i++)
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	9a 81       	ldd	r25, Y+2	; 0x02
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	9a 83       	std	Y+2, r25	; 0x02
     802:	89 83       	std	Y+1, r24	; 0x01
     804:	ed 81       	ldd	r30, Y+5	; 0x05
     806:	fe 81       	ldd	r31, Y+6	; 0x06
     808:	81 81       	ldd	r24, Z+1	; 0x01
     80a:	28 2f       	mov	r18, r24
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	89 81       	ldd	r24, Y+1	; 0x01
     810:	9a 81       	ldd	r25, Y+2	; 0x02
     812:	82 17       	cp	r24, r18
     814:	93 07       	cpc	r25, r19
     816:	bc f2       	brlt	.-82     	; 0x7c6 <_ZN8Protocol4sendER6Packet+0x8e>
            out[out_offset++] = msg.data[i];
    }
}
     818:	26 96       	adiw	r28, 0x06	; 6
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	cf 91       	pop	r28
     826:	df 91       	pop	r29
     828:	08 95       	ret

0000082a <_ZN8Protocol6_writeEPhi>:

//////////////////////////////////////////
//
// PRIVATE
//////////////////////////////////////////////
void Protocol::_write(uint8_t *data, int size)
     82a:	df 93       	push	r29
     82c:	cf 93       	push	r28
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	28 97       	sbiw	r28, 0x08	; 8
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	f8 94       	cli
     838:	de bf       	out	0x3e, r29	; 62
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	cd bf       	out	0x3d, r28	; 61
     83e:	9c 83       	std	Y+4, r25	; 0x04
     840:	8b 83       	std	Y+3, r24	; 0x03
     842:	7e 83       	std	Y+6, r23	; 0x06
     844:	6d 83       	std	Y+5, r22	; 0x05
     846:	58 87       	std	Y+8, r21	; 0x08
     848:	4f 83       	std	Y+7, r20	; 0x07
{
	uint8_t *p = data;
     84a:	8d 81       	ldd	r24, Y+5	; 0x05
     84c:	9e 81       	ldd	r25, Y+6	; 0x06
     84e:	9a 83       	std	Y+2, r25	; 0x02
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	19 c0       	rjmp	.+50     	; 0x886 <_ZN8Protocol6_writeEPhi+0x5c>
	while(p-data < size)
	{
		_uart->write(*p);
     854:	eb 81       	ldd	r30, Y+3	; 0x03
     856:	fc 81       	ldd	r31, Y+4	; 0x04
     858:	04 84       	ldd	r0, Z+12	; 0x0c
     85a:	f5 85       	ldd	r31, Z+13	; 0x0d
     85c:	e0 2d       	mov	r30, r0
     85e:	01 90       	ld	r0, Z+
     860:	f0 81       	ld	r31, Z
     862:	e0 2d       	mov	r30, r0
     864:	40 81       	ld	r20, Z
     866:	51 81       	ldd	r21, Z+1	; 0x01
     868:	eb 81       	ldd	r30, Y+3	; 0x03
     86a:	fc 81       	ldd	r31, Y+4	; 0x04
     86c:	84 85       	ldd	r24, Z+12	; 0x0c
     86e:	95 85       	ldd	r25, Z+13	; 0x0d
     870:	e9 81       	ldd	r30, Y+1	; 0x01
     872:	fa 81       	ldd	r31, Y+2	; 0x02
     874:	20 81       	ld	r18, Z
     876:	62 2f       	mov	r22, r18
     878:	fa 01       	movw	r30, r20
     87a:	09 95       	icall
		p++;
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	9a 81       	ldd	r25, Y+2	; 0x02
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	9a 83       	std	Y+2, r25	; 0x02
     884:	89 83       	std	Y+1, r24	; 0x01
// PRIVATE
//////////////////////////////////////////////
void Protocol::_write(uint8_t *data, int size)
{
	uint8_t *p = data;
	while(p-data < size)
     886:	29 81       	ldd	r18, Y+1	; 0x01
     888:	3a 81       	ldd	r19, Y+2	; 0x02
     88a:	8d 81       	ldd	r24, Y+5	; 0x05
     88c:	9e 81       	ldd	r25, Y+6	; 0x06
     88e:	28 1b       	sub	r18, r24
     890:	39 0b       	sbc	r19, r25
     892:	8f 81       	ldd	r24, Y+7	; 0x07
     894:	98 85       	ldd	r25, Y+8	; 0x08
     896:	28 17       	cp	r18, r24
     898:	39 07       	cpc	r19, r25
     89a:	e4 f2       	brlt	.-72     	; 0x854 <_ZN8Protocol6_writeEPhi+0x2a>
	{
		_uart->write(*p);
		p++;
	}
}
     89c:	28 96       	adiw	r28, 0x08	; 8
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	cf 91       	pop	r28
     8aa:	df 91       	pop	r29
     8ac:	08 95       	ret

000008ae <_ZN8Protocol5_readEv>:

uint8_t Protocol::_read()
     8ae:	df 93       	push	r29
     8b0:	cf 93       	push	r28
     8b2:	00 d0       	rcall	.+0      	; 0x8b4 <_ZN8Protocol5_readEv+0x6>
     8b4:	00 d0       	rcall	.+0      	; 0x8b6 <_ZN8Protocol5_readEv+0x8>
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
     8ba:	9c 83       	std	Y+4, r25	; 0x04
     8bc:	8b 83       	std	Y+3, r24	; 0x03
{
	int c = -1;
     8be:	8f ef       	ldi	r24, 0xFF	; 255
     8c0:	9f ef       	ldi	r25, 0xFF	; 255
     8c2:	9a 83       	std	Y+2, r25	; 0x02
     8c4:	89 83       	std	Y+1, r24	; 0x01
     8c6:	39 c0       	rjmp	.+114    	; 0x93a <_ZN8Protocol5_readEv+0x8c>
//	CRITICAL_SECTION{
	while(in_offset < Protocol::BUFFER_SIZE )
	{
		c = _uart->read();
     8c8:	eb 81       	ldd	r30, Y+3	; 0x03
     8ca:	fc 81       	ldd	r31, Y+4	; 0x04
     8cc:	04 84       	ldd	r0, Z+12	; 0x0c
     8ce:	f5 85       	ldd	r31, Z+13	; 0x0d
     8d0:	e0 2d       	mov	r30, r0
     8d2:	80 81       	ld	r24, Z
     8d4:	91 81       	ldd	r25, Z+1	; 0x01
     8d6:	fc 01       	movw	r30, r24
     8d8:	32 96       	adiw	r30, 0x02	; 2
     8da:	20 81       	ld	r18, Z
     8dc:	31 81       	ldd	r19, Z+1	; 0x01
     8de:	eb 81       	ldd	r30, Y+3	; 0x03
     8e0:	fc 81       	ldd	r31, Y+4	; 0x04
     8e2:	84 85       	ldd	r24, Z+12	; 0x0c
     8e4:	95 85       	ldd	r25, Z+13	; 0x0d
     8e6:	f9 01       	movw	r30, r18
     8e8:	09 95       	icall
     8ea:	9a 83       	std	Y+2, r25	; 0x02
     8ec:	89 83       	std	Y+1, r24	; 0x01
		if(c == -1)
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	9a 81       	ldd	r25, Y+2	; 0x02
     8f2:	2f ef       	ldi	r18, 0xFF	; 255
     8f4:	8f 3f       	cpi	r24, 0xFF	; 255
     8f6:	92 07       	cpc	r25, r18
     8f8:	29 f1       	breq	.+74     	; 0x944 <_ZN8Protocol5_readEv+0x96>
			break;
		in[in_offset] = 0;
     8fa:	eb 81       	ldd	r30, Y+3	; 0x03
     8fc:	fc 81       	ldd	r31, Y+4	; 0x04
     8fe:	86 a9       	ldd	r24, Z+54	; 0x36
     900:	28 2f       	mov	r18, r24
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	8b 81       	ldd	r24, Y+3	; 0x03
     906:	9c 81       	ldd	r25, Y+4	; 0x04
     908:	82 0f       	add	r24, r18
     90a:	93 1f       	adc	r25, r19
     90c:	fc 01       	movw	r30, r24
     90e:	3e 96       	adiw	r30, 0x0e	; 14
     910:	10 82       	st	Z, r1
		in[in_offset] = (uint8_t)(c & 0xFF);
     912:	eb 81       	ldd	r30, Y+3	; 0x03
     914:	fc 81       	ldd	r31, Y+4	; 0x04
     916:	86 a9       	ldd	r24, Z+54	; 0x36
     918:	28 2f       	mov	r18, r24
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	49 81       	ldd	r20, Y+1	; 0x01
     91e:	8b 81       	ldd	r24, Y+3	; 0x03
     920:	9c 81       	ldd	r25, Y+4	; 0x04
     922:	82 0f       	add	r24, r18
     924:	93 1f       	adc	r25, r19
     926:	fc 01       	movw	r30, r24
     928:	3e 96       	adiw	r30, 0x0e	; 14
     92a:	40 83       	st	Z, r20
		in_offset++;
     92c:	eb 81       	ldd	r30, Y+3	; 0x03
     92e:	fc 81       	ldd	r31, Y+4	; 0x04
     930:	86 a9       	ldd	r24, Z+54	; 0x36
     932:	8f 5f       	subi	r24, 0xFF	; 255
     934:	eb 81       	ldd	r30, Y+3	; 0x03
     936:	fc 81       	ldd	r31, Y+4	; 0x04
     938:	86 ab       	std	Z+54, r24	; 0x36

uint8_t Protocol::_read()
{
	int c = -1;
//	CRITICAL_SECTION{
	while(in_offset < Protocol::BUFFER_SIZE )
     93a:	eb 81       	ldd	r30, Y+3	; 0x03
     93c:	fc 81       	ldd	r31, Y+4	; 0x04
     93e:	86 a9       	ldd	r24, Z+54	; 0x36
     940:	84 31       	cpi	r24, 0x14	; 20
     942:	10 f2       	brcs	.-124    	; 0x8c8 <_ZN8Protocol5_readEv+0x1a>
		in[in_offset] = 0;
		in[in_offset] = (uint8_t)(c & 0xFF);
		in_offset++;
	}
//	}
	return 0;
     944:	80 e0       	ldi	r24, 0x00	; 0
}
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	cf 91       	pop	r28
     950:	df 91       	pop	r29
     952:	08 95       	ret

00000954 <_ZN6StreamlsEc>:
	}

	Stream& operator<< (const char str[] ){
		return print(str);
	}
	Stream& operator<< (char c ){
     954:	df 93       	push	r29
     956:	cf 93       	push	r28
     958:	00 d0       	rcall	.+0      	; 0x95a <_ZN6StreamlsEc+0x6>
     95a:	0f 92       	push	r0
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62
     960:	9a 83       	std	Y+2, r25	; 0x02
     962:	89 83       	std	Y+1, r24	; 0x01
     964:	6b 83       	std	Y+3, r22	; 0x03
		return print(c);
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	9a 81       	ldd	r25, Y+2	; 0x02
     96a:	6b 81       	ldd	r22, Y+3	; 0x03
     96c:	0e 94 1e 0c 	call	0x183c	; 0x183c <_ZN6Stream5printEc>
	}
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	cf 91       	pop	r28
     978:	df 91       	pop	r29
     97a:	08 95       	ret

0000097c <_ZN8Protocol4dumpEh>:
#define DUMP(X, Y) 	if(X & Y) \
		*_uart<<'1';\
	else\
		*_uart<<'0';

void Protocol::dump(uint8_t c)
     97c:	df 93       	push	r29
     97e:	cf 93       	push	r28
     980:	00 d0       	rcall	.+0      	; 0x982 <_ZN8Protocol4dumpEh+0x6>
     982:	0f 92       	push	r0
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
     988:	9a 83       	std	Y+2, r25	; 0x02
     98a:	89 83       	std	Y+1, r24	; 0x01
     98c:	6b 83       	std	Y+3, r22	; 0x03
{
	DUMP(c, 0x80);
     98e:	8b 81       	ldd	r24, Y+3	; 0x03
     990:	88 23       	and	r24, r24
     992:	44 f4       	brge	.+16     	; 0x9a4 <_ZN8Protocol4dumpEh+0x28>
     994:	e9 81       	ldd	r30, Y+1	; 0x01
     996:	fa 81       	ldd	r31, Y+2	; 0x02
     998:	84 85       	ldd	r24, Z+12	; 0x0c
     99a:	95 85       	ldd	r25, Z+13	; 0x0d
     99c:	61 e3       	ldi	r22, 0x31	; 49
     99e:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6StreamlsEc>
     9a2:	07 c0       	rjmp	.+14     	; 0x9b2 <_ZN8Protocol4dumpEh+0x36>
     9a4:	e9 81       	ldd	r30, Y+1	; 0x01
     9a6:	fa 81       	ldd	r31, Y+2	; 0x02
     9a8:	84 85       	ldd	r24, Z+12	; 0x0c
     9aa:	95 85       	ldd	r25, Z+13	; 0x0d
     9ac:	60 e3       	ldi	r22, 0x30	; 48
     9ae:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6StreamlsEc>
	DUMP(c, 0x40);
     9b2:	8b 81       	ldd	r24, Y+3	; 0x03
     9b4:	88 2f       	mov	r24, r24
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	80 74       	andi	r24, 0x40	; 64
     9ba:	90 70       	andi	r25, 0x00	; 0
     9bc:	00 97       	sbiw	r24, 0x00	; 0
     9be:	41 f0       	breq	.+16     	; 0x9d0 <_ZN8Protocol4dumpEh+0x54>
     9c0:	e9 81       	ldd	r30, Y+1	; 0x01
     9c2:	fa 81       	ldd	r31, Y+2	; 0x02
     9c4:	84 85       	ldd	r24, Z+12	; 0x0c
     9c6:	95 85       	ldd	r25, Z+13	; 0x0d
     9c8:	61 e3       	ldi	r22, 0x31	; 49
     9ca:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6StreamlsEc>
     9ce:	07 c0       	rjmp	.+14     	; 0x9de <_ZN8Protocol4dumpEh+0x62>
     9d0:	e9 81       	ldd	r30, Y+1	; 0x01
     9d2:	fa 81       	ldd	r31, Y+2	; 0x02
     9d4:	84 85       	ldd	r24, Z+12	; 0x0c
     9d6:	95 85       	ldd	r25, Z+13	; 0x0d
     9d8:	60 e3       	ldi	r22, 0x30	; 48
     9da:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6StreamlsEc>
	DUMP(c, 0x20);
     9de:	8b 81       	ldd	r24, Y+3	; 0x03
     9e0:	88 2f       	mov	r24, r24
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	80 72       	andi	r24, 0x20	; 32
     9e6:	90 70       	andi	r25, 0x00	; 0
     9e8:	00 97       	sbiw	r24, 0x00	; 0
     9ea:	41 f0       	breq	.+16     	; 0x9fc <_ZN8Protocol4dumpEh+0x80>
     9ec:	e9 81       	ldd	r30, Y+1	; 0x01
     9ee:	fa 81       	ldd	r31, Y+2	; 0x02
     9f0:	84 85       	ldd	r24, Z+12	; 0x0c
     9f2:	95 85       	ldd	r25, Z+13	; 0x0d
     9f4:	61 e3       	ldi	r22, 0x31	; 49
     9f6:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6StreamlsEc>
     9fa:	07 c0       	rjmp	.+14     	; 0xa0a <_ZN8Protocol4dumpEh+0x8e>
     9fc:	e9 81       	ldd	r30, Y+1	; 0x01
     9fe:	fa 81       	ldd	r31, Y+2	; 0x02
     a00:	84 85       	ldd	r24, Z+12	; 0x0c
     a02:	95 85       	ldd	r25, Z+13	; 0x0d
     a04:	60 e3       	ldi	r22, 0x30	; 48
     a06:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6StreamlsEc>
	DUMP(c, 0x10);
     a0a:	8b 81       	ldd	r24, Y+3	; 0x03
     a0c:	88 2f       	mov	r24, r24
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	80 71       	andi	r24, 0x10	; 16
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	41 f0       	breq	.+16     	; 0xa28 <_ZN8Protocol4dumpEh+0xac>
     a18:	e9 81       	ldd	r30, Y+1	; 0x01
     a1a:	fa 81       	ldd	r31, Y+2	; 0x02
     a1c:	84 85       	ldd	r24, Z+12	; 0x0c
     a1e:	95 85       	ldd	r25, Z+13	; 0x0d
     a20:	61 e3       	ldi	r22, 0x31	; 49
     a22:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6StreamlsEc>
     a26:	07 c0       	rjmp	.+14     	; 0xa36 <_ZN8Protocol4dumpEh+0xba>
     a28:	e9 81       	ldd	r30, Y+1	; 0x01
     a2a:	fa 81       	ldd	r31, Y+2	; 0x02
     a2c:	84 85       	ldd	r24, Z+12	; 0x0c
     a2e:	95 85       	ldd	r25, Z+13	; 0x0d
     a30:	60 e3       	ldi	r22, 0x30	; 48
     a32:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6StreamlsEc>

	*_uart<<' ';
     a36:	e9 81       	ldd	r30, Y+1	; 0x01
     a38:	fa 81       	ldd	r31, Y+2	; 0x02
     a3a:	84 85       	ldd	r24, Z+12	; 0x0c
     a3c:	95 85       	ldd	r25, Z+13	; 0x0d
     a3e:	60 e2       	ldi	r22, 0x20	; 32
     a40:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6StreamlsEc>

	DUMP(c, 0x08);
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	88 2f       	mov	r24, r24
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	88 70       	andi	r24, 0x08	; 8
     a4c:	90 70       	andi	r25, 0x00	; 0
     a4e:	00 97       	sbiw	r24, 0x00	; 0
     a50:	41 f0       	breq	.+16     	; 0xa62 <_ZN8Protocol4dumpEh+0xe6>
     a52:	e9 81       	ldd	r30, Y+1	; 0x01
     a54:	fa 81       	ldd	r31, Y+2	; 0x02
     a56:	84 85       	ldd	r24, Z+12	; 0x0c
     a58:	95 85       	ldd	r25, Z+13	; 0x0d
     a5a:	61 e3       	ldi	r22, 0x31	; 49
     a5c:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6StreamlsEc>
     a60:	07 c0       	rjmp	.+14     	; 0xa70 <_ZN8Protocol4dumpEh+0xf4>
     a62:	e9 81       	ldd	r30, Y+1	; 0x01
     a64:	fa 81       	ldd	r31, Y+2	; 0x02
     a66:	84 85       	ldd	r24, Z+12	; 0x0c
     a68:	95 85       	ldd	r25, Z+13	; 0x0d
     a6a:	60 e3       	ldi	r22, 0x30	; 48
     a6c:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6StreamlsEc>
	DUMP(c, 0x04);
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	88 2f       	mov	r24, r24
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	84 70       	andi	r24, 0x04	; 4
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	00 97       	sbiw	r24, 0x00	; 0
     a7c:	41 f0       	breq	.+16     	; 0xa8e <_ZN8Protocol4dumpEh+0x112>
     a7e:	e9 81       	ldd	r30, Y+1	; 0x01
     a80:	fa 81       	ldd	r31, Y+2	; 0x02
     a82:	84 85       	ldd	r24, Z+12	; 0x0c
     a84:	95 85       	ldd	r25, Z+13	; 0x0d
     a86:	61 e3       	ldi	r22, 0x31	; 49
     a88:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6StreamlsEc>
     a8c:	07 c0       	rjmp	.+14     	; 0xa9c <_ZN8Protocol4dumpEh+0x120>
     a8e:	e9 81       	ldd	r30, Y+1	; 0x01
     a90:	fa 81       	ldd	r31, Y+2	; 0x02
     a92:	84 85       	ldd	r24, Z+12	; 0x0c
     a94:	95 85       	ldd	r25, Z+13	; 0x0d
     a96:	60 e3       	ldi	r22, 0x30	; 48
     a98:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6StreamlsEc>
	DUMP(c, 0x02);
     a9c:	8b 81       	ldd	r24, Y+3	; 0x03
     a9e:	88 2f       	mov	r24, r24
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	82 70       	andi	r24, 0x02	; 2
     aa4:	90 70       	andi	r25, 0x00	; 0
     aa6:	00 97       	sbiw	r24, 0x00	; 0
     aa8:	41 f0       	breq	.+16     	; 0xaba <_ZN8Protocol4dumpEh+0x13e>
     aaa:	e9 81       	ldd	r30, Y+1	; 0x01
     aac:	fa 81       	ldd	r31, Y+2	; 0x02
     aae:	84 85       	ldd	r24, Z+12	; 0x0c
     ab0:	95 85       	ldd	r25, Z+13	; 0x0d
     ab2:	61 e3       	ldi	r22, 0x31	; 49
     ab4:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6StreamlsEc>
     ab8:	07 c0       	rjmp	.+14     	; 0xac8 <_ZN8Protocol4dumpEh+0x14c>
     aba:	e9 81       	ldd	r30, Y+1	; 0x01
     abc:	fa 81       	ldd	r31, Y+2	; 0x02
     abe:	84 85       	ldd	r24, Z+12	; 0x0c
     ac0:	95 85       	ldd	r25, Z+13	; 0x0d
     ac2:	60 e3       	ldi	r22, 0x30	; 48
     ac4:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6StreamlsEc>
	DUMP(c, 0x01);
     ac8:	8b 81       	ldd	r24, Y+3	; 0x03
     aca:	88 2f       	mov	r24, r24
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	81 70       	andi	r24, 0x01	; 1
     ad0:	90 70       	andi	r25, 0x00	; 0
     ad2:	88 23       	and	r24, r24
     ad4:	41 f0       	breq	.+16     	; 0xae6 <_ZN8Protocol4dumpEh+0x16a>
     ad6:	e9 81       	ldd	r30, Y+1	; 0x01
     ad8:	fa 81       	ldd	r31, Y+2	; 0x02
     ada:	84 85       	ldd	r24, Z+12	; 0x0c
     adc:	95 85       	ldd	r25, Z+13	; 0x0d
     ade:	61 e3       	ldi	r22, 0x31	; 49
     ae0:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6StreamlsEc>
     ae4:	07 c0       	rjmp	.+14     	; 0xaf4 <_ZN8Protocol4dumpEh+0x178>
     ae6:	e9 81       	ldd	r30, Y+1	; 0x01
     ae8:	fa 81       	ldd	r31, Y+2	; 0x02
     aea:	84 85       	ldd	r24, Z+12	; 0x0c
     aec:	95 85       	ldd	r25, Z+13	; 0x0d
     aee:	60 e3       	ldi	r22, 0x30	; 48
     af0:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6StreamlsEc>

	*_uart<<'\n';
     af4:	e9 81       	ldd	r30, Y+1	; 0x01
     af6:	fa 81       	ldd	r31, Y+2	; 0x02
     af8:	84 85       	ldd	r24, Z+12	; 0x0c
     afa:	95 85       	ldd	r25, Z+13	; 0x0d
     afc:	6a e0       	ldi	r22, 0x0A	; 10
     afe:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN6StreamlsEc>
}
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	cf 91       	pop	r28
     b0a:	df 91       	pop	r29
     b0c:	08 95       	ret

00000b0e <_ZN8Protocol7treatIOEv>:
void Protocol::init(UartHW *uart)
{
	_uart = uart;
}

void Protocol::treatIO()
     b0e:	df 93       	push	r29
     b10:	cf 93       	push	r28
     b12:	00 d0       	rcall	.+0      	; 0xb14 <_ZN8Protocol7treatIOEv+0x6>
     b14:	00 d0       	rcall	.+0      	; 0xb16 <_ZN8Protocol7treatIOEv+0x8>
     b16:	00 d0       	rcall	.+0      	; 0xb18 <_ZN8Protocol7treatIOEv+0xa>
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
     b1c:	9e 83       	std	Y+6, r25	; 0x06
     b1e:	8d 83       	std	Y+5, r24	; 0x05
{
	_read();
     b20:	8d 81       	ldd	r24, Y+5	; 0x05
     b22:	9e 81       	ldd	r25, Y+6	; 0x06
     b24:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN8Protocol5_readEv>
	
	CRITICAL_SECTION{
     b28:	ef e5       	ldi	r30, 0x5F	; 95
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 81       	ld	r24, Z
     b2e:	8c 83       	std	Y+4, r24	; 0x04
     b30:	0e 94 37 03 	call	0x66e	; 0x66e <__iCliRetVal>
     b34:	8b 83       	std	Y+3, r24	; 0x03
     b36:	2e c0       	rjmp	.+92     	; 0xb94 <_ZN8Protocol7treatIOEv+0x86>
	if(in_offset >0 )
     b38:	ed 81       	ldd	r30, Y+5	; 0x05
     b3a:	fe 81       	ldd	r31, Y+6	; 0x06
     b3c:	86 a9       	ldd	r24, Z+54	; 0x36
     b3e:	88 23       	and	r24, r24
     b40:	41 f1       	breq	.+80     	; 0xb92 <_ZN8Protocol7treatIOEv+0x84>
{
//_write((uint8_t*)"test\n", 5);
	dump(0xFF);
     b42:	8d 81       	ldd	r24, Y+5	; 0x05
     b44:	9e 81       	ldd	r25, Y+6	; 0x06
     b46:	6f ef       	ldi	r22, 0xFF	; 255
     b48:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN8Protocol4dumpEh>
for(int i=0;i<in_offset;i++)
     b4c:	1a 82       	std	Y+2, r1	; 0x02
     b4e:	19 82       	std	Y+1, r1	; 0x01
     b50:	13 c0       	rjmp	.+38     	; 0xb78 <_ZN8Protocol7treatIOEv+0x6a>
	dump(in[i]);
     b52:	29 81       	ldd	r18, Y+1	; 0x01
     b54:	3a 81       	ldd	r19, Y+2	; 0x02
     b56:	8d 81       	ldd	r24, Y+5	; 0x05
     b58:	9e 81       	ldd	r25, Y+6	; 0x06
     b5a:	82 0f       	add	r24, r18
     b5c:	93 1f       	adc	r25, r19
     b5e:	fc 01       	movw	r30, r24
     b60:	3e 96       	adiw	r30, 0x0e	; 14
     b62:	20 81       	ld	r18, Z
     b64:	8d 81       	ldd	r24, Y+5	; 0x05
     b66:	9e 81       	ldd	r25, Y+6	; 0x06
     b68:	62 2f       	mov	r22, r18
     b6a:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN8Protocol4dumpEh>
	CRITICAL_SECTION{
	if(in_offset >0 )
{
//_write((uint8_t*)"test\n", 5);
	dump(0xFF);
for(int i=0;i<in_offset;i++)
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	01 96       	adiw	r24, 0x01	; 1
     b74:	9a 83       	std	Y+2, r25	; 0x02
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	ed 81       	ldd	r30, Y+5	; 0x05
     b7a:	fe 81       	ldd	r31, Y+6	; 0x06
     b7c:	86 a9       	ldd	r24, Z+54	; 0x36
     b7e:	28 2f       	mov	r18, r24
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	9a 81       	ldd	r25, Y+2	; 0x02
     b86:	82 17       	cp	r24, r18
     b88:	93 07       	cpc	r25, r19
     b8a:	1c f3       	brlt	.-58     	; 0xb52 <_ZN8Protocol7treatIOEv+0x44>
	dump(in[i]);
//_write(in, in_offset);
        	in_offset = 0;
     b8c:	ed 81       	ldd	r30, Y+5	; 0x05
     b8e:	fe 81       	ldd	r31, Y+6	; 0x06
     b90:	16 aa       	std	Z+54, r1	; 0x36

void Protocol::treatIO()
{
	_read();
	
	CRITICAL_SECTION{
     b92:	1b 82       	std	Y+3, r1	; 0x03
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	88 23       	and	r24, r24
     b98:	79 f6       	brne	.-98     	; 0xb38 <_ZN8Protocol7treatIOEv+0x2a>
for(int i=0;i<in_offset;i++)
	dump(in[i]);
//_write(in, in_offset);
        	in_offset = 0;
}
}
     b9a:	ce 01       	movw	r24, r28
     b9c:	04 96       	adiw	r24, 0x04	; 4
     b9e:	0e 94 40 03 	call	0x680	; 0x680 <__iRestore>
    if(out_offset > 0)
    {
        _write(out, out_offset);
        out_offset = 0;
    }*/
}
     ba2:	26 96       	adiw	r28, 0x06	; 6
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	f8 94       	cli
     ba8:	de bf       	out	0x3e, r29	; 62
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	cd bf       	out	0x3d, r28	; 61
     bae:	cf 91       	pop	r28
     bb0:	df 91       	pop	r29
     bb2:	08 95       	ret

00000bb4 <_ZN8ProtocolC1Ev>:
{
	command = PROT_ERROR;
	len = 0;
}

Protocol::Protocol()
     bb4:	df 93       	push	r29
     bb6:	cf 93       	push	r28
     bb8:	00 d0       	rcall	.+0      	; 0xbba <_ZN8ProtocolC1Ev+0x6>
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	9a 83       	std	Y+2, r25	; 0x02
     bc0:	89 83       	std	Y+1, r24	; 0x01
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	9a 81       	ldd	r25, Y+2	; 0x02
     bc6:	0e 94 65 03 	call	0x6ca	; 0x6ca <_ZN6PacketC1Ev>
{
	_uart = NULL;
     bca:	e9 81       	ldd	r30, Y+1	; 0x01
     bcc:	fa 81       	ldd	r31, Y+2	; 0x02
     bce:	15 86       	std	Z+13, r1	; 0x0d
     bd0:	14 86       	std	Z+12, r1	; 0x0c
	in_offset = 0;
     bd2:	e9 81       	ldd	r30, Y+1	; 0x01
     bd4:	fa 81       	ldd	r31, Y+2	; 0x02
     bd6:	16 aa       	std	Z+54, r1	; 0x36
	out_offset = 0;
     bd8:	e9 81       	ldd	r30, Y+1	; 0x01
     bda:	fa 81       	ldd	r31, Y+2	; 0x02
     bdc:	17 aa       	std	Z+55, r1	; 0x37
	memset(in, 0, Protocol::BUFFER_SIZE);
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	9a 81       	ldd	r25, Y+2	; 0x02
     be2:	0e 96       	adiw	r24, 0x0e	; 14
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	44 e1       	ldi	r20, 0x14	; 20
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	0e 94 12 1b 	call	0x3624	; 0x3624 <memset>
	memset(out, 0, Protocol::BUFFER_SIZE);
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	9a 81       	ldd	r25, Y+2	; 0x02
     bf4:	82 96       	adiw	r24, 0x22	; 34
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	44 e1       	ldi	r20, 0x14	; 20
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	0e 94 12 1b 	call	0x3624	; 0x3624 <memset>
	haveMessage = false;
     c02:	e9 81       	ldd	r30, Y+1	; 0x01
     c04:	fa 81       	ldd	r31, Y+2	; 0x02
     c06:	10 ae       	std	Z+56, r1	; 0x38
}
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <_ZN8ProtocolC2Ev>:
{
	command = PROT_ERROR;
	len = 0;
}

Protocol::Protocol()
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <_ZN8ProtocolC2Ev+0x6>
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
     c24:	0e 94 65 03 	call	0x6ca	; 0x6ca <_ZN6PacketC1Ev>
{
	_uart = NULL;
     c28:	e9 81       	ldd	r30, Y+1	; 0x01
     c2a:	fa 81       	ldd	r31, Y+2	; 0x02
     c2c:	15 86       	std	Z+13, r1	; 0x0d
     c2e:	14 86       	std	Z+12, r1	; 0x0c
	in_offset = 0;
     c30:	e9 81       	ldd	r30, Y+1	; 0x01
     c32:	fa 81       	ldd	r31, Y+2	; 0x02
     c34:	16 aa       	std	Z+54, r1	; 0x36
	out_offset = 0;
     c36:	e9 81       	ldd	r30, Y+1	; 0x01
     c38:	fa 81       	ldd	r31, Y+2	; 0x02
     c3a:	17 aa       	std	Z+55, r1	; 0x37
	memset(in, 0, Protocol::BUFFER_SIZE);
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	0e 96       	adiw	r24, 0x0e	; 14
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	44 e1       	ldi	r20, 0x14	; 20
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	0e 94 12 1b 	call	0x3624	; 0x3624 <memset>
	memset(out, 0, Protocol::BUFFER_SIZE);
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
     c52:	82 96       	adiw	r24, 0x22	; 34
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	44 e1       	ldi	r20, 0x14	; 20
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	0e 94 12 1b 	call	0x3624	; 0x3624 <memset>
	haveMessage = false;
     c60:	e9 81       	ldd	r30, Y+1	; 0x01
     c62:	fa 81       	ldd	r31, Y+2	; 0x02
     c64:	10 ae       	std	Z+56, r1	; 0x38
}
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	cf 91       	pop	r28
     c6c:	df 91       	pop	r29
     c6e:	08 95       	ret

00000c70 <_ZN7ServiceC2Ec>:
#include "services.h"

Service::Service(char id)
     c70:	df 93       	push	r29
     c72:	cf 93       	push	r28
     c74:	00 d0       	rcall	.+0      	; 0xc76 <_ZN7ServiceC2Ec+0x6>
     c76:	0f 92       	push	r0
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	9a 83       	std	Y+2, r25	; 0x02
     c7e:	89 83       	std	Y+1, r24	; 0x01
     c80:	6b 83       	std	Y+3, r22	; 0x03
     c82:	e9 81       	ldd	r30, Y+1	; 0x01
     c84:	fa 81       	ldd	r31, Y+2	; 0x02
     c86:	8a e0       	ldi	r24, 0x0A	; 10
     c88:	92 e0       	ldi	r25, 0x02	; 2
     c8a:	91 83       	std	Z+1, r25	; 0x01
     c8c:	80 83       	st	Z, r24
{
    _id = id;
     c8e:	e9 81       	ldd	r30, Y+1	; 0x01
     c90:	fa 81       	ldd	r31, Y+2	; 0x02
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	82 83       	std	Z+2, r24	; 0x02
    _prot = NULL;
     c96:	e9 81       	ldd	r30, Y+1	; 0x01
     c98:	fa 81       	ldd	r31, Y+2	; 0x02
     c9a:	14 82       	std	Z+4, r1	; 0x04
     c9c:	13 82       	std	Z+3, r1	; 0x03
}
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	08 95       	ret

00000caa <_ZN7ServiceC1Ec>:
#include "services.h"

Service::Service(char id)
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <_ZN7ServiceC1Ec+0x6>
     cb0:	0f 92       	push	r0
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
     cb6:	9a 83       	std	Y+2, r25	; 0x02
     cb8:	89 83       	std	Y+1, r24	; 0x01
     cba:	6b 83       	std	Y+3, r22	; 0x03
     cbc:	e9 81       	ldd	r30, Y+1	; 0x01
     cbe:	fa 81       	ldd	r31, Y+2	; 0x02
     cc0:	8a e0       	ldi	r24, 0x0A	; 10
     cc2:	92 e0       	ldi	r25, 0x02	; 2
     cc4:	91 83       	std	Z+1, r25	; 0x01
     cc6:	80 83       	st	Z, r24
{
    _id = id;
     cc8:	e9 81       	ldd	r30, Y+1	; 0x01
     cca:	fa 81       	ldd	r31, Y+2	; 0x02
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	82 83       	std	Z+2, r24	; 0x02
    _prot = NULL;
     cd0:	e9 81       	ldd	r30, Y+1	; 0x01
     cd2:	fa 81       	ldd	r31, Y+2	; 0x02
     cd4:	14 82       	std	Z+4, r1	; 0x04
     cd6:	13 82       	std	Z+3, r1	; 0x03
}
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <_ZN7Service4initEP8Protocol>:

void Service::init(Protocol *prot)
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	00 d0       	rcall	.+0      	; 0xcea <_ZN7Service4initEP8Protocol+0x6>
     cea:	00 d0       	rcall	.+0      	; 0xcec <_ZN7Service4initEP8Protocol+0x8>
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	7c 83       	std	Y+4, r23	; 0x04
     cf6:	6b 83       	std	Y+3, r22	; 0x03
{
    _prot = prot;
     cf8:	e9 81       	ldd	r30, Y+1	; 0x01
     cfa:	fa 81       	ldd	r31, Y+2	; 0x02
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	9c 81       	ldd	r25, Y+4	; 0x04
     d00:	94 83       	std	Z+4, r25	; 0x04
     d02:	83 83       	std	Z+3, r24	; 0x03
}
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <_ZN7Service5matchERK6Packet>:

bool Service::match(const Packet &msg)
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	00 d0       	rcall	.+0      	; 0xd18 <_ZN7Service5matchERK6Packet+0x6>
     d18:	00 d0       	rcall	.+0      	; 0xd1a <_ZN7Service5matchERK6Packet+0x8>
     d1a:	0f 92       	push	r0
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
     d20:	9a 83       	std	Y+2, r25	; 0x02
     d22:	89 83       	std	Y+1, r24	; 0x01
     d24:	7c 83       	std	Y+4, r23	; 0x04
     d26:	6b 83       	std	Y+3, r22	; 0x03
{
    return msg.command == _id ? true : false;    
     d28:	eb 81       	ldd	r30, Y+3	; 0x03
     d2a:	fc 81       	ldd	r31, Y+4	; 0x04
     d2c:	90 81       	ld	r25, Z
     d2e:	e9 81       	ldd	r30, Y+1	; 0x01
     d30:	fa 81       	ldd	r31, Y+2	; 0x02
     d32:	82 81       	ldd	r24, Z+2	; 0x02
     d34:	1d 82       	std	Y+5, r1	; 0x05
     d36:	98 17       	cp	r25, r24
     d38:	11 f4       	brne	.+4      	; 0xd3e <_ZN7Service5matchERK6Packet+0x2c>
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	8d 83       	std	Y+5, r24	; 0x05
     d3e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <_ZN11PingServiceC2Ev>:



PingService::PingService() : Service(PROT_PING)
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	00 d0       	rcall	.+0      	; 0xd56 <_ZN11PingServiceC2Ev+0x6>
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	9a 83       	std	Y+2, r25	; 0x02
     d5c:	89 83       	std	Y+1, r24	; 0x01
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	9a 81       	ldd	r25, Y+2	; 0x02
     d62:	62 e0       	ldi	r22, 0x02	; 2
     d64:	0e 94 38 06 	call	0xc70	; 0xc70 <_ZN7ServiceC2Ec>
     d68:	e9 81       	ldd	r30, Y+1	; 0x01
     d6a:	fa 81       	ldd	r31, Y+2	; 0x02
     d6c:	84 e0       	ldi	r24, 0x04	; 4
     d6e:	92 e0       	ldi	r25, 0x02	; 2
     d70:	91 83       	std	Z+1, r25	; 0x01
     d72:	80 83       	st	Z, r24
{
}
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <_ZN11PingServiceC1Ev>:
    return msg.command == _id ? true : false;    
}



PingService::PingService() : Service(PROT_PING)
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	00 d0       	rcall	.+0      	; 0xd84 <_ZN11PingServiceC1Ev+0x6>
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	9a 83       	std	Y+2, r25	; 0x02
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	9a 81       	ldd	r25, Y+2	; 0x02
     d90:	62 e0       	ldi	r22, 0x02	; 2
     d92:	0e 94 38 06 	call	0xc70	; 0xc70 <_ZN7ServiceC2Ec>
     d96:	e9 81       	ldd	r30, Y+1	; 0x01
     d98:	fa 81       	ldd	r31, Y+2	; 0x02
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	92 e0       	ldi	r25, 0x02	; 2
     d9e:	91 83       	std	Z+1, r25	; 0x01
     da0:	80 83       	st	Z, r24
{
}
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <_ZN11PingService7executeER6Packet>:

bool PingService::execute(Packet &msg)
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <_ZN11PingService7executeER6Packet+0x6>
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <_ZN11PingService7executeER6Packet+0x8>
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	9a 83       	std	Y+2, r25	; 0x02
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	7c 83       	std	Y+4, r23	; 0x04
     dbe:	6b 83       	std	Y+3, r22	; 0x03
{
    // i just forward the message
    _prot->send(msg);
     dc0:	e9 81       	ldd	r30, Y+1	; 0x01
     dc2:	fa 81       	ldd	r31, Y+2	; 0x02
     dc4:	83 81       	ldd	r24, Z+3	; 0x03
     dc6:	94 81       	ldd	r25, Z+4	; 0x04
     dc8:	2b 81       	ldd	r18, Y+3	; 0x03
     dca:	3c 81       	ldd	r19, Y+4	; 0x04
     dcc:	b9 01       	movw	r22, r18
     dce:	0e 94 9c 03 	call	0x738	; 0x738 <_ZN8Protocol4sendER6Packet>
    return true;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
}
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <_ZN10SmartMotorC2ER5Servo>:
#include "smart_motor.h"


SmartMotor::SmartMotor(Servo &servo)
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	00 d0       	rcall	.+0      	; 0xde8 <_ZN10SmartMotorC2ER5Servo+0x6>
     de8:	00 d0       	rcall	.+0      	; 0xdea <_ZN10SmartMotorC2ER5Servo+0x8>
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	9a 83       	std	Y+2, r25	; 0x02
     df0:	89 83       	std	Y+1, r24	; 0x01
     df2:	7c 83       	std	Y+4, r23	; 0x04
     df4:	6b 83       	std	Y+3, r22	; 0x03
{

	_servo = &servo;
     df6:	e9 81       	ldd	r30, Y+1	; 0x01
     df8:	fa 81       	ldd	r31, Y+2	; 0x02
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	9c 81       	ldd	r25, Y+4	; 0x04
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	80 83       	st	Z, r24

	_limit_min = DRIVE_SPEED_MIN;
     e02:	e9 81       	ldd	r30, Y+1	; 0x01
     e04:	fa 81       	ldd	r31, Y+2	; 0x02
     e06:	81 e8       	ldi	r24, 0x81	; 129
     e08:	82 83       	std	Z+2, r24	; 0x02
	_limit_max = DRIVE_SPEED_MAX;
     e0a:	e9 81       	ldd	r30, Y+1	; 0x01
     e0c:	fa 81       	ldd	r31, Y+2	; 0x02
     e0e:	8f e7       	ldi	r24, 0x7F	; 127
     e10:	83 83       	std	Z+3, r24	; 0x03

	_position = 0;
     e12:	e9 81       	ldd	r30, Y+1	; 0x01
     e14:	fa 81       	ldd	r31, Y+2	; 0x02
     e16:	15 82       	std	Z+5, r1	; 0x05
     e18:	14 82       	std	Z+4, r1	; 0x04
	_step_size = 0;
     e1a:	e9 81       	ldd	r30, Y+1	; 0x01
     e1c:	fa 81       	ldd	r31, Y+2	; 0x02
     e1e:	17 82       	std	Z+7, r1	; 0x07
     e20:	16 82       	std	Z+6, r1	; 0x06
	_step_count = 0;
     e22:	e9 81       	ldd	r30, Y+1	; 0x01
     e24:	fa 81       	ldd	r31, Y+2	; 0x02
     e26:	11 86       	std	Z+9, r1	; 0x09
     e28:	10 86       	std	Z+8, r1	; 0x08
}
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <_ZN10SmartMotorC1ER5Servo>:
#include "smart_motor.h"


SmartMotor::SmartMotor(Servo &servo)
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <_ZN10SmartMotorC1ER5Servo+0x6>
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <_ZN10SmartMotorC1ER5Servo+0x8>
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	9a 83       	std	Y+2, r25	; 0x02
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	7c 83       	std	Y+4, r23	; 0x04
     e4a:	6b 83       	std	Y+3, r22	; 0x03
{

	_servo = &servo;
     e4c:	e9 81       	ldd	r30, Y+1	; 0x01
     e4e:	fa 81       	ldd	r31, Y+2	; 0x02
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	9c 81       	ldd	r25, Y+4	; 0x04
     e54:	91 83       	std	Z+1, r25	; 0x01
     e56:	80 83       	st	Z, r24

	_limit_min = DRIVE_SPEED_MIN;
     e58:	e9 81       	ldd	r30, Y+1	; 0x01
     e5a:	fa 81       	ldd	r31, Y+2	; 0x02
     e5c:	81 e8       	ldi	r24, 0x81	; 129
     e5e:	82 83       	std	Z+2, r24	; 0x02
	_limit_max = DRIVE_SPEED_MAX;
     e60:	e9 81       	ldd	r30, Y+1	; 0x01
     e62:	fa 81       	ldd	r31, Y+2	; 0x02
     e64:	8f e7       	ldi	r24, 0x7F	; 127
     e66:	83 83       	std	Z+3, r24	; 0x03

	_position = 0;
     e68:	e9 81       	ldd	r30, Y+1	; 0x01
     e6a:	fa 81       	ldd	r31, Y+2	; 0x02
     e6c:	15 82       	std	Z+5, r1	; 0x05
     e6e:	14 82       	std	Z+4, r1	; 0x04
	_step_size = 0;
     e70:	e9 81       	ldd	r30, Y+1	; 0x01
     e72:	fa 81       	ldd	r31, Y+2	; 0x02
     e74:	17 82       	std	Z+7, r1	; 0x07
     e76:	16 82       	std	Z+6, r1	; 0x06
	_step_count = 0;
     e78:	e9 81       	ldd	r30, Y+1	; 0x01
     e7a:	fa 81       	ldd	r31, Y+2	; 0x02
     e7c:	11 86       	std	Z+9, r1	; 0x09
     e7e:	10 86       	std	Z+8, r1	; 0x08
}
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <_ZN10SmartMotor9set_limitEaa>:


void SmartMotor::set_limit(DRIVE_SPEED min, DRIVE_SPEED max)
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <_ZN10SmartMotor9set_limitEaa+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <_ZN10SmartMotor9set_limitEaa+0x8>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	6b 83       	std	Y+3, r22	; 0x03
     ea0:	4c 83       	std	Y+4, r20	; 0x04
{
	_limit_min = min;
     ea2:	e9 81       	ldd	r30, Y+1	; 0x01
     ea4:	fa 81       	ldd	r31, Y+2	; 0x02
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	82 83       	std	Z+2, r24	; 0x02
	_limit_max = max;
     eaa:	e9 81       	ldd	r30, Y+1	; 0x01
     eac:	fa 81       	ldd	r31, Y+2	; 0x02
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	83 83       	std	Z+3, r24	; 0x03
}
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <_ZN10SmartMotor12set_positionEai>:


void SmartMotor::set_position(DRIVE_SPEED position, int16_t t)
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	29 97       	sbiw	r28, 0x09	; 9
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	9c 83       	std	Y+4, r25	; 0x04
     ed6:	8b 83       	std	Y+3, r24	; 0x03
     ed8:	6d 83       	std	Y+5, r22	; 0x05
     eda:	5f 83       	std	Y+7, r21	; 0x07
     edc:	4e 83       	std	Y+6, r20	; 0x06
{
	position = (position < _limit_min)? _limit_min : position;
     ede:	eb 81       	ldd	r30, Y+3	; 0x03
     ee0:	fc 81       	ldd	r31, Y+4	; 0x04
     ee2:	92 81       	ldd	r25, Z+2	; 0x02
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	89 17       	cp	r24, r25
     ee8:	2c f4       	brge	.+10     	; 0xef4 <_ZN10SmartMotor12set_positionEai+0x34>
     eea:	eb 81       	ldd	r30, Y+3	; 0x03
     eec:	fc 81       	ldd	r31, Y+4	; 0x04
     eee:	82 81       	ldd	r24, Z+2	; 0x02
     ef0:	89 87       	std	Y+9, r24	; 0x09
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <_ZN10SmartMotor12set_positionEai+0x38>
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	89 87       	std	Y+9, r24	; 0x09
     ef8:	89 85       	ldd	r24, Y+9	; 0x09
     efa:	8d 83       	std	Y+5, r24	; 0x05
	position = (position > _limit_max)? _limit_max : position;
     efc:	eb 81       	ldd	r30, Y+3	; 0x03
     efe:	fc 81       	ldd	r31, Y+4	; 0x04
     f00:	93 81       	ldd	r25, Z+3	; 0x03
     f02:	8d 81       	ldd	r24, Y+5	; 0x05
     f04:	98 17       	cp	r25, r24
     f06:	2c f4       	brge	.+10     	; 0xf12 <_ZN10SmartMotor12set_positionEai+0x52>
     f08:	eb 81       	ldd	r30, Y+3	; 0x03
     f0a:	fc 81       	ldd	r31, Y+4	; 0x04
     f0c:	83 81       	ldd	r24, Z+3	; 0x03
     f0e:	88 87       	std	Y+8, r24	; 0x08
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <_ZN10SmartMotor12set_positionEai+0x56>
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	88 87       	std	Y+8, r24	; 0x08
     f16:	88 85       	ldd	r24, Y+8	; 0x08
     f18:	8d 83       	std	Y+5, r24	; 0x05

	int16_t pos = 10000; //interpolate(position, -127, 127, -SMART_SPEED, SMART_SPEED);
     f1a:	80 e1       	ldi	r24, 0x10	; 16
     f1c:	97 e2       	ldi	r25, 0x27	; 39
     f1e:	9a 83       	std	Y+2, r25	; 0x02
     f20:	89 83       	std	Y+1, r24	; 0x01
	

	_step_size = 1;// ((pos - _position) / t) * (HEXAPOD_LOOP_DURATION / 1000);
     f22:	eb 81       	ldd	r30, Y+3	; 0x03
     f24:	fc 81       	ldd	r31, Y+4	; 0x04
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	97 83       	std	Z+7, r25	; 0x07
     f2c:	86 83       	std	Z+6, r24	; 0x06
	_step_count = 100;//(pos - _position) / _step_size;	
     f2e:	eb 81       	ldd	r30, Y+3	; 0x03
     f30:	fc 81       	ldd	r31, Y+4	; 0x04
     f32:	84 e6       	ldi	r24, 0x64	; 100
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	91 87       	std	Z+9, r25	; 0x09
     f38:	80 87       	std	Z+8, r24	; 0x08
	
}
     f3a:	29 96       	adiw	r28, 0x09	; 9
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <_ZN10SmartMotor9is_movingEv>:

bool SmartMotor::is_moving()
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	00 d0       	rcall	.+0      	; 0xf52 <_ZN10SmartMotor9is_movingEv+0x6>
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	89 83       	std	Y+1, r24	; 0x01
{
	return _step_count != 0;
     f5c:	e9 81       	ldd	r30, Y+1	; 0x01
     f5e:	fa 81       	ldd	r31, Y+2	; 0x02
     f60:	80 85       	ldd	r24, Z+8	; 0x08
     f62:	91 85       	ldd	r25, Z+9	; 0x09
     f64:	1b 82       	std	Y+3, r1	; 0x03
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	11 f0       	breq	.+4      	; 0xf6e <_ZN10SmartMotor9is_movingEv+0x22>
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	8b 83       	std	Y+3, r24	; 0x03
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <_ZN4Uart5writeEh>:
	operator UART*() const{
		return m_cstr;
	}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <_ZN4Uart5writeEh+0x6>
     f82:	0f 92       	push	r0
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	9a 83       	std	Y+2, r25	; 0x02
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	6b 83       	std	Y+3, r22	; 0x03
		return _uartSendByte(m_cstr, data);
     f8e:	e9 81       	ldd	r30, Y+1	; 0x01
     f90:	fa 81       	ldd	r31, Y+2	; 0x02
     f92:	80 89       	ldd	r24, Z+16	; 0x10
     f94:	91 89       	ldd	r25, Z+17	; 0x11
     f96:	6b 81       	ldd	r22, Y+3	; 0x03
     f98:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_uartSendByte>
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
	}
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <_ZN10SmartMotor7computeEv>:


void SmartMotor::compute()
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	64 97       	sbiw	r28, 0x14	; 20
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	9c 8b       	std	Y+20, r25	; 0x14
     fc6:	8b 8b       	std	Y+19, r24	; 0x13
{
	if(_step_count > 0)
     fc8:	eb 89       	ldd	r30, Y+19	; 0x13
     fca:	fc 89       	ldd	r31, Y+20	; 0x14
     fcc:	80 85       	ldd	r24, Z+8	; 0x08
     fce:	91 85       	ldd	r25, Z+9	; 0x09
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <_ZN10SmartMotor7computeEv+0x2a>
     fd4:	72 c0       	rjmp	.+228    	; 0x10ba <_ZN10SmartMotor7computeEv+0x10e>
	{
		_position = _position + _step_size;
     fd6:	eb 89       	ldd	r30, Y+19	; 0x13
     fd8:	fc 89       	ldd	r31, Y+20	; 0x14
     fda:	24 81       	ldd	r18, Z+4	; 0x04
     fdc:	35 81       	ldd	r19, Z+5	; 0x05
     fde:	eb 89       	ldd	r30, Y+19	; 0x13
     fe0:	fc 89       	ldd	r31, Y+20	; 0x14
     fe2:	86 81       	ldd	r24, Z+6	; 0x06
     fe4:	97 81       	ldd	r25, Z+7	; 0x07
     fe6:	82 0f       	add	r24, r18
     fe8:	93 1f       	adc	r25, r19
     fea:	eb 89       	ldd	r30, Y+19	; 0x13
     fec:	fc 89       	ldd	r31, Y+20	; 0x14
     fee:	95 83       	std	Z+5, r25	; 0x05
     ff0:	84 83       	std	Z+4, r24	; 0x04
		int16_t i = interpolate(_position, -SMART_SPEED, SMART_SPEED, DRIVE_SPEED_MIN, DRIVE_SPEED_MAX);
     ff2:	eb 89       	ldd	r30, Y+19	; 0x13
     ff4:	fc 89       	ldd	r31, Y+20	; 0x14
     ff6:	84 81       	ldd	r24, Z+4	; 0x04
     ff8:	95 81       	ldd	r25, Z+5	; 0x05
     ffa:	60 ed       	ldi	r22, 0xD0	; 208
     ffc:	7a e8       	ldi	r23, 0x8A	; 138
     ffe:	40 e3       	ldi	r20, 0x30	; 48
    1000:	55 e7       	ldi	r21, 0x75	; 117
    1002:	21 e8       	ldi	r18, 0x81	; 129
    1004:	3f ef       	ldi	r19, 0xFF	; 255
    1006:	0f e7       	ldi	r16, 0x7F	; 127
    1008:	10 e0       	ldi	r17, 0x00	; 0
    100a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <interpolate>
    100e:	98 87       	std	Y+8, r25	; 0x08
    1010:	8f 83       	std	Y+7, r24	; 0x07
		char str[10];
		for(int j=0;j<10;j++)
    1012:	1c 82       	std	Y+4, r1	; 0x04
    1014:	1b 82       	std	Y+3, r1	; 0x03
    1016:	0d c0       	rjmp	.+26     	; 0x1032 <_ZN10SmartMotor7computeEv+0x86>
			str[j] = 0;
    1018:	2b 81       	ldd	r18, Y+3	; 0x03
    101a:	3c 81       	ldd	r19, Y+4	; 0x04
    101c:	ce 01       	movw	r24, r28
    101e:	09 96       	adiw	r24, 0x09	; 9
    1020:	fc 01       	movw	r30, r24
    1022:	e2 0f       	add	r30, r18
    1024:	f3 1f       	adc	r31, r19
    1026:	10 82       	st	Z, r1
	if(_step_count > 0)
	{
		_position = _position + _step_size;
		int16_t i = interpolate(_position, -SMART_SPEED, SMART_SPEED, DRIVE_SPEED_MIN, DRIVE_SPEED_MAX);
		char str[10];
		for(int j=0;j<10;j++)
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	9c 83       	std	Y+4, r25	; 0x04
    1030:	8b 83       	std	Y+3, r24	; 0x03
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	8a 30       	cpi	r24, 0x0A	; 10
    1038:	91 05       	cpc	r25, r1
    103a:	74 f3       	brlt	.-36     	; 0x1018 <_ZN10SmartMotor7computeEv+0x6c>
			str[j] = 0;
		char *p = str;
    103c:	ce 01       	movw	r24, r28
    103e:	09 96       	adiw	r24, 0x09	; 9
    1040:	9e 83       	std	Y+6, r25	; 0x06
    1042:	8d 83       	std	Y+5, r24	; 0x05
		p=itoa(_position, (char*)str, 10);
    1044:	eb 89       	ldd	r30, Y+19	; 0x13
    1046:	fc 89       	ldd	r31, Y+20	; 0x14
    1048:	84 81       	ldd	r24, Z+4	; 0x04
    104a:	95 81       	ldd	r25, Z+5	; 0x05
    104c:	9e 01       	movw	r18, r28
    104e:	27 5f       	subi	r18, 0xF7	; 247
    1050:	3f 4f       	sbci	r19, 0xFF	; 255
    1052:	b9 01       	movw	r22, r18
    1054:	4a e0       	ldi	r20, 0x0A	; 10
    1056:	50 e0       	ldi	r21, 0x00	; 0
    1058:	0e 94 24 1b 	call	0x3648	; 0x3648 <itoa>
    105c:	9e 83       	std	Y+6, r25	; 0x06
    105e:	8d 83       	std	Y+5, r24	; 0x05
		for(int j=0;j<10;j++)
    1060:	1a 82       	std	Y+2, r1	; 0x02
    1062:	19 82       	std	Y+1, r1	; 0x01
    1064:	12 c0       	rjmp	.+36     	; 0x108a <_ZN10SmartMotor7computeEv+0xde>
		{
			uart1.write(p[j]);
    1066:	29 81       	ldd	r18, Y+1	; 0x01
    1068:	3a 81       	ldd	r19, Y+2	; 0x02
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	9e 81       	ldd	r25, Y+6	; 0x06
    106e:	fc 01       	movw	r30, r24
    1070:	e2 0f       	add	r30, r18
    1072:	f3 1f       	adc	r31, r19
    1074:	20 81       	ld	r18, Z
    1076:	8f ee       	ldi	r24, 0xEF	; 239
    1078:	93 e0       	ldi	r25, 0x03	; 3
    107a:	62 2f       	mov	r22, r18
    107c:	0e 94 be 07 	call	0xf7c	; 0xf7c <_ZN4Uart5writeEh>
		char str[10];
		for(int j=0;j<10;j++)
			str[j] = 0;
		char *p = str;
		p=itoa(_position, (char*)str, 10);
		for(int j=0;j<10;j++)
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	9a 81       	ldd	r25, Y+2	; 0x02
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	9a 83       	std	Y+2, r25	; 0x02
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	8a 30       	cpi	r24, 0x0A	; 10
    1090:	91 05       	cpc	r25, r1
    1092:	4c f3       	brlt	.-46     	; 0x1066 <_ZN10SmartMotor7computeEv+0xba>
		{
			uart1.write(p[j]);
		} 
			uart1.write('\r');
    1094:	8f ee       	ldi	r24, 0xEF	; 239
    1096:	93 e0       	ldi	r25, 0x03	; 3
    1098:	6d e0       	ldi	r22, 0x0D	; 13
    109a:	0e 94 be 07 	call	0xf7c	; 0xf7c <_ZN4Uart5writeEh>
			uart1.write('\n');
    109e:	8f ee       	ldi	r24, 0xEF	; 239
    10a0:	93 e0       	ldi	r25, 0x03	; 3
    10a2:	6a e0       	ldi	r22, 0x0A	; 10
    10a4:	0e 94 be 07 	call	0xf7c	; 0xf7c <_ZN4Uart5writeEh>
	//	_servo->setSpeed(interpolate(_position, -SMART_SPEED, SMART_SPEED, DRIVE_SPEED_MIN, DRIVE_SPEED_MAX));
		_step_count -= 1;
    10a8:	eb 89       	ldd	r30, Y+19	; 0x13
    10aa:	fc 89       	ldd	r31, Y+20	; 0x14
    10ac:	80 85       	ldd	r24, Z+8	; 0x08
    10ae:	91 85       	ldd	r25, Z+9	; 0x09
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	eb 89       	ldd	r30, Y+19	; 0x13
    10b4:	fc 89       	ldd	r31, Y+20	; 0x14
    10b6:	91 87       	std	Z+9, r25	; 0x09
    10b8:	80 87       	std	Z+8, r24	; 0x08
	}

}
    10ba:	64 96       	adiw	r28, 0x14	; 20
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	08 95       	ret

000010d0 <marquee_put_char>:
static MAKE_WRITER(marquee_put_char); /* Fwd Def */
MARQUEE _marquee_ = MAKE_MARQUEE(marquee_list,500000,2000000,&marquee_put_char);
// Create a Writer to write to marquee
// Do NOT call it directly instead, to write the char 'A' use:
// 	marqueeGetWriter(&marquee)('A');
static MAKE_WRITER(marquee_put_char){ /* createWriter */
    10d0:	68 2f       	mov	r22, r24
	return marqueeSendByte(&_marquee_,byte);
    10d2:	89 e5       	ldi	r24, 0x59	; 89
    10d4:	92 e0       	ldi	r25, 0x02	; 2
    10d6:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <marqueeSendByte>
}
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	08 95       	ret

000010de <registerLED>:
static __inline__ void LED_off(LED* led){
	LED_set(led,FALSE);
}

static __inline__ void statusLEDregister(const IOPin* pin, boolean activeHigh){
	statusLED.pin = pin;
    10de:	8b e0       	ldi	r24, 0x0B	; 11
    10e0:	93 e0       	ldi	r25, 0x03	; 3
    10e2:	90 93 3b 04 	sts	0x043B, r25
    10e6:	80 93 3a 04 	sts	0x043A, r24
	statusLED.activeHigh = activeHigh;
    10ea:	80 91 3c 04 	lds	r24, 0x043C
	statusLED.initialised=FALSE;
    10ee:	8c 7f       	andi	r24, 0xFC	; 252
    10f0:	80 93 3c 04 	sts	0x043C, r24


void LED_set(LED* led,	boolean value);

static __inline__ void LED_on(LED* led){
	LED_set(led,TRUE);
    10f4:	8a e3       	ldi	r24, 0x3A	; 58
    10f6:	94 e0       	ldi	r25, 0x04	; 4
    10f8:	6f ef       	ldi	r22, 0xFF	; 255
    10fa:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LED_set>
void initHardware(void){
	servoPWMInit(&_bank1_);
}
void registerLED(void){
	statusLEDregister(C1,false);
}
    10fe:	08 95       	ret

00001100 <initHardware>:
	//segled_init(&_led_display_);
}

// ----------- Initialise my added devices ------
void initHardware(void){
	servoPWMInit(&_bank1_);
    1100:	82 eb       	ldi	r24, 0xB2	; 178
    1102:	92 e0       	ldi	r25, 0x02	; 2
    1104:	0e 94 01 0b 	call	0x1602	; 0x1602 <servoPWMInit>
}
    1108:	08 95       	ret

0000110a <sysInitHardware>:
static __inline__ boolean SWITCH_released(SWITCH* sw){
	return pin_is_high(sw->pin);
}

static __inline__ void SWITCH_init(SWITCH *sw){
	pin_make_input(sw->pin,TRUE);
    110a:	80 91 46 02 	lds	r24, 0x0246
    110e:	90 91 47 02 	lds	r25, 0x0247
    1112:	6f ef       	ldi	r22, 0xFF	; 255
    1114:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <pin_make_input>
// ----------- Initialise built in devices ------
void sysInitHardware(void){
	SWITCH_init(&_button_);
//	setErrorLog(&uart1SendByte);
	//rprintfInit(&uart1SendByte);
	uartInit(_C_uart1,115200);
    1118:	84 e1       	ldi	r24, 0x14	; 20
    111a:	92 e0       	ldi	r25, 0x02	; 2
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	52 ec       	ldi	r21, 0xC2	; 194
    1120:	61 e0       	ldi	r22, 0x01	; 1
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	0e 94 21 11 	call	0x2242	; 0x2242 <_uartInit>
// ----------- Register the statusLED -----------
	//segled_init(&_led_display_);
}
    1128:	08 95       	ret

0000112a <__vector_36>:
#endif

#ifndef USART1_RX_vect
# error Uart1 Rx complete vector undefined
#else
ISR(USART1_RX_vect){
    112a:	1f 92       	push	r1
    112c:	0f 92       	push	r0
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	0f 92       	push	r0
    1132:	11 24       	eor	r1, r1
    1134:	2f 93       	push	r18
    1136:	3f 93       	push	r19
    1138:	4f 93       	push	r20
    113a:	5f 93       	push	r21
    113c:	6f 93       	push	r22
    113e:	7f 93       	push	r23
    1140:	8f 93       	push	r24
    1142:	9f 93       	push	r25
    1144:	af 93       	push	r26
    1146:	bf 93       	push	r27
    1148:	ef 93       	push	r30
    114a:	ff 93       	push	r31
	uartReceiveService(_C_uart1);
    114c:	e0 91 40 02 	lds	r30, 0x0240
    1150:	f0 91 41 02 	lds	r31, 0x0241
    1154:	60 81       	ld	r22, Z
    1156:	84 e1       	ldi	r24, 0x14	; 20
    1158:	92 e0       	ldi	r25, 0x02	; 2
    115a:	0e 94 55 12 	call	0x24aa	; 0x24aa <__uartReceiveService>
}
    115e:	ff 91       	pop	r31
    1160:	ef 91       	pop	r30
    1162:	bf 91       	pop	r27
    1164:	af 91       	pop	r26
    1166:	9f 91       	pop	r25
    1168:	8f 91       	pop	r24
    116a:	7f 91       	pop	r23
    116c:	6f 91       	pop	r22
    116e:	5f 91       	pop	r21
    1170:	4f 91       	pop	r20
    1172:	3f 91       	pop	r19
    1174:	2f 91       	pop	r18
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	0f 90       	pop	r0
    117c:	1f 90       	pop	r1
    117e:	18 95       	reti

00001180 <__vector_38>:
HW_UART __C_uart1 = MAKE_UART_BUFFERED(null,null,UCSR1A,UCSR1B,UBRR1L,UBRR1H,UDR1,null,BV(U2X1),D2,D3,&uart1GetByte,&uart1SendByte);

#ifndef USART1_TX_vect
# error Uart1 Tx complete vector undefined
#else
ISR(USART1_TX_vect){
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	2f 93       	push	r18
    118c:	3f 93       	push	r19
    118e:	4f 93       	push	r20
    1190:	5f 93       	push	r21
    1192:	6f 93       	push	r22
    1194:	7f 93       	push	r23
    1196:	8f 93       	push	r24
    1198:	9f 93       	push	r25
    119a:	af 93       	push	r26
    119c:	bf 93       	push	r27
    119e:	ef 93       	push	r30
    11a0:	ff 93       	push	r31
	uartTransmitService(_C_uart1);
    11a2:	84 e1       	ldi	r24, 0x14	; 20
    11a4:	92 e0       	ldi	r25, 0x02	; 2
    11a6:	0e 94 00 13 	call	0x2600	; 0x2600 <__uartTransmitService>
}
    11aa:	ff 91       	pop	r31
    11ac:	ef 91       	pop	r30
    11ae:	bf 91       	pop	r27
    11b0:	af 91       	pop	r26
    11b2:	9f 91       	pop	r25
    11b4:	8f 91       	pop	r24
    11b6:	7f 91       	pop	r23
    11b8:	6f 91       	pop	r22
    11ba:	5f 91       	pop	r21
    11bc:	4f 91       	pop	r20
    11be:	3f 91       	pop	r19
    11c0:	2f 91       	pop	r18
    11c2:	0f 90       	pop	r0
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	0f 90       	pop	r0
    11c8:	1f 90       	pop	r1
    11ca:	18 95       	reti

000011cc <uart1GetByte>:
}

// Create a routine to read a byte from uart1
// Returns -1 if there was no data
MAKE_READER( uart1GetByte){
	return uartGetByte(_C_uart1);
    11cc:	84 e1       	ldi	r24, 0x14	; 20
    11ce:	92 e0       	ldi	r25, 0x02	; 2
    11d0:	0e 94 6f 12 	call	0x24de	; 0x24de <__uartGetByte>
}
    11d4:	08 95       	ret

000011d6 <uart1SendByte>:

// ------------------- uart1 -------------------

// Create a routine to write bytes to uart1
// You can set rprintf to use it by calling rprintfInit(&uart1SendByte)
MAKE_WRITER(uart1SendByte){
    11d6:	68 2f       	mov	r22, r24
	return uartSendByte(_C_uart1,byte);
    11d8:	84 e1       	ldi	r24, 0x14	; 20
    11da:	92 e0       	ldi	r25, 0x02	; 2
    11dc:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_uartSendByte>
}
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	08 95       	ret

000011e4 <clockGetSnapshot>:
#define STATUS_LED_DDR   DDRC		
#define STATUS_LED_PIN   PC1		
static uint8_t counter;
		

void clockGetSnapshot(TIMER_SNAPSHOT* snapshot){
    11e4:	fc 01       	movw	r30, r24
	// Clock timer uses TIMER_MODE_CTC_OCR which generate compare interrupts on channel A
	CRITICAL_SECTION{
    11e6:	6f b7       	in	r22, 0x3f	; 63
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
    11e8:	f8 94       	cli
		// get the current ticks from the timer
		uint16_t tcnt = TCNT5;
    11ea:	80 91 24 01 	lds	r24, 0x0124
    11ee:	90 91 25 01 	lds	r25, 0x0125
		// get the number of whole ticks
		snapshot->whole  = wholeTicks;
    11f2:	20 91 c4 03 	lds	r18, 0x03C4
    11f6:	30 91 c5 03 	lds	r19, 0x03C5
    11fa:	40 91 c6 03 	lds	r20, 0x03C6
    11fe:	50 91 c7 03 	lds	r21, 0x03C7
    1202:	20 83       	st	Z, r18
    1204:	31 83       	std	Z+1, r19	; 0x01
    1206:	42 83       	std	Z+2, r20	; 0x02
    1208:	53 83       	std	Z+3, r21	; 0x03
		// get the current ticks again
		snapshot->part   = TCNT5;
    120a:	20 91 24 01 	lds	r18, 0x0124
    120e:	30 91 25 01 	lds	r19, 0x0125
    1212:	35 83       	std	Z+5, r19	; 0x05
    1214:	24 83       	std	Z+4, r18	; 0x04
		// If the second reading of tcnt has gone down then there must have been an overflow
		// since reading the 'rtn' value. Or there may be a pending interrupt which may be
		// because interrupts are currently turned off. In either case increment the 'rtn' value
		// as if the interrupt has happened
		if(snapshot->part < tcnt || CLOCK_INT_PENDING ){
    1216:	28 17       	cp	r18, r24
    1218:	39 07       	cpc	r19, r25
    121a:	10 f0       	brcs	.+4      	; 0x1220 <clockGetSnapshot+0x3c>
    121c:	d1 9b       	sbis	0x1a, 1	; 26
    121e:	12 c0       	rjmp	.+36     	; 0x1244 <clockGetSnapshot+0x60>
			snapshot->whole += usPerTop;
    1220:	80 81       	ld	r24, Z
    1222:	91 81       	ldd	r25, Z+1	; 0x01
    1224:	a2 81       	ldd	r26, Z+2	; 0x02
    1226:	b3 81       	ldd	r27, Z+3	; 0x03
    1228:	80 50       	subi	r24, 0x00	; 0
    122a:	93 48       	sbci	r25, 0x83	; 131
    122c:	af 4f       	sbci	r26, 0xFF	; 255
    122e:	bf 4f       	sbci	r27, 0xFF	; 255
    1230:	80 83       	st	Z, r24
    1232:	91 83       	std	Z+1, r25	; 0x01
    1234:	a2 83       	std	Z+2, r26	; 0x02
    1236:	b3 83       	std	Z+3, r27	; 0x03
			// get the current ticks again
			snapshot->part = TCNT5;
    1238:	80 91 24 01 	lds	r24, 0x0124
    123c:	90 91 25 01 	lds	r25, 0x0125
    1240:	95 83       	std	Z+5, r25	; 0x05
    1242:	84 83       	std	Z+4, r24	; 0x04
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    1244:	6f bf       	out	0x3f, r22	; 63
		}
	}
}
    1246:	08 95       	ret

00001248 <clockSnapshotToTicks>:

TICK_COUNT clockSnapshotToTicks(const TIMER_SNAPSHOT* snapshot){
    1248:	ef 92       	push	r14
    124a:	ff 92       	push	r15
    124c:	0f 93       	push	r16
    124e:	1f 93       	push	r17
    1250:	fc 01       	movw	r30, r24
	TICK_COUNT rtn = snapshot->whole;
    1252:	e0 80       	ld	r14, Z
    1254:	f1 80       	ldd	r15, Z+1	; 0x01
    1256:	02 81       	ldd	r16, Z+2	; 0x02
    1258:	13 81       	ldd	r17, Z+3	; 0x03

	// top = usPerTop
	// part     x
	TICK_COUNT frac  = snapshot->part;
    125a:	64 81       	ldd	r22, Z+4	; 0x04
    125c:	75 81       	ldd	r23, Z+5	; 0x05
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
	frac *= usPerTop;
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	3d e7       	ldi	r19, 0x7D	; 125
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__mulsi3>
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	3a ef       	ldi	r19, 0xFA	; 250
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	0e 94 2f 1c 	call	0x385e	; 0x385e <__udivmodsi4>
    127a:	2e 0d       	add	r18, r14
    127c:	3f 1d       	adc	r19, r15
    127e:	40 1f       	adc	r20, r16
    1280:	51 1f       	adc	r21, r17
	frac /= CLOCK_TOP;

	rtn += frac;

	return rtn;
}
    1282:	b9 01       	movw	r22, r18
    1284:	ca 01       	movw	r24, r20
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	ff 90       	pop	r15
    128c:	ef 90       	pop	r14
    128e:	08 95       	ret

00001290 <clockGetus>:

// Get the current clock time in uS
TICK_COUNT clockGetus(void){
    1290:	0f 93       	push	r16
    1292:	1f 93       	push	r17
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <clockGetus+0xa>
    129a:	00 d0       	rcall	.+0      	; 0x129c <clockGetus+0xc>
    129c:	00 d0       	rcall	.+0      	; 0x129e <clockGetus+0xe>
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
	TIMER_SNAPSHOT snapshot;
	clockGetSnapshot(&snapshot);
    12a2:	8e 01       	movw	r16, r28
    12a4:	0f 5f       	subi	r16, 0xFF	; 255
    12a6:	1f 4f       	sbci	r17, 0xFF	; 255
    12a8:	c8 01       	movw	r24, r16
    12aa:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <clockGetSnapshot>

	return clockSnapshotToTicks(&snapshot);
    12ae:	c8 01       	movw	r24, r16
    12b0:	0e 94 24 09 	call	0x1248	; 0x1248 <clockSnapshotToTicks>
}
    12b4:	26 96       	adiw	r28, 0x06	; 6
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	08 95       	ret

000012ca <__clockInit>:

// Initialise the clock timer and turn it on
void __clockInit(void){
	// Set interrupt pending = false
	CLOCK_INT_CLEAR;
    12ca:	d1 9a       	sbi	0x1a, 1	; 26
	
	// Enable interrupts
	CLOCK_INT_ENABLE;
    12cc:	e3 e7       	ldi	r30, 0x73	; 115
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	82 60       	ori	r24, 0x02	; 2
    12d4:	80 83       	st	Z, r24
}
    12d6:	08 95       	ret

000012d8 <__vector_47>:

// ISR for clock overflow. Occurs every msPerTop
ISR(TIMER5_COMPA_vect) {
    12d8:	1f 92       	push	r1
    12da:	0f 92       	push	r0
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	0f 92       	push	r0
    12e0:	11 24       	eor	r1, r1
    12e2:	2f 93       	push	r18
    12e4:	8f 93       	push	r24
    12e6:	9f 93       	push	r25
    12e8:	af 93       	push	r26
    12ea:	bf 93       	push	r27
	wholeTicks += usPerTop;
    12ec:	80 91 c4 03 	lds	r24, 0x03C4
    12f0:	90 91 c5 03 	lds	r25, 0x03C5
    12f4:	a0 91 c6 03 	lds	r26, 0x03C6
    12f8:	b0 91 c7 03 	lds	r27, 0x03C7
    12fc:	80 50       	subi	r24, 0x00	; 0
    12fe:	93 48       	sbci	r25, 0x83	; 131
    1300:	af 4f       	sbci	r26, 0xFF	; 255
    1302:	bf 4f       	sbci	r27, 0xFF	; 255
    1304:	80 93 c4 03 	sts	0x03C4, r24
    1308:	90 93 c5 03 	sts	0x03C5, r25
    130c:	a0 93 c6 03 	sts	0x03C6, r26
    1310:	b0 93 c7 03 	sts	0x03C7, r27

	
	// Flash the status led if there is an error
	ERROR* err = &__error;
	if(err->errorCode && bit_is_set(STATUS_LED_DDR,STATUS_LED_PIN)){
    1314:	20 91 35 04 	lds	r18, 0x0435
    1318:	22 23       	and	r18, r18
    131a:	b9 f1       	breq	.+110    	; 0x138a <__vector_47+0xb2>
    131c:	39 9b       	sbis	0x07, 1	; 7
    131e:	35 c0       	rjmp	.+106    	; 0x138a <__vector_47+0xb2>
		// There is an error and status led pin is an output

		// Decrement any counter
		if(counter){
    1320:	80 91 c8 03 	lds	r24, 0x03C8
    1324:	88 23       	and	r24, r24
    1326:	19 f0       	breq	.+6      	; 0x132e <__vector_47+0x56>
			counter--;
    1328:	81 50       	subi	r24, 0x01	; 1
    132a:	80 93 c8 03 	sts	0x03C8, r24
		}
		if(counter==0){
    132e:	80 91 c8 03 	lds	r24, 0x03C8
    1332:	88 23       	and	r24, r24
    1334:	51 f5       	brne	.+84     	; 0x138a <__vector_47+0xb2>
			// Its time to do something
			if(err->remaining==0){
    1336:	80 91 36 04 	lds	r24, 0x0436
    133a:	88 23       	and	r24, r24
    133c:	59 f4       	brne	.+22     	; 0x1354 <__vector_47+0x7c>
				err->remaining = ABS(err->errorCode);
    133e:	82 2f       	mov	r24, r18
    1340:	99 27       	eor	r25, r25
    1342:	87 fd       	sbrc	r24, 7
    1344:	90 95       	com	r25
    1346:	97 ff       	sbrs	r25, 7
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <__vector_47+0x78>
    134a:	90 95       	com	r25
    134c:	81 95       	neg	r24
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	80 93 36 04 	sts	0x0436, r24
			}

			uint8_t delay = (err->errorCode < 0 ) ? 250/msPerTop : 500/msPerTop;
    1354:	27 fd       	sbrc	r18, 7
    1356:	02 c0       	rjmp	.+4      	; 0x135c <__vector_47+0x84>
    1358:	9f e0       	ldi	r25, 0x0F	; 15
    135a:	01 c0       	rjmp	.+2      	; 0x135e <__vector_47+0x86>
    135c:	97 e0       	ldi	r25, 0x07	; 7
			if(err->phase){
    135e:	20 91 37 04 	lds	r18, 0x0437
    1362:	22 23       	and	r18, r18
    1364:	41 f0       	breq	.+16     	; 0x1376 <__vector_47+0x9e>
				// turn led off
				if(-- err->remaining == 0){
    1366:	80 91 36 04 	lds	r24, 0x0436
    136a:	81 50       	subi	r24, 0x01	; 1
    136c:	80 93 36 04 	sts	0x0436, r24
    1370:	88 23       	and	r24, r24
    1372:	09 f4       	brne	.+2      	; 0x1376 <__vector_47+0x9e>
    1374:	9e e3       	ldi	r25, 0x3E	; 62
					delay = 2000/msPerTop;
				}
			}else{
				// turn led on
			}
			err->phase = !err->phase;
    1376:	10 92 37 04 	sts	0x0437, r1
    137a:	22 23       	and	r18, r18
    137c:	19 f4       	brne	.+6      	; 0x1384 <__vector_47+0xac>
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	80 93 37 04 	sts	0x0437, r24
			counter = delay;
    1384:	90 93 c8 03 	sts	0x03C8, r25
			// toggle the LED
			sbi(STATUS_LED_INPUT,STATUS_LED_PIN);
    1388:	31 9a       	sbi	0x06, 1	; 6
		}
	}
	
}
    138a:	bf 91       	pop	r27
    138c:	af 91       	pop	r26
    138e:	9f 91       	pop	r25
    1390:	8f 91       	pop	r24
    1392:	2f 91       	pop	r18
    1394:	0f 90       	pop	r0
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	0f 90       	pop	r0
    139a:	1f 90       	pop	r1
    139c:	18 95       	reti

0000139e <_ZN6Stream4_putEcP6__file>:
	/* function to write one char to device
	 * Called directly from the C FILE code
	 * when using commands from stdio.h
	 * This is passed on to the write of our C++ object
	 */
	static int	_put(char c, STREAM *s){
    139e:	28 2f       	mov	r18, r24
		Stream* str = (Stream*)s;
    13a0:	61 15       	cp	r22, r1
    13a2:	71 05       	cpc	r23, r1
    13a4:	19 f4       	brne	.+6      	; 0x13ac <_ZN6Stream4_putEcP6__file+0xe>
    13a6:	a0 e0       	ldi	r26, 0x00	; 0
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <_ZN6Stream4_putEcP6__file+0x12>
    13ac:	db 01       	movw	r26, r22
    13ae:	12 97       	sbiw	r26, 0x02	; 2
		return str->write((uint8_t)c);
    13b0:	ed 91       	ld	r30, X+
    13b2:	fc 91       	ld	r31, X
    13b4:	11 97       	sbiw	r26, 0x01	; 1
    13b6:	01 90       	ld	r0, Z+
    13b8:	f0 81       	ld	r31, Z
    13ba:	e0 2d       	mov	r30, r0
    13bc:	cd 01       	movw	r24, r26
    13be:	62 2f       	mov	r22, r18
    13c0:	09 95       	icall
	}
    13c2:	08 95       	ret

000013c4 <_ZN6Stream4_getEP6__file>:
	 * Called directly from the C FILE code
	 * when using commands from stdio.h
	 * This is passed on to the read of our C++ object
	 */
	static int	_get(STREAM *s){
		Stream* str = (Stream*)s;
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	19 f4       	brne	.+6      	; 0x13ce <_ZN6Stream4_getEP6__file+0xa>
    13c8:	a0 e0       	ldi	r26, 0x00	; 0
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <_ZN6Stream4_getEP6__file+0xe>
    13ce:	dc 01       	movw	r26, r24
    13d0:	12 97       	sbiw	r26, 0x02	; 2
		return str->read();
    13d2:	ed 91       	ld	r30, X+
    13d4:	fc 91       	ld	r31, X
    13d6:	11 97       	sbiw	r26, 0x01	; 1
    13d8:	02 80       	ldd	r0, Z+2	; 0x02
    13da:	f3 81       	ldd	r31, Z+3	; 0x03
    13dc:	e0 2d       	mov	r30, r0
    13de:	cd 01       	movw	r24, r26
    13e0:	09 95       	icall
	}
    13e2:	08 95       	ret

000013e4 <_ZN10NullStream5writeEh>:
// A type of stream that just throws away output and returns EOF for input
class NullStream : public Stream{
public:
	NullStream(void) : Stream(){};
protected:
	virtual int write(uint8_t c) { return c;};
    13e4:	86 2f       	mov	r24, r22
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	08 95       	ret

000013ea <_ZN10NullStream4readEv>:
	virtual int read(void) {return EOF;};
    13ea:	8f ef       	ldi	r24, 0xFF	; 255
    13ec:	9f ef       	ldi	r25, 0xFF	; 255
    13ee:	08 95       	ret

000013f0 <_ZN7Marquee4readEv>:
public:
	Marquee(MARQUEE* cstr) {m_cstr = cstr;}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){return marqueeSendByte(m_cstr,data);}
	virtual int read(void){return EOF;}
    13f0:	8f ef       	ldi	r24, 0xFF	; 255
    13f2:	9f ef       	ldi	r25, 0xFF	; 255
    13f4:	08 95       	ret

000013f6 <_Z10_cpp_Init_v>:
NullStream nullStream;

void __attribute__ ((constructor)) _cpp_Init_(void){
//	stdin = stdout = uart1;
//	stderr = uart1;
}
    13f6:	08 95       	ret

000013f8 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void){
    13f8:	ff cf       	rjmp	.-2      	; 0x13f8 <__cxa_pure_virtual>

000013fa <_GLOBAL__I_statusLed>:
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class Led {
public:
	Led(LED * cstr){m_cstr = cstr;};
    13fa:	8a e3       	ldi	r24, 0x3A	; 58
    13fc:	94 e0       	ldi	r25, 0x04	; 4
    13fe:	90 93 cc 03 	sts	0x03CC, r25
    1402:	80 93 cb 03 	sts	0x03CB, r24
	LED* m_cstr;
};

class StatusLed : public Led {
public:
	StatusLed(LED * cstr) : Led(cstr){
    1406:	83 ec       	ldi	r24, 0xC3	; 195
    1408:	92 e0       	ldi	r25, 0x02	; 2
    140a:	90 93 ca 03 	sts	0x03CA, r25
    140e:	80 93 c9 03 	sts	0x03C9, r24
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class Switch {
public:
	Switch(SWITCH * cstr){m_cstr = cstr;};
    1412:	86 e4       	ldi	r24, 0x46	; 70
    1414:	92 e0       	ldi	r25, 0x02	; 2
    1416:	90 93 ce 03 	sts	0x03CE, r25
    141a:	80 93 cd 03 	sts	0x03CD, r24

class Stream : STREAM{

public:
	Stream(void){
		fdev_setup_stream(this, &_put, &_get, _FDEV_SETUP_RW);
    141e:	6f ec       	ldi	r22, 0xCF	; 207
    1420:	79 e0       	ldi	r23, 0x09	; 9
    1422:	70 93 da 03 	sts	0x03DA, r23
    1426:	60 93 d9 03 	sts	0x03D9, r22
    142a:	42 ee       	ldi	r20, 0xE2	; 226
    142c:	59 e0       	ldi	r21, 0x09	; 9
    142e:	50 93 dc 03 	sts	0x03DC, r21
    1432:	40 93 db 03 	sts	0x03DB, r20
    1436:	a3 e0       	ldi	r26, 0x03	; 3
    1438:	a0 93 d4 03 	sts	0x03D4, r26
    143c:	10 92 de 03 	sts	0x03DE, r1
    1440:	10 92 dd 03 	sts	0x03DD, r1
};


class Marquee : public Stream {
public:
	Marquee(MARQUEE* cstr) {m_cstr = cstr;}
    1444:	8f ec       	ldi	r24, 0xCF	; 207
    1446:	92 e0       	ldi	r25, 0x02	; 2
    1448:	90 93 d0 03 	sts	0x03D0, r25
    144c:	80 93 cf 03 	sts	0x03CF, r24
    1450:	89 e5       	ldi	r24, 0x59	; 89
    1452:	92 e0       	ldi	r25, 0x02	; 2
    1454:	90 93 e0 03 	sts	0x03E0, r25
    1458:	80 93 df 03 	sts	0x03DF, r24
#ifdef __cplusplus
}
class Actuator{
public:
	Actuator(__ACTUATOR* cstr){
		m_cstr = cstr;
    145c:	80 e7       	ldi	r24, 0x70	; 112
    145e:	92 e0       	ldi	r25, 0x02	; 2
    1460:	90 93 e2 03 	sts	0x03E2, r25
    1464:	80 93 e1 03 	sts	0x03E1, r24
#ifdef __cplusplus
}
class Servo : public Actuator{
public:
	Servo(SERVO* cstr) : Actuator(&cstr->actuator){
		m_cstr = cstr;
    1468:	90 93 e4 03 	sts	0x03E4, r25
    146c:	80 93 e3 03 	sts	0x03E3, r24
    1470:	86 e8       	ldi	r24, 0x86	; 134
    1472:	92 e0       	ldi	r25, 0x02	; 2
    1474:	90 93 e6 03 	sts	0x03E6, r25
    1478:	80 93 e5 03 	sts	0x03E5, r24
    147c:	90 93 e8 03 	sts	0x03E8, r25
    1480:	80 93 e7 03 	sts	0x03E7, r24
    1484:	8c e9       	ldi	r24, 0x9C	; 156
    1486:	92 e0       	ldi	r25, 0x02	; 2
    1488:	90 93 ea 03 	sts	0x03EA, r25
    148c:	80 93 e9 03 	sts	0x03E9, r24
    1490:	90 93 ec 03 	sts	0x03EC, r25
    1494:	80 93 eb 03 	sts	0x03EB, r24
};

class ServoDriver{
public:
	ServoDriver(SERVO_DRIVER* cstr){
		driver = cstr;
    1498:	82 eb       	ldi	r24, 0xB2	; 178
    149a:	92 e0       	ldi	r25, 0x02	; 2
    149c:	90 93 ee 03 	sts	0x03EE, r25
    14a0:	80 93 ed 03 	sts	0x03ED, r24
    14a4:	70 93 fa 03 	sts	0x03FA, r23
    14a8:	60 93 f9 03 	sts	0x03F9, r22
    14ac:	50 93 fc 03 	sts	0x03FC, r21
    14b0:	40 93 fb 03 	sts	0x03FB, r20
    14b4:	a0 93 f4 03 	sts	0x03F4, r26
    14b8:	10 92 fe 03 	sts	0x03FE, r1
    14bc:	10 92 fd 03 	sts	0x03FD, r1
/* ===================== C++ Wrapper Code ===============================================*/
#include "Stream/Stream.h"
class Uart : public Stream {
public:
	Uart(UART * cstr): Stream(){
		m_cstr = cstr;
    14c0:	24 e1       	ldi	r18, 0x14	; 20
    14c2:	32 e0       	ldi	r19, 0x02	; 2
    14c4:	30 93 00 04 	sts	0x0400, r19
    14c8:	20 93 ff 03 	sts	0x03FF, r18
		cstr->cpp = this;
    14cc:	ef ee       	ldi	r30, 0xEF	; 239
    14ce:	f3 e0       	ldi	r31, 0x03	; 3
    14d0:	f0 93 2a 02 	sts	0x022A, r31
    14d4:	e0 93 29 02 	sts	0x0229, r30
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class UartHW : public Uart {
public:
	UartHW(HW_UART* uart) : Uart(&uart->_uart_){
    14d8:	8f ed       	ldi	r24, 0xDF	; 223
    14da:	92 e0       	ldi	r25, 0x02	; 2
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	80 83       	st	Z, r24
		m_hw = uart;
    14e0:	30 93 06 04 	sts	0x0406, r19
    14e4:	20 93 05 04 	sts	0x0405, r18
		m_polling = FALSE;
    14e8:	10 92 07 04 	sts	0x0407, r1
    14ec:	70 93 13 04 	sts	0x0413, r23
    14f0:	60 93 12 04 	sts	0x0412, r22
    14f4:	50 93 15 04 	sts	0x0415, r21
    14f8:	40 93 14 04 	sts	0x0414, r20
    14fc:	a0 93 0d 04 	sts	0x040D, r26
    1500:	10 92 17 04 	sts	0x0417, r1
    1504:	10 92 16 04 	sts	0x0416, r1
};

// A type of stream that just throws away output and returns EOF for input
class NullStream : public Stream{
public:
	NullStream(void) : Stream(){};
    1508:	8f ee       	ldi	r24, 0xEF	; 239
    150a:	92 e0       	ldi	r25, 0x02	; 2
    150c:	90 93 09 04 	sts	0x0409, r25
    1510:	80 93 08 04 	sts	0x0408, r24
	while(1);
}
    1514:	08 95       	ret

00001516 <_ZNK9StatusLed3setEa>:
	}

	virtual void set(boolean value) const{
    1516:	1f 93       	push	r17
    1518:	16 2f       	mov	r17, r22
		LED_off(&statusLED);
	}
}

static __inline__ void statusLED_set(boolean value){
	if(pin_is_output(statusLED.pin)){
    151a:	80 91 3a 04 	lds	r24, 0x043A
    151e:	90 91 3b 04 	lds	r25, 0x043B
    1522:	0e 94 67 0d 	call	0x1ace	; 0x1ace <pin_is_output>
    1526:	88 23       	and	r24, r24
    1528:	29 f0       	breq	.+10     	; 0x1534 <_ZNK9StatusLed3setEa+0x1e>
		LED_set(&statusLED, value);
    152a:	8a e3       	ldi	r24, 0x3A	; 58
    152c:	94 e0       	ldi	r25, 0x04	; 4
    152e:	61 2f       	mov	r22, r17
    1530:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LED_set>
	StatusLed(LED * cstr) : Led(cstr){
	}

	virtual void set(boolean value) const{
		statusLED_set(value);
	}
    1534:	1f 91       	pop	r17
    1536:	08 95       	ret

00001538 <_ZNK3Led3setEa>:
	}
	void off(void) const{
		set(FALSE);
	}
	virtual void set(boolean value) const{
		LED_set(m_cstr,value);
    1538:	fc 01       	movw	r30, r24
    153a:	82 81       	ldd	r24, Z+2	; 0x02
    153c:	93 81       	ldd	r25, Z+3	; 0x03
    153e:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LED_set>
	}
    1542:	08 95       	ret

00001544 <_ZN7Marquee5writeEh>:

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){return marqueeSendByte(m_cstr,data);}
    1544:	fc 01       	movw	r30, r24
    1546:	80 89       	ldd	r24, Z+16	; 0x10
    1548:	91 89       	ldd	r25, Z+17	; 0x11
    154a:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <marqueeSendByte>
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	08 95       	ret

00001552 <_ZN6UartHW4readEv>:
	};

	virtual int read(void){
    1552:	fc 01       	movw	r30, r24
		int ch;

		if(m_polling){
    1554:	80 8d       	ldd	r24, Z+24	; 0x18
    1556:	88 23       	and	r24, r24
    1558:	29 f0       	breq	.+10     	; 0x1564 <_ZN6UartHW4readEv+0x12>
			ch = uartPollByte(m_hw);
    155a:	86 89       	ldd	r24, Z+22	; 0x16
    155c:	97 89       	ldd	r25, Z+23	; 0x17
    155e:	0e 94 37 13 	call	0x266e	; 0x266e <uartPollByte>
    1562:	08 95       	ret
		}else{
			ch = __uartGetByte(m_cstr);
    1564:	80 89       	ldd	r24, Z+16	; 0x10
    1566:	91 89       	ldd	r25, Z+17	; 0x11
    1568:	0e 94 6f 12 	call	0x24de	; 0x24de <__uartGetByte>
		}

		return ch;
	}
    156c:	08 95       	ret

0000156e <_ZN4Uart4readEv>:
	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
		return _uartSendByte(m_cstr, data);
	}
	virtual int read(void){
		return __uartGetByte(m_cstr);
    156e:	fc 01       	movw	r30, r24
    1570:	80 89       	ldd	r24, Z+16	; 0x10
    1572:	91 89       	ldd	r25, Z+17	; 0x11
    1574:	0e 94 6f 12 	call	0x24de	; 0x24de <__uartGetByte>
	}
    1578:	08 95       	ret
		return m_cstr;
	}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
		return _uartSendByte(m_cstr, data);
    157a:	fc 01       	movw	r30, r24
    157c:	80 89       	ldd	r24, Z+16	; 0x10
    157e:	91 89       	ldd	r25, Z+17	; 0x11
    1580:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_uartSendByte>
	}
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	08 95       	ret

00001588 <__initTimers>:
// Private methods

//int __timerPrescalerIndex(const Timer* timer, uint16_t prescaler);

static __inline__ TimerData* timerGetData(const Timer* timer){
	return (TimerData*)pgm_read_word(&timer->pgm_data);
    1588:	24 ea       	ldi	r18, 0xA4	; 164
    158a:	32 e0       	ldi	r19, 0x02	; 2
    158c:	f9 01       	movw	r30, r18
    158e:	a5 91       	lpm	r26, Z+
    1590:	b4 91       	lpm	r27, Z+
 
// Set Timer4 to the following:-
//		Mode 	 = TIMER_MODE_PWM_FAST_ICR
//		Prescale = 8
	// Save the timer mode
	timerGetData(&pgm_Timers[4])->mode = TIMER_MODE_PWM_FAST_ICR;
    1592:	8e e0       	ldi	r24, 0x0E	; 14
    1594:	1a 96       	adiw	r26, 0x0a	; 10
    1596:	8c 93       	st	X, r24
    1598:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR4A,WGM40);
	} 
		
			
	if(14 & 2){
		sbi(TCCR4A,WGM41);
    159a:	e0 ea       	ldi	r30, 0xA0	; 160
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	82 60       	ori	r24, 0x02	; 2
    15a2:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 4){
		sbi(TCCR4B,WGM42);
    15a4:	e1 ea       	ldi	r30, 0xA1	; 161
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	88 60       	ori	r24, 0x08	; 8
    15ac:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 8){
		sbi(TCCR4B,WGM43);
    15ae:	80 81       	ld	r24, Z
    15b0:	80 61       	ori	r24, 0x10	; 16
    15b2:	80 83       	st	Z, r24
	} 
		
	// Top is stored in ICR register
	ICR4 = 40000;			
    15b4:	80 e4       	ldi	r24, 0x40	; 64
    15b6:	9c e9       	ldi	r25, 0x9C	; 156
    15b8:	90 93 a7 00 	sts	0x00A7, r25
    15bc:	80 93 a6 00 	sts	0x00A6, r24
			
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[4])->prescale_value = 8;
    15c0:	48 e0       	ldi	r20, 0x08	; 8
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	4d 93       	st	X+, r20
    15c6:	5c 93       	st	X, r21
	TCCR4B |= 2;
    15c8:	80 81       	ld	r24, Z
    15ca:	82 60       	ori	r24, 0x02	; 2
    15cc:	80 83       	st	Z, r24
    15ce:	24 5d       	subi	r18, 0xD4	; 212
    15d0:	3f 4f       	sbci	r19, 0xFF	; 255
    15d2:	f9 01       	movw	r30, r18
    15d4:	a5 91       	lpm	r26, Z+
    15d6:	b4 91       	lpm	r27, Z+
	 
// Set Timer5 to the following:-
//		Mode 	 = TIMER_MODE_CTC_OCR
//		Prescale = 8
	// Save the timer mode
	timerGetData(&pgm_Timers[5])->mode = TIMER_MODE_CTC_OCR;
    15d8:	84 e0       	ldi	r24, 0x04	; 4
    15da:	1a 96       	adiw	r26, 0x0a	; 10
    15dc:	8c 93       	st	X, r24
    15de:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR5A,WGM51);
	} 
		
			
	if(4 & 4){
		sbi(TCCR5B,WGM52);
    15e0:	e1 e2       	ldi	r30, 0x21	; 33
    15e2:	f1 e0       	ldi	r31, 0x01	; 1
    15e4:	80 81       	ld	r24, Z
    15e6:	88 60       	ori	r24, 0x08	; 8
    15e8:	80 83       	st	Z, r24
	if(4 & 8){
		sbi(TCCR5B,WGM53);
	} 
		
	// Top is stored in Compare A OCR
				OCR5A = 64000;			
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	9a ef       	ldi	r25, 0xFA	; 250
    15ee:	90 93 29 01 	sts	0x0129, r25
    15f2:	80 93 28 01 	sts	0x0128, r24
				
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[5])->prescale_value = 8;
    15f6:	4d 93       	st	X+, r20
    15f8:	5c 93       	st	X, r21
	TCCR5B |= 2;
    15fa:	80 81       	ld	r24, Z
    15fc:	82 60       	ori	r24, 0x02	; 2
    15fe:	80 83       	st	Z, r24
	}
    1600:	08 95       	ret

00001602 <servoPWMInit>:
    1602:	8f 92       	push	r8
    1604:	9f 92       	push	r9
    1606:	af 92       	push	r10
    1608:	bf 92       	push	r11
    160a:	cf 92       	push	r12
    160c:	df 92       	push	r13
    160e:	ef 92       	push	r14
    1610:	ff 92       	push	r15
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	6c 01       	movw	r12, r24
    161c:	dc 01       	movw	r26, r24
    161e:	12 96       	adiw	r26, 0x02	; 2
    1620:	8c 91       	ld	r24, X
    1622:	c8 2f       	mov	r28, r24
    1624:	d0 e0       	ldi	r29, 0x00	; 0
    1626:	21 97       	sbiw	r28, 0x01	; 1
    1628:	7e 01       	movw	r14, r28
    162a:	ee 0c       	add	r14, r14
    162c:	ff 1c       	adc	r15, r15
    162e:	9f e7       	ldi	r25, 0x7F	; 127
    1630:	89 2e       	mov	r8, r25
    1632:	93 e0       	ldi	r25, 0x03	; 3
    1634:	99 2e       	mov	r9, r25
    1636:	8c e2       	ldi	r24, 0x2C	; 44
    1638:	a8 2e       	mov	r10, r24
    163a:	47 c0       	rjmp	.+142    	; 0x16ca <servoPWMInit+0xc8>
    163c:	d6 01       	movw	r26, r12
    163e:	ed 91       	ld	r30, X+
    1640:	fc 91       	ld	r31, X
    1642:	ee 0d       	add	r30, r14
    1644:	ff 1d       	adc	r31, r15
    1646:	05 91       	lpm	r16, Z+
    1648:	14 91       	lpm	r17, Z+
    164a:	f8 01       	movw	r30, r16
    164c:	d5 82       	std	Z+5, r13	; 0x05
    164e:	c4 82       	std	Z+4, r12	; 0x04
    1650:	86 81       	ldd	r24, Z+6	; 0x06
    1652:	97 81       	ldd	r25, Z+7	; 0x07
    1654:	0e 94 72 10 	call	0x20e4	; 0x20e4 <compareFromIOPin>
    1658:	fc 01       	movw	r30, r24
    165a:	d8 01       	movw	r26, r16
    165c:	55 96       	adiw	r26, 0x15	; 21
    165e:	9c 93       	st	X, r25
    1660:	8e 93       	st	-X, r24
    1662:	54 97       	sbiw	r26, 0x14	; 20
    1664:	32 96       	adiw	r30, 0x02	; 2
    1666:	b4 90       	lpm	r11, Z+
    1668:	11 96       	adiw	r26, 0x01	; 1
    166a:	9c 92       	st	X, r9
    166c:	8e 92       	st	-X, r8
    166e:	16 96       	adiw	r26, 0x06	; 6
    1670:	8d 91       	ld	r24, X+
    1672:	9c 91       	ld	r25, X
    1674:	17 97       	sbiw	r26, 0x07	; 7
    1676:	60 e0       	ldi	r22, 0x00	; 0
    1678:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <pin_make_output>
    167c:	ba 9c       	mul	r11, r10
    167e:	c0 01       	movw	r24, r0
    1680:	11 24       	eor	r1, r1
    1682:	8d 5e       	subi	r24, 0xED	; 237
    1684:	9d 4f       	sbci	r25, 0xFD	; 253
    1686:	fc 01       	movw	r30, r24
    1688:	a5 91       	lpm	r26, Z+
    168a:	b4 91       	lpm	r27, Z+
    168c:	8d 91       	ld	r24, X+
    168e:	9c 91       	ld	r25, X
    1690:	d8 01       	movw	r26, r16
    1692:	53 96       	adiw	r26, 0x13	; 19
    1694:	9c 93       	st	X, r25
    1696:	8e 93       	st	-X, r24
    1698:	52 97       	sbiw	r26, 0x12	; 18
    169a:	18 96       	adiw	r26, 0x08	; 8
    169c:	6d 91       	ld	r22, X+
    169e:	7c 91       	ld	r23, X
    16a0:	19 97       	sbiw	r26, 0x09	; 9
    16a2:	1a 96       	adiw	r26, 0x0a	; 10
    16a4:	4d 91       	ld	r20, X+
    16a6:	5c 91       	ld	r21, X
    16a8:	1b 97       	sbiw	r26, 0x0b	; 11
    16aa:	c8 01       	movw	r24, r16
    16ac:	0e 94 9d 0b 	call	0x173a	; 0x173a <servoSetConfig>
    16b0:	c8 01       	movw	r24, r16
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	0e 94 39 0c 	call	0x1872	; 0x1872 <__act_setSpeed>
    16b8:	c8 01       	movw	r24, r16
    16ba:	6f ef       	ldi	r22, 0xFF	; 255
    16bc:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__act_setConnected>
    16c0:	21 97       	sbiw	r28, 0x01	; 1
    16c2:	ee ef       	ldi	r30, 0xFE	; 254
    16c4:	ff ef       	ldi	r31, 0xFF	; 255
    16c6:	ee 0e       	add	r14, r30
    16c8:	ff 1e       	adc	r15, r31
    16ca:	ff ef       	ldi	r31, 0xFF	; 255
    16cc:	cf 3f       	cpi	r28, 0xFF	; 255
    16ce:	df 07       	cpc	r29, r31
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <servoPWMInit+0xd2>
    16d2:	b4 cf       	rjmp	.-152    	; 0x163c <servoPWMInit+0x3a>
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	ff 90       	pop	r15
    16de:	ef 90       	pop	r14
    16e0:	df 90       	pop	r13
    16e2:	cf 90       	pop	r12
    16e4:	bf 90       	pop	r11
    16e6:	af 90       	pop	r10
    16e8:	9f 90       	pop	r9
    16ea:	8f 90       	pop	r8
    16ec:	08 95       	ret

000016ee <setConnected>:
    16ee:	fc 01       	movw	r30, r24
    16f0:	84 89       	ldd	r24, Z+20	; 0x14
    16f2:	95 89       	ldd	r25, Z+21	; 0x15
    16f4:	61 11       	cpse	r22, r1
    16f6:	62 e0       	ldi	r22, 0x02	; 2
    16f8:	0e 94 be 10 	call	0x217c	; 0x217c <compareSetOutputMode>
    16fc:	08 95       	ret

000016fe <setSpeed>:
    16fe:	ef 92       	push	r14
    1700:	ff 92       	push	r15
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
    1706:	fc 01       	movw	r30, r24
    1708:	e4 88       	ldd	r14, Z+20	; 0x14
    170a:	f5 88       	ldd	r15, Z+21	; 0x15
    170c:	24 85       	ldd	r18, Z+12	; 0x0c
    170e:	35 85       	ldd	r19, Z+13	; 0x0d
    1710:	06 85       	ldd	r16, Z+14	; 0x0e
    1712:	17 85       	ldd	r17, Z+15	; 0x0f
    1714:	86 2f       	mov	r24, r22
    1716:	99 27       	eor	r25, r25
    1718:	87 fd       	sbrc	r24, 7
    171a:	90 95       	com	r25
    171c:	61 e8       	ldi	r22, 0x81	; 129
    171e:	7f ef       	ldi	r23, 0xFF	; 255
    1720:	4f e7       	ldi	r20, 0x7F	; 127
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	0e 94 bb 0c 	call	0x1976	; 0x1976 <interpolateU>
    1728:	bc 01       	movw	r22, r24
    172a:	c7 01       	movw	r24, r14
    172c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <compareSetThreshold>
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	ff 90       	pop	r15
    1736:	ef 90       	pop	r14
    1738:	08 95       	ret

0000173a <servoSetConfig>:
    173a:	9f 92       	push	r9
    173c:	af 92       	push	r10
    173e:	bf 92       	push	r11
    1740:	cf 92       	push	r12
    1742:	df 92       	push	r13
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	ec 01       	movw	r28, r24
    1752:	7b 01       	movw	r14, r22
    1754:	8a 01       	movw	r16, r20
    1756:	79 87       	std	Y+9, r23	; 0x09
    1758:	68 87       	std	Y+8, r22	; 0x08
    175a:	5b 87       	std	Y+11, r21	; 0x0b
    175c:	4a 87       	std	Y+10, r20	; 0x0a
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
    1760:	9d 81       	ldd	r25, Y+5	; 0x05
    1762:	89 2b       	or	r24, r25
    1764:	09 f4       	brne	.+2      	; 0x1768 <servoSetConfig+0x2e>
    1766:	5e c0       	rjmp	.+188    	; 0x1824 <servoSetConfig+0xea>
    1768:	9f b6       	in	r9, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	8a 89       	ldd	r24, Y+18	; 0x12
    176e:	9b 89       	ldd	r25, Y+19	; 0x13
    1770:	68 ee       	ldi	r22, 0xE8	; 232
    1772:	73 e0       	ldi	r23, 0x03	; 3
    1774:	0e 94 1b 1c 	call	0x3836	; 0x3836 <__udivmodhi4>
    1778:	5b 01       	movw	r10, r22
    177a:	cc 24       	eor	r12, r12
    177c:	dd 24       	eor	r13, r13
    177e:	b7 01       	movw	r22, r14
    1780:	60 1b       	sub	r22, r16
    1782:	71 0b       	sbc	r23, r17
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a6 01       	movw	r20, r12
    178a:	95 01       	movw	r18, r10
    178c:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__mulsi3>
    1790:	24 e1       	ldi	r18, 0x14	; 20
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	0e 94 2f 1c 	call	0x385e	; 0x385e <__udivmodsi4>
    179c:	c9 01       	movw	r24, r18
    179e:	da 01       	movw	r26, r20
    17a0:	9c 01       	movw	r18, r24
    17a2:	ad 01       	movw	r20, r26
    17a4:	da 01       	movw	r26, r20
    17a6:	c9 01       	movw	r24, r18
    17a8:	80 70       	andi	r24, 0x00	; 0
    17aa:	90 70       	andi	r25, 0x00	; 0
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	a1 05       	cpc	r26, r1
    17b0:	b1 05       	cpc	r27, r1
    17b2:	39 f0       	breq	.+14     	; 0x17c2 <servoSetConfig+0x88>
    17b4:	86 ee       	ldi	r24, 0xE6	; 230
    17b6:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <setError>
    17ba:	2f ef       	ldi	r18, 0xFF	; 255
    17bc:	3f ef       	ldi	r19, 0xFF	; 255
    17be:	40 e0       	ldi	r20, 0x00	; 0
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	3d 87       	std	Y+13, r19	; 0x0d
    17c4:	2c 87       	std	Y+12, r18	; 0x0c
    17c6:	0e 0d       	add	r16, r14
    17c8:	1f 1d       	adc	r17, r15
    17ca:	b8 01       	movw	r22, r16
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a6 01       	movw	r20, r12
    17d2:	95 01       	movw	r18, r10
    17d4:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__mulsi3>
    17d8:	24 e1       	ldi	r18, 0x14	; 20
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e0       	ldi	r20, 0x00	; 0
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	0e 94 2f 1c 	call	0x385e	; 0x385e <__udivmodsi4>
    17e4:	c9 01       	movw	r24, r18
    17e6:	da 01       	movw	r26, r20
    17e8:	9c 01       	movw	r18, r24
    17ea:	ad 01       	movw	r20, r26
    17ec:	da 01       	movw	r26, r20
    17ee:	c9 01       	movw	r24, r18
    17f0:	80 70       	andi	r24, 0x00	; 0
    17f2:	90 70       	andi	r25, 0x00	; 0
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	a1 05       	cpc	r26, r1
    17f8:	b1 05       	cpc	r27, r1
    17fa:	39 f0       	breq	.+14     	; 0x180a <servoSetConfig+0xd0>
    17fc:	86 ee       	ldi	r24, 0xE6	; 230
    17fe:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <setError>
    1802:	2f ef       	ldi	r18, 0xFF	; 255
    1804:	3f ef       	ldi	r19, 0xFF	; 255
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	3f 87       	std	Y+15, r19	; 0x0f
    180c:	2e 87       	std	Y+14, r18	; 0x0e
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	80 ff       	sbrs	r24, 0
    1812:	07 c0       	rjmp	.+14     	; 0x1822 <servoSetConfig+0xe8>
    1814:	6a 81       	ldd	r22, Y+2	; 0x02
    1816:	61 50       	subi	r22, 0x01	; 1
    1818:	6a 83       	std	Y+2, r22	; 0x02
    181a:	6f 5f       	subi	r22, 0xFF	; 255
    181c:	ce 01       	movw	r24, r28
    181e:	0e 94 39 0c 	call	0x1872	; 0x1872 <__act_setSpeed>
    1822:	9f be       	out	0x3f, r9	; 63
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	ff 90       	pop	r15
    182e:	ef 90       	pop	r14
    1830:	df 90       	pop	r13
    1832:	cf 90       	pop	r12
    1834:	bf 90       	pop	r11
    1836:	af 90       	pop	r10
    1838:	9f 90       	pop	r9
    183a:	08 95       	ret

0000183c <_ZN6Stream5printEc>:
    183c:	1f 93       	push	r17
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	ec 01       	movw	r28, r24
    1844:	16 2f       	mov	r17, r22
    1846:	6a 30       	cpi	r22, 0x0A	; 10
    1848:	39 f4       	brne	.+14     	; 0x1858 <_ZN6Stream5printEc+0x1c>
    184a:	e8 81       	ld	r30, Y
    184c:	f9 81       	ldd	r31, Y+1	; 0x01
    184e:	01 90       	ld	r0, Z+
    1850:	f0 81       	ld	r31, Z
    1852:	e0 2d       	mov	r30, r0
    1854:	6d e0       	ldi	r22, 0x0D	; 13
    1856:	09 95       	icall
    1858:	e8 81       	ld	r30, Y
    185a:	f9 81       	ldd	r31, Y+1	; 0x01
    185c:	01 90       	ld	r0, Z+
    185e:	f0 81       	ld	r31, Z
    1860:	e0 2d       	mov	r30, r0
    1862:	ce 01       	movw	r24, r28
    1864:	61 2f       	mov	r22, r17
    1866:	09 95       	icall
    1868:	ce 01       	movw	r24, r28
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	1f 91       	pop	r17
    1870:	08 95       	ret

00001872 <__act_setSpeed>:
    1872:	1f 93       	push	r17
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	ec 01       	movw	r28, r24
    187a:	16 2f       	mov	r17, r22
    187c:	61 38       	cpi	r22, 0x81	; 129
    187e:	0c f4       	brge	.+2      	; 0x1882 <__act_setSpeed+0x10>
    1880:	11 e8       	ldi	r17, 0x81	; 129
    1882:	e8 81       	ld	r30, Y
    1884:	f9 81       	ldd	r31, Y+1	; 0x01
    1886:	30 97       	sbiw	r30, 0x00	; 0
    1888:	79 f0       	breq	.+30     	; 0x18a8 <__act_setSpeed+0x36>
    188a:	25 91       	lpm	r18, Z+
    188c:	34 91       	lpm	r19, Z+
    188e:	21 15       	cp	r18, r1
    1890:	31 05       	cpc	r19, r1
    1892:	51 f0       	breq	.+20     	; 0x18a8 <__act_setSpeed+0x36>
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	81 fd       	sbrc	r24, 1
    1898:	02 c0       	rjmp	.+4      	; 0x189e <__act_setSpeed+0x2c>
    189a:	61 2f       	mov	r22, r17
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <__act_setSpeed+0x30>
    189e:	61 2f       	mov	r22, r17
    18a0:	61 95       	neg	r22
    18a2:	ce 01       	movw	r24, r28
    18a4:	f9 01       	movw	r30, r18
    18a6:	09 95       	icall
    18a8:	1a 83       	std	Y+2, r17	; 0x02
    18aa:	df 91       	pop	r29
    18ac:	cf 91       	pop	r28
    18ae:	1f 91       	pop	r17
    18b0:	08 95       	ret

000018b2 <__act_setConnected>:
    18b2:	dc 01       	movw	r26, r24
    18b4:	96 2f       	mov	r25, r22
    18b6:	91 70       	andi	r25, 0x01	; 1
    18b8:	13 96       	adiw	r26, 0x03	; 3
    18ba:	8c 91       	ld	r24, X
    18bc:	13 97       	sbiw	r26, 0x03	; 3
    18be:	8e 7f       	andi	r24, 0xFE	; 254
    18c0:	89 2b       	or	r24, r25
    18c2:	13 96       	adiw	r26, 0x03	; 3
    18c4:	8c 93       	st	X, r24
    18c6:	13 97       	sbiw	r26, 0x03	; 3
    18c8:	8d 91       	ld	r24, X+
    18ca:	9c 91       	ld	r25, X
    18cc:	11 97       	sbiw	r26, 0x01	; 1
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	51 f0       	breq	.+20     	; 0x18e6 <__act_setConnected+0x34>
    18d2:	fc 01       	movw	r30, r24
    18d4:	32 96       	adiw	r30, 0x02	; 2
    18d6:	25 91       	lpm	r18, Z+
    18d8:	34 91       	lpm	r19, Z+
    18da:	21 15       	cp	r18, r1
    18dc:	31 05       	cpc	r19, r1
    18de:	19 f0       	breq	.+6      	; 0x18e6 <__act_setConnected+0x34>
    18e0:	cd 01       	movw	r24, r26
    18e2:	f9 01       	movw	r30, r18
    18e4:	09 95       	icall
    18e6:	08 95       	ret

000018e8 <interpolate>:
    18e8:	4f 92       	push	r4
    18ea:	5f 92       	push	r5
    18ec:	6f 92       	push	r6
    18ee:	7f 92       	push	r7
    18f0:	8f 92       	push	r8
    18f2:	9f 92       	push	r9
    18f4:	af 92       	push	r10
    18f6:	bf 92       	push	r11
    18f8:	cf 92       	push	r12
    18fa:	df 92       	push	r13
    18fc:	ef 92       	push	r14
    18fe:	ff 92       	push	r15
    1900:	0f 93       	push	r16
    1902:	1f 93       	push	r17
    1904:	2b 01       	movw	r4, r22
    1906:	3a 01       	movw	r6, r20
    1908:	59 01       	movw	r10, r18
    190a:	78 01       	movw	r14, r16
    190c:	e2 1a       	sub	r14, r18
    190e:	f3 0a       	sbc	r15, r19
    1910:	00 27       	eor	r16, r16
    1912:	f7 fc       	sbrc	r15, 7
    1914:	00 95       	com	r16
    1916:	10 2f       	mov	r17, r16
    1918:	9c 01       	movw	r18, r24
    191a:	26 1b       	sub	r18, r22
    191c:	37 0b       	sbc	r19, r23
    191e:	44 27       	eor	r20, r20
    1920:	37 fd       	sbrc	r19, 7
    1922:	40 95       	com	r20
    1924:	54 2f       	mov	r21, r20
    1926:	c8 01       	movw	r24, r16
    1928:	b7 01       	movw	r22, r14
    192a:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__mulsi3>
    192e:	64 18       	sub	r6, r4
    1930:	75 08       	sbc	r7, r5
    1932:	88 24       	eor	r8, r8
    1934:	77 fc       	sbrc	r7, 7
    1936:	80 94       	com	r8
    1938:	98 2c       	mov	r9, r8
    193a:	a4 01       	movw	r20, r8
    193c:	93 01       	movw	r18, r6
    193e:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <__divmodsi4>
    1942:	c9 01       	movw	r24, r18
    1944:	da 01       	movw	r26, r20
    1946:	cc 24       	eor	r12, r12
    1948:	b7 fc       	sbrc	r11, 7
    194a:	c0 94       	com	r12
    194c:	dc 2c       	mov	r13, r12
    194e:	a8 0e       	add	r10, r24
    1950:	b9 1e       	adc	r11, r25
    1952:	ca 1e       	adc	r12, r26
    1954:	db 1e       	adc	r13, r27
    1956:	c5 01       	movw	r24, r10
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	ef 90       	pop	r14
    1960:	df 90       	pop	r13
    1962:	cf 90       	pop	r12
    1964:	bf 90       	pop	r11
    1966:	af 90       	pop	r10
    1968:	9f 90       	pop	r9
    196a:	8f 90       	pop	r8
    196c:	7f 90       	pop	r7
    196e:	6f 90       	pop	r6
    1970:	5f 90       	pop	r5
    1972:	4f 90       	pop	r4
    1974:	08 95       	ret

00001976 <interpolateU>:
    1976:	4f 92       	push	r4
    1978:	5f 92       	push	r5
    197a:	6f 92       	push	r6
    197c:	7f 92       	push	r7
    197e:	8f 92       	push	r8
    1980:	9f 92       	push	r9
    1982:	af 92       	push	r10
    1984:	bf 92       	push	r11
    1986:	cf 92       	push	r12
    1988:	df 92       	push	r13
    198a:	ef 92       	push	r14
    198c:	ff 92       	push	r15
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	2b 01       	movw	r4, r22
    1994:	5a 01       	movw	r10, r20
    1996:	39 01       	movw	r6, r18
    1998:	78 01       	movw	r14, r16
    199a:	e2 1a       	sub	r14, r18
    199c:	f3 0a       	sbc	r15, r19
    199e:	00 e0       	ldi	r16, 0x00	; 0
    19a0:	10 e0       	ldi	r17, 0x00	; 0
    19a2:	9c 01       	movw	r18, r24
    19a4:	26 1b       	sub	r18, r22
    19a6:	37 0b       	sbc	r19, r23
    19a8:	44 27       	eor	r20, r20
    19aa:	37 fd       	sbrc	r19, 7
    19ac:	40 95       	com	r20
    19ae:	54 2f       	mov	r21, r20
    19b0:	c8 01       	movw	r24, r16
    19b2:	b7 01       	movw	r22, r14
    19b4:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__mulsi3>
    19b8:	a4 18       	sub	r10, r4
    19ba:	b5 08       	sbc	r11, r5
    19bc:	cc 24       	eor	r12, r12
    19be:	b7 fc       	sbrc	r11, 7
    19c0:	c0 94       	com	r12
    19c2:	dc 2c       	mov	r13, r12
    19c4:	a6 01       	movw	r20, r12
    19c6:	95 01       	movw	r18, r10
    19c8:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <__divmodsi4>
    19cc:	88 24       	eor	r8, r8
    19ce:	99 24       	eor	r9, r9
    19d0:	26 0d       	add	r18, r6
    19d2:	37 1d       	adc	r19, r7
    19d4:	48 1d       	adc	r20, r8
    19d6:	59 1d       	adc	r21, r9
    19d8:	c9 01       	movw	r24, r18
    19da:	1f 91       	pop	r17
    19dc:	0f 91       	pop	r16
    19de:	ff 90       	pop	r15
    19e0:	ef 90       	pop	r14
    19e2:	df 90       	pop	r13
    19e4:	cf 90       	pop	r12
    19e6:	bf 90       	pop	r11
    19e8:	af 90       	pop	r10
    19ea:	9f 90       	pop	r9
    19ec:	8f 90       	pop	r8
    19ee:	7f 90       	pop	r7
    19f0:	6f 90       	pop	r6
    19f2:	5f 90       	pop	r5
    19f4:	4f 90       	pop	r4
    19f6:	08 95       	ret

000019f8 <getError>:
    19f8:	80 91 35 04 	lds	r24, 0x0435
    19fc:	08 95       	ret

000019fe <setErrorLog>:
    19fe:	90 93 39 04 	sts	0x0439, r25
    1a02:	80 93 38 04 	sts	0x0438, r24
    1a06:	08 95       	ret

00001a08 <setError>:
    1a08:	1f 93       	push	r17
    1a0a:	18 2f       	mov	r17, r24
    1a0c:	80 91 35 04 	lds	r24, 0x0435
    1a10:	88 23       	and	r24, r24
    1a12:	09 f0       	breq	.+2      	; 0x1a16 <setError+0xe>
    1a14:	5a c0       	rjmp	.+180    	; 0x1aca <setError+0xc2>
    1a16:	10 93 35 04 	sts	0x0435, r17
    1a1a:	80 91 3a 04 	lds	r24, 0x043A
    1a1e:	90 91 3b 04 	lds	r25, 0x043B
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	49 f0       	breq	.+18     	; 0x1a38 <setError+0x30>
    1a26:	0e 94 67 0d 	call	0x1ace	; 0x1ace <pin_is_output>
    1a2a:	88 23       	and	r24, r24
    1a2c:	29 f0       	breq	.+10     	; 0x1a38 <setError+0x30>
    1a2e:	8a e3       	ldi	r24, 0x3A	; 58
    1a30:	94 e0       	ldi	r25, 0x04	; 4
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LED_set>
    1a38:	80 91 45 04 	lds	r24, 0x0445
    1a3c:	90 91 46 04 	lds	r25, 0x0446
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <setError+0x3e>
    1a44:	42 c0       	rjmp	.+132    	; 0x1aca <setError+0xc2>
    1a46:	17 ff       	sbrs	r17, 7
    1a48:	12 c0       	rjmp	.+36     	; 0x1a6e <setError+0x66>
    1a4a:	00 d0       	rcall	.+0      	; 0x1a4c <setError+0x44>
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <setError+0x46>
    1a4e:	ad b7       	in	r26, 0x3d	; 61
    1a50:	be b7       	in	r27, 0x3e	; 62
    1a52:	12 96       	adiw	r26, 0x02	; 2
    1a54:	9c 93       	st	X, r25
    1a56:	8e 93       	st	-X, r24
    1a58:	11 97       	sbiw	r26, 0x01	; 1
    1a5a:	84 e9       	ldi	r24, 0x94	; 148
    1a5c:	93 e0       	ldi	r25, 0x03	; 3
    1a5e:	14 96       	adiw	r26, 0x04	; 4
    1a60:	9c 93       	st	X, r25
    1a62:	8e 93       	st	-X, r24
    1a64:	13 97       	sbiw	r26, 0x03	; 3
    1a66:	0e 94 45 1b 	call	0x368a	; 0x368a <fprintf_P>
    1a6a:	11 95       	neg	r17
    1a6c:	0c c0       	rjmp	.+24     	; 0x1a86 <setError+0x7e>
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <setError+0x68>
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <setError+0x6a>
    1a72:	ed b7       	in	r30, 0x3d	; 61
    1a74:	fe b7       	in	r31, 0x3e	; 62
    1a76:	92 83       	std	Z+2, r25	; 0x02
    1a78:	81 83       	std	Z+1, r24	; 0x01
    1a7a:	8f e8       	ldi	r24, 0x8F	; 143
    1a7c:	93 e0       	ldi	r25, 0x03	; 3
    1a7e:	94 83       	std	Z+4, r25	; 0x04
    1a80:	83 83       	std	Z+3, r24	; 0x03
    1a82:	0e 94 45 1b 	call	0x368a	; 0x368a <fprintf_P>
    1a86:	00 d0       	rcall	.+0      	; 0x1a88 <setError+0x80>
    1a88:	ed b7       	in	r30, 0x3d	; 61
    1a8a:	fe b7       	in	r31, 0x3e	; 62
    1a8c:	31 96       	adiw	r30, 0x01	; 1
    1a8e:	80 91 45 04 	lds	r24, 0x0445
    1a92:	90 91 46 04 	lds	r25, 0x0446
    1a96:	ad b7       	in	r26, 0x3d	; 61
    1a98:	be b7       	in	r27, 0x3e	; 62
    1a9a:	12 96       	adiw	r26, 0x02	; 2
    1a9c:	9c 93       	st	X, r25
    1a9e:	8e 93       	st	-X, r24
    1aa0:	11 97       	sbiw	r26, 0x01	; 1
    1aa2:	83 e8       	ldi	r24, 0x83	; 131
    1aa4:	93 e0       	ldi	r25, 0x03	; 3
    1aa6:	93 83       	std	Z+3, r25	; 0x03
    1aa8:	82 83       	std	Z+2, r24	; 0x02
    1aaa:	81 2f       	mov	r24, r17
    1aac:	99 27       	eor	r25, r25
    1aae:	87 fd       	sbrc	r24, 7
    1ab0:	90 95       	com	r25
    1ab2:	95 83       	std	Z+5, r25	; 0x05
    1ab4:	84 83       	std	Z+4, r24	; 0x04
    1ab6:	0e 94 45 1b 	call	0x368a	; 0x368a <fprintf_P>
    1aba:	ed b7       	in	r30, 0x3d	; 61
    1abc:	fe b7       	in	r31, 0x3e	; 62
    1abe:	36 96       	adiw	r30, 0x06	; 6
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	fe bf       	out	0x3e, r31	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	ed bf       	out	0x3d, r30	; 61
    1aca:	1f 91       	pop	r17
    1acc:	08 95       	ret

00001ace <pin_is_output>:
    1ace:	9c 01       	movw	r18, r24
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	81 f0       	breq	.+32     	; 0x1af4 <pin_is_output+0x26>
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	85 91       	lpm	r24, Z+
    1ad8:	94 91       	lpm	r25, Z+
    1ada:	02 96       	adiw	r24, 0x02	; 2
    1adc:	fc 01       	movw	r30, r24
    1ade:	a5 91       	lpm	r26, Z+
    1ae0:	b4 91       	lpm	r27, Z+
    1ae2:	2e 5f       	subi	r18, 0xFE	; 254
    1ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae6:	f9 01       	movw	r30, r18
    1ae8:	94 91       	lpm	r25, Z+
    1aea:	8c 91       	ld	r24, X
    1aec:	89 23       	and	r24, r25
    1aee:	11 f0       	breq	.+4      	; 0x1af4 <pin_is_output+0x26>
    1af0:	8f ef       	ldi	r24, 0xFF	; 255
    1af2:	08 95       	ret
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	08 95       	ret

00001af8 <pin_make_input>:
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	9c 01       	movw	r18, r24
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	f9 f0       	breq	.+62     	; 0x1b40 <pin_make_input+0x48>
    1b02:	fc 01       	movw	r30, r24
    1b04:	45 91       	lpm	r20, Z+
    1b06:	54 91       	lpm	r21, Z+
    1b08:	ca 01       	movw	r24, r20
    1b0a:	02 96       	adiw	r24, 0x02	; 2
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	a5 91       	lpm	r26, Z+
    1b10:	b4 91       	lpm	r27, Z+
    1b12:	fa 01       	movw	r30, r20
    1b14:	c5 91       	lpm	r28, Z+
    1b16:	d4 91       	lpm	r29, Z+
    1b18:	2e 5f       	subi	r18, 0xFE	; 254
    1b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1c:	f9 01       	movw	r30, r18
    1b1e:	94 91       	lpm	r25, Z+
    1b20:	3f b7       	in	r19, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	8c 91       	ld	r24, X
    1b26:	29 2f       	mov	r18, r25
    1b28:	20 95       	com	r18
    1b2a:	82 23       	and	r24, r18
    1b2c:	8c 93       	st	X, r24
    1b2e:	66 23       	and	r22, r22
    1b30:	19 f0       	breq	.+6      	; 0x1b38 <pin_make_input+0x40>
    1b32:	88 81       	ld	r24, Y
    1b34:	89 2b       	or	r24, r25
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <pin_make_input+0x44>
    1b38:	88 81       	ld	r24, Y
    1b3a:	82 23       	and	r24, r18
    1b3c:	88 83       	st	Y, r24
    1b3e:	3f bf       	out	0x3f, r19	; 63
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	08 95       	ret

00001b46 <pin_make_output>:
    1b46:	cf 93       	push	r28
    1b48:	df 93       	push	r29
    1b4a:	9c 01       	movw	r18, r24
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	f9 f0       	breq	.+62     	; 0x1b8e <pin_make_output+0x48>
    1b50:	fc 01       	movw	r30, r24
    1b52:	45 91       	lpm	r20, Z+
    1b54:	54 91       	lpm	r21, Z+
    1b56:	ca 01       	movw	r24, r20
    1b58:	02 96       	adiw	r24, 0x02	; 2
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	c5 91       	lpm	r28, Z+
    1b5e:	d4 91       	lpm	r29, Z+
    1b60:	fa 01       	movw	r30, r20
    1b62:	a5 91       	lpm	r26, Z+
    1b64:	b4 91       	lpm	r27, Z+
    1b66:	2e 5f       	subi	r18, 0xFE	; 254
    1b68:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6a:	f9 01       	movw	r30, r18
    1b6c:	24 91       	lpm	r18, Z+
    1b6e:	3f b7       	in	r19, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	66 23       	and	r22, r22
    1b74:	19 f0       	breq	.+6      	; 0x1b7c <pin_make_output+0x36>
    1b76:	8c 91       	ld	r24, X
    1b78:	82 2b       	or	r24, r18
    1b7a:	04 c0       	rjmp	.+8      	; 0x1b84 <pin_make_output+0x3e>
    1b7c:	8c 91       	ld	r24, X
    1b7e:	92 2f       	mov	r25, r18
    1b80:	90 95       	com	r25
    1b82:	89 23       	and	r24, r25
    1b84:	8c 93       	st	X, r24
    1b86:	88 81       	ld	r24, Y
    1b88:	82 2b       	or	r24, r18
    1b8a:	88 83       	st	Y, r24
    1b8c:	3f bf       	out	0x3f, r19	; 63
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	08 95       	ret

00001b94 <LED_set>:
    1b94:	1f 93       	push	r17
    1b96:	cf 93       	push	r28
    1b98:	df 93       	push	r29
    1b9a:	ec 01       	movw	r28, r24
    1b9c:	16 2f       	mov	r17, r22
    1b9e:	88 81       	ld	r24, Y
    1ba0:	99 81       	ldd	r25, Y+1	; 0x01
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	a9 f0       	breq	.+42     	; 0x1bd0 <LED_set+0x3c>
    1ba6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ba8:	30 fd       	sbrc	r19, 0
    1baa:	05 c0       	rjmp	.+10     	; 0x1bb6 <LED_set+0x22>
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	66 23       	and	r22, r22
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <LED_set+0x20>
    1bb2:	21 e0       	ldi	r18, 0x01	; 1
    1bb4:	12 2f       	mov	r17, r18
    1bb6:	31 fd       	sbrc	r19, 1
    1bb8:	06 c0       	rjmp	.+12     	; 0x1bc6 <LED_set+0x32>
    1bba:	61 2f       	mov	r22, r17
    1bbc:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <pin_make_output>
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	82 60       	ori	r24, 0x02	; 2
    1bc4:	8a 83       	std	Y+2, r24	; 0x02
    1bc6:	88 81       	ld	r24, Y
    1bc8:	99 81       	ldd	r25, Y+1	; 0x01
    1bca:	61 2f       	mov	r22, r17
    1bcc:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <pin_set>
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	08 95       	ret

00001bd8 <main>:
    1bd8:	0e 94 6f 08 	call	0x10de	; 0x10de <registerLED>
    1bdc:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__initTimers>
    1be0:	0e 94 65 09 	call	0x12ca	; 0x12ca <__clockInit>
    1be4:	78 94       	sei
    1be6:	0e 94 85 08 	call	0x110a	; 0x110a <sysInitHardware>
    1bea:	0e 94 2e 03 	call	0x65c	; 0x65c <appInitHardware>
    1bee:	0e 94 48 09 	call	0x1290	; 0x1290 <clockGetus>
    1bf2:	60 93 1c 04 	sts	0x041C, r22
    1bf6:	70 93 1d 04 	sts	0x041D, r23
    1bfa:	80 93 1e 04 	sts	0x041E, r24
    1bfe:	90 93 1f 04 	sts	0x041F, r25
    1c02:	0e 94 04 03 	call	0x608	; 0x608 <appInitSoftware>
    1c06:	60 93 20 04 	sts	0x0420, r22
    1c0a:	70 93 21 04 	sts	0x0421, r23
    1c0e:	80 93 22 04 	sts	0x0422, r24
    1c12:	90 93 23 04 	sts	0x0423, r25
    1c16:	78 94       	sei
    1c18:	0e 94 96 13 	call	0x272c	; 0x272c <breathe>
    1c1c:	80 91 20 04 	lds	r24, 0x0420
    1c20:	90 91 21 04 	lds	r25, 0x0421
    1c24:	a0 91 22 04 	lds	r26, 0x0422
    1c28:	b0 91 23 04 	lds	r27, 0x0423
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	a1 05       	cpc	r26, r1
    1c30:	b1 05       	cpc	r27, r1
    1c32:	19 f4       	brne	.+6      	; 0x1c3a <main+0x62>
    1c34:	16 c0       	rjmp	.+44     	; 0x1c62 <main+0x8a>
    1c36:	0e 94 96 13 	call	0x272c	; 0x272c <breathe>
    1c3a:	60 91 1c 04 	lds	r22, 0x041C
    1c3e:	70 91 1d 04 	lds	r23, 0x041D
    1c42:	80 91 1e 04 	lds	r24, 0x041E
    1c46:	90 91 1f 04 	lds	r25, 0x041F
    1c4a:	20 91 20 04 	lds	r18, 0x0420
    1c4e:	30 91 21 04 	lds	r19, 0x0421
    1c52:	40 91 22 04 	lds	r20, 0x0422
    1c56:	50 91 23 04 	lds	r21, 0x0423
    1c5a:	0e 94 4b 13 	call	0x2696	; 0x2696 <clockHasElapsed>
    1c5e:	88 23       	and	r24, r24
    1c60:	51 f3       	breq	.-44     	; 0x1c36 <main+0x5e>
    1c62:	0e 94 48 09 	call	0x1290	; 0x1290 <clockGetus>
    1c66:	9b 01       	movw	r18, r22
    1c68:	ac 01       	movw	r20, r24
    1c6a:	60 93 1c 04 	sts	0x041C, r22
    1c6e:	70 93 1d 04 	sts	0x041D, r23
    1c72:	80 93 1e 04 	sts	0x041E, r24
    1c76:	90 93 1f 04 	sts	0x041F, r25
    1c7a:	60 91 18 04 	lds	r22, 0x0418
    1c7e:	70 91 19 04 	lds	r23, 0x0419
    1c82:	80 91 1a 04 	lds	r24, 0x041A
    1c86:	90 91 1b 04 	lds	r25, 0x041B
    1c8a:	6f 5f       	subi	r22, 0xFF	; 255
    1c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c90:	9f 4f       	sbci	r25, 0xFF	; 255
    1c92:	60 93 18 04 	sts	0x0418, r22
    1c96:	70 93 19 04 	sts	0x0419, r23
    1c9a:	80 93 1a 04 	sts	0x041A, r24
    1c9e:	90 93 1b 04 	sts	0x041B, r25
    1ca2:	0e 94 c9 02 	call	0x592	; 0x592 <appControl>
    1ca6:	af cf       	rjmp	.-162    	; 0x1c06 <main+0x2e>

00001ca8 <marqueeSendByte>:
    1ca8:	cf 92       	push	r12
    1caa:	df 92       	push	r13
    1cac:	ef 92       	push	r14
    1cae:	ff 92       	push	r15
    1cb0:	0f 93       	push	r16
    1cb2:	1f 93       	push	r17
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	ec 01       	movw	r28, r24
    1cba:	d6 2e       	mov	r13, r22
    1cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc0:	89 2b       	or	r24, r25
    1cc2:	a9 f5       	brne	.+106    	; 0x1d2e <marqueeSendByte+0x86>
    1cc4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cc6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cc8:	01 96       	adiw	r24, 0x01	; 1
    1cca:	0e 94 27 19 	call	0x324e	; 0x324e <malloc>
    1cce:	9d 83       	std	Y+5, r25	; 0x05
    1cd0:	8c 83       	std	Y+4, r24	; 0x04
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	61 f1       	breq	.+88     	; 0x1d2e <marqueeSendByte+0x86>
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	07 c0       	rjmp	.+14     	; 0x1cea <marqueeSendByte+0x42>
    1cdc:	ec 81       	ldd	r30, Y+4	; 0x04
    1cde:	fd 81       	ldd	r31, Y+5	; 0x05
    1ce0:	e2 0f       	add	r30, r18
    1ce2:	f3 1f       	adc	r31, r19
    1ce4:	10 82       	st	Z, r1
    1ce6:	2f 5f       	subi	r18, 0xFF	; 255
    1ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cea:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cec:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cee:	82 17       	cp	r24, r18
    1cf0:	93 07       	cpc	r25, r19
    1cf2:	a0 f7       	brcc	.-24     	; 0x1cdc <marqueeSendByte+0x34>
    1cf4:	19 86       	std	Y+9, r1	; 0x09
    1cf6:	18 86       	std	Y+8, r1	; 0x08
    1cf8:	1f 82       	std	Y+7, r1	; 0x07
    1cfa:	1e 82       	std	Y+6, r1	; 0x06
    1cfc:	8c 89       	ldd	r24, Y+20	; 0x14
    1cfe:	8e 7f       	andi	r24, 0xFE	; 254
    1d00:	8c 8b       	std	Y+20, r24	; 0x14
    1d02:	00 e0       	ldi	r16, 0x00	; 0
    1d04:	10 e0       	ldi	r17, 0x00	; 0
    1d06:	0e c0       	rjmp	.+28     	; 0x1d24 <marqueeSendByte+0x7c>
    1d08:	c8 01       	movw	r24, r16
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	e8 81       	ld	r30, Y
    1d10:	f9 81       	ldd	r31, Y+1	; 0x01
    1d12:	e8 0f       	add	r30, r24
    1d14:	f9 1f       	adc	r31, r25
    1d16:	85 91       	lpm	r24, Z+
    1d18:	94 91       	lpm	r25, Z+
    1d1a:	60 e2       	ldi	r22, 0x20	; 32
    1d1c:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <segled_put_char>
    1d20:	0f 5f       	subi	r16, 0xFF	; 255
    1d22:	1f 4f       	sbci	r17, 0xFF	; 255
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	9b 81       	ldd	r25, Y+3	; 0x03
    1d28:	08 17       	cp	r16, r24
    1d2a:	19 07       	cpc	r17, r25
    1d2c:	68 f3       	brcs	.-38     	; 0x1d08 <marqueeSendByte+0x60>
    1d2e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d30:	fd 81       	ldd	r31, Y+5	; 0x05
    1d32:	30 97       	sbiw	r30, 0x00	; 0
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <marqueeSendByte+0x90>
    1d36:	3e c0       	rjmp	.+124    	; 0x1db4 <marqueeSendByte+0x10c>
    1d38:	8a e0       	ldi	r24, 0x0A	; 10
    1d3a:	d8 16       	cp	r13, r24
    1d3c:	19 f5       	brne	.+70     	; 0x1d84 <marqueeSendByte+0xdc>
    1d3e:	88 85       	ldd	r24, Y+8	; 0x08
    1d40:	99 85       	ldd	r25, Y+9	; 0x09
    1d42:	e8 0f       	add	r30, r24
    1d44:	f9 1f       	adc	r31, r25
    1d46:	10 82       	st	Z, r1
    1d48:	19 86       	std	Y+9, r1	; 0x09
    1d4a:	18 86       	std	Y+8, r1	; 0x08
    1d4c:	cf b6       	in	r12, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	8c 89       	ldd	r24, Y+20	; 0x14
    1d52:	80 fd       	sbrc	r24, 0
    1d54:	15 c0       	rjmp	.+42     	; 0x1d80 <marqueeSendByte+0xd8>
    1d56:	8c 89       	ldd	r24, Y+20	; 0x14
    1d58:	81 60       	ori	r24, 0x01	; 1
    1d5a:	8c 8b       	std	Y+20, r24	; 0x14
    1d5c:	8c 89       	ldd	r24, Y+20	; 0x14
    1d5e:	8d 7f       	andi	r24, 0xFD	; 253
    1d60:	8c 8b       	std	Y+20, r24	; 0x14
    1d62:	1f 82       	std	Y+7, r1	; 0x07
    1d64:	1e 82       	std	Y+6, r1	; 0x06
    1d66:	0e 94 48 09 	call	0x1290	; 0x1290 <clockGetus>
    1d6a:	9b 01       	movw	r18, r22
    1d6c:	ac 01       	movw	r20, r24
    1d6e:	ec 84       	ldd	r14, Y+12	; 0x0c
    1d70:	fd 84       	ldd	r15, Y+13	; 0x0d
    1d72:	0e 85       	ldd	r16, Y+14	; 0x0e
    1d74:	1f 85       	ldd	r17, Y+15	; 0x0f
    1d76:	84 ee       	ldi	r24, 0xE4	; 228
    1d78:	9e e0       	ldi	r25, 0x0E	; 14
    1d7a:	be 01       	movw	r22, r28
    1d7c:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <scheduleJob>
    1d80:	cf be       	out	0x3f, r12	; 63
    1d82:	18 c0       	rjmp	.+48     	; 0x1db4 <marqueeSendByte+0x10c>
    1d84:	8d e0       	ldi	r24, 0x0D	; 13
    1d86:	d8 16       	cp	r13, r24
    1d88:	a9 f0       	breq	.+42     	; 0x1db4 <marqueeSendByte+0x10c>
    1d8a:	28 85       	ldd	r18, Y+8	; 0x08
    1d8c:	39 85       	ldd	r19, Y+9	; 0x09
    1d8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d90:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d92:	28 17       	cp	r18, r24
    1d94:	39 07       	cpc	r19, r25
    1d96:	70 f4       	brcc	.+28     	; 0x1db4 <marqueeSendByte+0x10c>
    1d98:	e2 0f       	add	r30, r18
    1d9a:	f3 1f       	adc	r31, r19
    1d9c:	2f b7       	in	r18, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	d0 82       	st	Z, r13
    1da2:	11 82       	std	Z+1, r1	; 0x01
    1da4:	88 85       	ldd	r24, Y+8	; 0x08
    1da6:	99 85       	ldd	r25, Y+9	; 0x09
    1da8:	01 96       	adiw	r24, 0x01	; 1
    1daa:	99 87       	std	Y+9, r25	; 0x09
    1dac:	88 87       	std	Y+8, r24	; 0x08
    1dae:	1f 82       	std	Y+7, r1	; 0x07
    1db0:	1e 82       	std	Y+6, r1	; 0x06
    1db2:	2f bf       	out	0x3f, r18	; 63
    1db4:	8d 2d       	mov	r24, r13
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	1f 91       	pop	r17
    1dbc:	0f 91       	pop	r16
    1dbe:	ff 90       	pop	r15
    1dc0:	ef 90       	pop	r14
    1dc2:	df 90       	pop	r13
    1dc4:	cf 90       	pop	r12
    1dc6:	08 95       	ret

00001dc8 <marqueeUpdate>:
    1dc8:	2f 92       	push	r2
    1dca:	3f 92       	push	r3
    1dcc:	4f 92       	push	r4
    1dce:	5f 92       	push	r5
    1dd0:	6f 92       	push	r6
    1dd2:	7f 92       	push	r7
    1dd4:	8f 92       	push	r8
    1dd6:	9f 92       	push	r9
    1dd8:	af 92       	push	r10
    1dda:	bf 92       	push	r11
    1ddc:	cf 92       	push	r12
    1dde:	df 92       	push	r13
    1de0:	ef 92       	push	r14
    1de2:	ff 92       	push	r15
    1de4:	0f 93       	push	r16
    1de6:	1f 93       	push	r17
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
    1dec:	38 2e       	mov	r3, r24
    1dee:	29 2e       	mov	r2, r25
    1df0:	2a 01       	movw	r4, r20
    1df2:	3b 01       	movw	r6, r22
    1df4:	c8 2f       	mov	r28, r24
    1df6:	d9 2f       	mov	r29, r25
    1df8:	0c 81       	ldd	r16, Y+4	; 0x04
    1dfa:	1d 81       	ldd	r17, Y+5	; 0x05
    1dfc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dfe:	9f 81       	ldd	r25, Y+7	; 0x07
    1e00:	08 0f       	add	r16, r24
    1e02:	19 1f       	adc	r17, r25
    1e04:	f8 01       	movw	r30, r16
    1e06:	80 80       	ld	r8, Z
    1e08:	8c 89       	ldd	r24, Y+20	; 0x14
    1e0a:	86 95       	lsr	r24
    1e0c:	81 70       	andi	r24, 0x01	; 1
    1e0e:	88 20       	and	r8, r8
    1e10:	29 f4       	brne	.+10     	; 0x1e1c <marqueeUpdate+0x54>
    1e12:	a8 88       	ldd	r10, Y+16	; 0x10
    1e14:	b9 88       	ldd	r11, Y+17	; 0x11
    1e16:	ca 88       	ldd	r12, Y+18	; 0x12
    1e18:	db 88       	ldd	r13, Y+19	; 0x13
    1e1a:	04 c0       	rjmp	.+8      	; 0x1e24 <marqueeUpdate+0x5c>
    1e1c:	ac 84       	ldd	r10, Y+12	; 0x0c
    1e1e:	bd 84       	ldd	r11, Y+13	; 0x0d
    1e20:	ce 84       	ldd	r12, Y+14	; 0x0e
    1e22:	df 84       	ldd	r13, Y+15	; 0x0f
    1e24:	88 23       	and	r24, r24
    1e26:	d1 f4       	brne	.+52     	; 0x1e5c <marqueeUpdate+0x94>
    1e28:	88 20       	and	r8, r8
    1e2a:	c1 f0       	breq	.+48     	; 0x1e5c <marqueeUpdate+0x94>
    1e2c:	f8 01       	movw	r30, r16
    1e2e:	32 91       	ld	r19, -Z
    1e30:	8f 01       	movw	r16, r30
    1e32:	0f 5f       	subi	r16, 0xFF	; 255
    1e34:	1f 4f       	sbci	r17, 0xFF	; 255
    1e36:	4a 81       	ldd	r20, Y+2	; 0x02
    1e38:	5b 81       	ldd	r21, Y+3	; 0x03
    1e3a:	f8 01       	movw	r30, r16
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	07 c0       	rjmp	.+14     	; 0x1e50 <marqueeUpdate+0x88>
    1e42:	20 81       	ld	r18, Z
    1e44:	22 23       	and	r18, r18
    1e46:	51 f0       	breq	.+20     	; 0x1e5c <marqueeUpdate+0x94>
    1e48:	23 17       	cp	r18, r19
    1e4a:	41 f4       	brne	.+16     	; 0x1e5c <marqueeUpdate+0x94>
    1e4c:	31 96       	adiw	r30, 0x01	; 1
    1e4e:	01 96       	adiw	r24, 0x01	; 1
    1e50:	84 17       	cp	r24, r20
    1e52:	95 07       	cpc	r25, r21
    1e54:	b0 f3       	brcs	.-20     	; 0x1e42 <marqueeUpdate+0x7a>
    1e56:	99 24       	eor	r9, r9
    1e58:	9a 94       	dec	r9
    1e5a:	01 c0       	rjmp	.+2      	; 0x1e5e <marqueeUpdate+0x96>
    1e5c:	99 24       	eor	r9, r9
    1e5e:	8c 89       	ldd	r24, Y+20	; 0x14
    1e60:	86 95       	lsr	r24
    1e62:	81 70       	andi	r24, 0x01	; 1
    1e64:	29 2d       	mov	r18, r9
    1e66:	33 27       	eor	r19, r19
    1e68:	27 fd       	sbrc	r18, 7
    1e6a:	30 95       	com	r19
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	28 17       	cp	r18, r24
    1e70:	39 07       	cpc	r19, r25
    1e72:	c1 f0       	breq	.+48     	; 0x1ea4 <marqueeUpdate+0xdc>
    1e74:	a6 01       	movw	r20, r12
    1e76:	95 01       	movw	r18, r10
    1e78:	62 e0       	ldi	r22, 0x02	; 2
    1e7a:	56 95       	lsr	r21
    1e7c:	47 95       	ror	r20
    1e7e:	37 95       	ror	r19
    1e80:	27 95       	ror	r18
    1e82:	6a 95       	dec	r22
    1e84:	d1 f7       	brne	.-12     	; 0x1e7a <marqueeUpdate+0xb2>
    1e86:	99 2d       	mov	r25, r9
    1e88:	92 70       	andi	r25, 0x02	; 2
    1e8a:	8c 89       	ldd	r24, Y+20	; 0x14
    1e8c:	8d 7f       	andi	r24, 0xFD	; 253
    1e8e:	89 2b       	or	r24, r25
    1e90:	8c 8b       	std	Y+20, r24	; 0x14
    1e92:	99 20       	and	r9, r9
    1e94:	19 f0       	breq	.+6      	; 0x1e9c <marqueeUpdate+0xd4>
    1e96:	59 01       	movw	r10, r18
    1e98:	6a 01       	movw	r12, r20
    1e9a:	04 c0       	rjmp	.+8      	; 0x1ea4 <marqueeUpdate+0xdc>
    1e9c:	a2 1a       	sub	r10, r18
    1e9e:	b3 0a       	sbc	r11, r19
    1ea0:	c4 0a       	sbc	r12, r20
    1ea2:	d5 0a       	sbc	r13, r21
    1ea4:	ee 24       	eor	r14, r14
    1ea6:	ff 24       	eor	r15, r15
    1ea8:	18 c0       	rjmp	.+48     	; 0x1eda <marqueeUpdate+0x112>
    1eaa:	c7 01       	movw	r24, r14
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	e8 81       	ld	r30, Y
    1eb2:	f9 81       	ldd	r31, Y+1	; 0x01
    1eb4:	e8 0f       	add	r30, r24
    1eb6:	f9 1f       	adc	r31, r25
    1eb8:	85 91       	lpm	r24, Z+
    1eba:	94 91       	lpm	r25, Z+
    1ebc:	99 20       	and	r9, r9
    1ebe:	39 f4       	brne	.+14     	; 0x1ece <marqueeUpdate+0x106>
    1ec0:	f8 01       	movw	r30, r16
    1ec2:	60 81       	ld	r22, Z
    1ec4:	66 23       	and	r22, r22
    1ec6:	19 f0       	breq	.+6      	; 0x1ece <marqueeUpdate+0x106>
    1ec8:	0f 5f       	subi	r16, 0xFF	; 255
    1eca:	1f 4f       	sbci	r17, 0xFF	; 255
    1ecc:	01 c0       	rjmp	.+2      	; 0x1ed0 <marqueeUpdate+0x108>
    1ece:	60 e2       	ldi	r22, 0x20	; 32
    1ed0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <segled_put_char>
    1ed4:	08 94       	sec
    1ed6:	e1 1c       	adc	r14, r1
    1ed8:	f1 1c       	adc	r15, r1
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ede:	e8 16       	cp	r14, r24
    1ee0:	f9 06       	cpc	r15, r25
    1ee2:	18 f3       	brcs	.-58     	; 0x1eaa <marqueeUpdate+0xe2>
    1ee4:	88 20       	and	r8, r8
    1ee6:	b1 f4       	brne	.+44     	; 0x1f14 <marqueeUpdate+0x14c>
    1ee8:	1f 82       	std	Y+7, r1	; 0x07
    1eea:	1e 82       	std	Y+6, r1	; 0x06
    1eec:	88 89       	ldd	r24, Y+16	; 0x10
    1eee:	99 89       	ldd	r25, Y+17	; 0x11
    1ef0:	aa 89       	ldd	r26, Y+18	; 0x12
    1ef2:	bb 89       	ldd	r27, Y+19	; 0x13
    1ef4:	00 97       	sbiw	r24, 0x00	; 0
    1ef6:	a1 05       	cpc	r26, r1
    1ef8:	b1 05       	cpc	r27, r1
    1efa:	29 f0       	breq	.+10     	; 0x1f06 <marqueeUpdate+0x13e>
    1efc:	ec 81       	ldd	r30, Y+4	; 0x04
    1efe:	fd 81       	ldd	r31, Y+5	; 0x05
    1f00:	80 81       	ld	r24, Z
    1f02:	88 23       	and	r24, r24
    1f04:	19 f4       	brne	.+6      	; 0x1f0c <marqueeUpdate+0x144>
    1f06:	8c 89       	ldd	r24, Y+20	; 0x14
    1f08:	8e 7f       	andi	r24, 0xFE	; 254
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <marqueeUpdate+0x148>
    1f0c:	8c 89       	ldd	r24, Y+20	; 0x14
    1f0e:	8d 7f       	andi	r24, 0xFD	; 253
    1f10:	8c 8b       	std	Y+20, r24	; 0x14
    1f12:	07 c0       	rjmp	.+14     	; 0x1f22 <marqueeUpdate+0x15a>
    1f14:	99 20       	and	r9, r9
    1f16:	29 f4       	brne	.+10     	; 0x1f22 <marqueeUpdate+0x15a>
    1f18:	8e 81       	ldd	r24, Y+6	; 0x06
    1f1a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f1c:	01 96       	adiw	r24, 0x01	; 1
    1f1e:	9f 83       	std	Y+7, r25	; 0x07
    1f20:	8e 83       	std	Y+6, r24	; 0x06
    1f22:	8c 89       	ldd	r24, Y+20	; 0x14
    1f24:	80 ff       	sbrs	r24, 0
    1f26:	0a c0       	rjmp	.+20     	; 0x1f3c <marqueeUpdate+0x174>
    1f28:	84 ee       	ldi	r24, 0xE4	; 228
    1f2a:	9e e0       	ldi	r25, 0x0E	; 14
    1f2c:	63 2d       	mov	r22, r3
    1f2e:	72 2d       	mov	r23, r2
    1f30:	a3 01       	movw	r20, r6
    1f32:	92 01       	movw	r18, r4
    1f34:	86 01       	movw	r16, r12
    1f36:	75 01       	movw	r14, r10
    1f38:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <scheduleJob>
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	ff 90       	pop	r15
    1f46:	ef 90       	pop	r14
    1f48:	df 90       	pop	r13
    1f4a:	cf 90       	pop	r12
    1f4c:	bf 90       	pop	r11
    1f4e:	af 90       	pop	r10
    1f50:	9f 90       	pop	r9
    1f52:	8f 90       	pop	r8
    1f54:	7f 90       	pop	r7
    1f56:	6f 90       	pop	r6
    1f58:	5f 90       	pop	r5
    1f5a:	4f 90       	pop	r4
    1f5c:	3f 90       	pop	r3
    1f5e:	2f 90       	pop	r2
    1f60:	08 95       	ret

00001f62 <segled_put_char>:
    1f62:	ef 92       	push	r14
    1f64:	ff 92       	push	r15
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	8c 01       	movw	r16, r24
    1f70:	e6 2e       	mov	r14, r22
    1f72:	fc 01       	movw	r30, r24
    1f74:	80 89       	ldd	r24, Z+16	; 0x10
    1f76:	81 fd       	sbrc	r24, 1
    1f78:	12 c0       	rjmp	.+36     	; 0x1f9e <segled_put_char+0x3c>
    1f7a:	c0 e0       	ldi	r28, 0x00	; 0
    1f7c:	d0 e0       	ldi	r29, 0x00	; 0
    1f7e:	f8 01       	movw	r30, r16
    1f80:	ec 0f       	add	r30, r28
    1f82:	fd 1f       	adc	r31, r29
    1f84:	80 81       	ld	r24, Z
    1f86:	91 81       	ldd	r25, Z+1	; 0x01
    1f88:	60 e0       	ldi	r22, 0x00	; 0
    1f8a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <pin_make_output>
    1f8e:	22 96       	adiw	r28, 0x02	; 2
    1f90:	c0 31       	cpi	r28, 0x10	; 16
    1f92:	d1 05       	cpc	r29, r1
    1f94:	a1 f7       	brne	.-24     	; 0x1f7e <segled_put_char+0x1c>
    1f96:	f8 01       	movw	r30, r16
    1f98:	80 89       	ldd	r24, Z+16	; 0x10
    1f9a:	82 60       	ori	r24, 0x02	; 2
    1f9c:	80 8b       	std	Z+16, r24	; 0x10
    1f9e:	8e 2d       	mov	r24, r14
    1fa0:	0e 94 37 10 	call	0x206e	; 0x206e <segled8_get_mask>
    1fa4:	f8 2e       	mov	r15, r24
    1fa6:	80 ff       	sbrs	r24, 0
    1fa8:	07 c0       	rjmp	.+14     	; 0x1fb8 <segled_put_char+0x56>
    1faa:	f8 01       	movw	r30, r16
    1fac:	86 85       	ldd	r24, Z+14	; 0x0e
    1fae:	97 85       	ldd	r25, Z+15	; 0x0f
    1fb0:	89 2b       	or	r24, r25
    1fb2:	11 f4       	brne	.+4      	; 0x1fb8 <segled_put_char+0x56>
    1fb4:	80 e1       	ldi	r24, 0x10	; 16
    1fb6:	f8 2e       	mov	r15, r24
    1fb8:	f8 01       	movw	r30, r16
    1fba:	80 89       	ldd	r24, Z+16	; 0x10
    1fbc:	80 ff       	sbrs	r24, 0
    1fbe:	f0 94       	com	r15
    1fc0:	c0 e0       	ldi	r28, 0x00	; 0
    1fc2:	d0 e0       	ldi	r29, 0x00	; 0
    1fc4:	f8 01       	movw	r30, r16
    1fc6:	ec 0f       	add	r30, r28
    1fc8:	fd 1f       	adc	r31, r29
    1fca:	80 81       	ld	r24, Z
    1fcc:	91 81       	ldd	r25, Z+1	; 0x01
    1fce:	f7 fe       	sbrs	r15, 7
    1fd0:	03 c0       	rjmp	.+6      	; 0x1fd8 <segled_put_char+0x76>
    1fd2:	0e 94 c6 13 	call	0x278c	; 0x278c <pin_high>
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <segled_put_char+0x7a>
    1fd8:	0e 94 a1 13 	call	0x2742	; 0x2742 <pin_low>
    1fdc:	22 96       	adiw	r28, 0x02	; 2
    1fde:	c0 31       	cpi	r28, 0x10	; 16
    1fe0:	d1 05       	cpc	r29, r1
    1fe2:	11 f0       	breq	.+4      	; 0x1fe8 <segled_put_char+0x86>
    1fe4:	ff 0c       	add	r15, r15
    1fe6:	ee cf       	rjmp	.-36     	; 0x1fc4 <segled_put_char+0x62>
    1fe8:	8e 2d       	mov	r24, r14
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	ff 90       	pop	r15
    1ff4:	ef 90       	pop	r14
    1ff6:	08 95       	ret

00001ff8 <segled_set>:
    1ff8:	ef 92       	push	r14
    1ffa:	ff 92       	push	r15
    1ffc:	0f 93       	push	r16
    1ffe:	1f 93       	push	r17
    2000:	cf 93       	push	r28
    2002:	df 93       	push	r29
    2004:	8c 01       	movw	r16, r24
    2006:	e6 2e       	mov	r14, r22
    2008:	f4 2e       	mov	r15, r20
    200a:	fc 01       	movw	r30, r24
    200c:	80 89       	ldd	r24, Z+16	; 0x10
    200e:	81 fd       	sbrc	r24, 1
    2010:	12 c0       	rjmp	.+36     	; 0x2036 <segled_set+0x3e>
    2012:	c0 e0       	ldi	r28, 0x00	; 0
    2014:	d0 e0       	ldi	r29, 0x00	; 0
    2016:	f8 01       	movw	r30, r16
    2018:	ec 0f       	add	r30, r28
    201a:	fd 1f       	adc	r31, r29
    201c:	80 81       	ld	r24, Z
    201e:	91 81       	ldd	r25, Z+1	; 0x01
    2020:	60 e0       	ldi	r22, 0x00	; 0
    2022:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <pin_make_output>
    2026:	22 96       	adiw	r28, 0x02	; 2
    2028:	c0 31       	cpi	r28, 0x10	; 16
    202a:	d1 05       	cpc	r29, r1
    202c:	a1 f7       	brne	.-24     	; 0x2016 <segled_set+0x1e>
    202e:	f8 01       	movw	r30, r16
    2030:	80 89       	ldd	r24, Z+16	; 0x10
    2032:	82 60       	ori	r24, 0x02	; 2
    2034:	80 8b       	std	Z+16, r24	; 0x10
    2036:	f8 01       	movw	r30, r16
    2038:	80 89       	ldd	r24, Z+16	; 0x10
    203a:	80 fd       	sbrc	r24, 0
    203c:	06 c0       	rjmp	.+12     	; 0x204a <segled_set+0x52>
    203e:	ff 20       	and	r15, r15
    2040:	19 f4       	brne	.+6      	; 0x2048 <segled_set+0x50>
    2042:	ff 24       	eor	r15, r15
    2044:	fa 94       	dec	r15
    2046:	01 c0       	rjmp	.+2      	; 0x204a <segled_set+0x52>
    2048:	ff 24       	eor	r15, r15
    204a:	ee 2d       	mov	r30, r14
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	ee 0f       	add	r30, r30
    2050:	ff 1f       	adc	r31, r31
    2052:	e0 0f       	add	r30, r16
    2054:	f1 1f       	adc	r31, r17
    2056:	80 81       	ld	r24, Z
    2058:	91 81       	ldd	r25, Z+1	; 0x01
    205a:	6f 2d       	mov	r22, r15
    205c:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <pin_set>
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	ff 90       	pop	r15
    206a:	ef 90       	pop	r14
    206c:	08 95       	ret

0000206e <segled8_get_mask>:
    206e:	e8 2f       	mov	r30, r24
    2070:	81 54       	subi	r24, 0x41	; 65
    2072:	8a 31       	cpi	r24, 0x1A	; 26
    2074:	28 f4       	brcc	.+10     	; 0x2080 <segled8_get_mask+0x12>
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	e3 5a       	subi	r30, 0xA3	; 163
    207a:	fc 4f       	sbci	r31, 0xFC	; 252
    207c:	84 91       	lpm	r24, Z+
    207e:	08 95       	ret
    2080:	8e 2f       	mov	r24, r30
    2082:	81 56       	subi	r24, 0x61	; 97
    2084:	8a 31       	cpi	r24, 0x1A	; 26
    2086:	28 f4       	brcc	.+10     	; 0x2092 <segled8_get_mask+0x24>
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	e3 5c       	subi	r30, 0xC3	; 195
    208c:	fc 4f       	sbci	r31, 0xFC	; 252
    208e:	84 91       	lpm	r24, Z+
    2090:	08 95       	ret
    2092:	8e 2f       	mov	r24, r30
    2094:	80 53       	subi	r24, 0x30	; 48
    2096:	8a 30       	cpi	r24, 0x0A	; 10
    2098:	28 f4       	brcc	.+10     	; 0x20a4 <segled8_get_mask+0x36>
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	e8 57       	subi	r30, 0x78	; 120
    209e:	fc 4f       	sbci	r31, 0xFC	; 252
    20a0:	84 91       	lpm	r24, Z+
    20a2:	08 95       	ret
    20a4:	ea 30       	cpi	r30, 0x0A	; 10
    20a6:	28 f4       	brcc	.+10     	; 0x20b2 <segled8_get_mask+0x44>
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	e8 54       	subi	r30, 0x48	; 72
    20ac:	fc 4f       	sbci	r31, 0xFC	; 252
    20ae:	84 91       	lpm	r24, Z+
    20b0:	08 95       	ret
    20b2:	ed 32       	cpi	r30, 0x2D	; 45
    20b4:	11 f4       	brne	.+4      	; 0x20ba <segled8_get_mask+0x4c>
    20b6:	82 e0       	ldi	r24, 0x02	; 2
    20b8:	08 95       	ret
    20ba:	eb 35       	cpi	r30, 0x5B	; 91
    20bc:	79 f0       	breq	.+30     	; 0x20dc <segled8_get_mask+0x6e>
    20be:	eb 37       	cpi	r30, 0x7B	; 123
    20c0:	69 f0       	breq	.+26     	; 0x20dc <segled8_get_mask+0x6e>
    20c2:	e8 32       	cpi	r30, 0x28	; 40
    20c4:	59 f0       	breq	.+22     	; 0x20dc <segled8_get_mask+0x6e>
    20c6:	ed 35       	cpi	r30, 0x5D	; 93
    20c8:	59 f0       	breq	.+22     	; 0x20e0 <segled8_get_mask+0x72>
    20ca:	ed 37       	cpi	r30, 0x7D	; 125
    20cc:	49 f0       	breq	.+18     	; 0x20e0 <segled8_get_mask+0x72>
    20ce:	e9 32       	cpi	r30, 0x29	; 41
    20d0:	39 f0       	breq	.+14     	; 0x20e0 <segled8_get_mask+0x72>
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	ee 32       	cpi	r30, 0x2E	; 46
    20d6:	29 f4       	brne	.+10     	; 0x20e2 <segled8_get_mask+0x74>
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	08 95       	ret
    20dc:	8c e9       	ldi	r24, 0x9C	; 156
    20de:	08 95       	ret
    20e0:	80 ef       	ldi	r24, 0xF0	; 240
    20e2:	08 95       	ret

000020e4 <compareFromIOPin>:
    20e4:	bf 92       	push	r11
    20e6:	cf 92       	push	r12
    20e8:	df 92       	push	r13
    20ea:	ef 92       	push	r14
    20ec:	ff 92       	push	r15
    20ee:	0f 93       	push	r16
    20f0:	1f 93       	push	r17
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	6c 01       	movw	r12, r24
    20f8:	b0 90 be 02 	lds	r11, 0x02BE
    20fc:	24 ef       	ldi	r18, 0xF4	; 244
    20fe:	31 e0       	ldi	r19, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	c0 e0       	ldi	r28, 0x00	; 0
    2104:	d0 e0       	ldi	r29, 0x00	; 0
    2106:	2d c0       	rjmp	.+90     	; 0x2162 <compareFromIOPin+0x7e>
    2108:	28 5f       	subi	r18, 0xF8	; 248
    210a:	3f 4f       	sbci	r19, 0xFF	; 255
    210c:	f9 01       	movw	r30, r18
    210e:	e4 90       	lpm	r14, Z+
    2110:	28 50       	subi	r18, 0x08	; 8
    2112:	30 40       	sbci	r19, 0x00	; 0
    2114:	f9 01       	movw	r30, r18
    2116:	77 96       	adiw	r30, 0x17	; 23
    2118:	2a 5f       	subi	r18, 0xFA	; 250
    211a:	3f 4f       	sbci	r19, 0xFF	; 255
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	a0 e0       	ldi	r26, 0x00	; 0
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	05 91       	lpm	r16, Z+
    2124:	14 91       	lpm	r17, Z+
    2126:	f9 01       	movw	r30, r18
    2128:	f4 90       	lpm	r15, Z+
    212a:	26 50       	subi	r18, 0x06	; 6
    212c:	30 40       	sbci	r19, 0x00	; 0
    212e:	14 c0       	rjmp	.+40     	; 0x2158 <compareFromIOPin+0x74>
    2130:	b8 01       	movw	r22, r16
    2132:	6a 0f       	add	r22, r26
    2134:	7b 1f       	adc	r23, r27
    2136:	fb 01       	movw	r30, r22
    2138:	3e 96       	adiw	r30, 0x0e	; 14
    213a:	45 91       	lpm	r20, Z+
    213c:	54 91       	lpm	r21, Z+
    213e:	41 15       	cp	r20, r1
    2140:	51 05       	cpc	r21, r1
    2142:	41 f0       	breq	.+16     	; 0x2154 <compareFromIOPin+0x70>
    2144:	4c 15       	cp	r20, r12
    2146:	5d 05       	cpc	r21, r13
    2148:	29 f4       	brne	.+10     	; 0x2154 <compareFromIOPin+0x70>
    214a:	ff 20       	and	r15, r15
    214c:	11 f0       	breq	.+4      	; 0x2152 <compareFromIOPin+0x6e>
    214e:	eb 01       	movw	r28, r22
    2150:	0a c0       	rjmp	.+20     	; 0x2166 <compareFromIOPin+0x82>
    2152:	eb 01       	movw	r28, r22
    2154:	8f 5f       	subi	r24, 0xFF	; 255
    2156:	50 96       	adiw	r26, 0x10	; 16
    2158:	8e 15       	cp	r24, r14
    215a:	50 f3       	brcs	.-44     	; 0x2130 <compareFromIOPin+0x4c>
    215c:	9f 5f       	subi	r25, 0xFF	; 255
    215e:	24 5d       	subi	r18, 0xD4	; 212
    2160:	3f 4f       	sbci	r19, 0xFF	; 255
    2162:	9b 15       	cp	r25, r11
    2164:	88 f2       	brcs	.-94     	; 0x2108 <compareFromIOPin+0x24>
    2166:	ce 01       	movw	r24, r28
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	1f 91       	pop	r17
    216e:	0f 91       	pop	r16
    2170:	ff 90       	pop	r15
    2172:	ef 90       	pop	r14
    2174:	df 90       	pop	r13
    2176:	cf 90       	pop	r12
    2178:	bf 90       	pop	r11
    217a:	08 95       	ret

0000217c <compareSetOutputMode>:
    217c:	9c 01       	movw	r18, r24
    217e:	0b 96       	adiw	r24, 0x0b	; 11
    2180:	fc 01       	movw	r30, r24
    2182:	a5 91       	lpm	r26, Z+
    2184:	b4 91       	lpm	r27, Z+
    2186:	23 5f       	subi	r18, 0xF3	; 243
    2188:	3f 4f       	sbci	r19, 0xFF	; 255
    218a:	f9 01       	movw	r30, r18
    218c:	24 91       	lpm	r18, Z+
    218e:	70 e0       	ldi	r23, 0x00	; 0
    2190:	02 2e       	mov	r0, r18
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <compareSetOutputMode+0x1c>
    2194:	66 0f       	add	r22, r22
    2196:	77 1f       	adc	r23, r23
    2198:	0a 94       	dec	r0
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <compareSetOutputMode+0x18>
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <compareSetOutputMode+0x2a>
    21a2:	88 0f       	add	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	2a 95       	dec	r18
    21a8:	e2 f7       	brpl	.-8      	; 0x21a2 <compareSetOutputMode+0x26>
    21aa:	28 2f       	mov	r18, r24
    21ac:	22 0f       	add	r18, r18
    21ae:	28 2b       	or	r18, r24
    21b0:	9c 91       	ld	r25, X
    21b2:	82 2f       	mov	r24, r18
    21b4:	86 23       	and	r24, r22
    21b6:	20 95       	com	r18
    21b8:	29 23       	and	r18, r25
    21ba:	82 2b       	or	r24, r18
    21bc:	8c 93       	st	X, r24
    21be:	08 95       	ret

000021c0 <compareSetThreshold>:
    21c0:	cf 93       	push	r28
    21c2:	df 93       	push	r29
    21c4:	9c 01       	movw	r18, r24
    21c6:	2e 5f       	subi	r18, 0xFE	; 254
    21c8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ca:	f9 01       	movw	r30, r18
    21cc:	84 91       	lpm	r24, Z+
    21ce:	22 50       	subi	r18, 0x02	; 2
    21d0:	30 40       	sbci	r19, 0x00	; 0
    21d2:	9c e2       	ldi	r25, 0x2C	; 44
    21d4:	89 9f       	mul	r24, r25
    21d6:	a0 01       	movw	r20, r0
    21d8:	11 24       	eor	r1, r1
    21da:	4c 50       	subi	r20, 0x0C	; 12
    21dc:	5e 4f       	sbci	r21, 0xFE	; 254
    21de:	48 5f       	subi	r20, 0xF8	; 248
    21e0:	5f 4f       	sbci	r21, 0xFF	; 255
    21e2:	fa 01       	movw	r30, r20
    21e4:	84 91       	lpm	r24, Z+
    21e6:	48 50       	subi	r20, 0x08	; 8
    21e8:	50 40       	sbci	r21, 0x00	; 0
    21ea:	88 23       	and	r24, r24
    21ec:	c1 f0       	breq	.+48     	; 0x221e <__stack+0x1f>
    21ee:	c9 01       	movw	r24, r18
    21f0:	06 96       	adiw	r24, 0x06	; 6
    21f2:	fc 01       	movw	r30, r24
    21f4:	c5 91       	lpm	r28, Z+
    21f6:	d4 91       	lpm	r29, Z+
    21f8:	fa 01       	movw	r30, r20
    21fa:	36 96       	adiw	r30, 0x06	; 6
    21fc:	e4 91       	lpm	r30, Z+
    21fe:	ee 23       	and	r30, r30
    2200:	19 f0       	breq	.+6      	; 0x2208 <__stack+0x9>
    2202:	79 83       	std	Y+1, r23	; 0x01
    2204:	68 83       	st	Y, r22
    2206:	0e c0       	rjmp	.+28     	; 0x2224 <__stack+0x25>
    2208:	6f 3f       	cpi	r22, 0xFF	; 255
    220a:	71 05       	cpc	r23, r1
    220c:	31 f0       	breq	.+12     	; 0x221a <__stack+0x1b>
    220e:	28 f0       	brcs	.+10     	; 0x221a <__stack+0x1b>
    2210:	8e ef       	ldi	r24, 0xFE	; 254
    2212:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <setError>
    2216:	6f ef       	ldi	r22, 0xFF	; 255
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	68 83       	st	Y, r22
    221c:	03 c0       	rjmp	.+6      	; 0x2224 <__stack+0x25>
    221e:	8d ef       	ldi	r24, 0xFD	; 253
    2220:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <setError>
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	08 95       	ret

0000222a <_uartSetBaudRate>:
    222a:	dc 01       	movw	r26, r24
    222c:	19 96       	adiw	r26, 0x09	; 9
    222e:	8d 91       	ld	r24, X+
    2230:	9c 91       	ld	r25, X
    2232:	1a 97       	sbiw	r26, 0x0a	; 10
    2234:	fc 01       	movw	r30, r24
    2236:	25 91       	lpm	r18, Z+
    2238:	34 91       	lpm	r19, Z+
    223a:	cd 01       	movw	r24, r26
    223c:	f9 01       	movw	r30, r18
    223e:	09 95       	icall
    2240:	08 95       	ret

00002242 <_uartInit>:
    2242:	df 92       	push	r13
    2244:	ef 92       	push	r14
    2246:	ff 92       	push	r15
    2248:	0f 93       	push	r16
    224a:	1f 93       	push	r17
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	ec 01       	movw	r28, r24
    2252:	7a 01       	movw	r14, r20
    2254:	8b 01       	movw	r16, r22
    2256:	df b6       	in	r13, 0x3f	; 63
    2258:	f8 94       	cli
    225a:	2d 85       	ldd	r18, Y+13	; 0x0d
    225c:	3e 85       	ldd	r19, Y+14	; 0x0e
    225e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2260:	98 89       	ldd	r25, Y+16	; 0x10
    2262:	28 17       	cp	r18, r24
    2264:	39 07       	cpc	r19, r25
    2266:	11 f0       	breq	.+4      	; 0x226c <_uartInit+0x2a>
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	01 c0       	rjmp	.+2      	; 0x226e <_uartInit+0x2c>
    226c:	8f ef       	ldi	r24, 0xFF	; 255
    226e:	8f 8b       	std	Y+23, r24	; 0x17
    2270:	88 23       	and	r24, r24
    2272:	81 f0       	breq	.+32     	; 0x2294 <_uartInit+0x52>
    2274:	2d 85       	ldd	r18, Y+13	; 0x0d
    2276:	3e 85       	ldd	r19, Y+14	; 0x0e
    2278:	8f 85       	ldd	r24, Y+15	; 0x0f
    227a:	98 89       	ldd	r25, Y+16	; 0x10
    227c:	28 17       	cp	r18, r24
    227e:	39 07       	cpc	r19, r25
    2280:	21 f0       	breq	.+8      	; 0x228a <_uartInit+0x48>
    2282:	c9 01       	movw	r24, r18
    2284:	60 e0       	ldi	r22, 0x00	; 0
    2286:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <pin_make_input>
    228a:	8f 85       	ldd	r24, Y+15	; 0x0f
    228c:	98 89       	ldd	r25, Y+16	; 0x10
    228e:	6f ef       	ldi	r22, 0xFF	; 255
    2290:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <pin_make_input>
    2294:	88 85       	ldd	r24, Y+8	; 0x08
    2296:	81 60       	ori	r24, 0x01	; 1
    2298:	88 87       	std	Y+8, r24	; 0x08
    229a:	88 85       	ldd	r24, Y+8	; 0x08
    229c:	8b 7f       	andi	r24, 0xFB	; 251
    229e:	88 87       	std	Y+8, r24	; 0x08
    22a0:	88 85       	ldd	r24, Y+8	; 0x08
    22a2:	8d 7f       	andi	r24, 0xFD	; 253
    22a4:	88 87       	std	Y+8, r24	; 0x08
    22a6:	89 85       	ldd	r24, Y+9	; 0x09
    22a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22aa:	04 96       	adiw	r24, 0x04	; 4
    22ac:	fc 01       	movw	r30, r24
    22ae:	25 91       	lpm	r18, Z+
    22b0:	34 91       	lpm	r19, Z+
    22b2:	ce 01       	movw	r24, r28
    22b4:	b8 01       	movw	r22, r16
    22b6:	a7 01       	movw	r20, r14
    22b8:	f9 01       	movw	r30, r18
    22ba:	09 95       	icall
    22bc:	df be       	out	0x3f, r13	; 63
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	1f 91       	pop	r17
    22c4:	0f 91       	pop	r16
    22c6:	ff 90       	pop	r15
    22c8:	ef 90       	pop	r14
    22ca:	df 90       	pop	r13
    22cc:	08 95       	ret

000022ce <__uartHWSetBaudRate>:
    22ce:	bf 92       	push	r11
    22d0:	cf 92       	push	r12
    22d2:	df 92       	push	r13
    22d4:	ef 92       	push	r14
    22d6:	ff 92       	push	r15
    22d8:	0f 93       	push	r16
    22da:	1f 93       	push	r17
    22dc:	cf 93       	push	r28
    22de:	df 93       	push	r29
    22e0:	7a 01       	movw	r14, r20
    22e2:	8b 01       	movw	r16, r22
    22e4:	ec 01       	movw	r28, r24
    22e6:	bf b6       	in	r11, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	4f 3f       	cpi	r20, 0xFF	; 255
    22ec:	8f ef       	ldi	r24, 0xFF	; 255
    22ee:	58 07       	cpc	r21, r24
    22f0:	8f ef       	ldi	r24, 0xFF	; 255
    22f2:	68 07       	cpc	r22, r24
    22f4:	8f ef       	ldi	r24, 0xFF	; 255
    22f6:	78 07       	cpc	r23, r24
    22f8:	21 f4       	brne	.+8      	; 0x2302 <__uartHWSetBaudRate+0x34>
    22fa:	a1 e0       	ldi	r26, 0x01	; 1
    22fc:	ca 2e       	mov	r12, r26
    22fe:	d1 2c       	mov	r13, r1
    2300:	24 c0       	rjmp	.+72     	; 0x234a <__uartHWSetBaudRate+0x7c>
    2302:	cb 01       	movw	r24, r22
    2304:	ba 01       	movw	r22, r20
    2306:	f3 e0       	ldi	r31, 0x03	; 3
    2308:	66 0f       	add	r22, r22
    230a:	77 1f       	adc	r23, r23
    230c:	88 1f       	adc	r24, r24
    230e:	99 1f       	adc	r25, r25
    2310:	fa 95       	dec	r31
    2312:	d1 f7       	brne	.-12     	; 0x2308 <__uartHWSetBaudRate+0x3a>
    2314:	20 91 0c 02 	lds	r18, 0x020C
    2318:	30 91 0d 02 	lds	r19, 0x020D
    231c:	40 91 0e 02 	lds	r20, 0x020E
    2320:	50 91 0f 02 	lds	r21, 0x020F
    2324:	62 0f       	add	r22, r18
    2326:	73 1f       	adc	r23, r19
    2328:	84 1f       	adc	r24, r20
    232a:	95 1f       	adc	r25, r21
    232c:	a8 01       	movw	r20, r16
    232e:	97 01       	movw	r18, r14
    2330:	e4 e0       	ldi	r30, 0x04	; 4
    2332:	22 0f       	add	r18, r18
    2334:	33 1f       	adc	r19, r19
    2336:	44 1f       	adc	r20, r20
    2338:	55 1f       	adc	r21, r21
    233a:	ea 95       	dec	r30
    233c:	d1 f7       	brne	.-12     	; 0x2332 <__uartHWSetBaudRate+0x64>
    233e:	0e 94 2f 1c 	call	0x385e	; 0x385e <__udivmodsi4>
    2342:	69 01       	movw	r12, r18
    2344:	08 94       	sec
    2346:	c1 08       	sbc	r12, r1
    2348:	d1 08       	sbc	r13, r1
    234a:	98 a9       	ldd	r25, Y+48	; 0x30
    234c:	99 23       	and	r25, r25
    234e:	c9 f1       	breq	.+114    	; 0x23c2 <__uartHWSetBaudRate+0xf4>
    2350:	ec a1       	ldd	r30, Y+36	; 0x24
    2352:	fd a1       	ldd	r31, Y+37	; 0x25
    2354:	80 81       	ld	r24, Z
    2356:	90 95       	com	r25
    2358:	89 23       	and	r24, r25
    235a:	80 83       	st	Z, r24
    235c:	8f ef       	ldi	r24, 0xFF	; 255
    235e:	e8 16       	cp	r14, r24
    2360:	8f ef       	ldi	r24, 0xFF	; 255
    2362:	f8 06       	cpc	r15, r24
    2364:	8f ef       	ldi	r24, 0xFF	; 255
    2366:	08 07       	cpc	r16, r24
    2368:	8f ef       	ldi	r24, 0xFF	; 255
    236a:	18 07       	cpc	r17, r24
    236c:	19 f4       	brne	.+6      	; 0x2374 <__uartHWSetBaudRate+0xa6>
    236e:	21 e0       	ldi	r18, 0x01	; 1
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	1d c0       	rjmp	.+58     	; 0x23ae <__uartHWSetBaudRate+0xe0>
    2374:	32 e0       	ldi	r19, 0x02	; 2
    2376:	ee 0c       	add	r14, r14
    2378:	ff 1c       	adc	r15, r15
    237a:	00 1f       	adc	r16, r16
    237c:	11 1f       	adc	r17, r17
    237e:	3a 95       	dec	r19
    2380:	d1 f7       	brne	.-12     	; 0x2376 <__uartHWSetBaudRate+0xa8>
    2382:	60 91 0c 02 	lds	r22, 0x020C
    2386:	70 91 0d 02 	lds	r23, 0x020D
    238a:	80 91 0e 02 	lds	r24, 0x020E
    238e:	90 91 0f 02 	lds	r25, 0x020F
    2392:	6e 0d       	add	r22, r14
    2394:	7f 1d       	adc	r23, r15
    2396:	80 1f       	adc	r24, r16
    2398:	91 1f       	adc	r25, r17
    239a:	ee 0c       	add	r14, r14
    239c:	ff 1c       	adc	r15, r15
    239e:	00 1f       	adc	r16, r16
    23a0:	11 1f       	adc	r17, r17
    23a2:	a8 01       	movw	r20, r16
    23a4:	97 01       	movw	r18, r14
    23a6:	0e 94 2f 1c 	call	0x385e	; 0x385e <__udivmodsi4>
    23aa:	21 50       	subi	r18, 0x01	; 1
    23ac:	30 40       	sbci	r19, 0x00	; 0
    23ae:	2c 15       	cp	r18, r12
    23b0:	3d 05       	cpc	r19, r13
    23b2:	38 f0       	brcs	.+14     	; 0x23c2 <__uartHWSetBaudRate+0xf4>
    23b4:	ec a1       	ldd	r30, Y+36	; 0x24
    23b6:	fd a1       	ldd	r31, Y+37	; 0x25
    23b8:	80 81       	ld	r24, Z
    23ba:	98 a9       	ldd	r25, Y+48	; 0x30
    23bc:	89 2b       	or	r24, r25
    23be:	80 83       	st	Z, r24
    23c0:	69 01       	movw	r12, r18
    23c2:	e8 a5       	ldd	r30, Y+40	; 0x28
    23c4:	f9 a5       	ldd	r31, Y+41	; 0x29
    23c6:	c0 82       	st	Z, r12
    23c8:	ea a5       	ldd	r30, Y+42	; 0x2a
    23ca:	fb a5       	ldd	r31, Y+43	; 0x2b
    23cc:	d0 82       	st	Z, r13
    23ce:	bf be       	out	0x3f, r11	; 63
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	1f 91       	pop	r17
    23d6:	0f 91       	pop	r16
    23d8:	ff 90       	pop	r15
    23da:	ef 90       	pop	r14
    23dc:	df 90       	pop	r13
    23de:	cf 90       	pop	r12
    23e0:	bf 90       	pop	r11
    23e2:	08 95       	ret

000023e4 <__uartHWOff>:
    23e4:	dc 01       	movw	r26, r24
    23e6:	96 96       	adiw	r26, 0x26	; 38
    23e8:	ed 91       	ld	r30, X+
    23ea:	fc 91       	ld	r31, X
    23ec:	97 97       	sbiw	r26, 0x27	; 39
    23ee:	80 81       	ld	r24, Z
    23f0:	87 72       	andi	r24, 0x27	; 39
    23f2:	80 83       	st	Z, r24
    23f4:	d0 96       	adiw	r26, 0x30	; 48
    23f6:	9c 91       	ld	r25, X
    23f8:	d0 97       	sbiw	r26, 0x30	; 48
    23fa:	99 23       	and	r25, r25
    23fc:	41 f0       	breq	.+16     	; 0x240e <__uartHWOff+0x2a>
    23fe:	94 96       	adiw	r26, 0x24	; 36
    2400:	ed 91       	ld	r30, X+
    2402:	fc 91       	ld	r31, X
    2404:	95 97       	sbiw	r26, 0x25	; 37
    2406:	80 81       	ld	r24, Z
    2408:	90 95       	com	r25
    240a:	89 23       	and	r24, r25
    240c:	80 83       	st	Z, r24
    240e:	08 95       	ret

00002410 <oneWireReceiveMode>:
    2410:	dc 01       	movw	r26, r24
    2412:	57 96       	adiw	r26, 0x17	; 23
    2414:	8c 91       	ld	r24, X
    2416:	57 97       	sbiw	r26, 0x17	; 23
    2418:	88 23       	and	r24, r24
    241a:	71 f0       	breq	.+28     	; 0x2438 <oneWireReceiveMode+0x28>
    241c:	96 96       	adiw	r26, 0x26	; 38
    241e:	ed 91       	ld	r30, X+
    2420:	fc 91       	ld	r31, X
    2422:	97 97       	sbiw	r26, 0x27	; 39
    2424:	80 81       	ld	r24, Z
    2426:	87 7b       	andi	r24, 0xB7	; 183
    2428:	80 83       	st	Z, r24
    242a:	96 96       	adiw	r26, 0x26	; 38
    242c:	ed 91       	ld	r30, X+
    242e:	fc 91       	ld	r31, X
    2430:	97 97       	sbiw	r26, 0x27	; 39
    2432:	80 81       	ld	r24, Z
    2434:	80 69       	ori	r24, 0x90	; 144
    2436:	80 83       	st	Z, r24
    2438:	08 95       	ret

0000243a <__uartHWStartXmit>:
    243a:	dc 01       	movw	r26, r24
    243c:	9c 96       	adiw	r26, 0x2c	; 44
    243e:	ed 91       	ld	r30, X+
    2440:	fc 91       	ld	r31, X
    2442:	9d 97       	sbiw	r26, 0x2d	; 45
    2444:	60 83       	st	Z, r22
    2446:	08 95       	ret

00002448 <startXmitMode>:
    2448:	dc 01       	movw	r26, r24
    244a:	57 96       	adiw	r26, 0x17	; 23
    244c:	8c 91       	ld	r24, X
    244e:	57 97       	sbiw	r26, 0x17	; 23
    2450:	88 23       	and	r24, r24
    2452:	71 f0       	breq	.+28     	; 0x2470 <startXmitMode+0x28>
    2454:	96 96       	adiw	r26, 0x26	; 38
    2456:	ed 91       	ld	r30, X+
    2458:	fc 91       	ld	r31, X
    245a:	97 97       	sbiw	r26, 0x27	; 39
    245c:	80 81       	ld	r24, Z
    245e:	8f 76       	andi	r24, 0x6F	; 111
    2460:	80 83       	st	Z, r24
    2462:	96 96       	adiw	r26, 0x26	; 38
    2464:	ed 91       	ld	r30, X+
    2466:	fc 91       	ld	r31, X
    2468:	97 97       	sbiw	r26, 0x27	; 39
    246a:	80 81       	ld	r24, Z
    246c:	88 64       	ori	r24, 0x48	; 72
    246e:	80 83       	st	Z, r24
    2470:	08 95       	ret

00002472 <__uartHWInit>:
    2472:	cf 93       	push	r28
    2474:	df 93       	push	r29
    2476:	ec 01       	movw	r28, r24
    2478:	0e 94 15 11 	call	0x222a	; 0x222a <_uartSetBaudRate>
    247c:	8f 89       	ldd	r24, Y+23	; 0x17
    247e:	88 23       	and	r24, r24
    2480:	11 f0       	breq	.+4      	; 0x2486 <__uartHWInit+0x14>
    2482:	20 e9       	ldi	r18, 0x90	; 144
    2484:	0c c0       	rjmp	.+24     	; 0x249e <__uartHWInit+0x2c>
    2486:	8d 85       	ldd	r24, Y+13	; 0x0d
    2488:	9e 85       	ldd	r25, Y+14	; 0x0e
    248a:	89 2b       	or	r24, r25
    248c:	11 f0       	breq	.+4      	; 0x2492 <__uartHWInit+0x20>
    248e:	20 e9       	ldi	r18, 0x90	; 144
    2490:	01 c0       	rjmp	.+2      	; 0x2494 <__uartHWInit+0x22>
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	8f 85       	ldd	r24, Y+15	; 0x0f
    2496:	98 89       	ldd	r25, Y+16	; 0x10
    2498:	89 2b       	or	r24, r25
    249a:	09 f0       	breq	.+2      	; 0x249e <__uartHWInit+0x2c>
    249c:	28 64       	ori	r18, 0x48	; 72
    249e:	ee a1       	ldd	r30, Y+38	; 0x26
    24a0:	ff a1       	ldd	r31, Y+39	; 0x27
    24a2:	20 83       	st	Z, r18
    24a4:	df 91       	pop	r29
    24a6:	cf 91       	pop	r28
    24a8:	08 95       	ret

000024aa <__uartReceiveService>:
    24aa:	dc 01       	movw	r26, r24
    24ac:	26 2f       	mov	r18, r22
    24ae:	14 96       	adiw	r26, 0x04	; 4
    24b0:	8d 91       	ld	r24, X+
    24b2:	9c 91       	ld	r25, X
    24b4:	15 97       	sbiw	r26, 0x05	; 5
    24b6:	89 2b       	or	r24, r25
    24b8:	59 f0       	breq	.+22     	; 0x24d0 <__uartReceiveService+0x26>
    24ba:	14 96       	adiw	r26, 0x04	; 4
    24bc:	ed 91       	ld	r30, X+
    24be:	fc 91       	ld	r31, X
    24c0:	15 97       	sbiw	r26, 0x05	; 5
    24c2:	16 96       	adiw	r26, 0x06	; 6
    24c4:	6d 91       	ld	r22, X+
    24c6:	7c 91       	ld	r23, X
    24c8:	17 97       	sbiw	r26, 0x07	; 7
    24ca:	82 2f       	mov	r24, r18
    24cc:	09 95       	icall
    24ce:	08 95       	ret
    24d0:	90 96       	adiw	r26, 0x20	; 32
    24d2:	ed 91       	ld	r30, X+
    24d4:	fc 91       	ld	r31, X
    24d6:	91 97       	sbiw	r26, 0x21	; 33
    24d8:	cd 01       	movw	r24, r26
    24da:	09 95       	icall
    24dc:	08 95       	ret

000024de <__uartGetByte>:
    24de:	fc 01       	movw	r30, r24
    24e0:	22 a1       	ldd	r18, Z+34	; 0x22
    24e2:	33 a1       	ldd	r19, Z+35	; 0x23
    24e4:	f9 01       	movw	r30, r18
    24e6:	09 95       	icall
    24e8:	08 95       	ret

000024ea <__uartGetByteUnbuffered>:
    24ea:	fc 01       	movw	r30, r24
    24ec:	4f b7       	in	r20, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	23 85       	ldd	r18, Z+11	; 0x0b
    24f2:	34 85       	ldd	r19, Z+12	; 0x0c
    24f4:	8f ef       	ldi	r24, 0xFF	; 255
    24f6:	9f ef       	ldi	r25, 0xFF	; 255
    24f8:	94 87       	std	Z+12, r25	; 0x0c
    24fa:	83 87       	std	Z+11, r24	; 0x0b
    24fc:	4f bf       	out	0x3f, r20	; 63
    24fe:	c9 01       	movw	r24, r18
    2500:	08 95       	ret

00002502 <__uartReceiveUnbuffered>:
    2502:	fc 01       	movw	r30, r24
    2504:	83 85       	ldd	r24, Z+11	; 0x0b
    2506:	94 85       	ldd	r25, Z+12	; 0x0c
    2508:	8f 5f       	subi	r24, 0xFF	; 255
    250a:	9f 4f       	sbci	r25, 0xFF	; 255
    250c:	29 f4       	brne	.+10     	; 0x2518 <__uartReceiveUnbuffered+0x16>
    250e:	86 2f       	mov	r24, r22
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	94 87       	std	Z+12, r25	; 0x0c
    2514:	83 87       	std	Z+11, r24	; 0x0b
    2516:	08 95       	ret
    2518:	80 85       	ldd	r24, Z+8	; 0x08
    251a:	84 60       	ori	r24, 0x04	; 4
    251c:	80 87       	std	Z+8, r24	; 0x08
    251e:	85 ef       	ldi	r24, 0xF5	; 245
    2520:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <setError>
    2524:	08 95       	ret

00002526 <_uartStartXmit>:
    2526:	dc 01       	movw	r26, r24
    2528:	19 96       	adiw	r26, 0x09	; 9
    252a:	8d 91       	ld	r24, X+
    252c:	9c 91       	ld	r25, X
    252e:	1a 97       	sbiw	r26, 0x0a	; 10
    2530:	02 96       	adiw	r24, 0x02	; 2
    2532:	fc 01       	movw	r30, r24
    2534:	25 91       	lpm	r18, Z+
    2536:	34 91       	lpm	r19, Z+
    2538:	cd 01       	movw	r24, r26
    253a:	f9 01       	movw	r30, r18
    253c:	09 95       	icall
    253e:	08 95       	ret

00002540 <_uartTransmitBlockStart>:
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	ec 01       	movw	r28, r24
    2546:	88 85       	ldd	r24, Y+8	; 0x08
    2548:	8e 7f       	andi	r24, 0xFE	; 254
    254a:	88 87       	std	Y+8, r24	; 0x08
    254c:	e8 8d       	ldd	r30, Y+24	; 0x18
    254e:	f9 8d       	ldd	r31, Y+25	; 0x19
    2550:	30 97       	sbiw	r30, 0x00	; 0
    2552:	21 f0       	breq	.+8      	; 0x255c <_uartTransmitBlockStart+0x1c>
    2554:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2556:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2558:	6f ef       	ldi	r22, 0xFF	; 255
    255a:	09 95       	icall
    255c:	e9 85       	ldd	r30, Y+9	; 0x09
    255e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2560:	38 96       	adiw	r30, 0x08	; 8
    2562:	25 91       	lpm	r18, Z+
    2564:	34 91       	lpm	r19, Z+
    2566:	21 15       	cp	r18, r1
    2568:	31 05       	cpc	r19, r1
    256a:	19 f0       	breq	.+6      	; 0x2572 <_uartTransmitBlockStart+0x32>
    256c:	ce 01       	movw	r24, r28
    256e:	f9 01       	movw	r30, r18
    2570:	09 95       	icall
    2572:	df 91       	pop	r29
    2574:	cf 91       	pop	r28
    2576:	08 95       	ret

00002578 <_uartTransmitBlockEnd>:
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
    257c:	ec 01       	movw	r28, r24
    257e:	88 85       	ldd	r24, Y+8	; 0x08
    2580:	81 60       	ori	r24, 0x01	; 1
    2582:	88 87       	std	Y+8, r24	; 0x08
    2584:	e9 85       	ldd	r30, Y+9	; 0x09
    2586:	fa 85       	ldd	r31, Y+10	; 0x0a
    2588:	3a 96       	adiw	r30, 0x0a	; 10
    258a:	25 91       	lpm	r18, Z+
    258c:	34 91       	lpm	r19, Z+
    258e:	21 15       	cp	r18, r1
    2590:	31 05       	cpc	r19, r1
    2592:	19 f0       	breq	.+6      	; 0x259a <_uartTransmitBlockEnd+0x22>
    2594:	ce 01       	movw	r24, r28
    2596:	f9 01       	movw	r30, r18
    2598:	09 95       	icall
    259a:	e8 8d       	ldd	r30, Y+24	; 0x18
    259c:	f9 8d       	ldd	r31, Y+25	; 0x19
    259e:	30 97       	sbiw	r30, 0x00	; 0
    25a0:	21 f0       	breq	.+8      	; 0x25aa <_uartTransmitBlockEnd+0x32>
    25a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25a4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    25a6:	60 e0       	ldi	r22, 0x00	; 0
    25a8:	09 95       	icall
    25aa:	df 91       	pop	r29
    25ac:	cf 91       	pop	r28
    25ae:	08 95       	ret

000025b0 <_uartSendBuffer>:
    25b0:	ef 92       	push	r14
    25b2:	ff 92       	push	r15
    25b4:	0f 93       	push	r16
    25b6:	1f 93       	push	r17
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
    25bc:	8c 01       	movw	r16, r24
    25be:	7b 01       	movw	r14, r22
    25c0:	ea 01       	movw	r28, r20
    25c2:	0b c0       	rjmp	.+22     	; 0x25da <_uartSendBuffer+0x2a>
    25c4:	d7 01       	movw	r26, r14
    25c6:	6d 91       	ld	r22, X+
    25c8:	7d 01       	movw	r14, r26
    25ca:	d8 01       	movw	r26, r16
    25cc:	5c 96       	adiw	r26, 0x1c	; 28
    25ce:	ed 91       	ld	r30, X+
    25d0:	fc 91       	ld	r31, X
    25d2:	5d 97       	sbiw	r26, 0x1d	; 29
    25d4:	c8 01       	movw	r24, r16
    25d6:	09 95       	icall
    25d8:	21 97       	sbiw	r28, 0x01	; 1
    25da:	20 97       	sbiw	r28, 0x00	; 0
    25dc:	99 f7       	brne	.-26     	; 0x25c4 <_uartSendBuffer+0x14>
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	ff 90       	pop	r15
    25e8:	ef 90       	pop	r14
    25ea:	08 95       	ret

000025ec <_uartSendByte>:
    25ec:	1f 93       	push	r17
    25ee:	fc 01       	movw	r30, r24
    25f0:	16 2f       	mov	r17, r22
    25f2:	24 8d       	ldd	r18, Z+28	; 0x1c
    25f4:	35 8d       	ldd	r19, Z+29	; 0x1d
    25f6:	f9 01       	movw	r30, r18
    25f8:	09 95       	icall
    25fa:	81 2f       	mov	r24, r17
    25fc:	1f 91       	pop	r17
    25fe:	08 95       	ret

00002600 <__uartTransmitService>:
    2600:	fc 01       	movw	r30, r24
    2602:	26 8d       	ldd	r18, Z+30	; 0x1e
    2604:	37 8d       	ldd	r19, Z+31	; 0x1f
    2606:	f9 01       	movw	r30, r18
    2608:	09 95       	icall
    260a:	08 95       	ret

0000260c <__uartSendNextUnbuffered>:
    260c:	1f 93       	push	r17
    260e:	1f b7       	in	r17, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	0e 94 bc 12 	call	0x2578	; 0x2578 <_uartTransmitBlockEnd>
    2616:	1f bf       	out	0x3f, r17	; 63
    2618:	1f 91       	pop	r17
    261a:	08 95       	ret

0000261c <__uartSendUnbuffered>:
    261c:	0f 93       	push	r16
    261e:	1f 93       	push	r17
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	06 2f       	mov	r16, r22
    2626:	ec 01       	movw	r28, r24
    2628:	02 c0       	rjmp	.+4      	; 0x262e <__uartSendUnbuffered+0x12>
    262a:	0e 94 96 13 	call	0x272c	; 0x272c <breathe>
    262e:	88 85       	ldd	r24, Y+8	; 0x08
    2630:	80 ff       	sbrs	r24, 0
    2632:	fb cf       	rjmp	.-10     	; 0x262a <__uartSendUnbuffered+0xe>
    2634:	1f b7       	in	r17, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	ce 01       	movw	r24, r28
    263a:	0e 94 a0 12 	call	0x2540	; 0x2540 <_uartTransmitBlockStart>
    263e:	ce 01       	movw	r24, r28
    2640:	60 2f       	mov	r22, r16
    2642:	0e 94 93 12 	call	0x2526	; 0x2526 <_uartStartXmit>
    2646:	1f bf       	out	0x3f, r17	; 63
    2648:	df 91       	pop	r29
    264a:	cf 91       	pop	r28
    264c:	1f 91       	pop	r17
    264e:	0f 91       	pop	r16
    2650:	08 95       	ret

00002652 <uartReceivePollingMode>:
    2652:	dc 01       	movw	r26, r24
    2654:	96 96       	adiw	r26, 0x26	; 38
    2656:	ed 91       	ld	r30, X+
    2658:	fc 91       	ld	r31, X
    265a:	97 97       	sbiw	r26, 0x27	; 39
    265c:	66 23       	and	r22, r22
    265e:	19 f0       	breq	.+6      	; 0x2666 <uartReceivePollingMode+0x14>
    2660:	80 81       	ld	r24, Z
    2662:	8f 77       	andi	r24, 0x7F	; 127
    2664:	02 c0       	rjmp	.+4      	; 0x266a <uartReceivePollingMode+0x18>
    2666:	80 81       	ld	r24, Z
    2668:	80 68       	ori	r24, 0x80	; 128
    266a:	80 83       	st	Z, r24
    266c:	08 95       	ret

0000266e <uartPollByte>:
    266e:	dc 01       	movw	r26, r24
    2670:	94 96       	adiw	r26, 0x24	; 36
    2672:	ed 91       	ld	r30, X+
    2674:	fc 91       	ld	r31, X
    2676:	95 97       	sbiw	r26, 0x25	; 37
    2678:	80 81       	ld	r24, Z
    267a:	87 fd       	sbrc	r24, 7
    267c:	03 c0       	rjmp	.+6      	; 0x2684 <uartPollByte+0x16>
    267e:	2f ef       	ldi	r18, 0xFF	; 255
    2680:	3f ef       	ldi	r19, 0xFF	; 255
    2682:	07 c0       	rjmp	.+14     	; 0x2692 <uartPollByte+0x24>
    2684:	9c 96       	adiw	r26, 0x2c	; 44
    2686:	ed 91       	ld	r30, X+
    2688:	fc 91       	ld	r31, X
    268a:	9d 97       	sbiw	r26, 0x2d	; 45
    268c:	80 81       	ld	r24, Z
    268e:	28 2f       	mov	r18, r24
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	c9 01       	movw	r24, r18
    2694:	08 95       	ret

00002696 <clockHasElapsed>:
    2696:	0f 93       	push	r16
    2698:	1f 93       	push	r17
    269a:	00 e0       	ldi	r16, 0x00	; 0
    269c:	10 e0       	ldi	r17, 0x00	; 0
    269e:	0e 94 54 13 	call	0x26a8	; 0x26a8 <clockHasElapsedGetOverflow>
    26a2:	1f 91       	pop	r17
    26a4:	0f 91       	pop	r16
    26a6:	08 95       	ret

000026a8 <clockHasElapsedGetOverflow>:
    26a8:	8f 92       	push	r8
    26aa:	9f 92       	push	r9
    26ac:	af 92       	push	r10
    26ae:	bf 92       	push	r11
    26b0:	cf 92       	push	r12
    26b2:	df 92       	push	r13
    26b4:	ef 92       	push	r14
    26b6:	ff 92       	push	r15
    26b8:	0f 93       	push	r16
    26ba:	1f 93       	push	r17
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
    26c0:	6b 01       	movw	r12, r22
    26c2:	7c 01       	movw	r14, r24
    26c4:	49 01       	movw	r8, r18
    26c6:	5a 01       	movw	r10, r20
    26c8:	e8 01       	movw	r28, r16
    26ca:	0e 94 48 09 	call	0x1290	; 0x1290 <clockGetus>
    26ce:	6c 19       	sub	r22, r12
    26d0:	7d 09       	sbc	r23, r13
    26d2:	8e 09       	sbc	r24, r14
    26d4:	9f 09       	sbc	r25, r15
    26d6:	68 15       	cp	r22, r8
    26d8:	79 05       	cpc	r23, r9
    26da:	8a 05       	cpc	r24, r10
    26dc:	9b 05       	cpc	r25, r11
    26de:	68 f0       	brcs	.+26     	; 0x26fa <clockHasElapsedGetOverflow+0x52>
    26e0:	01 15       	cp	r16, r1
    26e2:	11 05       	cpc	r17, r1
    26e4:	41 f0       	breq	.+16     	; 0x26f6 <clockHasElapsedGetOverflow+0x4e>
    26e6:	68 19       	sub	r22, r8
    26e8:	79 09       	sbc	r23, r9
    26ea:	8a 09       	sbc	r24, r10
    26ec:	9b 09       	sbc	r25, r11
    26ee:	68 83       	st	Y, r22
    26f0:	79 83       	std	Y+1, r23	; 0x01
    26f2:	8a 83       	std	Y+2, r24	; 0x02
    26f4:	9b 83       	std	Y+3, r25	; 0x03
    26f6:	8f ef       	ldi	r24, 0xFF	; 255
    26f8:	0c c0       	rjmp	.+24     	; 0x2712 <clockHasElapsedGetOverflow+0x6a>
    26fa:	01 15       	cp	r16, r1
    26fc:	11 05       	cpc	r17, r1
    26fe:	41 f0       	breq	.+16     	; 0x2710 <clockHasElapsedGetOverflow+0x68>
    2700:	86 1a       	sub	r8, r22
    2702:	97 0a       	sbc	r9, r23
    2704:	a8 0a       	sbc	r10, r24
    2706:	b9 0a       	sbc	r11, r25
    2708:	88 82       	st	Y, r8
    270a:	99 82       	std	Y+1, r9	; 0x01
    270c:	aa 82       	std	Y+2, r10	; 0x02
    270e:	bb 82       	std	Y+3, r11	; 0x03
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	df 91       	pop	r29
    2714:	cf 91       	pop	r28
    2716:	1f 91       	pop	r17
    2718:	0f 91       	pop	r16
    271a:	ff 90       	pop	r15
    271c:	ef 90       	pop	r14
    271e:	df 90       	pop	r13
    2720:	cf 90       	pop	r12
    2722:	bf 90       	pop	r11
    2724:	af 90       	pop	r10
    2726:	9f 90       	pop	r9
    2728:	8f 90       	pop	r8
    272a:	08 95       	ret

0000272c <breathe>:
    272c:	8f b7       	in	r24, 0x3f	; 63
    272e:	78 94       	sei
	...
    273c:	00 00       	nop
    273e:	8f bf       	out	0x3f, r24	; 63
    2740:	08 95       	ret

00002742 <pin_low>:
    2742:	cf 93       	push	r28
    2744:	df 93       	push	r29
    2746:	9c 01       	movw	r18, r24
    2748:	00 97       	sbiw	r24, 0x00	; 0
    274a:	e9 f0       	breq	.+58     	; 0x2786 <pin_low+0x44>
    274c:	fc 01       	movw	r30, r24
    274e:	85 91       	lpm	r24, Z+
    2750:	94 91       	lpm	r25, Z+
    2752:	fc 01       	movw	r30, r24
    2754:	a5 91       	lpm	r26, Z+
    2756:	b4 91       	lpm	r27, Z+
    2758:	02 96       	adiw	r24, 0x02	; 2
    275a:	fc 01       	movw	r30, r24
    275c:	c5 91       	lpm	r28, Z+
    275e:	d4 91       	lpm	r29, Z+
    2760:	2e 5f       	subi	r18, 0xFE	; 254
    2762:	3f 4f       	sbci	r19, 0xFF	; 255
    2764:	f9 01       	movw	r30, r18
    2766:	24 91       	lpm	r18, Z+
    2768:	88 81       	ld	r24, Y
    276a:	82 23       	and	r24, r18
    276c:	49 f0       	breq	.+18     	; 0x2780 <pin_low+0x3e>
    276e:	9f b7       	in	r25, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	8c 91       	ld	r24, X
    2774:	20 95       	com	r18
    2776:	82 23       	and	r24, r18
    2778:	8c 93       	st	X, r24
    277a:	9f bf       	out	0x3f, r25	; 63
    277c:	00 00       	nop
    277e:	03 c0       	rjmp	.+6      	; 0x2786 <pin_low+0x44>
    2780:	87 ef       	ldi	r24, 0xF7	; 247
    2782:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <setError>
    2786:	df 91       	pop	r29
    2788:	cf 91       	pop	r28
    278a:	08 95       	ret

0000278c <pin_high>:
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	9c 01       	movw	r18, r24
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	e1 f0       	breq	.+56     	; 0x27ce <pin_high+0x42>
    2796:	fc 01       	movw	r30, r24
    2798:	85 91       	lpm	r24, Z+
    279a:	94 91       	lpm	r25, Z+
    279c:	fc 01       	movw	r30, r24
    279e:	a5 91       	lpm	r26, Z+
    27a0:	b4 91       	lpm	r27, Z+
    27a2:	02 96       	adiw	r24, 0x02	; 2
    27a4:	fc 01       	movw	r30, r24
    27a6:	c5 91       	lpm	r28, Z+
    27a8:	d4 91       	lpm	r29, Z+
    27aa:	2e 5f       	subi	r18, 0xFE	; 254
    27ac:	3f 4f       	sbci	r19, 0xFF	; 255
    27ae:	f9 01       	movw	r30, r18
    27b0:	24 91       	lpm	r18, Z+
    27b2:	88 81       	ld	r24, Y
    27b4:	82 23       	and	r24, r18
    27b6:	41 f0       	breq	.+16     	; 0x27c8 <pin_high+0x3c>
    27b8:	9f b7       	in	r25, 0x3f	; 63
    27ba:	f8 94       	cli
    27bc:	8c 91       	ld	r24, X
    27be:	82 2b       	or	r24, r18
    27c0:	8c 93       	st	X, r24
    27c2:	9f bf       	out	0x3f, r25	; 63
    27c4:	00 00       	nop
    27c6:	03 c0       	rjmp	.+6      	; 0x27ce <pin_high+0x42>
    27c8:	87 ef       	ldi	r24, 0xF7	; 247
    27ca:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <setError>
    27ce:	df 91       	pop	r29
    27d0:	cf 91       	pop	r28
    27d2:	08 95       	ret

000027d4 <pin_set>:
    27d4:	66 23       	and	r22, r22
    27d6:	19 f0       	breq	.+6      	; 0x27de <pin_set+0xa>
    27d8:	0e 94 c6 13 	call	0x278c	; 0x278c <pin_high>
    27dc:	08 95       	ret
    27de:	0e 94 a1 13 	call	0x2742	; 0x2742 <pin_low>
    27e2:	08 95       	ret

000027e4 <__scheduleUpdate>:
	uint16_t rtn = MIN(ticks,CLOCK_TOP);
	return rtn;
}

// called under compare interrupts when there is something in the queue
static void __scheduleUpdate(void){
    27e4:	2f 92       	push	r2
    27e6:	3f 92       	push	r3
    27e8:	4f 92       	push	r4
    27ea:	5f 92       	push	r5
    27ec:	6f 92       	push	r6
    27ee:	7f 92       	push	r7
    27f0:	8f 92       	push	r8
    27f2:	9f 92       	push	r9
    27f4:	af 92       	push	r10
    27f6:	bf 92       	push	r11
    27f8:	cf 92       	push	r12
    27fa:	df 92       	push	r13
    27fc:	ef 92       	push	r14
    27fe:	ff 92       	push	r15
    2800:	0f 93       	push	r16
    2802:	1f 93       	push	r17
    2804:	df 93       	push	r29
    2806:	cf 93       	push	r28
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	27 97       	sbiw	r28, 0x07	; 7
    280e:	0f b6       	in	r0, 0x3f	; 63
    2810:	f8 94       	cli
    2812:	de bf       	out	0x3e, r29	; 62
    2814:	0f be       	out	0x3f, r0	; 63
    2816:	cd bf       	out	0x3d, r28	; 61
	// Dont call me again - turn off compare interrupts
	SCHEDULER_INT_DISABLE;
    2818:	80 91 73 00 	lds	r24, 0x0073
    281c:	8b 7f       	andi	r24, 0xFB	; 251
    281e:	80 93 73 00 	sts	0x0073, r24

	// Turn interrupts back on
	INTERRUPTABLE_SECTION{
    2822:	2f b7       	in	r18, 0x3f	; 63
    2824:	2f 83       	std	Y+7, r18	; 0x07
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
    2826:	78 94       	sei
		__running = TRUE;
    2828:	8f ef       	ldi	r24, 0xFF	; 255
    282a:	80 93 31 04 	sts	0x0431, r24
		TICK_COUNT lowest;
		do{
			int slot;
			__recheck = FALSE;
    282e:	10 92 32 04 	sts	0x0432, r1
			JOB* job;
			lowest=0;
			for(slot=maxJobs-1, job=&__queue[slot]; slot>=0; slot--, job--){
    2832:	80 91 f3 02 	lds	r24, 0x02F3
    2836:	a8 2f       	mov	r26, r24
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	11 97       	sbiw	r26, 0x01	; 1
    283c:	be 83       	std	Y+6, r27	; 0x06
    283e:	ad 83       	std	Y+5, r26	; 0x05
    2840:	ed e0       	ldi	r30, 0x0D	; 13
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	ae 9f       	mul	r26, r30
    2846:	50 01       	movw	r10, r0
    2848:	af 9f       	mul	r26, r31
    284a:	b0 0c       	add	r11, r0
    284c:	be 9f       	mul	r27, r30
    284e:	b0 0c       	add	r11, r0
    2850:	11 24       	eor	r1, r1
    2852:	24 e2       	ldi	r18, 0x24	; 36
    2854:	34 e0       	ldi	r19, 0x04	; 4
    2856:	a2 0e       	add	r10, r18
    2858:	b3 1e       	adc	r11, r19
    285a:	66 24       	eor	r6, r6
    285c:	77 24       	eor	r7, r7
    285e:	43 01       	movw	r8, r6
    2860:	5a c0       	rjmp	.+180    	; 0x2916 <__scheduleUpdate+0x132>
				if(job->used){
    2862:	d5 01       	movw	r26, r10
    2864:	8c 91       	ld	r24, X
    2866:	88 23       	and	r24, r24
    2868:	09 f4       	brne	.+2      	; 0x286c <__scheduleUpdate+0x88>
    286a:	4c c0       	rjmp	.+152    	; 0x2904 <__scheduleUpdate+0x120>
					// check if time has elapsed
					TICK_COUNT overflow;	// how many us the timer has overshot when it should have happened
					TICK_COUNT start=job->start;
    286c:	19 96       	adiw	r26, 0x09	; 9
    286e:	2d 90       	ld	r2, X+
    2870:	3d 90       	ld	r3, X+
    2872:	4d 90       	ld	r4, X+
    2874:	5c 90       	ld	r5, X
    2876:	1c 97       	sbiw	r26, 0x0c	; 12
					TICK_COUNT delay=job->delay;
    2878:	15 96       	adiw	r26, 0x05	; 5
    287a:	cd 90       	ld	r12, X+
    287c:	dd 90       	ld	r13, X+
    287e:	ed 90       	ld	r14, X+
    2880:	fc 90       	ld	r15, X
    2882:	18 97       	sbiw	r26, 0x08	; 8
					if(clockHasElapsedGetOverflow(start, delay, &overflow)){
    2884:	c2 01       	movw	r24, r4
    2886:	b1 01       	movw	r22, r2
    2888:	a7 01       	movw	r20, r14
    288a:	96 01       	movw	r18, r12
    288c:	8e 01       	movw	r16, r28
    288e:	0f 5f       	subi	r16, 0xFF	; 255
    2890:	1f 4f       	sbci	r17, 0xFF	; 255
    2892:	0e 94 54 13 	call	0x26a8	; 0x26a8 <clockHasElapsedGetOverflow>
    2896:	88 23       	and	r24, r24
    2898:	19 f1       	breq	.+70     	; 0x28e0 <__scheduleUpdate+0xfc>
						SchedulerCallback callback = job->callback;
    289a:	d5 01       	movw	r26, r10
    289c:	11 96       	adiw	r26, 0x01	; 1
    289e:	ed 91       	ld	r30, X+
    28a0:	fc 91       	ld	r31, X
    28a2:	12 97       	sbiw	r26, 0x02	; 2
						SchedulerData data = job->data;
    28a4:	13 96       	adiw	r26, 0x03	; 3
    28a6:	8d 91       	ld	r24, X+
    28a8:	9c 91       	ld	r25, X
    28aa:	14 97       	sbiw	r26, 0x04	; 4

						// Mark this job as unused. No more references shoud be made to job->xxxx
						job->used = FALSE;
    28ac:	1c 92       	st	X, r1
						--__numJobs;
    28ae:	20 91 33 04 	lds	r18, 0x0433
    28b2:	30 91 34 04 	lds	r19, 0x0434
    28b6:	21 50       	subi	r18, 0x01	; 1
    28b8:	30 40       	sbci	r19, 0x00	; 0
    28ba:	30 93 34 04 	sts	0x0434, r19
    28be:	20 93 33 04 	sts	0x0433, r18

						// Run the job with interrupts enabled
						callback(data,start+delay,overflow);
    28c2:	c2 0c       	add	r12, r2
    28c4:	d3 1c       	adc	r13, r3
    28c6:	e4 1c       	adc	r14, r4
    28c8:	f5 1c       	adc	r15, r5
    28ca:	09 81       	ldd	r16, Y+1	; 0x01
    28cc:	1a 81       	ldd	r17, Y+2	; 0x02
    28ce:	2b 81       	ldd	r18, Y+3	; 0x03
    28d0:	3c 81       	ldd	r19, Y+4	; 0x04
    28d2:	b7 01       	movw	r22, r14
    28d4:	a6 01       	movw	r20, r12
    28d6:	09 95       	icall


						// Force another loop as the time taken may mean
						// something else can now run
						__recheck = TRUE;
    28d8:	bf ef       	ldi	r27, 0xFF	; 255
    28da:	b0 93 32 04 	sts	0x0432, r27
    28de:	12 c0       	rjmp	.+36     	; 0x2904 <__scheduleUpdate+0x120>
					}else{
					   // overflow has the remaining number of microseconds to wait
					   if(lowest==0 || overflow < lowest){
    28e0:	61 14       	cp	r6, r1
    28e2:	71 04       	cpc	r7, r1
    28e4:	81 04       	cpc	r8, r1
    28e6:	91 04       	cpc	r9, r1
    28e8:	49 f0       	breq	.+18     	; 0x28fc <__scheduleUpdate+0x118>
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	9a 81       	ldd	r25, Y+2	; 0x02
    28ee:	ab 81       	ldd	r26, Y+3	; 0x03
    28f0:	bc 81       	ldd	r27, Y+4	; 0x04
    28f2:	86 15       	cp	r24, r6
    28f4:	97 05       	cpc	r25, r7
    28f6:	a8 05       	cpc	r26, r8
    28f8:	b9 05       	cpc	r27, r9
    28fa:	20 f4       	brcc	.+8      	; 0x2904 <__scheduleUpdate+0x120>
						   lowest = overflow;
    28fc:	69 80       	ldd	r6, Y+1	; 0x01
    28fe:	7a 80       	ldd	r7, Y+2	; 0x02
    2900:	8b 80       	ldd	r8, Y+3	; 0x03
    2902:	9c 80       	ldd	r9, Y+4	; 0x04
		do{
			int slot;
			__recheck = FALSE;
			JOB* job;
			lowest=0;
			for(slot=maxJobs-1, job=&__queue[slot]; slot>=0; slot--, job--){
    2904:	ed 81       	ldd	r30, Y+5	; 0x05
    2906:	fe 81       	ldd	r31, Y+6	; 0x06
    2908:	31 97       	sbiw	r30, 0x01	; 1
    290a:	fe 83       	std	Y+6, r31	; 0x06
    290c:	ed 83       	std	Y+5, r30	; 0x05
    290e:	23 ef       	ldi	r18, 0xF3	; 243
    2910:	3f ef       	ldi	r19, 0xFF	; 255
    2912:	a2 0e       	add	r10, r18
    2914:	b3 1e       	adc	r11, r19
    2916:	8d 81       	ldd	r24, Y+5	; 0x05
    2918:	9e 81       	ldd	r25, Y+6	; 0x06
    291a:	8f 5f       	subi	r24, 0xFF	; 255
    291c:	9f 4f       	sbci	r25, 0xFF	; 255
    291e:	09 f0       	breq	.+2      	; 0x2922 <__scheduleUpdate+0x13e>
    2920:	a0 cf       	rjmp	.-192    	; 0x2862 <__scheduleUpdate+0x7e>
						   lowest = overflow;
					   }
					}
				}
			}
		}while( __recheck);
    2922:	80 91 32 04 	lds	r24, 0x0432
    2926:	88 23       	and	r24, r24
    2928:	09 f0       	breq	.+2      	; 0x292c <__scheduleUpdate+0x148>
    292a:	81 cf       	rjmp	.-254    	; 0x282e <__scheduleUpdate+0x4a>
		__running=FALSE;
    292c:	10 92 31 04 	sts	0x0431, r1

		if(__numJobs > 0){
    2930:	80 91 33 04 	lds	r24, 0x0433
    2934:	90 91 34 04 	lds	r25, 0x0434
    2938:	18 16       	cp	r1, r24
    293a:	19 06       	cpc	r1, r25
    293c:	4c f5       	brge	.+82     	; 0x2990 <__scheduleUpdate+0x1ac>
			// Decide when we need to interrupt again
			uint16_t compare = calcTicks(lowest) + CLOCK_COUNTER;
    293e:	20 91 24 01 	lds	r18, 0x0124
    2942:	30 91 25 01 	lds	r19, 0x0125
    2946:	d4 01       	movw	r26, r8
    2948:	c3 01       	movw	r24, r6
    294a:	88 0f       	add	r24, r24
    294c:	99 1f       	adc	r25, r25
    294e:	aa 1f       	adc	r26, r26
    2950:	bb 1f       	adc	r27, r27
    2952:	81 30       	cpi	r24, 0x01	; 1
    2954:	ea ef       	ldi	r30, 0xFA	; 250
    2956:	9e 07       	cpc	r25, r30
    2958:	e0 e0       	ldi	r30, 0x00	; 0
    295a:	ae 07       	cpc	r26, r30
    295c:	e0 e0       	ldi	r30, 0x00	; 0
    295e:	be 07       	cpc	r27, r30
    2960:	20 f0       	brcs	.+8      	; 0x296a <__scheduleUpdate+0x186>
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	9a ef       	ldi	r25, 0xFA	; 250
    2966:	a0 e0       	ldi	r26, 0x00	; 0
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	82 0f       	add	r24, r18
    296c:	93 1f       	adc	r25, r19
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <__scheduleUpdate+0x190>
			while(compare >= CLOCK_TOP){
				compare -= CLOCK_TOP;
    2970:	80 50       	subi	r24, 0x00	; 0
    2972:	9a 4f       	sbci	r25, 0xFA	; 250
		__running=FALSE;

		if(__numJobs > 0){
			// Decide when we need to interrupt again
			uint16_t compare = calcTicks(lowest) + CLOCK_COUNTER;
			while(compare >= CLOCK_TOP){
    2974:	fa ef       	ldi	r31, 0xFA	; 250
    2976:	80 30       	cpi	r24, 0x00	; 0
    2978:	9f 07       	cpc	r25, r31
    297a:	d0 f7       	brcc	.-12     	; 0x2970 <__scheduleUpdate+0x18c>
				compare -= CLOCK_TOP;
			}
			// Set when next interrupt should occur
			SCHEDULER_THRESHOLD = compare;
    297c:	90 93 2b 01 	sts	0x012B, r25
    2980:	80 93 2a 01 	sts	0x012A, r24
			// Clear any pending interrupt
			SCHEDULER_INT_CLEAR;
    2984:	d2 9a       	sbi	0x1a, 2	; 26
			// Look for new interrupts
			SCHEDULER_INT_ENABLE;
    2986:	80 91 73 00 	lds	r24, 0x0073
    298a:	84 60       	ori	r24, 0x04	; 4
    298c:	80 93 73 00 	sts	0x0073, r24
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    2990:	2f 81       	ldd	r18, Y+7	; 0x07
    2992:	2f bf       	out	0x3f, r18	; 63
		}

	} // Restore previous interrupt enable
}
    2994:	27 96       	adiw	r28, 0x07	; 7
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	1f 91       	pop	r17
    29a6:	0f 91       	pop	r16
    29a8:	ff 90       	pop	r15
    29aa:	ef 90       	pop	r14
    29ac:	df 90       	pop	r13
    29ae:	cf 90       	pop	r12
    29b0:	bf 90       	pop	r11
    29b2:	af 90       	pop	r10
    29b4:	9f 90       	pop	r9
    29b6:	8f 90       	pop	r8
    29b8:	7f 90       	pop	r7
    29ba:	6f 90       	pop	r6
    29bc:	5f 90       	pop	r5
    29be:	4f 90       	pop	r4
    29c0:	3f 90       	pop	r3
    29c2:	2f 90       	pop	r2
    29c4:	08 95       	ret

000029c6 <__vector_48>:
}



// ISR for scheduler match - check if another job needs to run
ISR(TIMER5_COMPB_vect) {
    29c6:	1f 92       	push	r1
    29c8:	0f 92       	push	r0
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	0f 92       	push	r0
    29ce:	11 24       	eor	r1, r1
    29d0:	2f 93       	push	r18
    29d2:	3f 93       	push	r19
    29d4:	4f 93       	push	r20
    29d6:	5f 93       	push	r21
    29d8:	6f 93       	push	r22
    29da:	7f 93       	push	r23
    29dc:	8f 93       	push	r24
    29de:	9f 93       	push	r25
    29e0:	af 93       	push	r26
    29e2:	bf 93       	push	r27
    29e4:	ef 93       	push	r30
    29e6:	ff 93       	push	r31
	__scheduleUpdate();
    29e8:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__scheduleUpdate>
}
    29ec:	ff 91       	pop	r31
    29ee:	ef 91       	pop	r30
    29f0:	bf 91       	pop	r27
    29f2:	af 91       	pop	r26
    29f4:	9f 91       	pop	r25
    29f6:	8f 91       	pop	r24
    29f8:	7f 91       	pop	r23
    29fa:	6f 91       	pop	r22
    29fc:	5f 91       	pop	r21
    29fe:	4f 91       	pop	r20
    2a00:	3f 91       	pop	r19
    2a02:	2f 91       	pop	r18
    2a04:	0f 90       	pop	r0
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	0f 90       	pop	r0
    2a0a:	1f 90       	pop	r1
    2a0c:	18 95       	reti

00002a0e <scheduleJob>:
// schedule a new job
// callback Is the function to be run at a later date
// data is a block of data to be passed into the callback
// start (in us) Is the start time of the delay
// delay (in us) Is the amount to delay by
void scheduleJob(SchedulerCallback callback, SchedulerData data, TICK_COUNT start, TICK_COUNT delay){
    2a0e:	2f 92       	push	r2
    2a10:	3f 92       	push	r3
    2a12:	4f 92       	push	r4
    2a14:	5f 92       	push	r5
    2a16:	6f 92       	push	r6
    2a18:	7f 92       	push	r7
    2a1a:	8f 92       	push	r8
    2a1c:	9f 92       	push	r9
    2a1e:	af 92       	push	r10
    2a20:	bf 92       	push	r11
    2a22:	cf 92       	push	r12
    2a24:	df 92       	push	r13
    2a26:	ef 92       	push	r14
    2a28:	ff 92       	push	r15
    2a2a:	0f 93       	push	r16
    2a2c:	1f 93       	push	r17
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	00 d0       	rcall	.+0      	; 0x2a34 <scheduleJob+0x26>
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <scheduleJob+0x28>
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
    2a3a:	1c 01       	movw	r2, r24
    2a3c:	2b 01       	movw	r4, r22
    2a3e:	49 01       	movw	r8, r18
    2a40:	5a 01       	movw	r10, r20
    2a42:	67 01       	movw	r12, r14
    2a44:	78 01       	movw	r14, r16
	boolean doItNow = FALSE;

 	if(delay < 1000U){
    2a46:	88 ee       	ldi	r24, 0xE8	; 232
    2a48:	c8 16       	cp	r12, r24
    2a4a:	83 e0       	ldi	r24, 0x03	; 3
    2a4c:	d8 06       	cpc	r13, r24
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	e8 06       	cpc	r14, r24
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	f8 06       	cpc	r15, r24
    2a56:	38 f4       	brcc	.+14     	; 0x2a66 <scheduleJob+0x58>
		// it needs to happen now as the delay is less than the heartbeat timer interrupt of 1ms
		if(__running){
    2a58:	80 91 31 04 	lds	r24, 0x0431
    2a5c:	88 23       	and	r24, r24
    2a5e:	c1 f1       	breq	.+112    	; 0x2ad0 <scheduleJob+0xc2>
			// make sure we do another loop of __scheduleUpdate to find it
			__recheck=TRUE;
    2a60:	8f ef       	ldi	r24, 0xFF	; 255
    2a62:	80 93 32 04 	sts	0x0432, r24

	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
    2a66:	6f b7       	in	r22, 0x3f	; 63
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
    2a68:	f8 94       	cli
			for(slot=0; slot < maxJobs; slot++){
    2a6a:	80 91 f3 02 	lds	r24, 0x02F3
    2a6e:	48 2f       	mov	r20, r24
    2a70:	50 e0       	ldi	r21, 0x00	; 0
    2a72:	a4 e2       	ldi	r26, 0x24	; 36
    2a74:	b4 e0       	ldi	r27, 0x04	; 4
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	20 c0       	rjmp	.+64     	; 0x2abc <scheduleJob+0xae>

	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
    2a7c:	fd 01       	movw	r30, r26
			for(slot=0; slot < maxJobs; slot++){
				JOB* job = &__queue[slot];
				if(!job->used){
    2a7e:	8c 91       	ld	r24, X
    2a80:	1d 96       	adiw	r26, 0x0d	; 13
    2a82:	88 23       	and	r24, r24
    2a84:	c9 f4       	brne	.+50     	; 0x2ab8 <scheduleJob+0xaa>
					job->used = TRUE;
    2a86:	8f ef       	ldi	r24, 0xFF	; 255
    2a88:	80 83       	st	Z, r24
					job->callback = callback;
    2a8a:	32 82       	std	Z+2, r3	; 0x02
    2a8c:	21 82       	std	Z+1, r2	; 0x01
					job->data = data;
    2a8e:	54 82       	std	Z+4, r5	; 0x04
    2a90:	43 82       	std	Z+3, r4	; 0x03
					job->start=start;
    2a92:	81 86       	std	Z+9, r8	; 0x09
    2a94:	92 86       	std	Z+10, r9	; 0x0a
    2a96:	a3 86       	std	Z+11, r10	; 0x0b
    2a98:	b4 86       	std	Z+12, r11	; 0x0c
					job->delay=delay;
    2a9a:	c5 82       	std	Z+5, r12	; 0x05
    2a9c:	d6 82       	std	Z+6, r13	; 0x06
    2a9e:	e7 82       	std	Z+7, r14	; 0x07
    2aa0:	f0 86       	std	Z+8, r15	; 0x08
					found=TRUE;
					__numJobs++;
    2aa2:	80 91 33 04 	lds	r24, 0x0433
    2aa6:	90 91 34 04 	lds	r25, 0x0434
    2aaa:	01 96       	adiw	r24, 0x01	; 1
    2aac:	90 93 34 04 	sts	0x0434, r25
    2ab0:	80 93 33 04 	sts	0x0433, r24
    2ab4:	8f ef       	ldi	r24, 0xFF	; 255
    2ab6:	06 c0       	rjmp	.+12     	; 0x2ac4 <scheduleJob+0xb6>
	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
			for(slot=0; slot < maxJobs; slot++){
    2ab8:	2f 5f       	subi	r18, 0xFF	; 255
    2aba:	3f 4f       	sbci	r19, 0xFF	; 255
    2abc:	24 17       	cp	r18, r20
    2abe:	35 07       	cpc	r19, r21
    2ac0:	ec f2       	brlt	.-70     	; 0x2a7c <scheduleJob+0x6e>
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    2ac4:	6f bf       	out	0x3f, r22	; 63
					break;
				}
			}
		}

		if(!found){
    2ac6:	88 23       	and	r24, r24
    2ac8:	f1 f4       	brne	.+60     	; 0x2b06 <scheduleJob+0xf8>
			// the queue is exhausted
			setError(SCHEDULER_EXHAUSTED);
    2aca:	8f ef       	ldi	r24, 0xFF	; 255
    2acc:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <setError>
	if(doItNow){
		// we need to do it now
		TICK_COUNT overflow;

		// wait for expiry
		while(!clockHasElapsedGetOverflow(start, delay, &overflow));
    2ad0:	3e 01       	movw	r6, r28
    2ad2:	08 94       	sec
    2ad4:	61 1c       	adc	r6, r1
    2ad6:	71 1c       	adc	r7, r1
    2ad8:	c5 01       	movw	r24, r10
    2ada:	b4 01       	movw	r22, r8
    2adc:	a7 01       	movw	r20, r14
    2ade:	96 01       	movw	r18, r12
    2ae0:	83 01       	movw	r16, r6
    2ae2:	0e 94 54 13 	call	0x26a8	; 0x26a8 <clockHasElapsedGetOverflow>
    2ae6:	88 23       	and	r24, r24
    2ae8:	b9 f3       	breq	.-18     	; 0x2ad8 <scheduleJob+0xca>

		// call the queued routine
		callback(data,start+delay,overflow);
    2aea:	c8 0c       	add	r12, r8
    2aec:	d9 1c       	adc	r13, r9
    2aee:	ea 1c       	adc	r14, r10
    2af0:	fb 1c       	adc	r15, r11
    2af2:	09 81       	ldd	r16, Y+1	; 0x01
    2af4:	1a 81       	ldd	r17, Y+2	; 0x02
    2af6:	2b 81       	ldd	r18, Y+3	; 0x03
    2af8:	3c 81       	ldd	r19, Y+4	; 0x04
    2afa:	c2 01       	movw	r24, r4
    2afc:	b7 01       	movw	r22, r14
    2afe:	a6 01       	movw	r20, r12
    2b00:	f1 01       	movw	r30, r2
    2b02:	09 95       	icall
    2b04:	06 c0       	rjmp	.+12     	; 0x2b12 <scheduleJob+0x104>
	}else{
		if(!__running){
    2b06:	80 91 31 04 	lds	r24, 0x0431
    2b0a:	88 23       	and	r24, r24
    2b0c:	11 f4       	brne	.+4      	; 0x2b12 <scheduleJob+0x104>
			__scheduleUpdate();
    2b0e:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__scheduleUpdate>
		}
	}
}
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	1f 91       	pop	r17
    2b20:	0f 91       	pop	r16
    2b22:	ff 90       	pop	r15
    2b24:	ef 90       	pop	r14
    2b26:	df 90       	pop	r13
    2b28:	cf 90       	pop	r12
    2b2a:	bf 90       	pop	r11
    2b2c:	af 90       	pop	r10
    2b2e:	9f 90       	pop	r9
    2b30:	8f 90       	pop	r8
    2b32:	7f 90       	pop	r7
    2b34:	6f 90       	pop	r6
    2b36:	5f 90       	pop	r5
    2b38:	4f 90       	pop	r4
    2b3a:	3f 90       	pop	r3
    2b3c:	2f 90       	pop	r2
    2b3e:	08 95       	ret

00002b40 <vfprintf>:
    2b40:	a1 e1       	ldi	r26, 0x11	; 17
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	e6 ea       	ldi	r30, 0xA6	; 166
    2b46:	f5 e1       	ldi	r31, 0x15	; 21
    2b48:	0c 94 6c 1c 	jmp	0x38d8	; 0x38d8 <__prologue_saves__>
    2b4c:	3c 01       	movw	r6, r24
    2b4e:	7f 87       	std	Y+15, r23	; 0x0f
    2b50:	6e 87       	std	Y+14, r22	; 0x0e
    2b52:	6a 01       	movw	r12, r20
    2b54:	fc 01       	movw	r30, r24
    2b56:	17 82       	std	Z+7, r1	; 0x07
    2b58:	16 82       	std	Z+6, r1	; 0x06
    2b5a:	83 81       	ldd	r24, Z+3	; 0x03
    2b5c:	81 fd       	sbrc	r24, 1
    2b5e:	03 c0       	rjmp	.+6      	; 0x2b66 <vfprintf+0x26>
    2b60:	6f ef       	ldi	r22, 0xFF	; 255
    2b62:	7f ef       	ldi	r23, 0xFF	; 255
    2b64:	6f c3       	rjmp	.+1758   	; 0x3244 <vfprintf+0x704>
    2b66:	9e 01       	movw	r18, r28
    2b68:	2f 5f       	subi	r18, 0xFF	; 255
    2b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6c:	39 8b       	std	Y+17, r19	; 0x11
    2b6e:	28 8b       	std	Y+16, r18	; 0x10
    2b70:	f3 01       	movw	r30, r6
    2b72:	23 81       	ldd	r18, Z+3	; 0x03
    2b74:	ee 85       	ldd	r30, Y+14	; 0x0e
    2b76:	ff 85       	ldd	r31, Y+15	; 0x0f
    2b78:	23 fd       	sbrc	r18, 3
    2b7a:	85 91       	lpm	r24, Z+
    2b7c:	23 ff       	sbrs	r18, 3
    2b7e:	81 91       	ld	r24, Z+
    2b80:	ff 87       	std	Y+15, r31	; 0x0f
    2b82:	ee 87       	std	Y+14, r30	; 0x0e
    2b84:	88 23       	and	r24, r24
    2b86:	09 f4       	brne	.+2      	; 0x2b8a <vfprintf+0x4a>
    2b88:	5a c3       	rjmp	.+1716   	; 0x323e <vfprintf+0x6fe>
    2b8a:	85 32       	cpi	r24, 0x25	; 37
    2b8c:	51 f4       	brne	.+20     	; 0x2ba2 <vfprintf+0x62>
    2b8e:	ee 85       	ldd	r30, Y+14	; 0x0e
    2b90:	ff 85       	ldd	r31, Y+15	; 0x0f
    2b92:	23 fd       	sbrc	r18, 3
    2b94:	85 91       	lpm	r24, Z+
    2b96:	23 ff       	sbrs	r18, 3
    2b98:	81 91       	ld	r24, Z+
    2b9a:	ff 87       	std	Y+15, r31	; 0x0f
    2b9c:	ee 87       	std	Y+14, r30	; 0x0e
    2b9e:	85 32       	cpi	r24, 0x25	; 37
    2ba0:	29 f4       	brne	.+10     	; 0x2bac <vfprintf+0x6c>
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	b3 01       	movw	r22, r6
    2ba6:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    2baa:	e2 cf       	rjmp	.-60     	; 0x2b70 <vfprintf+0x30>
    2bac:	98 2f       	mov	r25, r24
    2bae:	10 e0       	ldi	r17, 0x00	; 0
    2bb0:	88 24       	eor	r8, r8
    2bb2:	99 24       	eor	r9, r9
    2bb4:	10 32       	cpi	r17, 0x20	; 32
    2bb6:	b0 f4       	brcc	.+44     	; 0x2be4 <vfprintf+0xa4>
    2bb8:	9b 32       	cpi	r25, 0x2B	; 43
    2bba:	69 f0       	breq	.+26     	; 0x2bd6 <vfprintf+0x96>
    2bbc:	9c 32       	cpi	r25, 0x2C	; 44
    2bbe:	28 f4       	brcc	.+10     	; 0x2bca <vfprintf+0x8a>
    2bc0:	90 32       	cpi	r25, 0x20	; 32
    2bc2:	51 f0       	breq	.+20     	; 0x2bd8 <vfprintf+0x98>
    2bc4:	93 32       	cpi	r25, 0x23	; 35
    2bc6:	71 f4       	brne	.+28     	; 0x2be4 <vfprintf+0xa4>
    2bc8:	0b c0       	rjmp	.+22     	; 0x2be0 <vfprintf+0xa0>
    2bca:	9d 32       	cpi	r25, 0x2D	; 45
    2bcc:	39 f0       	breq	.+14     	; 0x2bdc <vfprintf+0x9c>
    2bce:	90 33       	cpi	r25, 0x30	; 48
    2bd0:	49 f4       	brne	.+18     	; 0x2be4 <vfprintf+0xa4>
    2bd2:	11 60       	ori	r17, 0x01	; 1
    2bd4:	28 c0       	rjmp	.+80     	; 0x2c26 <vfprintf+0xe6>
    2bd6:	12 60       	ori	r17, 0x02	; 2
    2bd8:	14 60       	ori	r17, 0x04	; 4
    2bda:	25 c0       	rjmp	.+74     	; 0x2c26 <vfprintf+0xe6>
    2bdc:	18 60       	ori	r17, 0x08	; 8
    2bde:	23 c0       	rjmp	.+70     	; 0x2c26 <vfprintf+0xe6>
    2be0:	10 61       	ori	r17, 0x10	; 16
    2be2:	21 c0       	rjmp	.+66     	; 0x2c26 <vfprintf+0xe6>
    2be4:	17 fd       	sbrc	r17, 7
    2be6:	2a c0       	rjmp	.+84     	; 0x2c3c <vfprintf+0xfc>
    2be8:	89 2f       	mov	r24, r25
    2bea:	80 53       	subi	r24, 0x30	; 48
    2bec:	8a 30       	cpi	r24, 0x0A	; 10
    2bee:	78 f4       	brcc	.+30     	; 0x2c0e <vfprintf+0xce>
    2bf0:	16 ff       	sbrs	r17, 6
    2bf2:	06 c0       	rjmp	.+12     	; 0x2c00 <vfprintf+0xc0>
    2bf4:	fa e0       	ldi	r31, 0x0A	; 10
    2bf6:	9f 9e       	mul	r9, r31
    2bf8:	90 2c       	mov	r9, r0
    2bfa:	11 24       	eor	r1, r1
    2bfc:	98 0e       	add	r9, r24
    2bfe:	13 c0       	rjmp	.+38     	; 0x2c26 <vfprintf+0xe6>
    2c00:	3a e0       	ldi	r19, 0x0A	; 10
    2c02:	83 9e       	mul	r8, r19
    2c04:	80 2c       	mov	r8, r0
    2c06:	11 24       	eor	r1, r1
    2c08:	88 0e       	add	r8, r24
    2c0a:	10 62       	ori	r17, 0x20	; 32
    2c0c:	0c c0       	rjmp	.+24     	; 0x2c26 <vfprintf+0xe6>
    2c0e:	9e 32       	cpi	r25, 0x2E	; 46
    2c10:	21 f4       	brne	.+8      	; 0x2c1a <vfprintf+0xda>
    2c12:	16 fd       	sbrc	r17, 6
    2c14:	14 c3       	rjmp	.+1576   	; 0x323e <vfprintf+0x6fe>
    2c16:	10 64       	ori	r17, 0x40	; 64
    2c18:	06 c0       	rjmp	.+12     	; 0x2c26 <vfprintf+0xe6>
    2c1a:	9c 36       	cpi	r25, 0x6C	; 108
    2c1c:	11 f4       	brne	.+4      	; 0x2c22 <vfprintf+0xe2>
    2c1e:	10 68       	ori	r17, 0x80	; 128
    2c20:	02 c0       	rjmp	.+4      	; 0x2c26 <vfprintf+0xe6>
    2c22:	98 36       	cpi	r25, 0x68	; 104
    2c24:	59 f4       	brne	.+22     	; 0x2c3c <vfprintf+0xfc>
    2c26:	ee 85       	ldd	r30, Y+14	; 0x0e
    2c28:	ff 85       	ldd	r31, Y+15	; 0x0f
    2c2a:	23 fd       	sbrc	r18, 3
    2c2c:	95 91       	lpm	r25, Z+
    2c2e:	23 ff       	sbrs	r18, 3
    2c30:	91 91       	ld	r25, Z+
    2c32:	ff 87       	std	Y+15, r31	; 0x0f
    2c34:	ee 87       	std	Y+14, r30	; 0x0e
    2c36:	99 23       	and	r25, r25
    2c38:	09 f0       	breq	.+2      	; 0x2c3c <vfprintf+0xfc>
    2c3a:	bc cf       	rjmp	.-136    	; 0x2bb4 <vfprintf+0x74>
    2c3c:	89 2f       	mov	r24, r25
    2c3e:	85 54       	subi	r24, 0x45	; 69
    2c40:	83 30       	cpi	r24, 0x03	; 3
    2c42:	20 f4       	brcc	.+8      	; 0x2c4c <vfprintf+0x10c>
    2c44:	81 2f       	mov	r24, r17
    2c46:	80 61       	ori	r24, 0x10	; 16
    2c48:	90 5e       	subi	r25, 0xE0	; 224
    2c4a:	07 c0       	rjmp	.+14     	; 0x2c5a <vfprintf+0x11a>
    2c4c:	89 2f       	mov	r24, r25
    2c4e:	85 56       	subi	r24, 0x65	; 101
    2c50:	83 30       	cpi	r24, 0x03	; 3
    2c52:	08 f0       	brcs	.+2      	; 0x2c56 <vfprintf+0x116>
    2c54:	9f c1       	rjmp	.+830    	; 0x2f94 <vfprintf+0x454>
    2c56:	81 2f       	mov	r24, r17
    2c58:	8f 7e       	andi	r24, 0xEF	; 239
    2c5a:	86 fd       	sbrc	r24, 6
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62 <vfprintf+0x122>
    2c5e:	76 e0       	ldi	r23, 0x06	; 6
    2c60:	97 2e       	mov	r9, r23
    2c62:	6f e3       	ldi	r22, 0x3F	; 63
    2c64:	f6 2e       	mov	r15, r22
    2c66:	f8 22       	and	r15, r24
    2c68:	95 36       	cpi	r25, 0x65	; 101
    2c6a:	19 f4       	brne	.+6      	; 0x2c72 <vfprintf+0x132>
    2c6c:	f0 e4       	ldi	r31, 0x40	; 64
    2c6e:	ff 2a       	or	r15, r31
    2c70:	07 c0       	rjmp	.+14     	; 0x2c80 <vfprintf+0x140>
    2c72:	96 36       	cpi	r25, 0x66	; 102
    2c74:	19 f4       	brne	.+6      	; 0x2c7c <vfprintf+0x13c>
    2c76:	20 e8       	ldi	r18, 0x80	; 128
    2c78:	f2 2a       	or	r15, r18
    2c7a:	02 c0       	rjmp	.+4      	; 0x2c80 <vfprintf+0x140>
    2c7c:	91 10       	cpse	r9, r1
    2c7e:	9a 94       	dec	r9
    2c80:	f7 fe       	sbrs	r15, 7
    2c82:	0a c0       	rjmp	.+20     	; 0x2c98 <vfprintf+0x158>
    2c84:	3b e3       	ldi	r19, 0x3B	; 59
    2c86:	39 15       	cp	r19, r9
    2c88:	18 f4       	brcc	.+6      	; 0x2c90 <vfprintf+0x150>
    2c8a:	5c e3       	ldi	r21, 0x3C	; 60
    2c8c:	b5 2e       	mov	r11, r21
    2c8e:	02 c0       	rjmp	.+4      	; 0x2c94 <vfprintf+0x154>
    2c90:	b9 2c       	mov	r11, r9
    2c92:	b3 94       	inc	r11
    2c94:	27 e0       	ldi	r18, 0x07	; 7
    2c96:	09 c0       	rjmp	.+18     	; 0x2caa <vfprintf+0x16a>
    2c98:	47 e0       	ldi	r20, 0x07	; 7
    2c9a:	49 15       	cp	r20, r9
    2c9c:	20 f4       	brcc	.+8      	; 0x2ca6 <vfprintf+0x166>
    2c9e:	bb 24       	eor	r11, r11
    2ca0:	47 e0       	ldi	r20, 0x07	; 7
    2ca2:	94 2e       	mov	r9, r20
    2ca4:	f7 cf       	rjmp	.-18     	; 0x2c94 <vfprintf+0x154>
    2ca6:	29 2d       	mov	r18, r9
    2ca8:	bb 24       	eor	r11, r11
    2caa:	c6 01       	movw	r24, r12
    2cac:	04 96       	adiw	r24, 0x04	; 4
    2cae:	9d 87       	std	Y+13, r25	; 0x0d
    2cb0:	8c 87       	std	Y+12, r24	; 0x0c
    2cb2:	f6 01       	movw	r30, r12
    2cb4:	60 81       	ld	r22, Z
    2cb6:	71 81       	ldd	r23, Z+1	; 0x01
    2cb8:	82 81       	ldd	r24, Z+2	; 0x02
    2cba:	93 81       	ldd	r25, Z+3	; 0x03
    2cbc:	ae 01       	movw	r20, r28
    2cbe:	4f 5f       	subi	r20, 0xFF	; 255
    2cc0:	5f 4f       	sbci	r21, 0xFF	; 255
    2cc2:	0b 2d       	mov	r16, r11
    2cc4:	0e 94 2f 1a 	call	0x345e	; 0x345e <__ftoa_engine>
    2cc8:	6c 01       	movw	r12, r24
    2cca:	09 81       	ldd	r16, Y+1	; 0x01
    2ccc:	20 2e       	mov	r2, r16
    2cce:	33 24       	eor	r3, r3
    2cd0:	00 ff       	sbrs	r16, 0
    2cd2:	04 c0       	rjmp	.+8      	; 0x2cdc <vfprintf+0x19c>
    2cd4:	03 fd       	sbrc	r16, 3
    2cd6:	02 c0       	rjmp	.+4      	; 0x2cdc <vfprintf+0x19c>
    2cd8:	1d e2       	ldi	r17, 0x2D	; 45
    2cda:	09 c0       	rjmp	.+18     	; 0x2cee <vfprintf+0x1ae>
    2cdc:	f1 fe       	sbrs	r15, 1
    2cde:	02 c0       	rjmp	.+4      	; 0x2ce4 <vfprintf+0x1a4>
    2ce0:	1b e2       	ldi	r17, 0x2B	; 43
    2ce2:	05 c0       	rjmp	.+10     	; 0x2cee <vfprintf+0x1ae>
    2ce4:	f2 fc       	sbrc	r15, 2
    2ce6:	02 c0       	rjmp	.+4      	; 0x2cec <vfprintf+0x1ac>
    2ce8:	10 e0       	ldi	r17, 0x00	; 0
    2cea:	01 c0       	rjmp	.+2      	; 0x2cee <vfprintf+0x1ae>
    2cec:	10 e2       	ldi	r17, 0x20	; 32
    2cee:	c1 01       	movw	r24, r2
    2cf0:	8c 70       	andi	r24, 0x0C	; 12
    2cf2:	90 70       	andi	r25, 0x00	; 0
    2cf4:	89 2b       	or	r24, r25
    2cf6:	b9 f1       	breq	.+110    	; 0x2d66 <vfprintf+0x226>
    2cf8:	11 23       	and	r17, r17
    2cfa:	11 f4       	brne	.+4      	; 0x2d00 <vfprintf+0x1c0>
    2cfc:	83 e0       	ldi	r24, 0x03	; 3
    2cfe:	01 c0       	rjmp	.+2      	; 0x2d02 <vfprintf+0x1c2>
    2d00:	84 e0       	ldi	r24, 0x04	; 4
    2d02:	88 15       	cp	r24, r8
    2d04:	10 f0       	brcs	.+4      	; 0x2d0a <vfprintf+0x1ca>
    2d06:	88 24       	eor	r8, r8
    2d08:	0a c0       	rjmp	.+20     	; 0x2d1e <vfprintf+0x1de>
    2d0a:	88 1a       	sub	r8, r24
    2d0c:	f3 fc       	sbrc	r15, 3
    2d0e:	07 c0       	rjmp	.+14     	; 0x2d1e <vfprintf+0x1de>
    2d10:	80 e2       	ldi	r24, 0x20	; 32
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	b3 01       	movw	r22, r6
    2d16:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    2d1a:	8a 94       	dec	r8
    2d1c:	c9 f7       	brne	.-14     	; 0x2d10 <vfprintf+0x1d0>
    2d1e:	11 23       	and	r17, r17
    2d20:	29 f0       	breq	.+10     	; 0x2d2c <vfprintf+0x1ec>
    2d22:	81 2f       	mov	r24, r17
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	b3 01       	movw	r22, r6
    2d28:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    2d2c:	23 fe       	sbrs	r2, 3
    2d2e:	03 c0       	rjmp	.+6      	; 0x2d36 <vfprintf+0x1f6>
    2d30:	04 ee       	ldi	r16, 0xE4	; 228
    2d32:	10 e0       	ldi	r17, 0x00	; 0
    2d34:	0e c0       	rjmp	.+28     	; 0x2d52 <vfprintf+0x212>
    2d36:	08 ee       	ldi	r16, 0xE8	; 232
    2d38:	10 e0       	ldi	r17, 0x00	; 0
    2d3a:	0b c0       	rjmp	.+22     	; 0x2d52 <vfprintf+0x212>
    2d3c:	e1 14       	cp	r14, r1
    2d3e:	f1 04       	cpc	r15, r1
    2d40:	09 f0       	breq	.+2      	; 0x2d44 <vfprintf+0x204>
    2d42:	80 52       	subi	r24, 0x20	; 32
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	b3 01       	movw	r22, r6
    2d48:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    2d4c:	0f 5f       	subi	r16, 0xFF	; 255
    2d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d50:	05 c0       	rjmp	.+10     	; 0x2d5c <vfprintf+0x21c>
    2d52:	ef 2c       	mov	r14, r15
    2d54:	ff 24       	eor	r15, r15
    2d56:	f0 e1       	ldi	r31, 0x10	; 16
    2d58:	ef 22       	and	r14, r31
    2d5a:	ff 24       	eor	r15, r15
    2d5c:	f8 01       	movw	r30, r16
    2d5e:	84 91       	lpm	r24, Z+
    2d60:	88 23       	and	r24, r24
    2d62:	61 f7       	brne	.-40     	; 0x2d3c <vfprintf+0x1fc>
    2d64:	14 c1       	rjmp	.+552    	; 0x2f8e <vfprintf+0x44e>
    2d66:	f7 fe       	sbrs	r15, 7
    2d68:	12 c0       	rjmp	.+36     	; 0x2d8e <vfprintf+0x24e>
    2d6a:	bc 0c       	add	r11, r12
    2d6c:	24 fe       	sbrs	r2, 4
    2d6e:	04 c0       	rjmp	.+8      	; 0x2d78 <vfprintf+0x238>
    2d70:	8a 81       	ldd	r24, Y+2	; 0x02
    2d72:	81 33       	cpi	r24, 0x31	; 49
    2d74:	09 f4       	brne	.+2      	; 0x2d78 <vfprintf+0x238>
    2d76:	ba 94       	dec	r11
    2d78:	1b 14       	cp	r1, r11
    2d7a:	1c f0       	brlt	.+6      	; 0x2d82 <vfprintf+0x242>
    2d7c:	bb 24       	eor	r11, r11
    2d7e:	b3 94       	inc	r11
    2d80:	2d c0       	rjmp	.+90     	; 0x2ddc <vfprintf+0x29c>
    2d82:	f8 e0       	ldi	r31, 0x08	; 8
    2d84:	fb 15       	cp	r31, r11
    2d86:	50 f5       	brcc	.+84     	; 0x2ddc <vfprintf+0x29c>
    2d88:	38 e0       	ldi	r19, 0x08	; 8
    2d8a:	b3 2e       	mov	r11, r19
    2d8c:	27 c0       	rjmp	.+78     	; 0x2ddc <vfprintf+0x29c>
    2d8e:	f6 fc       	sbrc	r15, 6
    2d90:	25 c0       	rjmp	.+74     	; 0x2ddc <vfprintf+0x29c>
    2d92:	89 2d       	mov	r24, r9
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	8c 15       	cp	r24, r12
    2d98:	9d 05       	cpc	r25, r13
    2d9a:	4c f0       	brlt	.+18     	; 0x2dae <vfprintf+0x26e>
    2d9c:	2c ef       	ldi	r18, 0xFC	; 252
    2d9e:	c2 16       	cp	r12, r18
    2da0:	2f ef       	ldi	r18, 0xFF	; 255
    2da2:	d2 06       	cpc	r13, r18
    2da4:	24 f0       	brlt	.+8      	; 0x2dae <vfprintf+0x26e>
    2da6:	30 e8       	ldi	r19, 0x80	; 128
    2da8:	f3 2a       	or	r15, r19
    2daa:	01 c0       	rjmp	.+2      	; 0x2dae <vfprintf+0x26e>
    2dac:	9a 94       	dec	r9
    2dae:	99 20       	and	r9, r9
    2db0:	49 f0       	breq	.+18     	; 0x2dc4 <vfprintf+0x284>
    2db2:	e2 e0       	ldi	r30, 0x02	; 2
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	ec 0f       	add	r30, r28
    2db8:	fd 1f       	adc	r31, r29
    2dba:	e9 0d       	add	r30, r9
    2dbc:	f1 1d       	adc	r31, r1
    2dbe:	80 81       	ld	r24, Z
    2dc0:	80 33       	cpi	r24, 0x30	; 48
    2dc2:	a1 f3       	breq	.-24     	; 0x2dac <vfprintf+0x26c>
    2dc4:	f7 fe       	sbrs	r15, 7
    2dc6:	0a c0       	rjmp	.+20     	; 0x2ddc <vfprintf+0x29c>
    2dc8:	b9 2c       	mov	r11, r9
    2dca:	b3 94       	inc	r11
    2dcc:	89 2d       	mov	r24, r9
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	c8 16       	cp	r12, r24
    2dd2:	d9 06       	cpc	r13, r25
    2dd4:	14 f0       	brlt	.+4      	; 0x2dda <vfprintf+0x29a>
    2dd6:	99 24       	eor	r9, r9
    2dd8:	01 c0       	rjmp	.+2      	; 0x2ddc <vfprintf+0x29c>
    2dda:	9c 18       	sub	r9, r12
    2ddc:	f7 fc       	sbrc	r15, 7
    2dde:	03 c0       	rjmp	.+6      	; 0x2de6 <vfprintf+0x2a6>
    2de0:	25 e0       	ldi	r18, 0x05	; 5
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	09 c0       	rjmp	.+18     	; 0x2df8 <vfprintf+0x2b8>
    2de6:	1c 14       	cp	r1, r12
    2de8:	1d 04       	cpc	r1, r13
    2dea:	1c f0       	brlt	.+6      	; 0x2df2 <vfprintf+0x2b2>
    2dec:	21 e0       	ldi	r18, 0x01	; 1
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	03 c0       	rjmp	.+6      	; 0x2df8 <vfprintf+0x2b8>
    2df2:	96 01       	movw	r18, r12
    2df4:	2f 5f       	subi	r18, 0xFF	; 255
    2df6:	3f 4f       	sbci	r19, 0xFF	; 255
    2df8:	11 23       	and	r17, r17
    2dfa:	11 f0       	breq	.+4      	; 0x2e00 <vfprintf+0x2c0>
    2dfc:	2f 5f       	subi	r18, 0xFF	; 255
    2dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    2e00:	99 20       	and	r9, r9
    2e02:	29 f0       	breq	.+10     	; 0x2e0e <vfprintf+0x2ce>
    2e04:	89 2d       	mov	r24, r9
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	01 96       	adiw	r24, 0x01	; 1
    2e0a:	28 0f       	add	r18, r24
    2e0c:	39 1f       	adc	r19, r25
    2e0e:	88 2d       	mov	r24, r8
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	28 17       	cp	r18, r24
    2e14:	39 07       	cpc	r19, r25
    2e16:	14 f0       	brlt	.+4      	; 0x2e1c <vfprintf+0x2dc>
    2e18:	88 24       	eor	r8, r8
    2e1a:	01 c0       	rjmp	.+2      	; 0x2e1e <vfprintf+0x2de>
    2e1c:	82 1a       	sub	r8, r18
    2e1e:	4f 2c       	mov	r4, r15
    2e20:	55 24       	eor	r5, r5
    2e22:	c2 01       	movw	r24, r4
    2e24:	89 70       	andi	r24, 0x09	; 9
    2e26:	90 70       	andi	r25, 0x00	; 0
    2e28:	89 2b       	or	r24, r25
    2e2a:	39 f0       	breq	.+14     	; 0x2e3a <vfprintf+0x2fa>
    2e2c:	08 c0       	rjmp	.+16     	; 0x2e3e <vfprintf+0x2fe>
    2e2e:	80 e2       	ldi	r24, 0x20	; 32
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	b3 01       	movw	r22, r6
    2e34:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    2e38:	8a 94       	dec	r8
    2e3a:	88 20       	and	r8, r8
    2e3c:	c1 f7       	brne	.-16     	; 0x2e2e <vfprintf+0x2ee>
    2e3e:	11 23       	and	r17, r17
    2e40:	29 f0       	breq	.+10     	; 0x2e4c <vfprintf+0x30c>
    2e42:	81 2f       	mov	r24, r17
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	b3 01       	movw	r22, r6
    2e48:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    2e4c:	43 fe       	sbrs	r4, 3
    2e4e:	07 c0       	rjmp	.+14     	; 0x2e5e <vfprintf+0x31e>
    2e50:	08 c0       	rjmp	.+16     	; 0x2e62 <vfprintf+0x322>
    2e52:	80 e3       	ldi	r24, 0x30	; 48
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	b3 01       	movw	r22, r6
    2e58:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    2e5c:	8a 94       	dec	r8
    2e5e:	88 20       	and	r8, r8
    2e60:	c1 f7       	brne	.-16     	; 0x2e52 <vfprintf+0x312>
    2e62:	f7 fe       	sbrs	r15, 7
    2e64:	46 c0       	rjmp	.+140    	; 0x2ef2 <vfprintf+0x3b2>
    2e66:	86 01       	movw	r16, r12
    2e68:	d7 fe       	sbrs	r13, 7
    2e6a:	02 c0       	rjmp	.+4      	; 0x2e70 <vfprintf+0x330>
    2e6c:	00 e0       	ldi	r16, 0x00	; 0
    2e6e:	10 e0       	ldi	r17, 0x00	; 0
    2e70:	76 01       	movw	r14, r12
    2e72:	08 94       	sec
    2e74:	e1 1c       	adc	r14, r1
    2e76:	f1 1c       	adc	r15, r1
    2e78:	e0 1a       	sub	r14, r16
    2e7a:	f1 0a       	sbc	r15, r17
    2e7c:	41 e0       	ldi	r20, 0x01	; 1
    2e7e:	50 e0       	ldi	r21, 0x00	; 0
    2e80:	4c 0f       	add	r20, r28
    2e82:	5d 1f       	adc	r21, r29
    2e84:	e4 0e       	add	r14, r20
    2e86:	f5 1e       	adc	r15, r21
    2e88:	26 01       	movw	r4, r12
    2e8a:	4b 18       	sub	r4, r11
    2e8c:	51 08       	sbc	r5, r1
    2e8e:	89 2d       	mov	r24, r9
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	aa 24       	eor	r10, r10
    2e94:	bb 24       	eor	r11, r11
    2e96:	a8 1a       	sub	r10, r24
    2e98:	b9 0a       	sbc	r11, r25
    2e9a:	5f ef       	ldi	r21, 0xFF	; 255
    2e9c:	0f 3f       	cpi	r16, 0xFF	; 255
    2e9e:	15 07       	cpc	r17, r21
    2ea0:	29 f4       	brne	.+10     	; 0x2eac <vfprintf+0x36c>
    2ea2:	8e e2       	ldi	r24, 0x2E	; 46
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	b3 01       	movw	r22, r6
    2ea8:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    2eac:	c0 16       	cp	r12, r16
    2eae:	d1 06       	cpc	r13, r17
    2eb0:	34 f0       	brlt	.+12     	; 0x2ebe <vfprintf+0x37e>
    2eb2:	40 16       	cp	r4, r16
    2eb4:	51 06       	cpc	r5, r17
    2eb6:	1c f4       	brge	.+6      	; 0x2ebe <vfprintf+0x37e>
    2eb8:	f7 01       	movw	r30, r14
    2eba:	80 81       	ld	r24, Z
    2ebc:	01 c0       	rjmp	.+2      	; 0x2ec0 <vfprintf+0x380>
    2ebe:	80 e3       	ldi	r24, 0x30	; 48
    2ec0:	01 50       	subi	r16, 0x01	; 1
    2ec2:	10 40       	sbci	r17, 0x00	; 0
    2ec4:	08 94       	sec
    2ec6:	e1 1c       	adc	r14, r1
    2ec8:	f1 1c       	adc	r15, r1
    2eca:	0a 15       	cp	r16, r10
    2ecc:	1b 05       	cpc	r17, r11
    2ece:	2c f0       	brlt	.+10     	; 0x2eda <vfprintf+0x39a>
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	b3 01       	movw	r22, r6
    2ed4:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    2ed8:	e0 cf       	rjmp	.-64     	; 0x2e9a <vfprintf+0x35a>
    2eda:	0c 15       	cp	r16, r12
    2edc:	1d 05       	cpc	r17, r13
    2ede:	39 f4       	brne	.+14     	; 0x2eee <vfprintf+0x3ae>
    2ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee2:	96 33       	cpi	r25, 0x36	; 54
    2ee4:	18 f4       	brcc	.+6      	; 0x2eec <vfprintf+0x3ac>
    2ee6:	95 33       	cpi	r25, 0x35	; 53
    2ee8:	11 f4       	brne	.+4      	; 0x2eee <vfprintf+0x3ae>
    2eea:	24 fe       	sbrs	r2, 4
    2eec:	81 e3       	ldi	r24, 0x31	; 49
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	4b c0       	rjmp	.+150    	; 0x2f88 <vfprintf+0x448>
    2ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef4:	81 33       	cpi	r24, 0x31	; 49
    2ef6:	09 f0       	breq	.+2      	; 0x2efa <vfprintf+0x3ba>
    2ef8:	0f 7e       	andi	r16, 0xEF	; 239
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	b3 01       	movw	r22, r6
    2efe:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    2f02:	99 20       	and	r9, r9
    2f04:	a1 f0       	breq	.+40     	; 0x2f2e <vfprintf+0x3ee>
    2f06:	8e e2       	ldi	r24, 0x2E	; 46
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	b3 01       	movw	r22, r6
    2f0c:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    2f10:	12 e0       	ldi	r17, 0x02	; 2
    2f12:	e1 e0       	ldi	r30, 0x01	; 1
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	ec 0f       	add	r30, r28
    2f18:	fd 1f       	adc	r31, r29
    2f1a:	e1 0f       	add	r30, r17
    2f1c:	f1 1d       	adc	r31, r1
    2f1e:	1f 5f       	subi	r17, 0xFF	; 255
    2f20:	80 81       	ld	r24, Z
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	b3 01       	movw	r22, r6
    2f26:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    2f2a:	9a 94       	dec	r9
    2f2c:	91 f7       	brne	.-28     	; 0x2f12 <vfprintf+0x3d2>
    2f2e:	44 fc       	sbrc	r4, 4
    2f30:	03 c0       	rjmp	.+6      	; 0x2f38 <vfprintf+0x3f8>
    2f32:	85 e6       	ldi	r24, 0x65	; 101
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	02 c0       	rjmp	.+4      	; 0x2f3c <vfprintf+0x3fc>
    2f38:	85 e4       	ldi	r24, 0x45	; 69
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	b3 01       	movw	r22, r6
    2f3e:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    2f42:	d7 fc       	sbrc	r13, 7
    2f44:	05 c0       	rjmp	.+10     	; 0x2f50 <vfprintf+0x410>
    2f46:	c1 14       	cp	r12, r1
    2f48:	d1 04       	cpc	r13, r1
    2f4a:	41 f4       	brne	.+16     	; 0x2f5c <vfprintf+0x41c>
    2f4c:	04 ff       	sbrs	r16, 4
    2f4e:	06 c0       	rjmp	.+12     	; 0x2f5c <vfprintf+0x41c>
    2f50:	d0 94       	com	r13
    2f52:	c1 94       	neg	r12
    2f54:	d1 08       	sbc	r13, r1
    2f56:	d3 94       	inc	r13
    2f58:	8d e2       	ldi	r24, 0x2D	; 45
    2f5a:	01 c0       	rjmp	.+2      	; 0x2f5e <vfprintf+0x41e>
    2f5c:	8b e2       	ldi	r24, 0x2B	; 43
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	b3 01       	movw	r22, r6
    2f62:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    2f66:	80 e3       	ldi	r24, 0x30	; 48
    2f68:	05 c0       	rjmp	.+10     	; 0x2f74 <vfprintf+0x434>
    2f6a:	8f 5f       	subi	r24, 0xFF	; 255
    2f6c:	26 ef       	ldi	r18, 0xF6	; 246
    2f6e:	3f ef       	ldi	r19, 0xFF	; 255
    2f70:	c2 0e       	add	r12, r18
    2f72:	d3 1e       	adc	r13, r19
    2f74:	3a e0       	ldi	r19, 0x0A	; 10
    2f76:	c3 16       	cp	r12, r19
    2f78:	d1 04       	cpc	r13, r1
    2f7a:	bc f7       	brge	.-18     	; 0x2f6a <vfprintf+0x42a>
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	b3 01       	movw	r22, r6
    2f80:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    2f84:	c6 01       	movw	r24, r12
    2f86:	c0 96       	adiw	r24, 0x30	; 48
    2f88:	b3 01       	movw	r22, r6
    2f8a:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    2f8e:	cc 84       	ldd	r12, Y+12	; 0x0c
    2f90:	dd 84       	ldd	r13, Y+13	; 0x0d
    2f92:	52 c1       	rjmp	.+676    	; 0x3238 <vfprintf+0x6f8>
    2f94:	93 36       	cpi	r25, 0x63	; 99
    2f96:	31 f0       	breq	.+12     	; 0x2fa4 <vfprintf+0x464>
    2f98:	93 37       	cpi	r25, 0x73	; 115
    2f9a:	99 f0       	breq	.+38     	; 0x2fc2 <vfprintf+0x482>
    2f9c:	93 35       	cpi	r25, 0x53	; 83
    2f9e:	09 f0       	breq	.+2      	; 0x2fa2 <vfprintf+0x462>
    2fa0:	59 c0       	rjmp	.+178    	; 0x3054 <vfprintf+0x514>
    2fa2:	23 c0       	rjmp	.+70     	; 0x2fea <vfprintf+0x4aa>
    2fa4:	f6 01       	movw	r30, r12
    2fa6:	80 81       	ld	r24, Z
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    2faa:	5e 01       	movw	r10, r28
    2fac:	08 94       	sec
    2fae:	a1 1c       	adc	r10, r1
    2fb0:	b1 1c       	adc	r11, r1
    2fb2:	22 e0       	ldi	r18, 0x02	; 2
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	c2 0e       	add	r12, r18
    2fb8:	d3 1e       	adc	r13, r19
    2fba:	21 e0       	ldi	r18, 0x01	; 1
    2fbc:	e2 2e       	mov	r14, r18
    2fbe:	f1 2c       	mov	r15, r1
    2fc0:	12 c0       	rjmp	.+36     	; 0x2fe6 <vfprintf+0x4a6>
    2fc2:	f6 01       	movw	r30, r12
    2fc4:	a0 80       	ld	r10, Z
    2fc6:	b1 80       	ldd	r11, Z+1	; 0x01
    2fc8:	16 fd       	sbrc	r17, 6
    2fca:	03 c0       	rjmp	.+6      	; 0x2fd2 <vfprintf+0x492>
    2fcc:	6f ef       	ldi	r22, 0xFF	; 255
    2fce:	7f ef       	ldi	r23, 0xFF	; 255
    2fd0:	02 c0       	rjmp	.+4      	; 0x2fd6 <vfprintf+0x496>
    2fd2:	69 2d       	mov	r22, r9
    2fd4:	70 e0       	ldi	r23, 0x00	; 0
    2fd6:	22 e0       	ldi	r18, 0x02	; 2
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	c2 0e       	add	r12, r18
    2fdc:	d3 1e       	adc	r13, r19
    2fde:	c5 01       	movw	r24, r10
    2fe0:	0e 94 19 1b 	call	0x3632	; 0x3632 <strnlen>
    2fe4:	7c 01       	movw	r14, r24
    2fe6:	1f 77       	andi	r17, 0x7F	; 127
    2fe8:	13 c0       	rjmp	.+38     	; 0x3010 <vfprintf+0x4d0>
    2fea:	f6 01       	movw	r30, r12
    2fec:	a0 80       	ld	r10, Z
    2fee:	b1 80       	ldd	r11, Z+1	; 0x01
    2ff0:	16 fd       	sbrc	r17, 6
    2ff2:	03 c0       	rjmp	.+6      	; 0x2ffa <vfprintf+0x4ba>
    2ff4:	6f ef       	ldi	r22, 0xFF	; 255
    2ff6:	7f ef       	ldi	r23, 0xFF	; 255
    2ff8:	02 c0       	rjmp	.+4      	; 0x2ffe <vfprintf+0x4be>
    2ffa:	69 2d       	mov	r22, r9
    2ffc:	70 e0       	ldi	r23, 0x00	; 0
    2ffe:	22 e0       	ldi	r18, 0x02	; 2
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	c2 0e       	add	r12, r18
    3004:	d3 1e       	adc	r13, r19
    3006:	c5 01       	movw	r24, r10
    3008:	0e 94 07 1b 	call	0x360e	; 0x360e <strnlen_P>
    300c:	7c 01       	movw	r14, r24
    300e:	10 68       	ori	r17, 0x80	; 128
    3010:	13 ff       	sbrs	r17, 3
    3012:	07 c0       	rjmp	.+14     	; 0x3022 <vfprintf+0x4e2>
    3014:	1b c0       	rjmp	.+54     	; 0x304c <vfprintf+0x50c>
    3016:	80 e2       	ldi	r24, 0x20	; 32
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	b3 01       	movw	r22, r6
    301c:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    3020:	8a 94       	dec	r8
    3022:	88 2d       	mov	r24, r8
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	e8 16       	cp	r14, r24
    3028:	f9 06       	cpc	r15, r25
    302a:	a8 f3       	brcs	.-22     	; 0x3016 <vfprintf+0x4d6>
    302c:	0f c0       	rjmp	.+30     	; 0x304c <vfprintf+0x50c>
    302e:	f5 01       	movw	r30, r10
    3030:	17 fd       	sbrc	r17, 7
    3032:	85 91       	lpm	r24, Z+
    3034:	17 ff       	sbrs	r17, 7
    3036:	81 91       	ld	r24, Z+
    3038:	5f 01       	movw	r10, r30
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	b3 01       	movw	r22, r6
    303e:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    3042:	81 10       	cpse	r8, r1
    3044:	8a 94       	dec	r8
    3046:	08 94       	sec
    3048:	e1 08       	sbc	r14, r1
    304a:	f1 08       	sbc	r15, r1
    304c:	e1 14       	cp	r14, r1
    304e:	f1 04       	cpc	r15, r1
    3050:	71 f7       	brne	.-36     	; 0x302e <vfprintf+0x4ee>
    3052:	f2 c0       	rjmp	.+484    	; 0x3238 <vfprintf+0x6f8>
    3054:	94 36       	cpi	r25, 0x64	; 100
    3056:	11 f0       	breq	.+4      	; 0x305c <vfprintf+0x51c>
    3058:	99 36       	cpi	r25, 0x69	; 105
    305a:	89 f5       	brne	.+98     	; 0x30be <vfprintf+0x57e>
    305c:	17 ff       	sbrs	r17, 7
    305e:	08 c0       	rjmp	.+16     	; 0x3070 <vfprintf+0x530>
    3060:	f6 01       	movw	r30, r12
    3062:	20 81       	ld	r18, Z
    3064:	31 81       	ldd	r19, Z+1	; 0x01
    3066:	42 81       	ldd	r20, Z+2	; 0x02
    3068:	53 81       	ldd	r21, Z+3	; 0x03
    306a:	84 e0       	ldi	r24, 0x04	; 4
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	0a c0       	rjmp	.+20     	; 0x3084 <vfprintf+0x544>
    3070:	f6 01       	movw	r30, r12
    3072:	80 81       	ld	r24, Z
    3074:	91 81       	ldd	r25, Z+1	; 0x01
    3076:	9c 01       	movw	r18, r24
    3078:	44 27       	eor	r20, r20
    307a:	37 fd       	sbrc	r19, 7
    307c:	40 95       	com	r20
    307e:	54 2f       	mov	r21, r20
    3080:	82 e0       	ldi	r24, 0x02	; 2
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	c8 0e       	add	r12, r24
    3086:	d9 1e       	adc	r13, r25
    3088:	9f e6       	ldi	r25, 0x6F	; 111
    308a:	f9 2e       	mov	r15, r25
    308c:	f1 22       	and	r15, r17
    308e:	57 ff       	sbrs	r21, 7
    3090:	09 c0       	rjmp	.+18     	; 0x30a4 <vfprintf+0x564>
    3092:	50 95       	com	r21
    3094:	40 95       	com	r20
    3096:	30 95       	com	r19
    3098:	21 95       	neg	r18
    309a:	3f 4f       	sbci	r19, 0xFF	; 255
    309c:	4f 4f       	sbci	r20, 0xFF	; 255
    309e:	5f 4f       	sbci	r21, 0xFF	; 255
    30a0:	90 e8       	ldi	r25, 0x80	; 128
    30a2:	f9 2a       	or	r15, r25
    30a4:	ca 01       	movw	r24, r20
    30a6:	b9 01       	movw	r22, r18
    30a8:	ae 01       	movw	r20, r28
    30aa:	4f 5f       	subi	r20, 0xFF	; 255
    30ac:	5f 4f       	sbci	r21, 0xFF	; 255
    30ae:	2a e0       	ldi	r18, 0x0A	; 10
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	0e 94 8e 1b 	call	0x371c	; 0x371c <__ultoa_invert>
    30b6:	e8 2e       	mov	r14, r24
    30b8:	e8 89       	ldd	r30, Y+16	; 0x10
    30ba:	ee 1a       	sub	r14, r30
    30bc:	41 c0       	rjmp	.+130    	; 0x3140 <vfprintf+0x600>
    30be:	95 37       	cpi	r25, 0x75	; 117
    30c0:	21 f4       	brne	.+8      	; 0x30ca <vfprintf+0x58a>
    30c2:	1f 7e       	andi	r17, 0xEF	; 239
    30c4:	2a e0       	ldi	r18, 0x0A	; 10
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	1c c0       	rjmp	.+56     	; 0x3102 <vfprintf+0x5c2>
    30ca:	19 7f       	andi	r17, 0xF9	; 249
    30cc:	9f 36       	cpi	r25, 0x6F	; 111
    30ce:	61 f0       	breq	.+24     	; 0x30e8 <vfprintf+0x5a8>
    30d0:	90 37       	cpi	r25, 0x70	; 112
    30d2:	20 f4       	brcc	.+8      	; 0x30dc <vfprintf+0x59c>
    30d4:	98 35       	cpi	r25, 0x58	; 88
    30d6:	09 f0       	breq	.+2      	; 0x30da <vfprintf+0x59a>
    30d8:	b2 c0       	rjmp	.+356    	; 0x323e <vfprintf+0x6fe>
    30da:	0f c0       	rjmp	.+30     	; 0x30fa <vfprintf+0x5ba>
    30dc:	90 37       	cpi	r25, 0x70	; 112
    30de:	39 f0       	breq	.+14     	; 0x30ee <vfprintf+0x5ae>
    30e0:	98 37       	cpi	r25, 0x78	; 120
    30e2:	09 f0       	breq	.+2      	; 0x30e6 <vfprintf+0x5a6>
    30e4:	ac c0       	rjmp	.+344    	; 0x323e <vfprintf+0x6fe>
    30e6:	04 c0       	rjmp	.+8      	; 0x30f0 <vfprintf+0x5b0>
    30e8:	28 e0       	ldi	r18, 0x08	; 8
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	0a c0       	rjmp	.+20     	; 0x3102 <vfprintf+0x5c2>
    30ee:	10 61       	ori	r17, 0x10	; 16
    30f0:	14 fd       	sbrc	r17, 4
    30f2:	14 60       	ori	r17, 0x04	; 4
    30f4:	20 e1       	ldi	r18, 0x10	; 16
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	04 c0       	rjmp	.+8      	; 0x3102 <vfprintf+0x5c2>
    30fa:	14 fd       	sbrc	r17, 4
    30fc:	16 60       	ori	r17, 0x06	; 6
    30fe:	20 e1       	ldi	r18, 0x10	; 16
    3100:	32 e0       	ldi	r19, 0x02	; 2
    3102:	17 ff       	sbrs	r17, 7
    3104:	08 c0       	rjmp	.+16     	; 0x3116 <vfprintf+0x5d6>
    3106:	f6 01       	movw	r30, r12
    3108:	60 81       	ld	r22, Z
    310a:	71 81       	ldd	r23, Z+1	; 0x01
    310c:	82 81       	ldd	r24, Z+2	; 0x02
    310e:	93 81       	ldd	r25, Z+3	; 0x03
    3110:	44 e0       	ldi	r20, 0x04	; 4
    3112:	50 e0       	ldi	r21, 0x00	; 0
    3114:	08 c0       	rjmp	.+16     	; 0x3126 <vfprintf+0x5e6>
    3116:	f6 01       	movw	r30, r12
    3118:	80 81       	ld	r24, Z
    311a:	91 81       	ldd	r25, Z+1	; 0x01
    311c:	bc 01       	movw	r22, r24
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	42 e0       	ldi	r20, 0x02	; 2
    3124:	50 e0       	ldi	r21, 0x00	; 0
    3126:	c4 0e       	add	r12, r20
    3128:	d5 1e       	adc	r13, r21
    312a:	ae 01       	movw	r20, r28
    312c:	4f 5f       	subi	r20, 0xFF	; 255
    312e:	5f 4f       	sbci	r21, 0xFF	; 255
    3130:	0e 94 8e 1b 	call	0x371c	; 0x371c <__ultoa_invert>
    3134:	e8 2e       	mov	r14, r24
    3136:	58 89       	ldd	r21, Y+16	; 0x10
    3138:	e5 1a       	sub	r14, r21
    313a:	8f e7       	ldi	r24, 0x7F	; 127
    313c:	f8 2e       	mov	r15, r24
    313e:	f1 22       	and	r15, r17
    3140:	f6 fe       	sbrs	r15, 6
    3142:	0b c0       	rjmp	.+22     	; 0x315a <vfprintf+0x61a>
    3144:	8e ef       	ldi	r24, 0xFE	; 254
    3146:	f8 22       	and	r15, r24
    3148:	e9 14       	cp	r14, r9
    314a:	38 f4       	brcc	.+14     	; 0x315a <vfprintf+0x61a>
    314c:	f4 fe       	sbrs	r15, 4
    314e:	07 c0       	rjmp	.+14     	; 0x315e <vfprintf+0x61e>
    3150:	f2 fc       	sbrc	r15, 2
    3152:	05 c0       	rjmp	.+10     	; 0x315e <vfprintf+0x61e>
    3154:	9f ee       	ldi	r25, 0xEF	; 239
    3156:	f9 22       	and	r15, r25
    3158:	02 c0       	rjmp	.+4      	; 0x315e <vfprintf+0x61e>
    315a:	1e 2d       	mov	r17, r14
    315c:	01 c0       	rjmp	.+2      	; 0x3160 <vfprintf+0x620>
    315e:	19 2d       	mov	r17, r9
    3160:	f4 fe       	sbrs	r15, 4
    3162:	0d c0       	rjmp	.+26     	; 0x317e <vfprintf+0x63e>
    3164:	fe 01       	movw	r30, r28
    3166:	ee 0d       	add	r30, r14
    3168:	f1 1d       	adc	r31, r1
    316a:	80 81       	ld	r24, Z
    316c:	80 33       	cpi	r24, 0x30	; 48
    316e:	19 f4       	brne	.+6      	; 0x3176 <vfprintf+0x636>
    3170:	e9 ee       	ldi	r30, 0xE9	; 233
    3172:	fe 22       	and	r15, r30
    3174:	08 c0       	rjmp	.+16     	; 0x3186 <vfprintf+0x646>
    3176:	1f 5f       	subi	r17, 0xFF	; 255
    3178:	f2 fe       	sbrs	r15, 2
    317a:	05 c0       	rjmp	.+10     	; 0x3186 <vfprintf+0x646>
    317c:	03 c0       	rjmp	.+6      	; 0x3184 <vfprintf+0x644>
    317e:	8f 2d       	mov	r24, r15
    3180:	86 78       	andi	r24, 0x86	; 134
    3182:	09 f0       	breq	.+2      	; 0x3186 <vfprintf+0x646>
    3184:	1f 5f       	subi	r17, 0xFF	; 255
    3186:	0f 2d       	mov	r16, r15
    3188:	f3 fc       	sbrc	r15, 3
    318a:	14 c0       	rjmp	.+40     	; 0x31b4 <vfprintf+0x674>
    318c:	f0 fe       	sbrs	r15, 0
    318e:	0f c0       	rjmp	.+30     	; 0x31ae <vfprintf+0x66e>
    3190:	18 15       	cp	r17, r8
    3192:	10 f0       	brcs	.+4      	; 0x3198 <vfprintf+0x658>
    3194:	9e 2c       	mov	r9, r14
    3196:	0b c0       	rjmp	.+22     	; 0x31ae <vfprintf+0x66e>
    3198:	9e 2c       	mov	r9, r14
    319a:	98 0c       	add	r9, r8
    319c:	91 1a       	sub	r9, r17
    319e:	18 2d       	mov	r17, r8
    31a0:	06 c0       	rjmp	.+12     	; 0x31ae <vfprintf+0x66e>
    31a2:	80 e2       	ldi	r24, 0x20	; 32
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	b3 01       	movw	r22, r6
    31a8:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    31ac:	1f 5f       	subi	r17, 0xFF	; 255
    31ae:	18 15       	cp	r17, r8
    31b0:	c0 f3       	brcs	.-16     	; 0x31a2 <vfprintf+0x662>
    31b2:	04 c0       	rjmp	.+8      	; 0x31bc <vfprintf+0x67c>
    31b4:	18 15       	cp	r17, r8
    31b6:	10 f4       	brcc	.+4      	; 0x31bc <vfprintf+0x67c>
    31b8:	81 1a       	sub	r8, r17
    31ba:	01 c0       	rjmp	.+2      	; 0x31be <vfprintf+0x67e>
    31bc:	88 24       	eor	r8, r8
    31be:	04 ff       	sbrs	r16, 4
    31c0:	0f c0       	rjmp	.+30     	; 0x31e0 <vfprintf+0x6a0>
    31c2:	80 e3       	ldi	r24, 0x30	; 48
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	b3 01       	movw	r22, r6
    31c8:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    31cc:	02 ff       	sbrs	r16, 2
    31ce:	1d c0       	rjmp	.+58     	; 0x320a <vfprintf+0x6ca>
    31d0:	01 fd       	sbrc	r16, 1
    31d2:	03 c0       	rjmp	.+6      	; 0x31da <vfprintf+0x69a>
    31d4:	88 e7       	ldi	r24, 0x78	; 120
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	0e c0       	rjmp	.+28     	; 0x31f6 <vfprintf+0x6b6>
    31da:	88 e5       	ldi	r24, 0x58	; 88
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	0b c0       	rjmp	.+22     	; 0x31f6 <vfprintf+0x6b6>
    31e0:	80 2f       	mov	r24, r16
    31e2:	86 78       	andi	r24, 0x86	; 134
    31e4:	91 f0       	breq	.+36     	; 0x320a <vfprintf+0x6ca>
    31e6:	01 ff       	sbrs	r16, 1
    31e8:	02 c0       	rjmp	.+4      	; 0x31ee <vfprintf+0x6ae>
    31ea:	8b e2       	ldi	r24, 0x2B	; 43
    31ec:	01 c0       	rjmp	.+2      	; 0x31f0 <vfprintf+0x6b0>
    31ee:	80 e2       	ldi	r24, 0x20	; 32
    31f0:	f7 fc       	sbrc	r15, 7
    31f2:	8d e2       	ldi	r24, 0x2D	; 45
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	b3 01       	movw	r22, r6
    31f8:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    31fc:	06 c0       	rjmp	.+12     	; 0x320a <vfprintf+0x6ca>
    31fe:	80 e3       	ldi	r24, 0x30	; 48
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	b3 01       	movw	r22, r6
    3204:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    3208:	9a 94       	dec	r9
    320a:	e9 14       	cp	r14, r9
    320c:	c0 f3       	brcs	.-16     	; 0x31fe <vfprintf+0x6be>
    320e:	ea 94       	dec	r14
    3210:	e1 e0       	ldi	r30, 0x01	; 1
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	ec 0f       	add	r30, r28
    3216:	fd 1f       	adc	r31, r29
    3218:	ee 0d       	add	r30, r14
    321a:	f1 1d       	adc	r31, r1
    321c:	80 81       	ld	r24, Z
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	b3 01       	movw	r22, r6
    3222:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    3226:	ee 20       	and	r14, r14
    3228:	91 f7       	brne	.-28     	; 0x320e <vfprintf+0x6ce>
    322a:	06 c0       	rjmp	.+12     	; 0x3238 <vfprintf+0x6f8>
    322c:	80 e2       	ldi	r24, 0x20	; 32
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	b3 01       	movw	r22, r6
    3232:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <fputc>
    3236:	8a 94       	dec	r8
    3238:	88 20       	and	r8, r8
    323a:	c1 f7       	brne	.-16     	; 0x322c <vfprintf+0x6ec>
    323c:	99 cc       	rjmp	.-1742   	; 0x2b70 <vfprintf+0x30>
    323e:	f3 01       	movw	r30, r6
    3240:	66 81       	ldd	r22, Z+6	; 0x06
    3242:	77 81       	ldd	r23, Z+7	; 0x07
    3244:	cb 01       	movw	r24, r22
    3246:	61 96       	adiw	r28, 0x11	; 17
    3248:	e2 e1       	ldi	r30, 0x12	; 18
    324a:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <__epilogue_restores__>

0000324e <malloc>:
    324e:	cf 93       	push	r28
    3250:	df 93       	push	r29
    3252:	bc 01       	movw	r22, r24
    3254:	82 30       	cpi	r24, 0x02	; 2
    3256:	91 05       	cpc	r25, r1
    3258:	10 f4       	brcc	.+4      	; 0x325e <malloc+0x10>
    325a:	62 e0       	ldi	r22, 0x02	; 2
    325c:	70 e0       	ldi	r23, 0x00	; 0
    325e:	a0 91 3f 04 	lds	r26, 0x043F
    3262:	b0 91 40 04 	lds	r27, 0x0440
    3266:	ed 01       	movw	r28, r26
    3268:	e0 e0       	ldi	r30, 0x00	; 0
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	40 e0       	ldi	r20, 0x00	; 0
    326e:	50 e0       	ldi	r21, 0x00	; 0
    3270:	21 c0       	rjmp	.+66     	; 0x32b4 <malloc+0x66>
    3272:	88 81       	ld	r24, Y
    3274:	99 81       	ldd	r25, Y+1	; 0x01
    3276:	86 17       	cp	r24, r22
    3278:	97 07       	cpc	r25, r23
    327a:	69 f4       	brne	.+26     	; 0x3296 <malloc+0x48>
    327c:	8a 81       	ldd	r24, Y+2	; 0x02
    327e:	9b 81       	ldd	r25, Y+3	; 0x03
    3280:	30 97       	sbiw	r30, 0x00	; 0
    3282:	19 f0       	breq	.+6      	; 0x328a <malloc+0x3c>
    3284:	93 83       	std	Z+3, r25	; 0x03
    3286:	82 83       	std	Z+2, r24	; 0x02
    3288:	04 c0       	rjmp	.+8      	; 0x3292 <malloc+0x44>
    328a:	90 93 40 04 	sts	0x0440, r25
    328e:	80 93 3f 04 	sts	0x043F, r24
    3292:	fe 01       	movw	r30, r28
    3294:	34 c0       	rjmp	.+104    	; 0x32fe <malloc+0xb0>
    3296:	68 17       	cp	r22, r24
    3298:	79 07       	cpc	r23, r25
    329a:	38 f4       	brcc	.+14     	; 0x32aa <malloc+0x5c>
    329c:	41 15       	cp	r20, r1
    329e:	51 05       	cpc	r21, r1
    32a0:	19 f0       	breq	.+6      	; 0x32a8 <malloc+0x5a>
    32a2:	84 17       	cp	r24, r20
    32a4:	95 07       	cpc	r25, r21
    32a6:	08 f4       	brcc	.+2      	; 0x32aa <malloc+0x5c>
    32a8:	ac 01       	movw	r20, r24
    32aa:	fe 01       	movw	r30, r28
    32ac:	8a 81       	ldd	r24, Y+2	; 0x02
    32ae:	9b 81       	ldd	r25, Y+3	; 0x03
    32b0:	9c 01       	movw	r18, r24
    32b2:	e9 01       	movw	r28, r18
    32b4:	20 97       	sbiw	r28, 0x00	; 0
    32b6:	e9 f6       	brne	.-70     	; 0x3272 <malloc+0x24>
    32b8:	41 15       	cp	r20, r1
    32ba:	51 05       	cpc	r21, r1
    32bc:	a9 f1       	breq	.+106    	; 0x3328 <malloc+0xda>
    32be:	ca 01       	movw	r24, r20
    32c0:	86 1b       	sub	r24, r22
    32c2:	97 0b       	sbc	r25, r23
    32c4:	04 97       	sbiw	r24, 0x04	; 4
    32c6:	08 f4       	brcc	.+2      	; 0x32ca <malloc+0x7c>
    32c8:	ba 01       	movw	r22, r20
    32ca:	e0 e0       	ldi	r30, 0x00	; 0
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	2a c0       	rjmp	.+84     	; 0x3324 <malloc+0xd6>
    32d0:	8d 91       	ld	r24, X+
    32d2:	9c 91       	ld	r25, X
    32d4:	11 97       	sbiw	r26, 0x01	; 1
    32d6:	84 17       	cp	r24, r20
    32d8:	95 07       	cpc	r25, r21
    32da:	f9 f4       	brne	.+62     	; 0x331a <malloc+0xcc>
    32dc:	64 17       	cp	r22, r20
    32de:	75 07       	cpc	r23, r21
    32e0:	81 f4       	brne	.+32     	; 0x3302 <malloc+0xb4>
    32e2:	12 96       	adiw	r26, 0x02	; 2
    32e4:	8d 91       	ld	r24, X+
    32e6:	9c 91       	ld	r25, X
    32e8:	13 97       	sbiw	r26, 0x03	; 3
    32ea:	30 97       	sbiw	r30, 0x00	; 0
    32ec:	19 f0       	breq	.+6      	; 0x32f4 <malloc+0xa6>
    32ee:	93 83       	std	Z+3, r25	; 0x03
    32f0:	82 83       	std	Z+2, r24	; 0x02
    32f2:	04 c0       	rjmp	.+8      	; 0x32fc <malloc+0xae>
    32f4:	90 93 40 04 	sts	0x0440, r25
    32f8:	80 93 3f 04 	sts	0x043F, r24
    32fc:	fd 01       	movw	r30, r26
    32fe:	32 96       	adiw	r30, 0x02	; 2
    3300:	4f c0       	rjmp	.+158    	; 0x33a0 <malloc+0x152>
    3302:	ca 01       	movw	r24, r20
    3304:	86 1b       	sub	r24, r22
    3306:	97 0b       	sbc	r25, r23
    3308:	fd 01       	movw	r30, r26
    330a:	e8 0f       	add	r30, r24
    330c:	f9 1f       	adc	r31, r25
    330e:	61 93       	st	Z+, r22
    3310:	71 93       	st	Z+, r23
    3312:	02 97       	sbiw	r24, 0x02	; 2
    3314:	8d 93       	st	X+, r24
    3316:	9c 93       	st	X, r25
    3318:	43 c0       	rjmp	.+134    	; 0x33a0 <malloc+0x152>
    331a:	fd 01       	movw	r30, r26
    331c:	82 81       	ldd	r24, Z+2	; 0x02
    331e:	93 81       	ldd	r25, Z+3	; 0x03
    3320:	9c 01       	movw	r18, r24
    3322:	d9 01       	movw	r26, r18
    3324:	10 97       	sbiw	r26, 0x00	; 0
    3326:	a1 f6       	brne	.-88     	; 0x32d0 <malloc+0x82>
    3328:	80 91 3d 04 	lds	r24, 0x043D
    332c:	90 91 3e 04 	lds	r25, 0x043E
    3330:	89 2b       	or	r24, r25
    3332:	41 f4       	brne	.+16     	; 0x3344 <malloc+0xf6>
    3334:	80 91 f6 02 	lds	r24, 0x02F6
    3338:	90 91 f7 02 	lds	r25, 0x02F7
    333c:	90 93 3e 04 	sts	0x043E, r25
    3340:	80 93 3d 04 	sts	0x043D, r24
    3344:	40 91 f8 02 	lds	r20, 0x02F8
    3348:	50 91 f9 02 	lds	r21, 0x02F9
    334c:	41 15       	cp	r20, r1
    334e:	51 05       	cpc	r21, r1
    3350:	41 f4       	brne	.+16     	; 0x3362 <malloc+0x114>
    3352:	4d b7       	in	r20, 0x3d	; 61
    3354:	5e b7       	in	r21, 0x3e	; 62
    3356:	80 91 f4 02 	lds	r24, 0x02F4
    335a:	90 91 f5 02 	lds	r25, 0x02F5
    335e:	48 1b       	sub	r20, r24
    3360:	59 0b       	sbc	r21, r25
    3362:	20 91 3d 04 	lds	r18, 0x043D
    3366:	30 91 3e 04 	lds	r19, 0x043E
    336a:	24 17       	cp	r18, r20
    336c:	35 07       	cpc	r19, r21
    336e:	b0 f4       	brcc	.+44     	; 0x339c <malloc+0x14e>
    3370:	ca 01       	movw	r24, r20
    3372:	82 1b       	sub	r24, r18
    3374:	93 0b       	sbc	r25, r19
    3376:	86 17       	cp	r24, r22
    3378:	97 07       	cpc	r25, r23
    337a:	80 f0       	brcs	.+32     	; 0x339c <malloc+0x14e>
    337c:	ab 01       	movw	r20, r22
    337e:	4e 5f       	subi	r20, 0xFE	; 254
    3380:	5f 4f       	sbci	r21, 0xFF	; 255
    3382:	84 17       	cp	r24, r20
    3384:	95 07       	cpc	r25, r21
    3386:	50 f0       	brcs	.+20     	; 0x339c <malloc+0x14e>
    3388:	42 0f       	add	r20, r18
    338a:	53 1f       	adc	r21, r19
    338c:	50 93 3e 04 	sts	0x043E, r21
    3390:	40 93 3d 04 	sts	0x043D, r20
    3394:	f9 01       	movw	r30, r18
    3396:	61 93       	st	Z+, r22
    3398:	71 93       	st	Z+, r23
    339a:	02 c0       	rjmp	.+4      	; 0x33a0 <malloc+0x152>
    339c:	e0 e0       	ldi	r30, 0x00	; 0
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	cf 01       	movw	r24, r30
    33a2:	df 91       	pop	r29
    33a4:	cf 91       	pop	r28
    33a6:	08 95       	ret

000033a8 <free>:
    33a8:	cf 93       	push	r28
    33aa:	df 93       	push	r29
    33ac:	00 97       	sbiw	r24, 0x00	; 0
    33ae:	09 f4       	brne	.+2      	; 0x33b2 <free+0xa>
    33b0:	50 c0       	rjmp	.+160    	; 0x3452 <free+0xaa>
    33b2:	ec 01       	movw	r28, r24
    33b4:	22 97       	sbiw	r28, 0x02	; 2
    33b6:	1b 82       	std	Y+3, r1	; 0x03
    33b8:	1a 82       	std	Y+2, r1	; 0x02
    33ba:	a0 91 3f 04 	lds	r26, 0x043F
    33be:	b0 91 40 04 	lds	r27, 0x0440
    33c2:	10 97       	sbiw	r26, 0x00	; 0
    33c4:	09 f1       	breq	.+66     	; 0x3408 <free+0x60>
    33c6:	40 e0       	ldi	r20, 0x00	; 0
    33c8:	50 e0       	ldi	r21, 0x00	; 0
    33ca:	ac 17       	cp	r26, r28
    33cc:	bd 07       	cpc	r27, r29
    33ce:	08 f1       	brcs	.+66     	; 0x3412 <free+0x6a>
    33d0:	bb 83       	std	Y+3, r27	; 0x03
    33d2:	aa 83       	std	Y+2, r26	; 0x02
    33d4:	fe 01       	movw	r30, r28
    33d6:	21 91       	ld	r18, Z+
    33d8:	31 91       	ld	r19, Z+
    33da:	e2 0f       	add	r30, r18
    33dc:	f3 1f       	adc	r31, r19
    33de:	ae 17       	cp	r26, r30
    33e0:	bf 07       	cpc	r27, r31
    33e2:	79 f4       	brne	.+30     	; 0x3402 <free+0x5a>
    33e4:	8d 91       	ld	r24, X+
    33e6:	9c 91       	ld	r25, X
    33e8:	11 97       	sbiw	r26, 0x01	; 1
    33ea:	28 0f       	add	r18, r24
    33ec:	39 1f       	adc	r19, r25
    33ee:	2e 5f       	subi	r18, 0xFE	; 254
    33f0:	3f 4f       	sbci	r19, 0xFF	; 255
    33f2:	39 83       	std	Y+1, r19	; 0x01
    33f4:	28 83       	st	Y, r18
    33f6:	12 96       	adiw	r26, 0x02	; 2
    33f8:	8d 91       	ld	r24, X+
    33fa:	9c 91       	ld	r25, X
    33fc:	13 97       	sbiw	r26, 0x03	; 3
    33fe:	9b 83       	std	Y+3, r25	; 0x03
    3400:	8a 83       	std	Y+2, r24	; 0x02
    3402:	41 15       	cp	r20, r1
    3404:	51 05       	cpc	r21, r1
    3406:	71 f4       	brne	.+28     	; 0x3424 <free+0x7c>
    3408:	d0 93 40 04 	sts	0x0440, r29
    340c:	c0 93 3f 04 	sts	0x043F, r28
    3410:	20 c0       	rjmp	.+64     	; 0x3452 <free+0xaa>
    3412:	12 96       	adiw	r26, 0x02	; 2
    3414:	8d 91       	ld	r24, X+
    3416:	9c 91       	ld	r25, X
    3418:	13 97       	sbiw	r26, 0x03	; 3
    341a:	ad 01       	movw	r20, r26
    341c:	00 97       	sbiw	r24, 0x00	; 0
    341e:	11 f0       	breq	.+4      	; 0x3424 <free+0x7c>
    3420:	dc 01       	movw	r26, r24
    3422:	d3 cf       	rjmp	.-90     	; 0x33ca <free+0x22>
    3424:	fa 01       	movw	r30, r20
    3426:	d3 83       	std	Z+3, r29	; 0x03
    3428:	c2 83       	std	Z+2, r28	; 0x02
    342a:	21 91       	ld	r18, Z+
    342c:	31 91       	ld	r19, Z+
    342e:	e2 0f       	add	r30, r18
    3430:	f3 1f       	adc	r31, r19
    3432:	ce 17       	cp	r28, r30
    3434:	df 07       	cpc	r29, r31
    3436:	69 f4       	brne	.+26     	; 0x3452 <free+0xaa>
    3438:	88 81       	ld	r24, Y
    343a:	99 81       	ldd	r25, Y+1	; 0x01
    343c:	28 0f       	add	r18, r24
    343e:	39 1f       	adc	r19, r25
    3440:	2e 5f       	subi	r18, 0xFE	; 254
    3442:	3f 4f       	sbci	r19, 0xFF	; 255
    3444:	fa 01       	movw	r30, r20
    3446:	31 83       	std	Z+1, r19	; 0x01
    3448:	20 83       	st	Z, r18
    344a:	8a 81       	ldd	r24, Y+2	; 0x02
    344c:	9b 81       	ldd	r25, Y+3	; 0x03
    344e:	93 83       	std	Z+3, r25	; 0x03
    3450:	82 83       	std	Z+2, r24	; 0x02
    3452:	df 91       	pop	r29
    3454:	cf 91       	pop	r28
    3456:	08 95       	ret

00003458 <exit>:
    3458:	f8 94       	cli
    345a:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <_exit>

0000345e <__ftoa_engine>:
    345e:	28 30       	cpi	r18, 0x08	; 8
    3460:	08 f0       	brcs	.+2      	; 0x3464 <__ftoa_engine+0x6>
    3462:	27 e0       	ldi	r18, 0x07	; 7
    3464:	33 27       	eor	r19, r19
    3466:	da 01       	movw	r26, r20
    3468:	99 0f       	add	r25, r25
    346a:	31 1d       	adc	r19, r1
    346c:	87 fd       	sbrc	r24, 7
    346e:	91 60       	ori	r25, 0x01	; 1
    3470:	00 96       	adiw	r24, 0x00	; 0
    3472:	61 05       	cpc	r22, r1
    3474:	71 05       	cpc	r23, r1
    3476:	39 f4       	brne	.+14     	; 0x3486 <__ftoa_engine+0x28>
    3478:	32 60       	ori	r19, 0x02	; 2
    347a:	2e 5f       	subi	r18, 0xFE	; 254
    347c:	3d 93       	st	X+, r19
    347e:	30 e3       	ldi	r19, 0x30	; 48
    3480:	2a 95       	dec	r18
    3482:	e1 f7       	brne	.-8      	; 0x347c <__ftoa_engine+0x1e>
    3484:	08 95       	ret
    3486:	9f 3f       	cpi	r25, 0xFF	; 255
    3488:	30 f0       	brcs	.+12     	; 0x3496 <__ftoa_engine+0x38>
    348a:	80 38       	cpi	r24, 0x80	; 128
    348c:	71 05       	cpc	r23, r1
    348e:	61 05       	cpc	r22, r1
    3490:	09 f0       	breq	.+2      	; 0x3494 <__ftoa_engine+0x36>
    3492:	3c 5f       	subi	r19, 0xFC	; 252
    3494:	3c 5f       	subi	r19, 0xFC	; 252
    3496:	3d 93       	st	X+, r19
    3498:	91 30       	cpi	r25, 0x01	; 1
    349a:	08 f0       	brcs	.+2      	; 0x349e <__ftoa_engine+0x40>
    349c:	80 68       	ori	r24, 0x80	; 128
    349e:	91 1d       	adc	r25, r1
    34a0:	df 93       	push	r29
    34a2:	cf 93       	push	r28
    34a4:	1f 93       	push	r17
    34a6:	0f 93       	push	r16
    34a8:	ff 92       	push	r15
    34aa:	ef 92       	push	r14
    34ac:	19 2f       	mov	r17, r25
    34ae:	98 7f       	andi	r25, 0xF8	; 248
    34b0:	96 95       	lsr	r25
    34b2:	e9 2f       	mov	r30, r25
    34b4:	96 95       	lsr	r25
    34b6:	96 95       	lsr	r25
    34b8:	e9 0f       	add	r30, r25
    34ba:	ff 27       	eor	r31, r31
    34bc:	e8 5d       	subi	r30, 0xD8	; 216
    34be:	fb 4f       	sbci	r31, 0xFB	; 251
    34c0:	99 27       	eor	r25, r25
    34c2:	33 27       	eor	r19, r19
    34c4:	ee 24       	eor	r14, r14
    34c6:	ff 24       	eor	r15, r15
    34c8:	a7 01       	movw	r20, r14
    34ca:	e7 01       	movw	r28, r14
    34cc:	05 90       	lpm	r0, Z+
    34ce:	08 94       	sec
    34d0:	07 94       	ror	r0
    34d2:	28 f4       	brcc	.+10     	; 0x34de <__ftoa_engine+0x80>
    34d4:	36 0f       	add	r19, r22
    34d6:	e7 1e       	adc	r14, r23
    34d8:	f8 1e       	adc	r15, r24
    34da:	49 1f       	adc	r20, r25
    34dc:	51 1d       	adc	r21, r1
    34de:	66 0f       	add	r22, r22
    34e0:	77 1f       	adc	r23, r23
    34e2:	88 1f       	adc	r24, r24
    34e4:	99 1f       	adc	r25, r25
    34e6:	06 94       	lsr	r0
    34e8:	a1 f7       	brne	.-24     	; 0x34d2 <__ftoa_engine+0x74>
    34ea:	05 90       	lpm	r0, Z+
    34ec:	07 94       	ror	r0
    34ee:	28 f4       	brcc	.+10     	; 0x34fa <__ftoa_engine+0x9c>
    34f0:	e7 0e       	add	r14, r23
    34f2:	f8 1e       	adc	r15, r24
    34f4:	49 1f       	adc	r20, r25
    34f6:	56 1f       	adc	r21, r22
    34f8:	c1 1d       	adc	r28, r1
    34fa:	77 0f       	add	r23, r23
    34fc:	88 1f       	adc	r24, r24
    34fe:	99 1f       	adc	r25, r25
    3500:	66 1f       	adc	r22, r22
    3502:	06 94       	lsr	r0
    3504:	a1 f7       	brne	.-24     	; 0x34ee <__ftoa_engine+0x90>
    3506:	05 90       	lpm	r0, Z+
    3508:	07 94       	ror	r0
    350a:	28 f4       	brcc	.+10     	; 0x3516 <__ftoa_engine+0xb8>
    350c:	f8 0e       	add	r15, r24
    350e:	49 1f       	adc	r20, r25
    3510:	56 1f       	adc	r21, r22
    3512:	c7 1f       	adc	r28, r23
    3514:	d1 1d       	adc	r29, r1
    3516:	88 0f       	add	r24, r24
    3518:	99 1f       	adc	r25, r25
    351a:	66 1f       	adc	r22, r22
    351c:	77 1f       	adc	r23, r23
    351e:	06 94       	lsr	r0
    3520:	a1 f7       	brne	.-24     	; 0x350a <__ftoa_engine+0xac>
    3522:	05 90       	lpm	r0, Z+
    3524:	07 94       	ror	r0
    3526:	20 f4       	brcc	.+8      	; 0x3530 <__ftoa_engine+0xd2>
    3528:	49 0f       	add	r20, r25
    352a:	56 1f       	adc	r21, r22
    352c:	c7 1f       	adc	r28, r23
    352e:	d8 1f       	adc	r29, r24
    3530:	99 0f       	add	r25, r25
    3532:	66 1f       	adc	r22, r22
    3534:	77 1f       	adc	r23, r23
    3536:	88 1f       	adc	r24, r24
    3538:	06 94       	lsr	r0
    353a:	a9 f7       	brne	.-22     	; 0x3526 <__ftoa_engine+0xc8>
    353c:	84 91       	lpm	r24, Z+
    353e:	10 95       	com	r17
    3540:	17 70       	andi	r17, 0x07	; 7
    3542:	41 f0       	breq	.+16     	; 0x3554 <__ftoa_engine+0xf6>
    3544:	d6 95       	lsr	r29
    3546:	c7 95       	ror	r28
    3548:	57 95       	ror	r21
    354a:	47 95       	ror	r20
    354c:	f7 94       	ror	r15
    354e:	e7 94       	ror	r14
    3550:	1a 95       	dec	r17
    3552:	c1 f7       	brne	.-16     	; 0x3544 <__ftoa_engine+0xe6>
    3554:	ee ec       	ldi	r30, 0xCE	; 206
    3556:	f3 e0       	ldi	r31, 0x03	; 3
    3558:	68 94       	set
    355a:	15 90       	lpm	r1, Z+
    355c:	15 91       	lpm	r17, Z+
    355e:	35 91       	lpm	r19, Z+
    3560:	65 91       	lpm	r22, Z+
    3562:	95 91       	lpm	r25, Z+
    3564:	05 90       	lpm	r0, Z+
    3566:	7f e2       	ldi	r23, 0x2F	; 47
    3568:	73 95       	inc	r23
    356a:	e1 18       	sub	r14, r1
    356c:	f1 0a       	sbc	r15, r17
    356e:	43 0b       	sbc	r20, r19
    3570:	56 0b       	sbc	r21, r22
    3572:	c9 0b       	sbc	r28, r25
    3574:	d0 09       	sbc	r29, r0
    3576:	c0 f7       	brcc	.-16     	; 0x3568 <__ftoa_engine+0x10a>
    3578:	e1 0c       	add	r14, r1
    357a:	f1 1e       	adc	r15, r17
    357c:	43 1f       	adc	r20, r19
    357e:	56 1f       	adc	r21, r22
    3580:	c9 1f       	adc	r28, r25
    3582:	d0 1d       	adc	r29, r0
    3584:	7e f4       	brtc	.+30     	; 0x35a4 <__ftoa_engine+0x146>
    3586:	70 33       	cpi	r23, 0x30	; 48
    3588:	11 f4       	brne	.+4      	; 0x358e <__ftoa_engine+0x130>
    358a:	8a 95       	dec	r24
    358c:	e6 cf       	rjmp	.-52     	; 0x355a <__ftoa_engine+0xfc>
    358e:	e8 94       	clt
    3590:	01 50       	subi	r16, 0x01	; 1
    3592:	30 f0       	brcs	.+12     	; 0x35a0 <__ftoa_engine+0x142>
    3594:	08 0f       	add	r16, r24
    3596:	0a f4       	brpl	.+2      	; 0x359a <__ftoa_engine+0x13c>
    3598:	00 27       	eor	r16, r16
    359a:	02 17       	cp	r16, r18
    359c:	08 f4       	brcc	.+2      	; 0x35a0 <__ftoa_engine+0x142>
    359e:	20 2f       	mov	r18, r16
    35a0:	23 95       	inc	r18
    35a2:	02 2f       	mov	r16, r18
    35a4:	7a 33       	cpi	r23, 0x3A	; 58
    35a6:	28 f0       	brcs	.+10     	; 0x35b2 <__ftoa_engine+0x154>
    35a8:	79 e3       	ldi	r23, 0x39	; 57
    35aa:	7d 93       	st	X+, r23
    35ac:	2a 95       	dec	r18
    35ae:	e9 f7       	brne	.-6      	; 0x35aa <__ftoa_engine+0x14c>
    35b0:	10 c0       	rjmp	.+32     	; 0x35d2 <__ftoa_engine+0x174>
    35b2:	7d 93       	st	X+, r23
    35b4:	2a 95       	dec	r18
    35b6:	89 f6       	brne	.-94     	; 0x355a <__ftoa_engine+0xfc>
    35b8:	06 94       	lsr	r0
    35ba:	97 95       	ror	r25
    35bc:	67 95       	ror	r22
    35be:	37 95       	ror	r19
    35c0:	17 95       	ror	r17
    35c2:	17 94       	ror	r1
    35c4:	e1 18       	sub	r14, r1
    35c6:	f1 0a       	sbc	r15, r17
    35c8:	43 0b       	sbc	r20, r19
    35ca:	56 0b       	sbc	r21, r22
    35cc:	c9 0b       	sbc	r28, r25
    35ce:	d0 09       	sbc	r29, r0
    35d0:	98 f0       	brcs	.+38     	; 0x35f8 <__ftoa_engine+0x19a>
    35d2:	23 95       	inc	r18
    35d4:	7e 91       	ld	r23, -X
    35d6:	73 95       	inc	r23
    35d8:	7a 33       	cpi	r23, 0x3A	; 58
    35da:	08 f0       	brcs	.+2      	; 0x35de <__ftoa_engine+0x180>
    35dc:	70 e3       	ldi	r23, 0x30	; 48
    35de:	7c 93       	st	X, r23
    35e0:	20 13       	cpse	r18, r16
    35e2:	b8 f7       	brcc	.-18     	; 0x35d2 <__ftoa_engine+0x174>
    35e4:	7e 91       	ld	r23, -X
    35e6:	70 61       	ori	r23, 0x10	; 16
    35e8:	7d 93       	st	X+, r23
    35ea:	30 f0       	brcs	.+12     	; 0x35f8 <__ftoa_engine+0x19a>
    35ec:	83 95       	inc	r24
    35ee:	71 e3       	ldi	r23, 0x31	; 49
    35f0:	7d 93       	st	X+, r23
    35f2:	70 e3       	ldi	r23, 0x30	; 48
    35f4:	2a 95       	dec	r18
    35f6:	e1 f7       	brne	.-8      	; 0x35f0 <__ftoa_engine+0x192>
    35f8:	11 24       	eor	r1, r1
    35fa:	ef 90       	pop	r14
    35fc:	ff 90       	pop	r15
    35fe:	0f 91       	pop	r16
    3600:	1f 91       	pop	r17
    3602:	cf 91       	pop	r28
    3604:	df 91       	pop	r29
    3606:	99 27       	eor	r25, r25
    3608:	87 fd       	sbrc	r24, 7
    360a:	90 95       	com	r25
    360c:	08 95       	ret

0000360e <strnlen_P>:
    360e:	fc 01       	movw	r30, r24
    3610:	05 90       	lpm	r0, Z+
    3612:	61 50       	subi	r22, 0x01	; 1
    3614:	70 40       	sbci	r23, 0x00	; 0
    3616:	01 10       	cpse	r0, r1
    3618:	d8 f7       	brcc	.-10     	; 0x3610 <strnlen_P+0x2>
    361a:	80 95       	com	r24
    361c:	90 95       	com	r25
    361e:	8e 0f       	add	r24, r30
    3620:	9f 1f       	adc	r25, r31
    3622:	08 95       	ret

00003624 <memset>:
    3624:	dc 01       	movw	r26, r24
    3626:	01 c0       	rjmp	.+2      	; 0x362a <memset+0x6>
    3628:	6d 93       	st	X+, r22
    362a:	41 50       	subi	r20, 0x01	; 1
    362c:	50 40       	sbci	r21, 0x00	; 0
    362e:	e0 f7       	brcc	.-8      	; 0x3628 <memset+0x4>
    3630:	08 95       	ret

00003632 <strnlen>:
    3632:	fc 01       	movw	r30, r24
    3634:	61 50       	subi	r22, 0x01	; 1
    3636:	70 40       	sbci	r23, 0x00	; 0
    3638:	01 90       	ld	r0, Z+
    363a:	01 10       	cpse	r0, r1
    363c:	d8 f7       	brcc	.-10     	; 0x3634 <strnlen+0x2>
    363e:	80 95       	com	r24
    3640:	90 95       	com	r25
    3642:	8e 0f       	add	r24, r30
    3644:	9f 1f       	adc	r25, r31
    3646:	08 95       	ret

00003648 <itoa>:
    3648:	fb 01       	movw	r30, r22
    364a:	9f 01       	movw	r18, r30
    364c:	e8 94       	clt
    364e:	42 30       	cpi	r20, 0x02	; 2
    3650:	c4 f0       	brlt	.+48     	; 0x3682 <itoa+0x3a>
    3652:	45 32       	cpi	r20, 0x25	; 37
    3654:	b4 f4       	brge	.+44     	; 0x3682 <itoa+0x3a>
    3656:	4a 30       	cpi	r20, 0x0A	; 10
    3658:	29 f4       	brne	.+10     	; 0x3664 <itoa+0x1c>
    365a:	97 fb       	bst	r25, 7
    365c:	1e f4       	brtc	.+6      	; 0x3664 <itoa+0x1c>
    365e:	90 95       	com	r25
    3660:	81 95       	neg	r24
    3662:	9f 4f       	sbci	r25, 0xFF	; 255
    3664:	64 2f       	mov	r22, r20
    3666:	77 27       	eor	r23, r23
    3668:	0e 94 1b 1c 	call	0x3836	; 0x3836 <__udivmodhi4>
    366c:	80 5d       	subi	r24, 0xD0	; 208
    366e:	8a 33       	cpi	r24, 0x3A	; 58
    3670:	0c f0       	brlt	.+2      	; 0x3674 <itoa+0x2c>
    3672:	89 5d       	subi	r24, 0xD9	; 217
    3674:	81 93       	st	Z+, r24
    3676:	cb 01       	movw	r24, r22
    3678:	00 97       	sbiw	r24, 0x00	; 0
    367a:	a1 f7       	brne	.-24     	; 0x3664 <itoa+0x1c>
    367c:	16 f4       	brtc	.+4      	; 0x3682 <itoa+0x3a>
    367e:	5d e2       	ldi	r21, 0x2D	; 45
    3680:	51 93       	st	Z+, r21
    3682:	10 82       	st	Z, r1
    3684:	c9 01       	movw	r24, r18
    3686:	0c 94 ec 1b 	jmp	0x37d8	; 0x37d8 <strrev>

0000368a <fprintf_P>:
    368a:	a0 e0       	ldi	r26, 0x00	; 0
    368c:	b0 e0       	ldi	r27, 0x00	; 0
    368e:	eb e4       	ldi	r30, 0x4B	; 75
    3690:	fb e1       	ldi	r31, 0x1B	; 27
    3692:	0c 94 7a 1c 	jmp	0x38f4	; 0x38f4 <__prologue_saves__+0x1c>
    3696:	0f 81       	ldd	r16, Y+7	; 0x07
    3698:	18 85       	ldd	r17, Y+8	; 0x08
    369a:	9e 01       	movw	r18, r28
    369c:	25 5f       	subi	r18, 0xF5	; 245
    369e:	3f 4f       	sbci	r19, 0xFF	; 255
    36a0:	f8 01       	movw	r30, r16
    36a2:	83 81       	ldd	r24, Z+3	; 0x03
    36a4:	88 60       	ori	r24, 0x08	; 8
    36a6:	83 83       	std	Z+3, r24	; 0x03
    36a8:	c8 01       	movw	r24, r16
    36aa:	69 85       	ldd	r22, Y+9	; 0x09
    36ac:	7a 85       	ldd	r23, Y+10	; 0x0a
    36ae:	a9 01       	movw	r20, r18
    36b0:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <vfprintf>
    36b4:	f8 01       	movw	r30, r16
    36b6:	23 81       	ldd	r18, Z+3	; 0x03
    36b8:	27 7f       	andi	r18, 0xF7	; 247
    36ba:	23 83       	std	Z+3, r18	; 0x03
    36bc:	20 96       	adiw	r28, 0x00	; 0
    36be:	e4 e0       	ldi	r30, 0x04	; 4
    36c0:	0c 94 96 1c 	jmp	0x392c	; 0x392c <__epilogue_restores__+0x1c>

000036c4 <fputc>:
    36c4:	0f 93       	push	r16
    36c6:	1f 93       	push	r17
    36c8:	cf 93       	push	r28
    36ca:	df 93       	push	r29
    36cc:	8c 01       	movw	r16, r24
    36ce:	eb 01       	movw	r28, r22
    36d0:	8b 81       	ldd	r24, Y+3	; 0x03
    36d2:	81 ff       	sbrs	r24, 1
    36d4:	1b c0       	rjmp	.+54     	; 0x370c <fputc+0x48>
    36d6:	82 ff       	sbrs	r24, 2
    36d8:	0d c0       	rjmp	.+26     	; 0x36f4 <fputc+0x30>
    36da:	2e 81       	ldd	r18, Y+6	; 0x06
    36dc:	3f 81       	ldd	r19, Y+7	; 0x07
    36de:	8c 81       	ldd	r24, Y+4	; 0x04
    36e0:	9d 81       	ldd	r25, Y+5	; 0x05
    36e2:	28 17       	cp	r18, r24
    36e4:	39 07       	cpc	r19, r25
    36e6:	64 f4       	brge	.+24     	; 0x3700 <fputc+0x3c>
    36e8:	e8 81       	ld	r30, Y
    36ea:	f9 81       	ldd	r31, Y+1	; 0x01
    36ec:	01 93       	st	Z+, r16
    36ee:	f9 83       	std	Y+1, r31	; 0x01
    36f0:	e8 83       	st	Y, r30
    36f2:	06 c0       	rjmp	.+12     	; 0x3700 <fputc+0x3c>
    36f4:	e8 85       	ldd	r30, Y+8	; 0x08
    36f6:	f9 85       	ldd	r31, Y+9	; 0x09
    36f8:	80 2f       	mov	r24, r16
    36fa:	09 95       	icall
    36fc:	89 2b       	or	r24, r25
    36fe:	31 f4       	brne	.+12     	; 0x370c <fputc+0x48>
    3700:	8e 81       	ldd	r24, Y+6	; 0x06
    3702:	9f 81       	ldd	r25, Y+7	; 0x07
    3704:	01 96       	adiw	r24, 0x01	; 1
    3706:	9f 83       	std	Y+7, r25	; 0x07
    3708:	8e 83       	std	Y+6, r24	; 0x06
    370a:	02 c0       	rjmp	.+4      	; 0x3710 <fputc+0x4c>
    370c:	0f ef       	ldi	r16, 0xFF	; 255
    370e:	1f ef       	ldi	r17, 0xFF	; 255
    3710:	c8 01       	movw	r24, r16
    3712:	df 91       	pop	r29
    3714:	cf 91       	pop	r28
    3716:	1f 91       	pop	r17
    3718:	0f 91       	pop	r16
    371a:	08 95       	ret

0000371c <__ultoa_invert>:
    371c:	fa 01       	movw	r30, r20
    371e:	aa 27       	eor	r26, r26
    3720:	28 30       	cpi	r18, 0x08	; 8
    3722:	51 f1       	breq	.+84     	; 0x3778 <__ultoa_invert+0x5c>
    3724:	20 31       	cpi	r18, 0x10	; 16
    3726:	81 f1       	breq	.+96     	; 0x3788 <__ultoa_invert+0x6c>
    3728:	e8 94       	clt
    372a:	6f 93       	push	r22
    372c:	6e 7f       	andi	r22, 0xFE	; 254
    372e:	6e 5f       	subi	r22, 0xFE	; 254
    3730:	7f 4f       	sbci	r23, 0xFF	; 255
    3732:	8f 4f       	sbci	r24, 0xFF	; 255
    3734:	9f 4f       	sbci	r25, 0xFF	; 255
    3736:	af 4f       	sbci	r26, 0xFF	; 255
    3738:	b1 e0       	ldi	r27, 0x01	; 1
    373a:	3e d0       	rcall	.+124    	; 0x37b8 <__ultoa_invert+0x9c>
    373c:	b4 e0       	ldi	r27, 0x04	; 4
    373e:	3c d0       	rcall	.+120    	; 0x37b8 <__ultoa_invert+0x9c>
    3740:	67 0f       	add	r22, r23
    3742:	78 1f       	adc	r23, r24
    3744:	89 1f       	adc	r24, r25
    3746:	9a 1f       	adc	r25, r26
    3748:	a1 1d       	adc	r26, r1
    374a:	68 0f       	add	r22, r24
    374c:	79 1f       	adc	r23, r25
    374e:	8a 1f       	adc	r24, r26
    3750:	91 1d       	adc	r25, r1
    3752:	a1 1d       	adc	r26, r1
    3754:	6a 0f       	add	r22, r26
    3756:	71 1d       	adc	r23, r1
    3758:	81 1d       	adc	r24, r1
    375a:	91 1d       	adc	r25, r1
    375c:	a1 1d       	adc	r26, r1
    375e:	20 d0       	rcall	.+64     	; 0x37a0 <__ultoa_invert+0x84>
    3760:	09 f4       	brne	.+2      	; 0x3764 <__ultoa_invert+0x48>
    3762:	68 94       	set
    3764:	3f 91       	pop	r19
    3766:	2a e0       	ldi	r18, 0x0A	; 10
    3768:	26 9f       	mul	r18, r22
    376a:	11 24       	eor	r1, r1
    376c:	30 19       	sub	r19, r0
    376e:	30 5d       	subi	r19, 0xD0	; 208
    3770:	31 93       	st	Z+, r19
    3772:	de f6       	brtc	.-74     	; 0x372a <__ultoa_invert+0xe>
    3774:	cf 01       	movw	r24, r30
    3776:	08 95       	ret
    3778:	46 2f       	mov	r20, r22
    377a:	47 70       	andi	r20, 0x07	; 7
    377c:	40 5d       	subi	r20, 0xD0	; 208
    377e:	41 93       	st	Z+, r20
    3780:	b3 e0       	ldi	r27, 0x03	; 3
    3782:	0f d0       	rcall	.+30     	; 0x37a2 <__ultoa_invert+0x86>
    3784:	c9 f7       	brne	.-14     	; 0x3778 <__ultoa_invert+0x5c>
    3786:	f6 cf       	rjmp	.-20     	; 0x3774 <__ultoa_invert+0x58>
    3788:	46 2f       	mov	r20, r22
    378a:	4f 70       	andi	r20, 0x0F	; 15
    378c:	40 5d       	subi	r20, 0xD0	; 208
    378e:	4a 33       	cpi	r20, 0x3A	; 58
    3790:	18 f0       	brcs	.+6      	; 0x3798 <__ultoa_invert+0x7c>
    3792:	49 5d       	subi	r20, 0xD9	; 217
    3794:	31 fd       	sbrc	r19, 1
    3796:	40 52       	subi	r20, 0x20	; 32
    3798:	41 93       	st	Z+, r20
    379a:	02 d0       	rcall	.+4      	; 0x37a0 <__ultoa_invert+0x84>
    379c:	a9 f7       	brne	.-22     	; 0x3788 <__ultoa_invert+0x6c>
    379e:	ea cf       	rjmp	.-44     	; 0x3774 <__ultoa_invert+0x58>
    37a0:	b4 e0       	ldi	r27, 0x04	; 4
    37a2:	a6 95       	lsr	r26
    37a4:	97 95       	ror	r25
    37a6:	87 95       	ror	r24
    37a8:	77 95       	ror	r23
    37aa:	67 95       	ror	r22
    37ac:	ba 95       	dec	r27
    37ae:	c9 f7       	brne	.-14     	; 0x37a2 <__ultoa_invert+0x86>
    37b0:	00 97       	sbiw	r24, 0x00	; 0
    37b2:	61 05       	cpc	r22, r1
    37b4:	71 05       	cpc	r23, r1
    37b6:	08 95       	ret
    37b8:	9b 01       	movw	r18, r22
    37ba:	ac 01       	movw	r20, r24
    37bc:	0a 2e       	mov	r0, r26
    37be:	06 94       	lsr	r0
    37c0:	57 95       	ror	r21
    37c2:	47 95       	ror	r20
    37c4:	37 95       	ror	r19
    37c6:	27 95       	ror	r18
    37c8:	ba 95       	dec	r27
    37ca:	c9 f7       	brne	.-14     	; 0x37be <__ultoa_invert+0xa2>
    37cc:	62 0f       	add	r22, r18
    37ce:	73 1f       	adc	r23, r19
    37d0:	84 1f       	adc	r24, r20
    37d2:	95 1f       	adc	r25, r21
    37d4:	a0 1d       	adc	r26, r0
    37d6:	08 95       	ret

000037d8 <strrev>:
    37d8:	dc 01       	movw	r26, r24
    37da:	fc 01       	movw	r30, r24
    37dc:	67 2f       	mov	r22, r23
    37de:	71 91       	ld	r23, Z+
    37e0:	77 23       	and	r23, r23
    37e2:	e1 f7       	brne	.-8      	; 0x37dc <strrev+0x4>
    37e4:	32 97       	sbiw	r30, 0x02	; 2
    37e6:	04 c0       	rjmp	.+8      	; 0x37f0 <strrev+0x18>
    37e8:	7c 91       	ld	r23, X
    37ea:	6d 93       	st	X+, r22
    37ec:	70 83       	st	Z, r23
    37ee:	62 91       	ld	r22, -Z
    37f0:	ae 17       	cp	r26, r30
    37f2:	bf 07       	cpc	r27, r31
    37f4:	c8 f3       	brcs	.-14     	; 0x37e8 <strrev+0x10>
    37f6:	08 95       	ret

000037f8 <__mulsi3>:
    37f8:	62 9f       	mul	r22, r18
    37fa:	d0 01       	movw	r26, r0
    37fc:	73 9f       	mul	r23, r19
    37fe:	f0 01       	movw	r30, r0
    3800:	82 9f       	mul	r24, r18
    3802:	e0 0d       	add	r30, r0
    3804:	f1 1d       	adc	r31, r1
    3806:	64 9f       	mul	r22, r20
    3808:	e0 0d       	add	r30, r0
    380a:	f1 1d       	adc	r31, r1
    380c:	92 9f       	mul	r25, r18
    380e:	f0 0d       	add	r31, r0
    3810:	83 9f       	mul	r24, r19
    3812:	f0 0d       	add	r31, r0
    3814:	74 9f       	mul	r23, r20
    3816:	f0 0d       	add	r31, r0
    3818:	65 9f       	mul	r22, r21
    381a:	f0 0d       	add	r31, r0
    381c:	99 27       	eor	r25, r25
    381e:	72 9f       	mul	r23, r18
    3820:	b0 0d       	add	r27, r0
    3822:	e1 1d       	adc	r30, r1
    3824:	f9 1f       	adc	r31, r25
    3826:	63 9f       	mul	r22, r19
    3828:	b0 0d       	add	r27, r0
    382a:	e1 1d       	adc	r30, r1
    382c:	f9 1f       	adc	r31, r25
    382e:	bd 01       	movw	r22, r26
    3830:	cf 01       	movw	r24, r30
    3832:	11 24       	eor	r1, r1
    3834:	08 95       	ret

00003836 <__udivmodhi4>:
    3836:	aa 1b       	sub	r26, r26
    3838:	bb 1b       	sub	r27, r27
    383a:	51 e1       	ldi	r21, 0x11	; 17
    383c:	07 c0       	rjmp	.+14     	; 0x384c <__udivmodhi4_ep>

0000383e <__udivmodhi4_loop>:
    383e:	aa 1f       	adc	r26, r26
    3840:	bb 1f       	adc	r27, r27
    3842:	a6 17       	cp	r26, r22
    3844:	b7 07       	cpc	r27, r23
    3846:	10 f0       	brcs	.+4      	; 0x384c <__udivmodhi4_ep>
    3848:	a6 1b       	sub	r26, r22
    384a:	b7 0b       	sbc	r27, r23

0000384c <__udivmodhi4_ep>:
    384c:	88 1f       	adc	r24, r24
    384e:	99 1f       	adc	r25, r25
    3850:	5a 95       	dec	r21
    3852:	a9 f7       	brne	.-22     	; 0x383e <__udivmodhi4_loop>
    3854:	80 95       	com	r24
    3856:	90 95       	com	r25
    3858:	bc 01       	movw	r22, r24
    385a:	cd 01       	movw	r24, r26
    385c:	08 95       	ret

0000385e <__udivmodsi4>:
    385e:	a1 e2       	ldi	r26, 0x21	; 33
    3860:	1a 2e       	mov	r1, r26
    3862:	aa 1b       	sub	r26, r26
    3864:	bb 1b       	sub	r27, r27
    3866:	fd 01       	movw	r30, r26
    3868:	0d c0       	rjmp	.+26     	; 0x3884 <__udivmodsi4_ep>

0000386a <__udivmodsi4_loop>:
    386a:	aa 1f       	adc	r26, r26
    386c:	bb 1f       	adc	r27, r27
    386e:	ee 1f       	adc	r30, r30
    3870:	ff 1f       	adc	r31, r31
    3872:	a2 17       	cp	r26, r18
    3874:	b3 07       	cpc	r27, r19
    3876:	e4 07       	cpc	r30, r20
    3878:	f5 07       	cpc	r31, r21
    387a:	20 f0       	brcs	.+8      	; 0x3884 <__udivmodsi4_ep>
    387c:	a2 1b       	sub	r26, r18
    387e:	b3 0b       	sbc	r27, r19
    3880:	e4 0b       	sbc	r30, r20
    3882:	f5 0b       	sbc	r31, r21

00003884 <__udivmodsi4_ep>:
    3884:	66 1f       	adc	r22, r22
    3886:	77 1f       	adc	r23, r23
    3888:	88 1f       	adc	r24, r24
    388a:	99 1f       	adc	r25, r25
    388c:	1a 94       	dec	r1
    388e:	69 f7       	brne	.-38     	; 0x386a <__udivmodsi4_loop>
    3890:	60 95       	com	r22
    3892:	70 95       	com	r23
    3894:	80 95       	com	r24
    3896:	90 95       	com	r25
    3898:	9b 01       	movw	r18, r22
    389a:	ac 01       	movw	r20, r24
    389c:	bd 01       	movw	r22, r26
    389e:	cf 01       	movw	r24, r30
    38a0:	08 95       	ret

000038a2 <__divmodsi4>:
    38a2:	97 fb       	bst	r25, 7
    38a4:	09 2e       	mov	r0, r25
    38a6:	05 26       	eor	r0, r21
    38a8:	0e d0       	rcall	.+28     	; 0x38c6 <__divmodsi4_neg1>
    38aa:	57 fd       	sbrc	r21, 7
    38ac:	04 d0       	rcall	.+8      	; 0x38b6 <__divmodsi4_neg2>
    38ae:	d7 df       	rcall	.-82     	; 0x385e <__udivmodsi4>
    38b0:	0a d0       	rcall	.+20     	; 0x38c6 <__divmodsi4_neg1>
    38b2:	00 1c       	adc	r0, r0
    38b4:	38 f4       	brcc	.+14     	; 0x38c4 <__divmodsi4_exit>

000038b6 <__divmodsi4_neg2>:
    38b6:	50 95       	com	r21
    38b8:	40 95       	com	r20
    38ba:	30 95       	com	r19
    38bc:	21 95       	neg	r18
    38be:	3f 4f       	sbci	r19, 0xFF	; 255
    38c0:	4f 4f       	sbci	r20, 0xFF	; 255
    38c2:	5f 4f       	sbci	r21, 0xFF	; 255

000038c4 <__divmodsi4_exit>:
    38c4:	08 95       	ret

000038c6 <__divmodsi4_neg1>:
    38c6:	f6 f7       	brtc	.-4      	; 0x38c4 <__divmodsi4_exit>
    38c8:	90 95       	com	r25
    38ca:	80 95       	com	r24
    38cc:	70 95       	com	r23
    38ce:	61 95       	neg	r22
    38d0:	7f 4f       	sbci	r23, 0xFF	; 255
    38d2:	8f 4f       	sbci	r24, 0xFF	; 255
    38d4:	9f 4f       	sbci	r25, 0xFF	; 255
    38d6:	08 95       	ret

000038d8 <__prologue_saves__>:
    38d8:	2f 92       	push	r2
    38da:	3f 92       	push	r3
    38dc:	4f 92       	push	r4
    38de:	5f 92       	push	r5
    38e0:	6f 92       	push	r6
    38e2:	7f 92       	push	r7
    38e4:	8f 92       	push	r8
    38e6:	9f 92       	push	r9
    38e8:	af 92       	push	r10
    38ea:	bf 92       	push	r11
    38ec:	cf 92       	push	r12
    38ee:	df 92       	push	r13
    38f0:	ef 92       	push	r14
    38f2:	ff 92       	push	r15
    38f4:	0f 93       	push	r16
    38f6:	1f 93       	push	r17
    38f8:	cf 93       	push	r28
    38fa:	df 93       	push	r29
    38fc:	cd b7       	in	r28, 0x3d	; 61
    38fe:	de b7       	in	r29, 0x3e	; 62
    3900:	ca 1b       	sub	r28, r26
    3902:	db 0b       	sbc	r29, r27
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	f8 94       	cli
    3908:	de bf       	out	0x3e, r29	; 62
    390a:	0f be       	out	0x3f, r0	; 63
    390c:	cd bf       	out	0x3d, r28	; 61
    390e:	09 94       	ijmp

00003910 <__epilogue_restores__>:
    3910:	2a 88       	ldd	r2, Y+18	; 0x12
    3912:	39 88       	ldd	r3, Y+17	; 0x11
    3914:	48 88       	ldd	r4, Y+16	; 0x10
    3916:	5f 84       	ldd	r5, Y+15	; 0x0f
    3918:	6e 84       	ldd	r6, Y+14	; 0x0e
    391a:	7d 84       	ldd	r7, Y+13	; 0x0d
    391c:	8c 84       	ldd	r8, Y+12	; 0x0c
    391e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3920:	aa 84       	ldd	r10, Y+10	; 0x0a
    3922:	b9 84       	ldd	r11, Y+9	; 0x09
    3924:	c8 84       	ldd	r12, Y+8	; 0x08
    3926:	df 80       	ldd	r13, Y+7	; 0x07
    3928:	ee 80       	ldd	r14, Y+6	; 0x06
    392a:	fd 80       	ldd	r15, Y+5	; 0x05
    392c:	0c 81       	ldd	r16, Y+4	; 0x04
    392e:	1b 81       	ldd	r17, Y+3	; 0x03
    3930:	aa 81       	ldd	r26, Y+2	; 0x02
    3932:	b9 81       	ldd	r27, Y+1	; 0x01
    3934:	ce 0f       	add	r28, r30
    3936:	d1 1d       	adc	r29, r1
    3938:	0f b6       	in	r0, 0x3f	; 63
    393a:	f8 94       	cli
    393c:	de bf       	out	0x3e, r29	; 62
    393e:	0f be       	out	0x3f, r0	; 63
    3940:	cd bf       	out	0x3d, r28	; 61
    3942:	ed 01       	movw	r28, r26
    3944:	08 95       	ret

00003946 <__tablejump2__>:
    3946:	ee 0f       	add	r30, r30
    3948:	ff 1f       	adc	r31, r31

0000394a <__tablejump__>:
    394a:	05 90       	lpm	r0, Z+
    394c:	f4 91       	lpm	r31, Z+
    394e:	e0 2d       	mov	r30, r0
    3950:	09 94       	ijmp

00003952 <_exit>:
    3952:	f8 94       	cli

00003954 <__stop_program>:
    3954:	ff cf       	rjmp	.-2      	; 0x3954 <__stop_program>
