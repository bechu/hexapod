
beta.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800200  0000409a  0000412e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000409a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  0080031c  0080031c  0000424a  2**0
                  ALLOC
  3 .debug_aranges 00000520  00000000  00000000  0000424a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000fb7  00000000  00000000  0000476a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000144e8  00000000  00000000  00005721  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004ce3  00000000  00000000  00019c09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004a79  00000000  00000000  0001e8ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b10  00000000  00000000  00023368  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000024c5  00000000  00000000  00023e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000025e8  00000000  00000000  0002633d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00028925  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__dtors_end>
       4:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
       8:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
       c:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      10:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      14:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      18:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      1c:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      20:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      24:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      28:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      2c:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      30:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      34:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      38:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      3c:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      40:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      44:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      48:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      4c:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      50:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      54:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      58:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      5c:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      60:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      64:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      68:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      6c:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      70:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      74:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      78:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      7c:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      80:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      84:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      88:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      8c:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      90:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__vector_36>
      94:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      98:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <__vector_38>
      9c:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      a0:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      a4:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      a8:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      ac:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      b0:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      b4:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      b8:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      bc:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <__vector_47>
      c0:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__vector_48>
      c4:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      c8:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      cc:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      d0:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      d4:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      d8:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      dc:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>
      e0:	0c 94 90 02 	jmp	0x520	; 0x520 <__bad_interrupt>

000000e4 <__c.1790>:
      e4:	6e 61 6e 00                                         nan.

000000e8 <__c.1788>:
      e8:	69 6e 66 00                                         inf.

000000ec <marquee_list>:
      ec:	69 02                                               i.

000000ee <bank1_list>:
      ee:	91 02 a7 02 bd 02                                   ......

000000f4 <__timer0Compare>:
      f4:	5f 03 00 6e 00 02 47 00 35 00 02 44 00 06 05 03     _..n..G.5..D....
     104:	63 03 00 6e 00 04 48 00 35 00 04 44 00 04 35 03     c..n..H.5..D..5.

00000114 <__timer1Compare>:
     114:	67 03 01 6f 00 02 88 00 36 00 02 80 00 06 ff 02     g..o....6.......
     124:	6b 03 01 6f 00 04 8a 00 36 00 04 80 00 04 02 03     k..o....6.......
     134:	6f 03 01 6f 00 08 8c 00 36 00 08 80 00 02 05 03     o..o....6.......

00000144 <__timer2Compare>:
     144:	73 03 02 70 00 02 b3 00 37 00 02 b0 00 06 fc 02     s..p....7.......
     154:	77 03 02 70 00 04 b4 00 37 00 04 b0 00 04 41 03     w..p....7.....A.

00000164 <__timer3Compare>:
     164:	7b 03 03 71 00 02 98 00 38 00 02 90 00 06 29 03     {..q....8.....).
     174:	7f 03 03 71 00 04 9a 00 38 00 04 90 00 04 2c 03     ...q....8.....,.
     184:	83 03 03 71 00 08 9c 00 38 00 08 90 00 02 2f 03     ...q....8...../.

00000194 <__timer4Compare>:
     194:	87 03 04 72 00 02 a8 00 39 00 02 a0 00 06 38 03     ...r....9.....8.
     1a4:	8b 03 04 72 00 04 aa 00 39 00 04 a0 00 04 3b 03     ...r....9.....;.
     1b4:	8f 03 04 72 00 08 ac 00 39 00 08 a0 00 02 3e 03     ...r....9.....>.

000001c4 <__timer5Compare>:
     1c4:	93 03 05 73 00 02 28 01 3a 00 02 20 01 06 4a 03     ...s..(.:.. ..J.
     1d4:	97 03 05 73 00 04 2a 01 3a 00 04 20 01 04 4d 03     ...s..*.:.. ..M.
     1e4:	9b 03 05 73 00 08 2c 01 3a 00 08 20 01 02 50 03     ...s..,.:.. ..P.

000001f4 <pgm_Timers>:
     1f4:	9f 03 46 00 45 00 00 00 02 33 88 44 00 01 44 00     ..F.E....3.D..D.
     204:	02 45 00 08 00 00 01 f4 00 6e 00 01 35 00 01 00     .E.......n..5...
     214:	00 00 00 01 00 00 01 00 00 01 00 00 aa 03 84 00     ................
     224:	81 00 ff 00 03 ff df 80 00 01 80 00 02 81 00 08     ................
     234:	81 00 10 14 01 6f 00 01 36 00 01 86 00 6f 00 20     .....o..6....o. 
     244:	36 00 20 81 00 40 00 00 b5 03 b2 00 b1 00 00 ff     6. ..@..........
     254:	02 33 88 b0 00 01 b0 00 02 b1 00 08 00 00 01 44     .3.............D
     264:	01 70 00 01 37 00 01 00 00 00 00 01 00 00 01 00     .p..7...........
     274:	00 01 00 00 c0 03 94 00 91 00 ff 00 03 ff df 90     ................
     284:	00 01 90 00 02 91 00 08 91 00 10 64 01 71 00 01     ...........d.q..
     294:	38 00 01 96 00 71 00 20 38 00 20 91 00 40 32 03     8....q. 8. ..@2.
     2a4:	cb 03 a4 00 a1 00 ff 00 03 ff df a0 00 01 a0 00     ................
     2b4:	02 a1 00 08 a1 00 10 94 01 72 00 01 39 00 01 a6     .........r..9...
     2c4:	00 72 00 20 39 00 20 a1 00 40 44 03 d6 03 24 01     .r. 9. ..@D...$.
     2d4:	21 01 ff 00 03 ff df 20 01 01 20 01 02 21 01 08     !...... .. ..!..
     2e4:	21 01 10 c4 01 73 00 01 3a 00 01 26 01 73 00 20     !....s..:..&.s. 
     2f4:	3a 00 20 21 01 40 47 03                             :. !.@G.

000002fc <_B4>:
     2fc:	55 03 10                                            U..

000002ff <_B5>:
     2ff:	55 03 20                                            U. 

00000302 <_B6>:
     302:	55 03 40                                            U.@

00000305 <_B7>:
     305:	55 03 80                                            U..

00000308 <_C0>:
     308:	5b 03 01                                            [..

0000030b <_C1>:
     30b:	5b 03 02                                            [..

0000030e <_C2>:
     30e:	5b 03 04                                            [..

00000311 <_C3>:
     311:	5b 03 08                                            [..

00000314 <_C4>:
     314:	5b 03 10                                            [..

00000317 <_C5>:
     317:	5b 03 20                                            [. 

0000031a <_D2>:
     31a:	61 03 04                                            a..

0000031d <_D3>:
     31d:	61 03 08                                            a..

00000320 <_D5>:
     320:	61 03 20                                            a. 

00000323 <_D6>:
     323:	61 03 40                                            a.@

00000326 <_D7>:
     326:	61 03 80                                            a..

00000329 <_E3>:
     329:	67 03 08                                            g..

0000032c <_E4>:
     32c:	67 03 10                                            g..

0000032f <_E5>:
     32f:	67 03 20                                            g. 

00000332 <_E7>:
     332:	67 03 80                                            g..

00000335 <_G5>:
     335:	6d 03 20                                            m. 

00000338 <_H3>:
     338:	73 03 08                                            s..

0000033b <_H4>:
     33b:	73 03 10                                            s..

0000033e <_H5>:
     33e:	73 03 20                                            s. 

00000341 <_H6>:
     341:	73 03 40                                            s.@

00000344 <_L0>:
     344:	79 03 01                                            y..

00000347 <_L1>:
     347:	79 03 02                                            y..

0000034a <_L3>:
     34a:	79 03 08                                            y..

0000034d <_L4>:
     34d:	79 03 10                                            y..

00000350 <_L5>:
     350:	79 03 20                                            y. 

00000353 <AVcc_MV>:
     353:	88 13                                               ..

00000355 <_PORTB>:
     355:	25 00 24 00 23 00                                   %.$.#.

0000035b <_PORTC>:
     35b:	28 00 27 00 26 00                                   (.'.&.

00000361 <_PORTD>:
     361:	2b 00 2a 00 29 00                                   +.*.).

00000367 <_PORTE>:
     367:	2e 00 2d 00 2c 00                                   ..-.,.

0000036d <_PORTG>:
     36d:	34 00 33 00 32 00                                   4.3.2.

00000373 <_PORTH>:
     373:	02 01 01 01 00 01                                   ......

00000379 <_PORTL>:
     379:	0b 01 0a 01 09 01                                   ......

0000037f <c_servoPWM>:
     37f:	e8 0d e0 0d                                         ....

00000383 <__c.1911>:
     383:	20 45 72 72 6f 72 3a 25 64 0d 0a 00                  Error:%d...

0000038f <__c.1909>:
     38f:	55 73 65 72 00                                      User.

00000394 <__c.1907>:
     394:	57 65 62 62 6f 74 4c 69 62 00                       WebbotLib.

0000039e <atoz>:
     39e:	ee 3e 9c 7a 9e 8e f6 2e 0c 78 ae 1c aa 2a 3a ce     .>.z.....x...*:.
     3ae:	e6 0a b6 1e 38 7c b8 6e 76 da                       ....8|.nv.

000003b8 <digits>:
     3b8:	fc 60 da f2 66 b6 3e e0 fe e6                       .`..f.>...

000003c2 <c_hw_uart>:
     3c2:	77 14 2d 15 49 15 02 15 34 15 18 15 00 40 7a 10     w.-.I...4....@z.
     3d2:	f3 5a 00 a0 72 4e 18 09 00 10 a5 d4 e8 00 00 e8     .Z..rN..........
     3e2:	76 48 17 00 00 e4 0b 54 02 00 00 ca 9a 3b 00 00     vH.....T.....;..
     3f2:	00 e1 f5 05 00 00 80 96 98 00 00 00 40 42 0f 00     ............@B..
     402:	00 00 a0 86 01 00 00 00 10 27 00 00 00 00 e8 03     .........'......
     412:	00 00 00 00 64 00 00 00 00 00 0a 00 00 00 00 00     ....d...........
     422:	01 00 00 00 00 00 2c 76 d8 88 dc 67 4f 08 23 df     ......,v...gO.#.
     432:	c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51     ...Y.......S.:.Q
     442:	99 76 96 e8 e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c     .v.....&....b.@|
     452:	6f fc ef bc 9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a     o.....@...o....Z
     462:	2a f7 5c 93 6b 6c f9 67 6d c1 1b fc e0 e4 0d 47     *.\.kl.gm......G
     472:	fe f5 20 e6 b5 00 d0 ed 90 2e 03 00 94 35 77 05     .. ..........5w.
     482:	00 80 84 1e 08 00 00 20 4e 0a 00 00 00 c8 0c 33     ....... N......3
     492:	33 33 33 0f 98 6e 12 83 11 41 ef 8d 21 14 89 3b     333..n...A..!..;
     4a2:	e6 55 16 cf fe e6 db 18 d1 84 4b 38 1b f7 7c 1d     .U........K8..|.
     4b2:	90 1d a4 bb e4 24 20 32 84 72 5e 22 81 00 c9 f1     .....$ 2.r^"....
     4c2:	24 ec a1 e5 3d 27                                   $...='

000004c8 <__ctors_start>:
     4c8:	00 03       	mulsu	r16, r16
     4ca:	64 0c       	add	r6, r4
     4cc:	66 0c       	add	r6, r6

000004ce <__ctors_end>:
     4ce:	f3 02       	muls	r31, r19

000004d0 <__dtors_end>:
     4d0:	11 24       	eor	r1, r1
     4d2:	1f be       	out	0x3f, r1	; 63
     4d4:	cf ef       	ldi	r28, 0xFF	; 255
     4d6:	d1 e2       	ldi	r29, 0x21	; 33
     4d8:	de bf       	out	0x3e, r29	; 62
     4da:	cd bf       	out	0x3d, r28	; 61

000004dc <__do_copy_data>:
     4dc:	13 e0       	ldi	r17, 0x03	; 3
     4de:	a0 e0       	ldi	r26, 0x00	; 0
     4e0:	b2 e0       	ldi	r27, 0x02	; 2
     4e2:	ea e9       	ldi	r30, 0x9A	; 154
     4e4:	f0 e4       	ldi	r31, 0x40	; 64
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <.do_copy_data_start>

000004e8 <.do_copy_data_loop>:
     4e8:	05 90       	lpm	r0, Z+
     4ea:	0d 92       	st	X+, r0

000004ec <.do_copy_data_start>:
     4ec:	ac 31       	cpi	r26, 0x1C	; 28
     4ee:	b1 07       	cpc	r27, r17
     4f0:	d9 f7       	brne	.-10     	; 0x4e8 <.do_copy_data_loop>

000004f2 <__do_clear_bss>:
     4f2:	14 e0       	ldi	r17, 0x04	; 4
     4f4:	ac e1       	ldi	r26, 0x1C	; 28
     4f6:	b3 e0       	ldi	r27, 0x03	; 3
     4f8:	01 c0       	rjmp	.+2      	; 0x4fc <.do_clear_bss_start>

000004fa <.do_clear_bss_loop>:
     4fa:	1d 92       	st	X+, r1

000004fc <.do_clear_bss_start>:
     4fc:	a4 36       	cpi	r26, 0x64	; 100
     4fe:	b1 07       	cpc	r27, r17
     500:	e1 f7       	brne	.-8      	; 0x4fa <.do_clear_bss_loop>

00000502 <__do_global_ctors>:
     502:	14 e0       	ldi	r17, 0x04	; 4
     504:	ce ec       	ldi	r28, 0xCE	; 206
     506:	d4 e0       	ldi	r29, 0x04	; 4
     508:	04 c0       	rjmp	.+8      	; 0x512 <.do_global_ctors_start>

0000050a <.do_global_ctors_loop>:
     50a:	22 97       	sbiw	r28, 0x02	; 2
     50c:	fe 01       	movw	r30, r28
     50e:	0e 94 3c 20 	call	0x4078	; 0x4078 <__tablejump__>

00000512 <.do_global_ctors_start>:
     512:	c8 3c       	cpi	r28, 0xC8	; 200
     514:	d1 07       	cpc	r29, r17
     516:	c9 f7       	brne	.-14     	; 0x50a <.do_global_ctors_loop>
     518:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <main>
     51c:	0c 94 57 1d 	jmp	0x3aae	; 0x3aae <exit>

00000520 <__bad_interrupt>:
     520:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000524 <_Z41__static_initialization_and_destruction_0ii>:
	{
		motors[i].compute();
	}

  	return HEXAPOD_LOOP_DURATION;
}
     524:	df 93       	push	r29
     526:	cf 93       	push	r28
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	2a 97       	sbiw	r28, 0x0a	; 10
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	de bf       	out	0x3e, r29	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	cd bf       	out	0x3d, r28	; 61
     538:	9a 83       	std	Y+2, r25	; 0x02
     53a:	89 83       	std	Y+1, r24	; 0x01
     53c:	7c 83       	std	Y+4, r23	; 0x04
     53e:	6b 83       	std	Y+3, r22	; 0x03
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	9a 81       	ldd	r25, Y+2	; 0x02
     544:	81 30       	cpi	r24, 0x01	; 1
     546:	91 05       	cpc	r25, r1
     548:	39 f5       	brne	.+78     	; 0x598 <_Z41__static_initialization_and_destruction_0ii+0x74>
     54a:	8b 81       	ldd	r24, Y+3	; 0x03
     54c:	9c 81       	ldd	r25, Y+4	; 0x04
     54e:	2f ef       	ldi	r18, 0xFF	; 255
     550:	8f 3f       	cpi	r24, 0xFF	; 255
     552:	92 07       	cpc	r25, r18
     554:	09 f5       	brne	.+66     	; 0x598 <_Z41__static_initialization_and_destruction_0ii+0x74>
#include "hardware.h"
#include "protocol.h"
#include "smart_motor.h"


Protocol proto;
     556:	8c e1       	ldi	r24, 0x1C	; 28
     558:	93 e0       	ldi	r25, 0x03	; 3
     55a:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN8ProtocolC1Ev>

SmartMotor motors[2];
     55e:	89 e4       	ldi	r24, 0x49	; 73
     560:	93 e0       	ldi	r25, 0x03	; 3
     562:	9a 87       	std	Y+10, r25	; 0x0a
     564:	89 87       	std	Y+9, r24	; 0x09
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	98 87       	std	Y+8, r25	; 0x08
     56c:	8f 83       	std	Y+7, r24	; 0x07
     56e:	0e c0       	rjmp	.+28     	; 0x58c <_Z41__static_initialization_and_destruction_0ii+0x68>
     570:	89 85       	ldd	r24, Y+9	; 0x09
     572:	9a 85       	ldd	r25, Y+10	; 0x0a
     574:	0e 94 a8 08 	call	0x1150	; 0x1150 <_ZN10SmartMotorC1Ev>
     578:	89 85       	ldd	r24, Y+9	; 0x09
     57a:	9a 85       	ldd	r25, Y+10	; 0x0a
     57c:	0b 96       	adiw	r24, 0x0b	; 11
     57e:	9a 87       	std	Y+10, r25	; 0x0a
     580:	89 87       	std	Y+9, r24	; 0x09
     582:	8f 81       	ldd	r24, Y+7	; 0x07
     584:	98 85       	ldd	r25, Y+8	; 0x08
     586:	01 97       	sbiw	r24, 0x01	; 1
     588:	98 87       	std	Y+8, r25	; 0x08
     58a:	8f 83       	std	Y+7, r24	; 0x07
     58c:	8f 81       	ldd	r24, Y+7	; 0x07
     58e:	98 85       	ldd	r25, Y+8	; 0x08
     590:	2f ef       	ldi	r18, 0xFF	; 255
     592:	8f 3f       	cpi	r24, 0xFF	; 255
     594:	92 07       	cpc	r25, r18
     596:	61 f7       	brne	.-40     	; 0x570 <_Z41__static_initialization_and_destruction_0ii+0x4c>
     598:	89 81       	ldd	r24, Y+1	; 0x01
     59a:	9a 81       	ldd	r25, Y+2	; 0x02
     59c:	00 97       	sbiw	r24, 0x00	; 0
     59e:	d1 f4       	brne	.+52     	; 0x5d4 <_Z41__static_initialization_and_destruction_0ii+0xb0>
     5a0:	8b 81       	ldd	r24, Y+3	; 0x03
     5a2:	9c 81       	ldd	r25, Y+4	; 0x04
     5a4:	2f ef       	ldi	r18, 0xFF	; 255
     5a6:	8f 3f       	cpi	r24, 0xFF	; 255
     5a8:	92 07       	cpc	r25, r18
     5aa:	a1 f4       	brne	.+40     	; 0x5d4 <_Z41__static_initialization_and_destruction_0ii+0xb0>
     5ac:	8f e5       	ldi	r24, 0x5F	; 95
     5ae:	93 e0       	ldi	r25, 0x03	; 3
     5b0:	9e 83       	std	Y+6, r25	; 0x06
     5b2:	8d 83       	std	Y+5, r24	; 0x05
     5b4:	8d 81       	ldd	r24, Y+5	; 0x05
     5b6:	9e 81       	ldd	r25, Y+6	; 0x06
     5b8:	23 e0       	ldi	r18, 0x03	; 3
     5ba:	89 34       	cpi	r24, 0x49	; 73
     5bc:	92 07       	cpc	r25, r18
     5be:	51 f0       	breq	.+20     	; 0x5d4 <_Z41__static_initialization_and_destruction_0ii+0xb0>
     5c0:	8d 81       	ldd	r24, Y+5	; 0x05
     5c2:	9e 81       	ldd	r25, Y+6	; 0x06
     5c4:	0b 97       	sbiw	r24, 0x0b	; 11
     5c6:	9e 83       	std	Y+6, r25	; 0x06
     5c8:	8d 83       	std	Y+5, r24	; 0x05
     5ca:	8d 81       	ldd	r24, Y+5	; 0x05
     5cc:	9e 81       	ldd	r25, Y+6	; 0x06
     5ce:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN10SmartMotorD1Ev>
     5d2:	f0 cf       	rjmp	.-32     	; 0x5b4 <_Z41__static_initialization_and_destruction_0ii+0x90>
	{
		motors[i].compute();
	}

  	return HEXAPOD_LOOP_DURATION;
}
     5d4:	2a 96       	adiw	r28, 0x0a	; 10
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	cd bf       	out	0x3d, r28	; 61
     5e0:	cf 91       	pop	r28
     5e2:	df 91       	pop	r29
     5e4:	08 95       	ret

000005e6 <_GLOBAL__D_proto>:
     5e6:	df 93       	push	r29
     5e8:	cf 93       	push	r28
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	6f ef       	ldi	r22, 0xFF	; 255
     5f4:	7f ef       	ldi	r23, 0xFF	; 255
     5f6:	0e 94 92 02 	call	0x524	; 0x524 <_Z41__static_initialization_and_destruction_0ii>
     5fa:	cf 91       	pop	r28
     5fc:	df 91       	pop	r29
     5fe:	08 95       	ret

00000600 <_GLOBAL__I_proto>:
     600:	df 93       	push	r29
     602:	cf 93       	push	r28
     604:	cd b7       	in	r28, 0x3d	; 61
     606:	de b7       	in	r29, 0x3e	; 62
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	6f ef       	ldi	r22, 0xFF	; 255
     60e:	7f ef       	ldi	r23, 0xFF	; 255
     610:	0e 94 92 02 	call	0x524	; 0x524 <_Z41__static_initialization_and_destruction_0ii>
     614:	cf 91       	pop	r28
     616:	df 91       	pop	r29
     618:	08 95       	ret

0000061a <_ZN6StreamlsEi>:
		return print(num);
	}
	Stream& operator<< (int8_t num ){
		return print(num);
	}
	Stream& operator<< (int16_t num ){
     61a:	df 93       	push	r29
     61c:	cf 93       	push	r28
     61e:	00 d0       	rcall	.+0      	; 0x620 <_ZN6StreamlsEi+0x6>
     620:	00 d0       	rcall	.+0      	; 0x622 <_ZN6StreamlsEi+0x8>
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	9a 83       	std	Y+2, r25	; 0x02
     628:	89 83       	std	Y+1, r24	; 0x01
     62a:	7c 83       	std	Y+4, r23	; 0x04
     62c:	6b 83       	std	Y+3, r22	; 0x03
		return print(num);
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	9a 81       	ldd	r25, Y+2	; 0x02
     632:	2b 81       	ldd	r18, Y+3	; 0x03
     634:	3c 81       	ldd	r19, Y+4	; 0x04
     636:	b9 01       	movw	r22, r18
     638:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZN6Stream5printEi>
	}
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	cf 91       	pop	r28
     646:	df 91       	pop	r29
     648:	08 95       	ret

0000064a <_ZN6StreamlsEPKc>:
	// Dump the value of a sensor
	Stream& operator<< (Sensor& sensor ){
		return print(sensor);
	}

	Stream& operator<< (const char str[] ){
     64a:	df 93       	push	r29
     64c:	cf 93       	push	r28
     64e:	00 d0       	rcall	.+0      	; 0x650 <_ZN6StreamlsEPKc+0x6>
     650:	00 d0       	rcall	.+0      	; 0x652 <_ZN6StreamlsEPKc+0x8>
     652:	cd b7       	in	r28, 0x3d	; 61
     654:	de b7       	in	r29, 0x3e	; 62
     656:	9a 83       	std	Y+2, r25	; 0x02
     658:	89 83       	std	Y+1, r24	; 0x01
     65a:	7c 83       	std	Y+4, r23	; 0x04
     65c:	6b 83       	std	Y+3, r22	; 0x03
		return print(str);
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	9a 81       	ldd	r25, Y+2	; 0x02
     662:	2b 81       	ldd	r18, Y+3	; 0x03
     664:	3c 81       	ldd	r19, Y+4	; 0x04
     666:	b9 01       	movw	r22, r18
     668:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN6Stream5printEPKc>
	}
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	cf 91       	pop	r28
     676:	df 91       	pop	r29
     678:	08 95       	ret

0000067a <_ZN6StreamlsEj>:
		return print(c);
	}
	Stream& operator<< (uint8_t num ){
		return print(num);
	}
	Stream& operator<< (uint16_t num ){
     67a:	df 93       	push	r29
     67c:	cf 93       	push	r28
     67e:	00 d0       	rcall	.+0      	; 0x680 <_ZN6StreamlsEj+0x6>
     680:	00 d0       	rcall	.+0      	; 0x682 <_ZN6StreamlsEj+0x8>
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	9a 83       	std	Y+2, r25	; 0x02
     688:	89 83       	std	Y+1, r24	; 0x01
     68a:	7c 83       	std	Y+4, r23	; 0x04
     68c:	6b 83       	std	Y+3, r22	; 0x03
		return print(num);
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	9a 81       	ldd	r25, Y+2	; 0x02
     692:	2b 81       	ldd	r18, Y+3	; 0x03
     694:	3c 81       	ldd	r19, Y+4	; 0x04
     696:	b9 01       	movw	r22, r18
     698:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_ZN6Stream5printEj>
	}
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	cf 91       	pop	r28
     6a6:	df 91       	pop	r29
     6a8:	08 95       	ret

000006aa <_Z12treat_packetR6Packet>:
	motors[1].link_servo(servo2);

	return 0;
}

void treat_packet(Packet &p){
     6aa:	df 93       	push	r29
     6ac:	cf 93       	push	r28
     6ae:	00 d0       	rcall	.+0      	; 0x6b0 <_Z12treat_packetR6Packet+0x6>
     6b0:	00 d0       	rcall	.+0      	; 0x6b2 <_Z12treat_packetR6Packet+0x8>
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	9a 83       	std	Y+2, r25	; 0x02
     6b8:	89 83       	std	Y+1, r24	; 0x01

	if(p.motor_id >= sizeof(motors)/sizeof(SmartMotor))
     6ba:	e9 81       	ldd	r30, Y+1	; 0x01
     6bc:	fa 81       	ldd	r31, Y+2	; 0x02
     6be:	81 81       	ldd	r24, Z+1	; 0x01
     6c0:	82 30       	cpi	r24, 0x02	; 2
     6c2:	d8 f0       	brcs	.+54     	; 0x6fa <_Z12treat_packetR6Packet+0x50>
	{
		uart1<<"failed treat packet "<<(int)p.motor_id<<" "<<sizeof(motors)/sizeof(SmartMotor);
     6c4:	8c e0       	ldi	r24, 0x0C	; 12
     6c6:	94 e0       	ldi	r25, 0x04	; 4
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	32 e0       	ldi	r19, 0x02	; 2
     6cc:	b9 01       	movw	r22, r18
     6ce:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN6StreamlsEPKc>
     6d2:	ac 01       	movw	r20, r24
     6d4:	e9 81       	ldd	r30, Y+1	; 0x01
     6d6:	fa 81       	ldd	r31, Y+2	; 0x02
     6d8:	81 81       	ldd	r24, Z+1	; 0x01
     6da:	28 2f       	mov	r18, r24
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	ca 01       	movw	r24, r20
     6e0:	b9 01       	movw	r22, r18
     6e2:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN6StreamlsEi>
     6e6:	25 e1       	ldi	r18, 0x15	; 21
     6e8:	32 e0       	ldi	r19, 0x02	; 2
     6ea:	b9 01       	movw	r22, r18
     6ec:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN6StreamlsEPKc>
     6f0:	62 e0       	ldi	r22, 0x02	; 2
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN6StreamlsEj>
     6f8:	70 c0       	rjmp	.+224    	; 0x7da <_Z12treat_packetR6Packet+0x130>
		return ;
	}
	switch (p.cmd_id)
     6fa:	e9 81       	ldd	r30, Y+1	; 0x01
     6fc:	fa 81       	ldd	r31, Y+2	; 0x02
     6fe:	80 81       	ld	r24, Z
     700:	28 2f       	mov	r18, r24
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	3c 83       	std	Y+4, r19	; 0x04
     706:	2b 83       	std	Y+3, r18	; 0x03
     708:	8b 81       	ldd	r24, Y+3	; 0x03
     70a:	9c 81       	ldd	r25, Y+4	; 0x04
     70c:	82 30       	cpi	r24, 0x02	; 2
     70e:	91 05       	cpc	r25, r1
     710:	09 f4       	brne	.+2      	; 0x714 <_Z12treat_packetR6Packet+0x6a>
     712:	63 c0       	rjmp	.+198    	; 0x7da <_Z12treat_packetR6Packet+0x130>
     714:	2b 81       	ldd	r18, Y+3	; 0x03
     716:	3c 81       	ldd	r19, Y+4	; 0x04
     718:	23 30       	cpi	r18, 0x03	; 3
     71a:	31 05       	cpc	r19, r1
     71c:	34 f4       	brge	.+12     	; 0x72a <_Z12treat_packetR6Packet+0x80>
     71e:	8b 81       	ldd	r24, Y+3	; 0x03
     720:	9c 81       	ldd	r25, Y+4	; 0x04
     722:	81 30       	cpi	r24, 0x01	; 1
     724:	91 05       	cpc	r25, r1
     726:	61 f0       	breq	.+24     	; 0x740 <_Z12treat_packetR6Packet+0x96>
     728:	58 c0       	rjmp	.+176    	; 0x7da <_Z12treat_packetR6Packet+0x130>
     72a:	2b 81       	ldd	r18, Y+3	; 0x03
     72c:	3c 81       	ldd	r19, Y+4	; 0x04
     72e:	23 30       	cpi	r18, 0x03	; 3
     730:	31 05       	cpc	r19, r1
     732:	29 f1       	breq	.+74     	; 0x77e <_Z12treat_packetR6Packet+0xd4>
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	9c 81       	ldd	r25, Y+4	; 0x04
     738:	84 30       	cpi	r24, 0x04	; 4
     73a:	91 05       	cpc	r25, r1
     73c:	c9 f1       	breq	.+114    	; 0x7b0 <_Z12treat_packetR6Packet+0x106>
     73e:	4d c0       	rjmp	.+154    	; 0x7da <_Z12treat_packetR6Packet+0x130>
	{
		case Packet::SET_POS: { 
			motors[p.motor_id].set_position(p.pos,p.t);
     740:	e9 81       	ldd	r30, Y+1	; 0x01
     742:	fa 81       	ldd	r31, Y+2	; 0x02
     744:	81 81       	ldd	r24, Z+1	; 0x01
     746:	48 2f       	mov	r20, r24
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	ca 01       	movw	r24, r20
     74c:	88 0f       	add	r24, r24
     74e:	99 1f       	adc	r25, r25
     750:	9c 01       	movw	r18, r24
     752:	22 0f       	add	r18, r18
     754:	33 1f       	adc	r19, r19
     756:	22 0f       	add	r18, r18
     758:	33 1f       	adc	r19, r19
     75a:	82 0f       	add	r24, r18
     75c:	93 1f       	adc	r25, r19
     75e:	84 0f       	add	r24, r20
     760:	95 1f       	adc	r25, r21
     762:	87 5b       	subi	r24, 0xB7	; 183
     764:	9c 4f       	sbci	r25, 0xFC	; 252
     766:	e9 81       	ldd	r30, Y+1	; 0x01
     768:	fa 81       	ldd	r31, Y+2	; 0x02
     76a:	42 81       	ldd	r20, Z+2	; 0x02
     76c:	e9 81       	ldd	r30, Y+1	; 0x01
     76e:	fa 81       	ldd	r31, Y+2	; 0x02
     770:	23 81       	ldd	r18, Z+3	; 0x03
     772:	34 81       	ldd	r19, Z+4	; 0x04
     774:	64 2f       	mov	r22, r20
     776:	a9 01       	movw	r20, r18
     778:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN10SmartMotor12set_positionEai>
     77c:	2e c0       	rjmp	.+92     	; 0x7da <_Z12treat_packetR6Packet+0x130>
		//	motors[p.motor_id].get_position(p.pos);
			//proto.send(p);
			break;
		}
		case Packet::GET_STATUS:{
			p.status = motors[p.motor_id].is_moving();
     77e:	e9 81       	ldd	r30, Y+1	; 0x01
     780:	fa 81       	ldd	r31, Y+2	; 0x02
     782:	81 81       	ldd	r24, Z+1	; 0x01
     784:	48 2f       	mov	r20, r24
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	ca 01       	movw	r24, r20
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	9c 01       	movw	r18, r24
     790:	22 0f       	add	r18, r18
     792:	33 1f       	adc	r19, r19
     794:	22 0f       	add	r18, r18
     796:	33 1f       	adc	r19, r19
     798:	82 0f       	add	r24, r18
     79a:	93 1f       	adc	r25, r19
     79c:	84 0f       	add	r24, r20
     79e:	95 1f       	adc	r25, r21
     7a0:	87 5b       	subi	r24, 0xB7	; 183
     7a2:	9c 4f       	sbci	r25, 0xFC	; 252
     7a4:	0e 94 2c 09 	call	0x1258	; 0x1258 <_ZN10SmartMotor9is_movingEv>
     7a8:	e9 81       	ldd	r30, Y+1	; 0x01
     7aa:	fa 81       	ldd	r31, Y+2	; 0x02
     7ac:	85 83       	std	Z+5, r24	; 0x05
     7ae:	15 c0       	rjmp	.+42     	; 0x7da <_Z12treat_packetR6Packet+0x130>
			//proto.send(p);
			break;
		}
		case Packet::STOP_MOTION: { 
			motors[p.motor_id].stop_motion();
     7b0:	e9 81       	ldd	r30, Y+1	; 0x01
     7b2:	fa 81       	ldd	r31, Y+2	; 0x02
     7b4:	81 81       	ldd	r24, Z+1	; 0x01
     7b6:	48 2f       	mov	r20, r24
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	ca 01       	movw	r24, r20
     7bc:	88 0f       	add	r24, r24
     7be:	99 1f       	adc	r25, r25
     7c0:	9c 01       	movw	r18, r24
     7c2:	22 0f       	add	r18, r18
     7c4:	33 1f       	adc	r19, r19
     7c6:	22 0f       	add	r18, r18
     7c8:	33 1f       	adc	r19, r19
     7ca:	82 0f       	add	r24, r18
     7cc:	93 1f       	adc	r25, r19
     7ce:	84 0f       	add	r24, r20
     7d0:	95 1f       	adc	r25, r21
     7d2:	87 5b       	subi	r24, 0xB7	; 183
     7d4:	9c 4f       	sbci	r25, 0xFC	; 252
     7d6:	0e 94 44 09 	call	0x1288	; 0x1288 <_ZN10SmartMotor11stop_motionEv>
			break;
		}
	}

}
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	cf 91       	pop	r28
     7e4:	df 91       	pop	r29
     7e6:	08 95       	ret

000007e8 <appControl>:

// This is the main loop
TICK_COUNT appControl(LOOP_COUNT loopCount, TICK_COUNT loopStart) {
     7e8:	df 93       	push	r29
     7ea:	cf 93       	push	r28
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	66 97       	sbiw	r28, 0x16	; 22
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
     7fc:	6e 87       	std	Y+14, r22	; 0x0e
     7fe:	7f 87       	std	Y+15, r23	; 0x0f
     800:	88 8b       	std	Y+16, r24	; 0x10
     802:	99 8b       	std	Y+17, r25	; 0x11
     804:	2a 8b       	std	Y+18, r18	; 0x12
     806:	3b 8b       	std	Y+19, r19	; 0x13
     808:	4c 8b       	std	Y+20, r20	; 0x14
     80a:	5d 8b       	std	Y+21, r21	; 0x15

	Packet p;
     80c:	ce 01       	movw	r24, r28
     80e:	03 96       	adiw	r24, 0x03	; 3
     810:	0e 94 a0 04 	call	0x940	; 0x940 <_ZN6PacketC1Ev>
     814:	04 c0       	rjmp	.+8      	; 0x81e <appControl+0x36>

	while(proto.treatIO(p) == 1)
	{
		treat_packet(p);
     816:	ce 01       	movw	r24, r28
     818:	03 96       	adiw	r24, 0x03	; 3
     81a:	0e 94 55 03 	call	0x6aa	; 0x6aa <_Z12treat_packetR6Packet>
// This is the main loop
TICK_COUNT appControl(LOOP_COUNT loopCount, TICK_COUNT loopStart) {

	Packet p;

	while(proto.treatIO(p) == 1)
     81e:	8c e1       	ldi	r24, 0x1C	; 28
     820:	93 e0       	ldi	r25, 0x03	; 3
     822:	9e 01       	movw	r18, r28
     824:	2d 5f       	subi	r18, 0xFD	; 253
     826:	3f 4f       	sbci	r19, 0xFF	; 255
     828:	b9 01       	movw	r22, r18
     82a:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN8Protocol7treatIOER6Packet>
     82e:	1e 8a       	std	Y+22, r1	; 0x16
     830:	81 30       	cpi	r24, 0x01	; 1
     832:	91 05       	cpc	r25, r1
     834:	11 f4       	brne	.+4      	; 0x83a <appControl+0x52>
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	8e 8b       	std	Y+22, r24	; 0x16
     83a:	8e 89       	ldd	r24, Y+22	; 0x16
     83c:	88 23       	and	r24, r24
     83e:	59 f7       	brne	.-42     	; 0x816 <appControl+0x2e>
	{
		treat_packet(p);
	}

	for (int i = 0; i < sizeof(motors)/sizeof(SmartMotor); i++)
     840:	1a 82       	std	Y+2, r1	; 0x02
     842:	19 82       	std	Y+1, r1	; 0x01
     844:	17 c0       	rjmp	.+46     	; 0x874 <appControl+0x8c>
	{
		motors[i].compute();
     846:	49 81       	ldd	r20, Y+1	; 0x01
     848:	5a 81       	ldd	r21, Y+2	; 0x02
     84a:	ca 01       	movw	r24, r20
     84c:	88 0f       	add	r24, r24
     84e:	99 1f       	adc	r25, r25
     850:	9c 01       	movw	r18, r24
     852:	22 0f       	add	r18, r18
     854:	33 1f       	adc	r19, r19
     856:	22 0f       	add	r18, r18
     858:	33 1f       	adc	r19, r19
     85a:	82 0f       	add	r24, r18
     85c:	93 1f       	adc	r25, r19
     85e:	84 0f       	add	r24, r20
     860:	95 1f       	adc	r25, r21
     862:	87 5b       	subi	r24, 0xB7	; 183
     864:	9c 4f       	sbci	r25, 0xFC	; 252
     866:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_ZN10SmartMotor7computeEv>
	while(proto.treatIO(p) == 1)
	{
		treat_packet(p);
	}

	for (int i = 0; i < sizeof(motors)/sizeof(SmartMotor); i++)
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	9a 81       	ldd	r25, Y+2	; 0x02
     86e:	01 96       	adiw	r24, 0x01	; 1
     870:	9a 83       	std	Y+2, r25	; 0x02
     872:	89 83       	std	Y+1, r24	; 0x01
     874:	89 81       	ldd	r24, Y+1	; 0x01
     876:	9a 81       	ldd	r25, Y+2	; 0x02
     878:	82 30       	cpi	r24, 0x02	; 2
     87a:	91 05       	cpc	r25, r1
     87c:	20 f3       	brcs	.-56     	; 0x846 <appControl+0x5e>
	{
		motors[i].compute();
	}

  	return HEXAPOD_LOOP_DURATION;
     87e:	80 e2       	ldi	r24, 0x20	; 32
     880:	9e e4       	ldi	r25, 0x4E	; 78
     882:	a0 e0       	ldi	r26, 0x00	; 0
     884:	b0 e0       	ldi	r27, 0x00	; 0
}
     886:	bc 01       	movw	r22, r24
     888:	cd 01       	movw	r24, r26
     88a:	66 96       	adiw	r28, 0x16	; 22
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	cf 91       	pop	r28
     898:	df 91       	pop	r29
     89a:	08 95       	ret

0000089c <appInitSoftware>:
	initHardware();
}


// Initialise the software
TICK_COUNT appInitSoftware(TICK_COUNT loopStart) {
     89c:	df 93       	push	r29
     89e:	cf 93       	push	r28
     8a0:	00 d0       	rcall	.+0      	; 0x8a2 <appInitSoftware+0x6>
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <appInitSoftware+0x8>
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	69 83       	std	Y+1, r22	; 0x01
     8aa:	7a 83       	std	Y+2, r23	; 0x02
     8ac:	8b 83       	std	Y+3, r24	; 0x03
     8ae:	9c 83       	std	Y+4, r25	; 0x04

	proto.init(&uart1);
     8b0:	8c e1       	ldi	r24, 0x1C	; 28
     8b2:	93 e0       	ldi	r25, 0x03	; 3
     8b4:	2c e0       	ldi	r18, 0x0C	; 12
     8b6:	34 e0       	ldi	r19, 0x04	; 4
     8b8:	b9 01       	movw	r22, r18
     8ba:	0e 94 10 08 	call	0x1020	; 0x1020 <_ZN8Protocol4initEP6UartHW>

	motors[0].link_servo(servo1);
     8be:	89 e4       	ldi	r24, 0x49	; 73
     8c0:	93 e0       	ldi	r25, 0x03	; 3
     8c2:	2e ef       	ldi	r18, 0xFE	; 254
     8c4:	33 e0       	ldi	r19, 0x03	; 3
     8c6:	b9 01       	movw	r22, r18
     8c8:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <_ZN10SmartMotor10link_servoER5Servo>

	motors[1].link_servo(servo2);
     8cc:	84 e5       	ldi	r24, 0x54	; 84
     8ce:	93 e0       	ldi	r25, 0x03	; 3
     8d0:	22 e0       	ldi	r18, 0x02	; 2
     8d2:	34 e0       	ldi	r19, 0x04	; 4
     8d4:	b9 01       	movw	r22, r18
     8d6:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <_ZN10SmartMotor10link_servoER5Servo>

	return 0;
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	a0 e0       	ldi	r26, 0x00	; 0
     8e0:	b0 e0       	ldi	r27, 0x00	; 0
}
     8e2:	bc 01       	movw	r22, r24
     8e4:	cd 01       	movw	r24, r26
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	cf 91       	pop	r28
     8f0:	df 91       	pop	r29
     8f2:	08 95       	ret

000008f4 <appInitHardware>:
Protocol proto;

SmartMotor motors[2];

// Initialise the hardware
void appInitHardware(void) {
     8f4:	df 93       	push	r29
     8f6:	cf 93       	push	r28
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
	initHardware();
     8fc:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <initHardware>
}
     900:	cf 91       	pop	r28
     902:	df 91       	pop	r29
     904:	08 95       	ret

00000906 <_ZN6PacketC2Ev>:
#include "protocol.h"

#include <stdlib.h>


Packet::Packet()
     906:	df 93       	push	r29
     908:	cf 93       	push	r28
     90a:	00 d0       	rcall	.+0      	; 0x90c <_ZN6PacketC2Ev+0x6>
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
     910:	9a 83       	std	Y+2, r25	; 0x02
     912:	89 83       	std	Y+1, r24	; 0x01
{
	cmd_id = 0;
     914:	e9 81       	ldd	r30, Y+1	; 0x01
     916:	fa 81       	ldd	r31, Y+2	; 0x02
     918:	10 82       	st	Z, r1
	motor_id = 0;
     91a:	e9 81       	ldd	r30, Y+1	; 0x01
     91c:	fa 81       	ldd	r31, Y+2	; 0x02
     91e:	11 82       	std	Z+1, r1	; 0x01
	pos = 0;
     920:	e9 81       	ldd	r30, Y+1	; 0x01
     922:	fa 81       	ldd	r31, Y+2	; 0x02
     924:	12 82       	std	Z+2, r1	; 0x02
	t = 0;
     926:	e9 81       	ldd	r30, Y+1	; 0x01
     928:	fa 81       	ldd	r31, Y+2	; 0x02
     92a:	14 82       	std	Z+4, r1	; 0x04
     92c:	13 82       	std	Z+3, r1	; 0x03

	status = Packet::STOP;
     92e:	e9 81       	ldd	r30, Y+1	; 0x01
     930:	fa 81       	ldd	r31, Y+2	; 0x02
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	85 83       	std	Z+5, r24	; 0x05

	//command_len = {5, 2, 2, 2};
}
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	cf 91       	pop	r28
     93c:	df 91       	pop	r29
     93e:	08 95       	ret

00000940 <_ZN6PacketC1Ev>:
#include "protocol.h"

#include <stdlib.h>


Packet::Packet()
     940:	df 93       	push	r29
     942:	cf 93       	push	r28
     944:	00 d0       	rcall	.+0      	; 0x946 <_ZN6PacketC1Ev+0x6>
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
     94a:	9a 83       	std	Y+2, r25	; 0x02
     94c:	89 83       	std	Y+1, r24	; 0x01
{
	cmd_id = 0;
     94e:	e9 81       	ldd	r30, Y+1	; 0x01
     950:	fa 81       	ldd	r31, Y+2	; 0x02
     952:	10 82       	st	Z, r1
	motor_id = 0;
     954:	e9 81       	ldd	r30, Y+1	; 0x01
     956:	fa 81       	ldd	r31, Y+2	; 0x02
     958:	11 82       	std	Z+1, r1	; 0x01
	pos = 0;
     95a:	e9 81       	ldd	r30, Y+1	; 0x01
     95c:	fa 81       	ldd	r31, Y+2	; 0x02
     95e:	12 82       	std	Z+2, r1	; 0x02
	t = 0;
     960:	e9 81       	ldd	r30, Y+1	; 0x01
     962:	fa 81       	ldd	r31, Y+2	; 0x02
     964:	14 82       	std	Z+4, r1	; 0x04
     966:	13 82       	std	Z+3, r1	; 0x03

	status = Packet::STOP;
     968:	e9 81       	ldd	r30, Y+1	; 0x01
     96a:	fa 81       	ldd	r31, Y+2	; 0x02
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	85 83       	std	Z+5, r24	; 0x05

	//command_len = {5, 2, 2, 2};
}
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
     974:	cf 91       	pop	r28
     976:	df 91       	pop	r29
     978:	08 95       	ret

0000097a <_ZN8Protocol4sendER6Packet>:
//////////////////////////////////////////
//
// PRIVATE
//////////////////////////////////////////////

void Protocol::send(Packet &p)
     97a:	df 93       	push	r29
     97c:	cf 93       	push	r28
     97e:	00 d0       	rcall	.+0      	; 0x980 <_ZN8Protocol4sendER6Packet+0x6>
     980:	00 d0       	rcall	.+0      	; 0x982 <_ZN8Protocol4sendER6Packet+0x8>
     982:	00 d0       	rcall	.+0      	; 0x984 <_ZN8Protocol4sendER6Packet+0xa>
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
     988:	9a 83       	std	Y+2, r25	; 0x02
     98a:	89 83       	std	Y+1, r24	; 0x01
     98c:	7c 83       	std	Y+4, r23	; 0x04
     98e:	6b 83       	std	Y+3, r22	; 0x03
{
	switch (p.cmd_id)
     990:	eb 81       	ldd	r30, Y+3	; 0x03
     992:	fc 81       	ldd	r31, Y+4	; 0x04
     994:	80 81       	ld	r24, Z
     996:	28 2f       	mov	r18, r24
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	3e 83       	std	Y+6, r19	; 0x06
     99c:	2d 83       	std	Y+5, r18	; 0x05
     99e:	8d 81       	ldd	r24, Y+5	; 0x05
     9a0:	9e 81       	ldd	r25, Y+6	; 0x06
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	91 05       	cpc	r25, r1
     9a6:	39 f0       	breq	.+14     	; 0x9b6 <_ZN8Protocol4sendER6Packet+0x3c>
     9a8:	2d 81       	ldd	r18, Y+5	; 0x05
     9aa:	3e 81       	ldd	r19, Y+6	; 0x06
     9ac:	23 30       	cpi	r18, 0x03	; 3
     9ae:	31 05       	cpc	r19, r1
     9b0:	09 f4       	brne	.+2      	; 0x9b4 <_ZN8Protocol4sendER6Packet+0x3a>
     9b2:	3f c0       	rjmp	.+126    	; 0xa32 <_ZN8Protocol4sendER6Packet+0xb8>
     9b4:	7a c0       	rjmp	.+244    	; 0xaaa <_ZN8Protocol4sendER6Packet+0x130>
	{
		case Packet::SET_POS :{
			break;
		}
		case Packet::GET_POS: {
			out[out_offset++] = p.cmd_id;
     9b6:	e9 81       	ldd	r30, Y+1	; 0x01
     9b8:	fa 81       	ldd	r31, Y+2	; 0x02
     9ba:	53 a5       	ldd	r21, Z+43	; 0x2b
     9bc:	25 2f       	mov	r18, r21
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	eb 81       	ldd	r30, Y+3	; 0x03
     9c2:	fc 81       	ldd	r31, Y+4	; 0x04
     9c4:	40 81       	ld	r20, Z
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ca:	82 0f       	add	r24, r18
     9cc:	93 1f       	adc	r25, r19
     9ce:	fc 01       	movw	r30, r24
     9d0:	76 96       	adiw	r30, 0x16	; 22
     9d2:	40 83       	st	Z, r20
     9d4:	85 2f       	mov	r24, r21
     9d6:	8f 5f       	subi	r24, 0xFF	; 255
     9d8:	e9 81       	ldd	r30, Y+1	; 0x01
     9da:	fa 81       	ldd	r31, Y+2	; 0x02
     9dc:	83 a7       	std	Z+43, r24	; 0x2b
			out[out_offset++] = p.motor_id;
     9de:	e9 81       	ldd	r30, Y+1	; 0x01
     9e0:	fa 81       	ldd	r31, Y+2	; 0x02
     9e2:	53 a5       	ldd	r21, Z+43	; 0x2b
     9e4:	25 2f       	mov	r18, r21
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	eb 81       	ldd	r30, Y+3	; 0x03
     9ea:	fc 81       	ldd	r31, Y+4	; 0x04
     9ec:	41 81       	ldd	r20, Z+1	; 0x01
     9ee:	89 81       	ldd	r24, Y+1	; 0x01
     9f0:	9a 81       	ldd	r25, Y+2	; 0x02
     9f2:	82 0f       	add	r24, r18
     9f4:	93 1f       	adc	r25, r19
     9f6:	fc 01       	movw	r30, r24
     9f8:	76 96       	adiw	r30, 0x16	; 22
     9fa:	40 83       	st	Z, r20
     9fc:	85 2f       	mov	r24, r21
     9fe:	8f 5f       	subi	r24, 0xFF	; 255
     a00:	e9 81       	ldd	r30, Y+1	; 0x01
     a02:	fa 81       	ldd	r31, Y+2	; 0x02
     a04:	83 a7       	std	Z+43, r24	; 0x2b
			out[out_offset++] = p.pos;
     a06:	e9 81       	ldd	r30, Y+1	; 0x01
     a08:	fa 81       	ldd	r31, Y+2	; 0x02
     a0a:	53 a5       	ldd	r21, Z+43	; 0x2b
     a0c:	25 2f       	mov	r18, r21
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	eb 81       	ldd	r30, Y+3	; 0x03
     a12:	fc 81       	ldd	r31, Y+4	; 0x04
     a14:	82 81       	ldd	r24, Z+2	; 0x02
     a16:	48 2f       	mov	r20, r24
     a18:	89 81       	ldd	r24, Y+1	; 0x01
     a1a:	9a 81       	ldd	r25, Y+2	; 0x02
     a1c:	82 0f       	add	r24, r18
     a1e:	93 1f       	adc	r25, r19
     a20:	fc 01       	movw	r30, r24
     a22:	76 96       	adiw	r30, 0x16	; 22
     a24:	40 83       	st	Z, r20
     a26:	85 2f       	mov	r24, r21
     a28:	8f 5f       	subi	r24, 0xFF	; 255
     a2a:	e9 81       	ldd	r30, Y+1	; 0x01
     a2c:	fa 81       	ldd	r31, Y+2	; 0x02
     a2e:	83 a7       	std	Z+43, r24	; 0x2b
     a30:	3c c0       	rjmp	.+120    	; 0xaaa <_ZN8Protocol4sendER6Packet+0x130>
			break;
		}
		case Packet::GET_STATUS:{
			out[out_offset++] = p.cmd_id;
     a32:	e9 81       	ldd	r30, Y+1	; 0x01
     a34:	fa 81       	ldd	r31, Y+2	; 0x02
     a36:	53 a5       	ldd	r21, Z+43	; 0x2b
     a38:	25 2f       	mov	r18, r21
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	eb 81       	ldd	r30, Y+3	; 0x03
     a3e:	fc 81       	ldd	r31, Y+4	; 0x04
     a40:	40 81       	ld	r20, Z
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	9a 81       	ldd	r25, Y+2	; 0x02
     a46:	82 0f       	add	r24, r18
     a48:	93 1f       	adc	r25, r19
     a4a:	fc 01       	movw	r30, r24
     a4c:	76 96       	adiw	r30, 0x16	; 22
     a4e:	40 83       	st	Z, r20
     a50:	85 2f       	mov	r24, r21
     a52:	8f 5f       	subi	r24, 0xFF	; 255
     a54:	e9 81       	ldd	r30, Y+1	; 0x01
     a56:	fa 81       	ldd	r31, Y+2	; 0x02
     a58:	83 a7       	std	Z+43, r24	; 0x2b
			out[out_offset++] = p.motor_id;
     a5a:	e9 81       	ldd	r30, Y+1	; 0x01
     a5c:	fa 81       	ldd	r31, Y+2	; 0x02
     a5e:	53 a5       	ldd	r21, Z+43	; 0x2b
     a60:	25 2f       	mov	r18, r21
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	eb 81       	ldd	r30, Y+3	; 0x03
     a66:	fc 81       	ldd	r31, Y+4	; 0x04
     a68:	41 81       	ldd	r20, Z+1	; 0x01
     a6a:	89 81       	ldd	r24, Y+1	; 0x01
     a6c:	9a 81       	ldd	r25, Y+2	; 0x02
     a6e:	82 0f       	add	r24, r18
     a70:	93 1f       	adc	r25, r19
     a72:	fc 01       	movw	r30, r24
     a74:	76 96       	adiw	r30, 0x16	; 22
     a76:	40 83       	st	Z, r20
     a78:	85 2f       	mov	r24, r21
     a7a:	8f 5f       	subi	r24, 0xFF	; 255
     a7c:	e9 81       	ldd	r30, Y+1	; 0x01
     a7e:	fa 81       	ldd	r31, Y+2	; 0x02
     a80:	83 a7       	std	Z+43, r24	; 0x2b
			out[out_offset++] = p.status;
     a82:	e9 81       	ldd	r30, Y+1	; 0x01
     a84:	fa 81       	ldd	r31, Y+2	; 0x02
     a86:	53 a5       	ldd	r21, Z+43	; 0x2b
     a88:	25 2f       	mov	r18, r21
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	eb 81       	ldd	r30, Y+3	; 0x03
     a8e:	fc 81       	ldd	r31, Y+4	; 0x04
     a90:	45 81       	ldd	r20, Z+5	; 0x05
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	9a 81       	ldd	r25, Y+2	; 0x02
     a96:	82 0f       	add	r24, r18
     a98:	93 1f       	adc	r25, r19
     a9a:	fc 01       	movw	r30, r24
     a9c:	76 96       	adiw	r30, 0x16	; 22
     a9e:	40 83       	st	Z, r20
     aa0:	85 2f       	mov	r24, r21
     aa2:	8f 5f       	subi	r24, 0xFF	; 255
     aa4:	e9 81       	ldd	r30, Y+1	; 0x01
     aa6:	fa 81       	ldd	r31, Y+2	; 0x02
     aa8:	83 a7       	std	Z+43, r24	; 0x2b
		}
		case Packet::STOP_MOTION: { 
			break;
		}
	}	
}
     aaa:	26 96       	adiw	r28, 0x06	; 6
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	cf 91       	pop	r28
     ab8:	df 91       	pop	r29
     aba:	08 95       	ret

00000abc <_ZN8Protocol6_writeEPhi>:
		}
	}	
}


void Protocol::_write(uint8_t *data, int size)
     abc:	df 93       	push	r29
     abe:	cf 93       	push	r28
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
     ac4:	28 97       	sbiw	r28, 0x08	; 8
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	9c 83       	std	Y+4, r25	; 0x04
     ad2:	8b 83       	std	Y+3, r24	; 0x03
     ad4:	7e 83       	std	Y+6, r23	; 0x06
     ad6:	6d 83       	std	Y+5, r22	; 0x05
     ad8:	58 87       	std	Y+8, r21	; 0x08
     ada:	4f 83       	std	Y+7, r20	; 0x07
{
	uint8_t *p = data;
     adc:	8d 81       	ldd	r24, Y+5	; 0x05
     ade:	9e 81       	ldd	r25, Y+6	; 0x06
     ae0:	9a 83       	std	Y+2, r25	; 0x02
     ae2:	89 83       	std	Y+1, r24	; 0x01
     ae4:	19 c0       	rjmp	.+50     	; 0xb18 <_ZN8Protocol6_writeEPhi+0x5c>
	while(p-data < size)
	{
		_uart->write(*p);
     ae6:	eb 81       	ldd	r30, Y+3	; 0x03
     ae8:	fc 81       	ldd	r31, Y+4	; 0x04
     aea:	01 90       	ld	r0, Z+
     aec:	f0 81       	ld	r31, Z
     aee:	e0 2d       	mov	r30, r0
     af0:	01 90       	ld	r0, Z+
     af2:	f0 81       	ld	r31, Z
     af4:	e0 2d       	mov	r30, r0
     af6:	40 81       	ld	r20, Z
     af8:	51 81       	ldd	r21, Z+1	; 0x01
     afa:	eb 81       	ldd	r30, Y+3	; 0x03
     afc:	fc 81       	ldd	r31, Y+4	; 0x04
     afe:	80 81       	ld	r24, Z
     b00:	91 81       	ldd	r25, Z+1	; 0x01
     b02:	e9 81       	ldd	r30, Y+1	; 0x01
     b04:	fa 81       	ldd	r31, Y+2	; 0x02
     b06:	20 81       	ld	r18, Z
     b08:	62 2f       	mov	r22, r18
     b0a:	fa 01       	movw	r30, r20
     b0c:	09 95       	icall
		p++;
     b0e:	89 81       	ldd	r24, Y+1	; 0x01
     b10:	9a 81       	ldd	r25, Y+2	; 0x02
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	9a 83       	std	Y+2, r25	; 0x02
     b16:	89 83       	std	Y+1, r24	; 0x01


void Protocol::_write(uint8_t *data, int size)
{
	uint8_t *p = data;
	while(p-data < size)
     b18:	29 81       	ldd	r18, Y+1	; 0x01
     b1a:	3a 81       	ldd	r19, Y+2	; 0x02
     b1c:	8d 81       	ldd	r24, Y+5	; 0x05
     b1e:	9e 81       	ldd	r25, Y+6	; 0x06
     b20:	28 1b       	sub	r18, r24
     b22:	39 0b       	sbc	r19, r25
     b24:	8f 81       	ldd	r24, Y+7	; 0x07
     b26:	98 85       	ldd	r25, Y+8	; 0x08
     b28:	28 17       	cp	r18, r24
     b2a:	39 07       	cpc	r19, r25
     b2c:	e4 f2       	brlt	.-72     	; 0xae6 <_ZN8Protocol6_writeEPhi+0x2a>
	{
		_uart->write(*p);
		p++;
	}
}
     b2e:	28 96       	adiw	r28, 0x08	; 8
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	cf 91       	pop	r28
     b3c:	df 91       	pop	r29
     b3e:	08 95       	ret

00000b40 <_ZN8Protocol5_readEv>:

uint8_t Protocol::_read()
     b40:	df 93       	push	r29
     b42:	cf 93       	push	r28
     b44:	00 d0       	rcall	.+0      	; 0xb46 <_ZN8Protocol5_readEv+0x6>
     b46:	00 d0       	rcall	.+0      	; 0xb48 <_ZN8Protocol5_readEv+0x8>
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
     b4c:	9c 83       	std	Y+4, r25	; 0x04
     b4e:	8b 83       	std	Y+3, r24	; 0x03
{
	int c = -1;
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	9f ef       	ldi	r25, 0xFF	; 255
     b54:	9a 83       	std	Y+2, r25	; 0x02
     b56:	89 83       	std	Y+1, r24	; 0x01
     b58:	39 c0       	rjmp	.+114    	; 0xbcc <_ZN8Protocol5_readEv+0x8c>
	//CRITICAL_SECTION{
	while(in_offset < Protocol::BUFFER_SIZE )
	{
		c = _uart->read();
     b5a:	eb 81       	ldd	r30, Y+3	; 0x03
     b5c:	fc 81       	ldd	r31, Y+4	; 0x04
     b5e:	01 90       	ld	r0, Z+
     b60:	f0 81       	ld	r31, Z
     b62:	e0 2d       	mov	r30, r0
     b64:	80 81       	ld	r24, Z
     b66:	91 81       	ldd	r25, Z+1	; 0x01
     b68:	fc 01       	movw	r30, r24
     b6a:	32 96       	adiw	r30, 0x02	; 2
     b6c:	20 81       	ld	r18, Z
     b6e:	31 81       	ldd	r19, Z+1	; 0x01
     b70:	eb 81       	ldd	r30, Y+3	; 0x03
     b72:	fc 81       	ldd	r31, Y+4	; 0x04
     b74:	80 81       	ld	r24, Z
     b76:	91 81       	ldd	r25, Z+1	; 0x01
     b78:	f9 01       	movw	r30, r18
     b7a:	09 95       	icall
     b7c:	9a 83       	std	Y+2, r25	; 0x02
     b7e:	89 83       	std	Y+1, r24	; 0x01
		if(c == -1)
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	9a 81       	ldd	r25, Y+2	; 0x02
     b84:	2f ef       	ldi	r18, 0xFF	; 255
     b86:	8f 3f       	cpi	r24, 0xFF	; 255
     b88:	92 07       	cpc	r25, r18
     b8a:	29 f1       	breq	.+74     	; 0xbd6 <_ZN8Protocol5_readEv+0x96>
			break;
		in[in_offset] = 0;
     b8c:	eb 81       	ldd	r30, Y+3	; 0x03
     b8e:	fc 81       	ldd	r31, Y+4	; 0x04
     b90:	82 a5       	ldd	r24, Z+42	; 0x2a
     b92:	28 2f       	mov	r18, r24
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	9c 81       	ldd	r25, Y+4	; 0x04
     b9a:	82 0f       	add	r24, r18
     b9c:	93 1f       	adc	r25, r19
     b9e:	fc 01       	movw	r30, r24
     ba0:	32 96       	adiw	r30, 0x02	; 2
     ba2:	10 82       	st	Z, r1
		in[in_offset] = (uint8_t)(c & 0xFF);
     ba4:	eb 81       	ldd	r30, Y+3	; 0x03
     ba6:	fc 81       	ldd	r31, Y+4	; 0x04
     ba8:	82 a5       	ldd	r24, Z+42	; 0x2a
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	49 81       	ldd	r20, Y+1	; 0x01
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	82 0f       	add	r24, r18
     bb6:	93 1f       	adc	r25, r19
     bb8:	fc 01       	movw	r30, r24
     bba:	32 96       	adiw	r30, 0x02	; 2
     bbc:	40 83       	st	Z, r20
		in_offset++;
     bbe:	eb 81       	ldd	r30, Y+3	; 0x03
     bc0:	fc 81       	ldd	r31, Y+4	; 0x04
     bc2:	82 a5       	ldd	r24, Z+42	; 0x2a
     bc4:	8f 5f       	subi	r24, 0xFF	; 255
     bc6:	eb 81       	ldd	r30, Y+3	; 0x03
     bc8:	fc 81       	ldd	r31, Y+4	; 0x04
     bca:	82 a7       	std	Z+42, r24	; 0x2a

uint8_t Protocol::_read()
{
	int c = -1;
	//CRITICAL_SECTION{
	while(in_offset < Protocol::BUFFER_SIZE )
     bcc:	eb 81       	ldd	r30, Y+3	; 0x03
     bce:	fc 81       	ldd	r31, Y+4	; 0x04
     bd0:	82 a5       	ldd	r24, Z+42	; 0x2a
     bd2:	84 31       	cpi	r24, 0x14	; 20
     bd4:	10 f2       	brcs	.-124    	; 0xb5a <_ZN8Protocol5_readEv+0x1a>
		in[in_offset] = 0;
		in[in_offset] = (uint8_t)(c & 0xFF);
		in_offset++;
	}
	//}
	return 0;
     bd6:	80 e0       	ldi	r24, 0x00	; 0
}
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	cf 91       	pop	r28
     be2:	df 91       	pop	r29
     be4:	08 95       	ret
	// Dump the value of a sensor
	Stream& operator<< (Sensor& sensor ){
		return print(sensor);
	}

	Stream& operator<< (const char str[] ){
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	00 d0       	rcall	.+0      	; 0xbec <_ZN8Protocol5_readEv+0xac>
     bec:	00 d0       	rcall	.+0      	; 0xbee <_ZN8Protocol5_readEv+0xae>
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
     bf2:	9a 83       	std	Y+2, r25	; 0x02
     bf4:	89 83       	std	Y+1, r24	; 0x01
     bf6:	7c 83       	std	Y+4, r23	; 0x04
     bf8:	6b 83       	std	Y+3, r22	; 0x03
		return print(str);
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	9a 81       	ldd	r25, Y+2	; 0x02
     bfe:	2b 81       	ldd	r18, Y+3	; 0x03
     c00:	3c 81       	ldd	r19, Y+4	; 0x04
     c02:	b9 01       	movw	r22, r18
     c04:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN6Stream5printEPKc>
	}
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	cf 91       	pop	r28
     c12:	df 91       	pop	r29
     c14:	08 95       	ret
		return print(num);
	}
	Stream& operator<< (int8_t num ){
		return print(num);
	}
	Stream& operator<< (int16_t num ){
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	00 d0       	rcall	.+0      	; 0xc1c <_ZN8Protocol5_readEv+0xdc>
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <_ZN8Protocol5_readEv+0xde>
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	9a 83       	std	Y+2, r25	; 0x02
     c24:	89 83       	std	Y+1, r24	; 0x01
     c26:	7c 83       	std	Y+4, r23	; 0x04
     c28:	6b 83       	std	Y+3, r22	; 0x03
		return print(num);
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02
     c2e:	2b 81       	ldd	r18, Y+3	; 0x03
     c30:	3c 81       	ldd	r19, Y+4	; 0x04
     c32:	b9 01       	movw	r22, r18
     c34:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZN6Stream5printEi>
	}
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <_ZN8Protocol5forgeER6Packet>:
			break;
		}
	}	
}

void Protocol::forge(Packet &p)
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	00 d0       	rcall	.+0      	; 0xc4c <_ZN8Protocol5forgeER6Packet+0x6>
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <_ZN8Protocol5forgeER6Packet+0x8>
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <_ZN8Protocol5forgeER6Packet+0xa>
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	9a 83       	std	Y+2, r25	; 0x02
     c56:	89 83       	std	Y+1, r24	; 0x01
     c58:	7c 83       	std	Y+4, r23	; 0x04
     c5a:	6b 83       	std	Y+3, r22	; 0x03
{
	switch (in[0])
     c5c:	e9 81       	ldd	r30, Y+1	; 0x01
     c5e:	fa 81       	ldd	r31, Y+2	; 0x02
     c60:	82 81       	ldd	r24, Z+2	; 0x02
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	3e 83       	std	Y+6, r19	; 0x06
     c68:	2d 83       	std	Y+5, r18	; 0x05
     c6a:	8d 81       	ldd	r24, Y+5	; 0x05
     c6c:	9e 81       	ldd	r25, Y+6	; 0x06
     c6e:	82 30       	cpi	r24, 0x02	; 2
     c70:	91 05       	cpc	r25, r1
     c72:	09 f4       	brne	.+2      	; 0xc76 <_ZN8Protocol5forgeER6Packet+0x30>
     c74:	3e c0       	rjmp	.+124    	; 0xcf2 <_ZN8Protocol5forgeER6Packet+0xac>
     c76:	2d 81       	ldd	r18, Y+5	; 0x05
     c78:	3e 81       	ldd	r19, Y+6	; 0x06
     c7a:	23 30       	cpi	r18, 0x03	; 3
     c7c:	31 05       	cpc	r19, r1
     c7e:	34 f4       	brge	.+12     	; 0xc8c <_ZN8Protocol5forgeER6Packet+0x46>
     c80:	8d 81       	ldd	r24, Y+5	; 0x05
     c82:	9e 81       	ldd	r25, Y+6	; 0x06
     c84:	81 30       	cpi	r24, 0x01	; 1
     c86:	91 05       	cpc	r25, r1
     c88:	71 f0       	breq	.+28     	; 0xca6 <_ZN8Protocol5forgeER6Packet+0x60>
     c8a:	6a c0       	rjmp	.+212    	; 0xd60 <_ZN8Protocol5forgeER6Packet+0x11a>
     c8c:	2d 81       	ldd	r18, Y+5	; 0x05
     c8e:	3e 81       	ldd	r19, Y+6	; 0x06
     c90:	23 30       	cpi	r18, 0x03	; 3
     c92:	31 05       	cpc	r19, r1
     c94:	09 f4       	brne	.+2      	; 0xc98 <_ZN8Protocol5forgeER6Packet+0x52>
     c96:	4b c0       	rjmp	.+150    	; 0xd2e <_ZN8Protocol5forgeER6Packet+0xe8>
     c98:	8d 81       	ldd	r24, Y+5	; 0x05
     c9a:	9e 81       	ldd	r25, Y+6	; 0x06
     c9c:	84 30       	cpi	r24, 0x04	; 4
     c9e:	91 05       	cpc	r25, r1
     ca0:	09 f4       	brne	.+2      	; 0xca4 <_ZN8Protocol5forgeER6Packet+0x5e>
     ca2:	52 c0       	rjmp	.+164    	; 0xd48 <_ZN8Protocol5forgeER6Packet+0x102>
     ca4:	5d c0       	rjmp	.+186    	; 0xd60 <_ZN8Protocol5forgeER6Packet+0x11a>
	{
		case Packet::SET_POS :{
			p.cmd_id = in[0];
     ca6:	e9 81       	ldd	r30, Y+1	; 0x01
     ca8:	fa 81       	ldd	r31, Y+2	; 0x02
     caa:	82 81       	ldd	r24, Z+2	; 0x02
     cac:	eb 81       	ldd	r30, Y+3	; 0x03
     cae:	fc 81       	ldd	r31, Y+4	; 0x04
     cb0:	80 83       	st	Z, r24
			p.motor_id = in[1];
     cb2:	e9 81       	ldd	r30, Y+1	; 0x01
     cb4:	fa 81       	ldd	r31, Y+2	; 0x02
     cb6:	83 81       	ldd	r24, Z+3	; 0x03
     cb8:	eb 81       	ldd	r30, Y+3	; 0x03
     cba:	fc 81       	ldd	r31, Y+4	; 0x04
     cbc:	81 83       	std	Z+1, r24	; 0x01
			p.pos = in[2];
     cbe:	e9 81       	ldd	r30, Y+1	; 0x01
     cc0:	fa 81       	ldd	r31, Y+2	; 0x02
     cc2:	84 81       	ldd	r24, Z+4	; 0x04
     cc4:	eb 81       	ldd	r30, Y+3	; 0x03
     cc6:	fc 81       	ldd	r31, Y+4	; 0x04
     cc8:	82 83       	std	Z+2, r24	; 0x02
			p.t = (in[3]<<8 & 0xFF00) | (in[4] & 0x00FF);
     cca:	e9 81       	ldd	r30, Y+1	; 0x01
     ccc:	fa 81       	ldd	r31, Y+2	; 0x02
     cce:	85 81       	ldd	r24, Z+5	; 0x05
     cd0:	88 2f       	mov	r24, r24
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	98 2f       	mov	r25, r24
     cd6:	88 27       	eor	r24, r24
     cd8:	9c 01       	movw	r18, r24
     cda:	e9 81       	ldd	r30, Y+1	; 0x01
     cdc:	fa 81       	ldd	r31, Y+2	; 0x02
     cde:	86 81       	ldd	r24, Z+6	; 0x06
     ce0:	88 2f       	mov	r24, r24
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	82 2b       	or	r24, r18
     ce6:	93 2b       	or	r25, r19
     ce8:	eb 81       	ldd	r30, Y+3	; 0x03
     cea:	fc 81       	ldd	r31, Y+4	; 0x04
     cec:	94 83       	std	Z+4, r25	; 0x04
     cee:	83 83       	std	Z+3, r24	; 0x03
     cf0:	37 c0       	rjmp	.+110    	; 0xd60 <_ZN8Protocol5forgeER6Packet+0x11a>
			break;
		}
		case Packet::GET_POS: {
			p.cmd_id = in[0];
     cf2:	e9 81       	ldd	r30, Y+1	; 0x01
     cf4:	fa 81       	ldd	r31, Y+2	; 0x02
     cf6:	82 81       	ldd	r24, Z+2	; 0x02
     cf8:	eb 81       	ldd	r30, Y+3	; 0x03
     cfa:	fc 81       	ldd	r31, Y+4	; 0x04
     cfc:	80 83       	st	Z, r24
			p.motor_id = in[1];
     cfe:	e9 81       	ldd	r30, Y+1	; 0x01
     d00:	fa 81       	ldd	r31, Y+2	; 0x02
     d02:	83 81       	ldd	r24, Z+3	; 0x03
     d04:	eb 81       	ldd	r30, Y+3	; 0x03
     d06:	fc 81       	ldd	r31, Y+4	; 0x04
     d08:	81 83       	std	Z+1, r24	; 0x01
			uart1<<" command "<<(int)in[0];
     d0a:	8c e0       	ldi	r24, 0x0C	; 12
     d0c:	94 e0       	ldi	r25, 0x04	; 4
     d0e:	27 e1       	ldi	r18, 0x17	; 23
     d10:	32 e0       	ldi	r19, 0x02	; 2
     d12:	b9 01       	movw	r22, r18
     d14:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN6StreamlsEPKc>
     d18:	ac 01       	movw	r20, r24
     d1a:	e9 81       	ldd	r30, Y+1	; 0x01
     d1c:	fa 81       	ldd	r31, Y+2	; 0x02
     d1e:	82 81       	ldd	r24, Z+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	ca 01       	movw	r24, r20
     d26:	b9 01       	movw	r22, r18
     d28:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN6StreamlsEi>
     d2c:	19 c0       	rjmp	.+50     	; 0xd60 <_ZN8Protocol5forgeER6Packet+0x11a>
			break;
		}
		case Packet::GET_STATUS:{
			p.cmd_id = in[0];
     d2e:	e9 81       	ldd	r30, Y+1	; 0x01
     d30:	fa 81       	ldd	r31, Y+2	; 0x02
     d32:	82 81       	ldd	r24, Z+2	; 0x02
     d34:	eb 81       	ldd	r30, Y+3	; 0x03
     d36:	fc 81       	ldd	r31, Y+4	; 0x04
     d38:	80 83       	st	Z, r24
			p.motor_id = in[1];
     d3a:	e9 81       	ldd	r30, Y+1	; 0x01
     d3c:	fa 81       	ldd	r31, Y+2	; 0x02
     d3e:	83 81       	ldd	r24, Z+3	; 0x03
     d40:	eb 81       	ldd	r30, Y+3	; 0x03
     d42:	fc 81       	ldd	r31, Y+4	; 0x04
     d44:	81 83       	std	Z+1, r24	; 0x01
     d46:	0c c0       	rjmp	.+24     	; 0xd60 <_ZN8Protocol5forgeER6Packet+0x11a>
			break;
		}
		case Packet::STOP_MOTION: { 
			p.cmd_id = in[0];
     d48:	e9 81       	ldd	r30, Y+1	; 0x01
     d4a:	fa 81       	ldd	r31, Y+2	; 0x02
     d4c:	82 81       	ldd	r24, Z+2	; 0x02
     d4e:	eb 81       	ldd	r30, Y+3	; 0x03
     d50:	fc 81       	ldd	r31, Y+4	; 0x04
     d52:	80 83       	st	Z, r24
			p.motor_id = in[1];
     d54:	e9 81       	ldd	r30, Y+1	; 0x01
     d56:	fa 81       	ldd	r31, Y+2	; 0x02
     d58:	83 81       	ldd	r24, Z+3	; 0x03
     d5a:	eb 81       	ldd	r30, Y+3	; 0x03
     d5c:	fc 81       	ldd	r31, Y+4	; 0x04
     d5e:	81 83       	std	Z+1, r24	; 0x01
			break;
		}
	}	
}
     d60:	26 96       	adiw	r28, 0x06	; 6
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <_ZN6StreamlsEh>:
		return print(str);
	}
	Stream& operator<< (char c ){
		return print(c);
	}
	Stream& operator<< (uint8_t num ){
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	00 d0       	rcall	.+0      	; 0xd78 <_ZN6StreamlsEh+0x6>
     d78:	0f 92       	push	r0
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	9a 83       	std	Y+2, r25	; 0x02
     d80:	89 83       	std	Y+1, r24	; 0x01
     d82:	6b 83       	std	Y+3, r22	; 0x03
		return print(num);
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	9a 81       	ldd	r25, Y+2	; 0x02
     d88:	6b 81       	ldd	r22, Y+3	; 0x03
     d8a:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <_ZN6Stream5printEh>
	}
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <_ZN8Protocol7treatIOER6Packet>:
			_uart->write('\n');
}



int Protocol::treatIO(Packet &p)
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	28 97       	sbiw	r28, 0x08	; 8
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	9c 83       	std	Y+4, r25	; 0x04
     db0:	8b 83       	std	Y+3, r24	; 0x03
     db2:	7e 83       	std	Y+6, r23	; 0x06
     db4:	6d 83       	std	Y+5, r22	; 0x05
{	
	const static uint8_t command_len[] = {BUFFER_SIZE, 5, 1, 1, 1};
	
	_read();
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	9c 81       	ldd	r25, Y+4	; 0x04
     dba:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN8Protocol5_readEv>
	uint8_t len = BUFFER_SIZE;
     dbe:	84 e1       	ldi	r24, 0x14	; 20
     dc0:	8a 83       	std	Y+2, r24	; 0x02
	if(in_offset>0)
     dc2:	eb 81       	ldd	r30, Y+3	; 0x03
     dc4:	fc 81       	ldd	r31, Y+4	; 0x04
     dc6:	82 a5       	ldd	r24, Z+42	; 0x2a
     dc8:	88 23       	and	r24, r24
     dca:	09 f4       	brne	.+2      	; 0xdce <_ZN8Protocol7treatIOER6Packet+0x34>
     dcc:	64 c0       	rjmp	.+200    	; 0xe96 <_ZN8Protocol7treatIOER6Packet+0xfc>
	{
		if(in[0] == 0 || in[0] >= sizeof(command_len)/sizeof(uint8_t))
     dce:	eb 81       	ldd	r30, Y+3	; 0x03
     dd0:	fc 81       	ldd	r31, Y+4	; 0x04
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	88 23       	and	r24, r24
     dd6:	29 f0       	breq	.+10     	; 0xde2 <_ZN8Protocol7treatIOER6Packet+0x48>
     dd8:	eb 81       	ldd	r30, Y+3	; 0x03
     dda:	fc 81       	ldd	r31, Y+4	; 0x04
     ddc:	82 81       	ldd	r24, Z+2	; 0x02
     dde:	85 30       	cpi	r24, 0x05	; 5
     de0:	30 f0       	brcs	.+12     	; 0xdee <_ZN8Protocol7treatIOER6Packet+0x54>
		{
			in_offset = 0;
     de2:	eb 81       	ldd	r30, Y+3	; 0x03
     de4:	fc 81       	ldd	r31, Y+4	; 0x04
     de6:	12 a6       	std	Z+42, r1	; 0x2a
			return 0;
     de8:	18 86       	std	Y+8, r1	; 0x08
     dea:	1f 82       	std	Y+7, r1	; 0x07
     dec:	6e c0       	rjmp	.+220    	; 0xeca <_ZN8Protocol7treatIOER6Packet+0x130>
		}
	//	if(in[0]<sizeof(command_len))
		len = command_len[in[0]];
     dee:	eb 81       	ldd	r30, Y+3	; 0x03
     df0:	fc 81       	ldd	r31, Y+4	; 0x04
     df2:	82 81       	ldd	r24, Z+2	; 0x02
     df4:	88 2f       	mov	r24, r24
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	fc 01       	movw	r30, r24
     dfa:	e8 5d       	subi	r30, 0xD8	; 216
     dfc:	fd 4f       	sbci	r31, 0xFD	; 253
     dfe:	80 81       	ld	r24, Z
     e00:	8a 83       	std	Y+2, r24	; 0x02

		uart1<<"len : "<<len;
     e02:	8c e0       	ldi	r24, 0x0C	; 12
     e04:	94 e0       	ldi	r25, 0x04	; 4
     e06:	21 e2       	ldi	r18, 0x21	; 33
     e08:	32 e0       	ldi	r19, 0x02	; 2
     e0a:	b9 01       	movw	r22, r18
     e0c:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN6StreamlsEPKc>
     e10:	6a 81       	ldd	r22, Y+2	; 0x02
     e12:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN6StreamlsEh>
		
		if (in_offset>=len)
     e16:	eb 81       	ldd	r30, Y+3	; 0x03
     e18:	fc 81       	ldd	r31, Y+4	; 0x04
     e1a:	92 a5       	ldd	r25, Z+42	; 0x2a
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	98 17       	cp	r25, r24
     e20:	d0 f1       	brcs	.+116    	; 0xe96 <_ZN8Protocol7treatIOER6Packet+0xfc>
		{
			forge(p);
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	9c 81       	ldd	r25, Y+4	; 0x04
     e26:	2d 81       	ldd	r18, Y+5	; 0x05
     e28:	3e 81       	ldd	r19, Y+6	; 0x06
     e2a:	b9 01       	movw	r22, r18
     e2c:	0e 94 23 06 	call	0xc46	; 0xc46 <_ZN8Protocol5forgeER6Packet>
			
			in_offset-=len;
     e30:	eb 81       	ldd	r30, Y+3	; 0x03
     e32:	fc 81       	ldd	r31, Y+4	; 0x04
     e34:	92 a5       	ldd	r25, Z+42	; 0x2a
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	29 2f       	mov	r18, r25
     e3a:	28 1b       	sub	r18, r24
     e3c:	82 2f       	mov	r24, r18
     e3e:	eb 81       	ldd	r30, Y+3	; 0x03
     e40:	fc 81       	ldd	r31, Y+4	; 0x04
     e42:	82 a7       	std	Z+42, r24	; 0x2a
			for(uint8_t i=0;i<in_offset;i++)
     e44:	19 82       	std	Y+1, r1	; 0x01
     e46:	1c c0       	rjmp	.+56     	; 0xe80 <_ZN8Protocol7treatIOER6Packet+0xe6>
			{
				in[i] = in[i+len];
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	48 2f       	mov	r20, r24
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	88 2f       	mov	r24, r24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	28 0f       	add	r18, r24
     e5c:	39 1f       	adc	r19, r25
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	9c 81       	ldd	r25, Y+4	; 0x04
     e62:	82 0f       	add	r24, r18
     e64:	93 1f       	adc	r25, r19
     e66:	fc 01       	movw	r30, r24
     e68:	32 96       	adiw	r30, 0x02	; 2
     e6a:	20 81       	ld	r18, Z
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	9c 81       	ldd	r25, Y+4	; 0x04
     e70:	84 0f       	add	r24, r20
     e72:	95 1f       	adc	r25, r21
     e74:	fc 01       	movw	r30, r24
     e76:	32 96       	adiw	r30, 0x02	; 2
     e78:	20 83       	st	Z, r18
		if (in_offset>=len)
		{
			forge(p);
			
			in_offset-=len;
			for(uint8_t i=0;i<in_offset;i++)
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	8f 5f       	subi	r24, 0xFF	; 255
     e7e:	89 83       	std	Y+1, r24	; 0x01
     e80:	eb 81       	ldd	r30, Y+3	; 0x03
     e82:	fc 81       	ldd	r31, Y+4	; 0x04
     e84:	92 a5       	ldd	r25, Z+42	; 0x2a
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	89 17       	cp	r24, r25
     e8a:	f0 f2       	brcs	.-68     	; 0xe48 <_ZN8Protocol7treatIOER6Packet+0xae>
			{
				in[i] = in[i+len];
			}
			return 1;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	98 87       	std	Y+8, r25	; 0x08
     e92:	8f 83       	std	Y+7, r24	; 0x07
     e94:	1a c0       	rjmp	.+52     	; 0xeca <_ZN8Protocol7treatIOER6Packet+0x130>
		}
	}
	if(out_offset>0)
     e96:	eb 81       	ldd	r30, Y+3	; 0x03
     e98:	fc 81       	ldd	r31, Y+4	; 0x04
     e9a:	83 a5       	ldd	r24, Z+43	; 0x2b
     e9c:	88 23       	and	r24, r24
     e9e:	99 f0       	breq	.+38     	; 0xec6 <_ZN8Protocol7treatIOER6Packet+0x12c>
	{
		_write(out, out_offset);
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	9c 81       	ldd	r25, Y+4	; 0x04
     ea4:	ac 01       	movw	r20, r24
     ea6:	4a 5e       	subi	r20, 0xEA	; 234
     ea8:	5f 4f       	sbci	r21, 0xFF	; 255
     eaa:	eb 81       	ldd	r30, Y+3	; 0x03
     eac:	fc 81       	ldd	r31, Y+4	; 0x04
     eae:	83 a5       	ldd	r24, Z+43	; 0x2b
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	9c 81       	ldd	r25, Y+4	; 0x04
     eb8:	ba 01       	movw	r22, r20
     eba:	a9 01       	movw	r20, r18
     ebc:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN8Protocol6_writeEPhi>
		out_offset = 0;
     ec0:	eb 81       	ldd	r30, Y+3	; 0x03
     ec2:	fc 81       	ldd	r31, Y+4	; 0x04
     ec4:	13 a6       	std	Z+43, r1	; 0x2b
	}
	return 0;
     ec6:	18 86       	std	Y+8, r1	; 0x08
     ec8:	1f 82       	std	Y+7, r1	; 0x07
     eca:	8f 81       	ldd	r24, Y+7	; 0x07
     ecc:	98 85       	ldd	r25, Y+8	; 0x08
}
     ece:	28 96       	adiw	r28, 0x08	; 8
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <_ZN8Protocol5printEi>:
{
	_uart = uart;
	_uart->setPollingMode(false);
}

void Protocol::print(int16_t i)
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	64 97       	sbiw	r28, 0x14	; 20
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	9a 8b       	std	Y+18, r25	; 0x12
     ef6:	89 8b       	std	Y+17, r24	; 0x11
     ef8:	7c 8b       	std	Y+20, r23	; 0x14
     efa:	6b 8b       	std	Y+19, r22	; 0x13
{
		char str[10];
		for(int j=0;j<10;j++)
     efc:	1c 82       	std	Y+4, r1	; 0x04
     efe:	1b 82       	std	Y+3, r1	; 0x03
     f00:	0d c0       	rjmp	.+26     	; 0xf1c <_ZN8Protocol5printEi+0x3c>
			str[j] = 0;
     f02:	2b 81       	ldd	r18, Y+3	; 0x03
     f04:	3c 81       	ldd	r19, Y+4	; 0x04
     f06:	ce 01       	movw	r24, r28
     f08:	07 96       	adiw	r24, 0x07	; 7
     f0a:	fc 01       	movw	r30, r24
     f0c:	e2 0f       	add	r30, r18
     f0e:	f3 1f       	adc	r31, r19
     f10:	10 82       	st	Z, r1
}

void Protocol::print(int16_t i)
{
		char str[10];
		for(int j=0;j<10;j++)
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	9c 83       	std	Y+4, r25	; 0x04
     f1a:	8b 83       	std	Y+3, r24	; 0x03
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	9c 81       	ldd	r25, Y+4	; 0x04
     f20:	8a 30       	cpi	r24, 0x0A	; 10
     f22:	91 05       	cpc	r25, r1
     f24:	74 f3       	brlt	.-36     	; 0xf02 <_ZN8Protocol5printEi+0x22>
			str[j] = 0;
		char *p = str;
     f26:	ce 01       	movw	r24, r28
     f28:	07 96       	adiw	r24, 0x07	; 7
     f2a:	9e 83       	std	Y+6, r25	; 0x06
     f2c:	8d 83       	std	Y+5, r24	; 0x05
		p=itoa(i, (char*)str, 10);
     f2e:	8b 89       	ldd	r24, Y+19	; 0x13
     f30:	9c 89       	ldd	r25, Y+20	; 0x14
     f32:	9e 01       	movw	r18, r28
     f34:	29 5f       	subi	r18, 0xF9	; 249
     f36:	3f 4f       	sbci	r19, 0xFF	; 255
     f38:	b9 01       	movw	r22, r18
     f3a:	4a e0       	ldi	r20, 0x0A	; 10
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <itoa>
     f42:	9e 83       	std	Y+6, r25	; 0x06
     f44:	8d 83       	std	Y+5, r24	; 0x05
		for(int j=0;j<10;j++)
     f46:	1a 82       	std	Y+2, r1	; 0x02
     f48:	19 82       	std	Y+1, r1	; 0x01
     f4a:	20 c0       	rjmp	.+64     	; 0xf8c <_ZN8Protocol5printEi+0xac>
		{
			_uart->write(p[j]);
     f4c:	e9 89       	ldd	r30, Y+17	; 0x11
     f4e:	fa 89       	ldd	r31, Y+18	; 0x12
     f50:	01 90       	ld	r0, Z+
     f52:	f0 81       	ld	r31, Z
     f54:	e0 2d       	mov	r30, r0
     f56:	01 90       	ld	r0, Z+
     f58:	f0 81       	ld	r31, Z
     f5a:	e0 2d       	mov	r30, r0
     f5c:	a0 81       	ld	r26, Z
     f5e:	b1 81       	ldd	r27, Z+1	; 0x01
     f60:	e9 89       	ldd	r30, Y+17	; 0x11
     f62:	fa 89       	ldd	r31, Y+18	; 0x12
     f64:	80 81       	ld	r24, Z
     f66:	91 81       	ldd	r25, Z+1	; 0x01
     f68:	ac 01       	movw	r20, r24
     f6a:	29 81       	ldd	r18, Y+1	; 0x01
     f6c:	3a 81       	ldd	r19, Y+2	; 0x02
     f6e:	8d 81       	ldd	r24, Y+5	; 0x05
     f70:	9e 81       	ldd	r25, Y+6	; 0x06
     f72:	fc 01       	movw	r30, r24
     f74:	e2 0f       	add	r30, r18
     f76:	f3 1f       	adc	r31, r19
     f78:	20 81       	ld	r18, Z
     f7a:	ca 01       	movw	r24, r20
     f7c:	62 2f       	mov	r22, r18
     f7e:	fd 01       	movw	r30, r26
     f80:	09 95       	icall
		char str[10];
		for(int j=0;j<10;j++)
			str[j] = 0;
		char *p = str;
		p=itoa(i, (char*)str, 10);
		for(int j=0;j<10;j++)
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	9a 81       	ldd	r25, Y+2	; 0x02
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	9a 83       	std	Y+2, r25	; 0x02
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	8a 30       	cpi	r24, 0x0A	; 10
     f92:	91 05       	cpc	r25, r1
     f94:	dc f2       	brlt	.-74     	; 0xf4c <_ZN8Protocol5printEi+0x6c>
		{
			_uart->write(p[j]);
		} 
			_uart->write('\r');
     f96:	e9 89       	ldd	r30, Y+17	; 0x11
     f98:	fa 89       	ldd	r31, Y+18	; 0x12
     f9a:	01 90       	ld	r0, Z+
     f9c:	f0 81       	ld	r31, Z
     f9e:	e0 2d       	mov	r30, r0
     fa0:	01 90       	ld	r0, Z+
     fa2:	f0 81       	ld	r31, Z
     fa4:	e0 2d       	mov	r30, r0
     fa6:	20 81       	ld	r18, Z
     fa8:	31 81       	ldd	r19, Z+1	; 0x01
     faa:	e9 89       	ldd	r30, Y+17	; 0x11
     fac:	fa 89       	ldd	r31, Y+18	; 0x12
     fae:	80 81       	ld	r24, Z
     fb0:	91 81       	ldd	r25, Z+1	; 0x01
     fb2:	6d e0       	ldi	r22, 0x0D	; 13
     fb4:	f9 01       	movw	r30, r18
     fb6:	09 95       	icall
			_uart->write('\n');
     fb8:	e9 89       	ldd	r30, Y+17	; 0x11
     fba:	fa 89       	ldd	r31, Y+18	; 0x12
     fbc:	01 90       	ld	r0, Z+
     fbe:	f0 81       	ld	r31, Z
     fc0:	e0 2d       	mov	r30, r0
     fc2:	01 90       	ld	r0, Z+
     fc4:	f0 81       	ld	r31, Z
     fc6:	e0 2d       	mov	r30, r0
     fc8:	20 81       	ld	r18, Z
     fca:	31 81       	ldd	r19, Z+1	; 0x01
     fcc:	e9 89       	ldd	r30, Y+17	; 0x11
     fce:	fa 89       	ldd	r31, Y+18	; 0x12
     fd0:	80 81       	ld	r24, Z
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
     fd4:	6a e0       	ldi	r22, 0x0A	; 10
     fd6:	f9 01       	movw	r30, r18
     fd8:	09 95       	icall
}
     fda:	64 96       	adiw	r28, 0x14	; 20
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <_ZN6UartHW14setPollingModeEa>:

		return ch;
	}

	// Put the receiver in polling mode (TRUE) or interrupt mode (FALSE)
	void setPollingMode(boolean polling){
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <_ZN6UartHW14setPollingModeEa+0x6>
     ff2:	0f 92       	push	r0
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	6b 83       	std	Y+3, r22	; 0x03
		uartReceivePollingMode(m_hw, polling);
     ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    1000:	fa 81       	ldd	r31, Y+2	; 0x02
    1002:	86 89       	ldd	r24, Z+22	; 0x16
    1004:	97 89       	ldd	r25, Z+23	; 0x17
    1006:	6b 81       	ldd	r22, Y+3	; 0x03
    1008:	0e 94 39 16 	call	0x2c72	; 0x2c72 <uartReceivePollingMode>
		m_polling = polling;
    100c:	e9 81       	ldd	r30, Y+1	; 0x01
    100e:	fa 81       	ldd	r31, Y+2	; 0x02
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	80 8f       	std	Z+24, r24	; 0x18
	}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <_ZN8Protocol4initEP6UartHW>:
	memset(in, 0, Protocol::BUFFER_SIZE);
	memset(out, 0, Protocol::BUFFER_SIZE);
	haveMessage = false;
}

void Protocol::init(UartHW *uart)
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	00 d0       	rcall	.+0      	; 0x1026 <_ZN8Protocol4initEP6UartHW+0x6>
    1026:	00 d0       	rcall	.+0      	; 0x1028 <_ZN8Protocol4initEP6UartHW+0x8>
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	9a 83       	std	Y+2, r25	; 0x02
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	7c 83       	std	Y+4, r23	; 0x04
    1032:	6b 83       	std	Y+3, r22	; 0x03
{
	_uart = uart;
    1034:	e9 81       	ldd	r30, Y+1	; 0x01
    1036:	fa 81       	ldd	r31, Y+2	; 0x02
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	91 83       	std	Z+1, r25	; 0x01
    103e:	80 83       	st	Z, r24
	_uart->setPollingMode(false);
    1040:	e9 81       	ldd	r30, Y+1	; 0x01
    1042:	fa 81       	ldd	r31, Y+2	; 0x02
    1044:	80 81       	ld	r24, Z
    1046:	91 81       	ldd	r25, Z+1	; 0x01
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN6UartHW14setPollingModeEa>
}
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <_ZN8ProtocolC1Ev>:
	status = Packet::STOP;

	//command_len = {5, 2, 2, 2};
}

Protocol::Protocol()
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	00 d0       	rcall	.+0      	; 0x1062 <_ZN8ProtocolC1Ev+0x6>
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	9a 83       	std	Y+2, r25	; 0x02
    1068:	89 83       	std	Y+1, r24	; 0x01
{
	_uart = NULL;
    106a:	e9 81       	ldd	r30, Y+1	; 0x01
    106c:	fa 81       	ldd	r31, Y+2	; 0x02
    106e:	11 82       	std	Z+1, r1	; 0x01
    1070:	10 82       	st	Z, r1
	in_offset = 0;
    1072:	e9 81       	ldd	r30, Y+1	; 0x01
    1074:	fa 81       	ldd	r31, Y+2	; 0x02
    1076:	12 a6       	std	Z+42, r1	; 0x2a
	out_offset = 0;
    1078:	e9 81       	ldd	r30, Y+1	; 0x01
    107a:	fa 81       	ldd	r31, Y+2	; 0x02
    107c:	13 a6       	std	Z+43, r1	; 0x2b
	memset(in, 0, Protocol::BUFFER_SIZE);
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	9a 81       	ldd	r25, Y+2	; 0x02
    1082:	02 96       	adiw	r24, 0x02	; 2
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	44 e1       	ldi	r20, 0x14	; 20
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <memset>
	memset(out, 0, Protocol::BUFFER_SIZE);
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	9a 81       	ldd	r25, Y+2	; 0x02
    1094:	46 96       	adiw	r24, 0x16	; 22
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	44 e1       	ldi	r20, 0x14	; 20
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <memset>
	haveMessage = false;
    10a2:	e9 81       	ldd	r30, Y+1	; 0x01
    10a4:	fa 81       	ldd	r31, Y+2	; 0x02
    10a6:	14 a6       	std	Z+44, r1	; 0x2c
}
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <_ZN8ProtocolC2Ev>:
	status = Packet::STOP;

	//command_len = {5, 2, 2, 2};
}

Protocol::Protocol()
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <_ZN8ProtocolC2Ev+0x6>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	9a 83       	std	Y+2, r25	; 0x02
    10be:	89 83       	std	Y+1, r24	; 0x01
{
	_uart = NULL;
    10c0:	e9 81       	ldd	r30, Y+1	; 0x01
    10c2:	fa 81       	ldd	r31, Y+2	; 0x02
    10c4:	11 82       	std	Z+1, r1	; 0x01
    10c6:	10 82       	st	Z, r1
	in_offset = 0;
    10c8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ca:	fa 81       	ldd	r31, Y+2	; 0x02
    10cc:	12 a6       	std	Z+42, r1	; 0x2a
	out_offset = 0;
    10ce:	e9 81       	ldd	r30, Y+1	; 0x01
    10d0:	fa 81       	ldd	r31, Y+2	; 0x02
    10d2:	13 a6       	std	Z+43, r1	; 0x2b
	memset(in, 0, Protocol::BUFFER_SIZE);
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	02 96       	adiw	r24, 0x02	; 2
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	44 e1       	ldi	r20, 0x14	; 20
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <memset>
	memset(out, 0, Protocol::BUFFER_SIZE);
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	46 96       	adiw	r24, 0x16	; 22
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	44 e1       	ldi	r20, 0x14	; 20
    10f2:	50 e0       	ldi	r21, 0x00	; 0
    10f4:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <memset>
	haveMessage = false;
    10f8:	e9 81       	ldd	r30, Y+1	; 0x01
    10fa:	fa 81       	ldd	r31, Y+2	; 0x02
    10fc:	14 a6       	std	Z+44, r1	; 0x2c
}
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <_ZN10SmartMotorC2Ev>:
#include "smart_motor.h"


SmartMotor::SmartMotor()
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	00 d0       	rcall	.+0      	; 0x110e <_ZN10SmartMotorC2Ev+0x6>
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	9a 83       	std	Y+2, r25	; 0x02
    1114:	89 83       	std	Y+1, r24	; 0x01
{

	_limit_min = DRIVE_SPEED_MIN;
    1116:	e9 81       	ldd	r30, Y+1	; 0x01
    1118:	fa 81       	ldd	r31, Y+2	; 0x02
    111a:	81 e8       	ldi	r24, 0x81	; 129
    111c:	82 83       	std	Z+2, r24	; 0x02
	_limit_max = DRIVE_SPEED_MAX;
    111e:	e9 81       	ldd	r30, Y+1	; 0x01
    1120:	fa 81       	ldd	r31, Y+2	; 0x02
    1122:	8f e7       	ldi	r24, 0x7F	; 127
    1124:	83 83       	std	Z+3, r24	; 0x03

	_position = 0;
    1126:	e9 81       	ldd	r30, Y+1	; 0x01
    1128:	fa 81       	ldd	r31, Y+2	; 0x02
    112a:	15 82       	std	Z+5, r1	; 0x05
    112c:	14 82       	std	Z+4, r1	; 0x04
	_step_size = 0;
    112e:	e9 81       	ldd	r30, Y+1	; 0x01
    1130:	fa 81       	ldd	r31, Y+2	; 0x02
    1132:	17 82       	std	Z+7, r1	; 0x07
    1134:	16 82       	std	Z+6, r1	; 0x06
	_step_count = 0;
    1136:	e9 81       	ldd	r30, Y+1	; 0x01
    1138:	fa 81       	ldd	r31, Y+2	; 0x02
    113a:	11 86       	std	Z+9, r1	; 0x09
    113c:	10 86       	std	Z+8, r1	; 0x08

	_firsttime = true;
    113e:	e9 81       	ldd	r30, Y+1	; 0x01
    1140:	fa 81       	ldd	r31, Y+2	; 0x02
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	82 87       	std	Z+10, r24	; 0x0a
}
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <_ZN10SmartMotorC1Ev>:
#include "smart_motor.h"


SmartMotor::SmartMotor()
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	00 d0       	rcall	.+0      	; 0x1156 <_ZN10SmartMotorC1Ev+0x6>
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	9a 83       	std	Y+2, r25	; 0x02
    115c:	89 83       	std	Y+1, r24	; 0x01
{

	_limit_min = DRIVE_SPEED_MIN;
    115e:	e9 81       	ldd	r30, Y+1	; 0x01
    1160:	fa 81       	ldd	r31, Y+2	; 0x02
    1162:	81 e8       	ldi	r24, 0x81	; 129
    1164:	82 83       	std	Z+2, r24	; 0x02
	_limit_max = DRIVE_SPEED_MAX;
    1166:	e9 81       	ldd	r30, Y+1	; 0x01
    1168:	fa 81       	ldd	r31, Y+2	; 0x02
    116a:	8f e7       	ldi	r24, 0x7F	; 127
    116c:	83 83       	std	Z+3, r24	; 0x03

	_position = 0;
    116e:	e9 81       	ldd	r30, Y+1	; 0x01
    1170:	fa 81       	ldd	r31, Y+2	; 0x02
    1172:	15 82       	std	Z+5, r1	; 0x05
    1174:	14 82       	std	Z+4, r1	; 0x04
	_step_size = 0;
    1176:	e9 81       	ldd	r30, Y+1	; 0x01
    1178:	fa 81       	ldd	r31, Y+2	; 0x02
    117a:	17 82       	std	Z+7, r1	; 0x07
    117c:	16 82       	std	Z+6, r1	; 0x06
	_step_count = 0;
    117e:	e9 81       	ldd	r30, Y+1	; 0x01
    1180:	fa 81       	ldd	r31, Y+2	; 0x02
    1182:	11 86       	std	Z+9, r1	; 0x09
    1184:	10 86       	std	Z+8, r1	; 0x08

	_firsttime = true;
    1186:	e9 81       	ldd	r30, Y+1	; 0x01
    1188:	fa 81       	ldd	r31, Y+2	; 0x02
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	82 87       	std	Z+10, r24	; 0x0a
}
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <_ZN10SmartMotorD2Ev>:

SmartMotor::~SmartMotor()
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	00 d0       	rcall	.+0      	; 0x119e <_ZN10SmartMotorD2Ev+0x6>
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	9a 83       	std	Y+2, r25	; 0x02
    11a4:	89 83       	std	Y+1, r24	; 0x01
{
}
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <_ZN10SmartMotorD1Ev>:
	_step_count = 0;

	_firsttime = true;
}

SmartMotor::~SmartMotor()
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <_ZN10SmartMotorD1Ev+0x6>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	9a 83       	std	Y+2, r25	; 0x02
    11bc:	89 83       	std	Y+1, r24	; 0x01
{
}
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <_ZN10SmartMotor10link_servoER5Servo>:

void SmartMotor::link_servo(Servo &servo)
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <_ZN10SmartMotor10link_servoER5Servo+0x6>
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <_ZN10SmartMotor10link_servoER5Servo+0x8>
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	9a 83       	std	Y+2, r25	; 0x02
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	7c 83       	std	Y+4, r23	; 0x04
    11da:	6b 83       	std	Y+3, r22	; 0x03
{
	_servo = &servo;
    11dc:	e9 81       	ldd	r30, Y+1	; 0x01
    11de:	fa 81       	ldd	r31, Y+2	; 0x02
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	91 83       	std	Z+1, r25	; 0x01
    11e6:	80 83       	st	Z, r24
}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <_ZN10SmartMotor9set_limitEaa>:


void SmartMotor::set_limit(DRIVE_SPEED min, DRIVE_SPEED max)
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <_ZN10SmartMotor9set_limitEaa+0x6>
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <_ZN10SmartMotor9set_limitEaa+0x8>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	6b 83       	std	Y+3, r22	; 0x03
    1208:	4c 83       	std	Y+4, r20	; 0x04
{
	_limit_min = min;
    120a:	e9 81       	ldd	r30, Y+1	; 0x01
    120c:	fa 81       	ldd	r31, Y+2	; 0x02
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	82 83       	std	Z+2, r24	; 0x02
	_limit_max = max;
    1212:	e9 81       	ldd	r30, Y+1	; 0x01
    1214:	fa 81       	ldd	r31, Y+2	; 0x02
    1216:	8c 81       	ldd	r24, Y+4	; 0x04
    1218:	83 83       	std	Z+3, r24	; 0x03
}
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <_ZN10SmartMotor12get_positionERa>:

void SmartMotor::get_position(DRIVE_SPEED &position)
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	00 d0       	rcall	.+0      	; 0x122e <_ZN10SmartMotor12get_positionERa+0x6>
    122e:	00 d0       	rcall	.+0      	; 0x1230 <_ZN10SmartMotor12get_positionERa+0x8>
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	9a 83       	std	Y+2, r25	; 0x02
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	7c 83       	std	Y+4, r23	; 0x04
    123a:	6b 83       	std	Y+3, r22	; 0x03
{
	position = _position;
    123c:	e9 81       	ldd	r30, Y+1	; 0x01
    123e:	fa 81       	ldd	r31, Y+2	; 0x02
    1240:	84 81       	ldd	r24, Z+4	; 0x04
    1242:	95 81       	ldd	r25, Z+5	; 0x05
    1244:	eb 81       	ldd	r30, Y+3	; 0x03
    1246:	fc 81       	ldd	r31, Y+4	; 0x04
    1248:	80 83       	st	Z, r24
}
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <_ZN10SmartMotor9is_movingEv>:
		_step_size = ((pos - _position) / t) * (HEXAPOD_LOOP_DURATION / 1000);
		_step_count = (pos - _position) / _step_size;	
	}
}

bool SmartMotor::is_moving()
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	00 d0       	rcall	.+0      	; 0x125e <_ZN10SmartMotor9is_movingEv+0x6>
    125e:	0f 92       	push	r0
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	9a 83       	std	Y+2, r25	; 0x02
    1266:	89 83       	std	Y+1, r24	; 0x01
{
	return _step_count != 0;
    1268:	e9 81       	ldd	r30, Y+1	; 0x01
    126a:	fa 81       	ldd	r31, Y+2	; 0x02
    126c:	80 85       	ldd	r24, Z+8	; 0x08
    126e:	91 85       	ldd	r25, Z+9	; 0x09
    1270:	1b 82       	std	Y+3, r1	; 0x03
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	11 f0       	breq	.+4      	; 0x127a <_ZN10SmartMotor9is_movingEv+0x22>
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	8b 83       	std	Y+3, r24	; 0x03
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <_ZN10SmartMotor11stop_motionEv>:

void SmartMotor::stop_motion()
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <_ZN10SmartMotor11stop_motionEv+0x6>
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	9a 83       	std	Y+2, r25	; 0x02
    1294:	89 83       	std	Y+1, r24	; 0x01
{
	_step_count = 0;
    1296:	e9 81       	ldd	r30, Y+1	; 0x01
    1298:	fa 81       	ldd	r31, Y+2	; 0x02
    129a:	11 86       	std	Z+9, r1	; 0x09
    129c:	10 86       	std	Z+8, r1	; 0x08
}
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <_ZN10SmartMotor12set_positionEai>:
void SmartMotor::get_position(DRIVE_SPEED &position)
{
	position = _position;
}

void SmartMotor::set_position(DRIVE_SPEED position, int16_t t)
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	29 97       	sbiw	r28, 0x09	; 9
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	9c 83       	std	Y+4, r25	; 0x04
    12c2:	8b 83       	std	Y+3, r24	; 0x03
    12c4:	6d 83       	std	Y+5, r22	; 0x05
    12c6:	5f 83       	std	Y+7, r21	; 0x07
    12c8:	4e 83       	std	Y+6, r20	; 0x06

	//uart1.print("time");
	//print(position);
//	print(t);
	
	position = (position < _limit_min)? _limit_min : position;
    12ca:	eb 81       	ldd	r30, Y+3	; 0x03
    12cc:	fc 81       	ldd	r31, Y+4	; 0x04
    12ce:	92 81       	ldd	r25, Z+2	; 0x02
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	89 17       	cp	r24, r25
    12d4:	2c f4       	brge	.+10     	; 0x12e0 <_ZN10SmartMotor12set_positionEai+0x38>
    12d6:	eb 81       	ldd	r30, Y+3	; 0x03
    12d8:	fc 81       	ldd	r31, Y+4	; 0x04
    12da:	82 81       	ldd	r24, Z+2	; 0x02
    12dc:	89 87       	std	Y+9, r24	; 0x09
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <_ZN10SmartMotor12set_positionEai+0x3c>
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	89 87       	std	Y+9, r24	; 0x09
    12e4:	89 85       	ldd	r24, Y+9	; 0x09
    12e6:	8d 83       	std	Y+5, r24	; 0x05
	position = (position > _limit_max)? _limit_max : position;
    12e8:	eb 81       	ldd	r30, Y+3	; 0x03
    12ea:	fc 81       	ldd	r31, Y+4	; 0x04
    12ec:	93 81       	ldd	r25, Z+3	; 0x03
    12ee:	8d 81       	ldd	r24, Y+5	; 0x05
    12f0:	98 17       	cp	r25, r24
    12f2:	2c f4       	brge	.+10     	; 0x12fe <_ZN10SmartMotor12set_positionEai+0x56>
    12f4:	eb 81       	ldd	r30, Y+3	; 0x03
    12f6:	fc 81       	ldd	r31, Y+4	; 0x04
    12f8:	83 81       	ldd	r24, Z+3	; 0x03
    12fa:	88 87       	std	Y+8, r24	; 0x08
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <_ZN10SmartMotor12set_positionEai+0x5a>
    12fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1300:	88 87       	std	Y+8, r24	; 0x08
    1302:	88 85       	ldd	r24, Y+8	; 0x08
    1304:	8d 83       	std	Y+5, r24	; 0x05

	int16_t pos = interpolate(position, DRIVE_SPEED_MIN, DRIVE_SPEED_MAX, -SMART_SPEED, SMART_SPEED);
    1306:	8d 81       	ldd	r24, Y+5	; 0x05
    1308:	99 27       	eor	r25, r25
    130a:	87 fd       	sbrc	r24, 7
    130c:	90 95       	com	r25
    130e:	61 e8       	ldi	r22, 0x81	; 129
    1310:	7f ef       	ldi	r23, 0xFF	; 255
    1312:	4f e7       	ldi	r20, 0x7F	; 127
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	24 e0       	ldi	r18, 0x04	; 4
    1318:	30 ec       	ldi	r19, 0xC0	; 192
    131a:	0c ef       	ldi	r16, 0xFC	; 252
    131c:	1f e3       	ldi	r17, 0x3F	; 63
    131e:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <interpolate>
    1322:	9a 83       	std	Y+2, r25	; 0x02
    1324:	89 83       	std	Y+1, r24	; 0x01
	
	if(t < HEXAPOD_LOOP_DURATION/1000)
    1326:	8e 81       	ldd	r24, Y+6	; 0x06
    1328:	9f 81       	ldd	r25, Y+7	; 0x07
    132a:	84 31       	cpi	r24, 0x14	; 20
    132c:	91 05       	cpc	r25, r1
    132e:	9c f4       	brge	.+38     	; 0x1356 <_ZN10SmartMotor12set_positionEai+0xae>
	{
		_step_size = (pos - _position);
    1330:	eb 81       	ldd	r30, Y+3	; 0x03
    1332:	fc 81       	ldd	r31, Y+4	; 0x04
    1334:	24 81       	ldd	r18, Z+4	; 0x04
    1336:	35 81       	ldd	r19, Z+5	; 0x05
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	9a 81       	ldd	r25, Y+2	; 0x02
    133c:	82 1b       	sub	r24, r18
    133e:	93 0b       	sbc	r25, r19
    1340:	eb 81       	ldd	r30, Y+3	; 0x03
    1342:	fc 81       	ldd	r31, Y+4	; 0x04
    1344:	97 83       	std	Z+7, r25	; 0x07
    1346:	86 83       	std	Z+6, r24	; 0x06
		_step_count = 1;
    1348:	eb 81       	ldd	r30, Y+3	; 0x03
    134a:	fc 81       	ldd	r31, Y+4	; 0x04
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	91 87       	std	Z+9, r25	; 0x09
    1352:	80 87       	std	Z+8, r24	; 0x08
    1354:	32 c0       	rjmp	.+100    	; 0x13ba <_ZN10SmartMotor12set_positionEai+0x112>
	}
	else
	{
		_step_size = ((pos - _position) / t) * (HEXAPOD_LOOP_DURATION / 1000);
    1356:	eb 81       	ldd	r30, Y+3	; 0x03
    1358:	fc 81       	ldd	r31, Y+4	; 0x04
    135a:	24 81       	ldd	r18, Z+4	; 0x04
    135c:	35 81       	ldd	r19, Z+5	; 0x05
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	82 1b       	sub	r24, r18
    1364:	93 0b       	sbc	r25, r19
    1366:	2e 81       	ldd	r18, Y+6	; 0x06
    1368:	3f 81       	ldd	r19, Y+7	; 0x07
    136a:	b9 01       	movw	r22, r18
    136c:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <__divmodhi4>
    1370:	cb 01       	movw	r24, r22
    1372:	9c 01       	movw	r18, r24
    1374:	22 0f       	add	r18, r18
    1376:	33 1f       	adc	r19, r19
    1378:	22 0f       	add	r18, r18
    137a:	33 1f       	adc	r19, r19
    137c:	c9 01       	movw	r24, r18
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	82 0f       	add	r24, r18
    1388:	93 1f       	adc	r25, r19
    138a:	eb 81       	ldd	r30, Y+3	; 0x03
    138c:	fc 81       	ldd	r31, Y+4	; 0x04
    138e:	97 83       	std	Z+7, r25	; 0x07
    1390:	86 83       	std	Z+6, r24	; 0x06
		_step_count = (pos - _position) / _step_size;	
    1392:	eb 81       	ldd	r30, Y+3	; 0x03
    1394:	fc 81       	ldd	r31, Y+4	; 0x04
    1396:	24 81       	ldd	r18, Z+4	; 0x04
    1398:	35 81       	ldd	r19, Z+5	; 0x05
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	9a 81       	ldd	r25, Y+2	; 0x02
    139e:	82 1b       	sub	r24, r18
    13a0:	93 0b       	sbc	r25, r19
    13a2:	eb 81       	ldd	r30, Y+3	; 0x03
    13a4:	fc 81       	ldd	r31, Y+4	; 0x04
    13a6:	26 81       	ldd	r18, Z+6	; 0x06
    13a8:	37 81       	ldd	r19, Z+7	; 0x07
    13aa:	b9 01       	movw	r22, r18
    13ac:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <__divmodhi4>
    13b0:	cb 01       	movw	r24, r22
    13b2:	eb 81       	ldd	r30, Y+3	; 0x03
    13b4:	fc 81       	ldd	r31, Y+4	; 0x04
    13b6:	91 87       	std	Z+9, r25	; 0x09
    13b8:	80 87       	std	Z+8, r24	; 0x08
	}
}
    13ba:	29 96       	adiw	r28, 0x09	; 9
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	08 95       	ret

000013d0 <_ZN8Actuator8setSpeedEa>:
class Actuator{
public:
	Actuator(__ACTUATOR* cstr){
		m_cstr = cstr;
	}
	void setSpeed(DRIVE_SPEED speed){
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <_ZN8Actuator8setSpeedEa+0x6>
    13d6:	0f 92       	push	r0
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	6b 83       	std	Y+3, r22	; 0x03
		__act_setSpeed(m_cstr,speed);
    13e2:	e9 81       	ldd	r30, Y+1	; 0x01
    13e4:	fa 81       	ldd	r31, Y+2	; 0x02
    13e6:	80 81       	ld	r24, Z
    13e8:	91 81       	ldd	r25, Z+1	; 0x01
    13ea:	6b 81       	ldd	r22, Y+3	; 0x03
    13ec:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__act_setSpeed>
	}
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <_ZN10SmartMotor7computeEv>:
		} 
			uart1.write('\r');
			uart1.write('\n');
}

void SmartMotor::compute()
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <_ZN10SmartMotor7computeEv+0xa>
    1406:	00 d0       	rcall	.+0      	; 0x1408 <_ZN10SmartMotor7computeEv+0xc>
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	9c 83       	std	Y+4, r25	; 0x04
    140e:	8b 83       	std	Y+3, r24	; 0x03
{
	if(_firsttime == true)
    1410:	eb 81       	ldd	r30, Y+3	; 0x03
    1412:	fc 81       	ldd	r31, Y+4	; 0x04
    1414:	82 85       	ldd	r24, Z+10	; 0x0a
    1416:	88 2f       	mov	r24, r24
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	2f ef       	ldi	r18, 0xFF	; 255
    141c:	8f 3f       	cpi	r24, 0xFF	; 255
    141e:	92 07       	cpc	r25, r18
    1420:	51 f4       	brne	.+20     	; 0x1436 <_ZN10SmartMotor7computeEv+0x3a>
	{
		_servo->setSpeed(0);
    1422:	eb 81       	ldd	r30, Y+3	; 0x03
    1424:	fc 81       	ldd	r31, Y+4	; 0x04
    1426:	80 81       	ld	r24, Z
    1428:	91 81       	ldd	r25, Z+1	; 0x01
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_ZN8Actuator8setSpeedEa>
		_firsttime = false;
    1430:	eb 81       	ldd	r30, Y+3	; 0x03
    1432:	fc 81       	ldd	r31, Y+4	; 0x04
    1434:	12 86       	std	Z+10, r1	; 0x0a
	}
	if(_step_count > 0)
    1436:	eb 81       	ldd	r30, Y+3	; 0x03
    1438:	fc 81       	ldd	r31, Y+4	; 0x04
    143a:	80 85       	ldd	r24, Z+8	; 0x08
    143c:	91 85       	ldd	r25, Z+9	; 0x09
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	79 f1       	breq	.+94     	; 0x14a0 <_ZN10SmartMotor7computeEv+0xa4>
	{
		_position = _position + _step_size;
    1442:	eb 81       	ldd	r30, Y+3	; 0x03
    1444:	fc 81       	ldd	r31, Y+4	; 0x04
    1446:	24 81       	ldd	r18, Z+4	; 0x04
    1448:	35 81       	ldd	r19, Z+5	; 0x05
    144a:	eb 81       	ldd	r30, Y+3	; 0x03
    144c:	fc 81       	ldd	r31, Y+4	; 0x04
    144e:	86 81       	ldd	r24, Z+6	; 0x06
    1450:	97 81       	ldd	r25, Z+7	; 0x07
    1452:	82 0f       	add	r24, r18
    1454:	93 1f       	adc	r25, r19
    1456:	eb 81       	ldd	r30, Y+3	; 0x03
    1458:	fc 81       	ldd	r31, Y+4	; 0x04
    145a:	95 83       	std	Z+5, r25	; 0x05
    145c:	84 83       	std	Z+4, r24	; 0x04
		int16_t i = interpolate(_position, -SMART_SPEED, SMART_SPEED, DRIVE_SPEED_MIN, DRIVE_SPEED_MAX);
    145e:	eb 81       	ldd	r30, Y+3	; 0x03
    1460:	fc 81       	ldd	r31, Y+4	; 0x04
    1462:	84 81       	ldd	r24, Z+4	; 0x04
    1464:	95 81       	ldd	r25, Z+5	; 0x05
    1466:	64 e0       	ldi	r22, 0x04	; 4
    1468:	70 ec       	ldi	r23, 0xC0	; 192
    146a:	4c ef       	ldi	r20, 0xFC	; 252
    146c:	5f e3       	ldi	r21, 0x3F	; 63
    146e:	21 e8       	ldi	r18, 0x81	; 129
    1470:	3f ef       	ldi	r19, 0xFF	; 255
    1472:	0f e7       	ldi	r16, 0x7F	; 127
    1474:	10 e0       	ldi	r17, 0x00	; 0
    1476:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <interpolate>
    147a:	9a 83       	std	Y+2, r25	; 0x02
    147c:	89 83       	std	Y+1, r24	; 0x01
		_servo->setSpeed(i);
    147e:	eb 81       	ldd	r30, Y+3	; 0x03
    1480:	fc 81       	ldd	r31, Y+4	; 0x04
    1482:	80 81       	ld	r24, Z
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	29 81       	ldd	r18, Y+1	; 0x01
    1488:	62 2f       	mov	r22, r18
    148a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_ZN8Actuator8setSpeedEa>
		//print(i);
		_step_count--;
    148e:	eb 81       	ldd	r30, Y+3	; 0x03
    1490:	fc 81       	ldd	r31, Y+4	; 0x04
    1492:	80 85       	ldd	r24, Z+8	; 0x08
    1494:	91 85       	ldd	r25, Z+9	; 0x09
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	eb 81       	ldd	r30, Y+3	; 0x03
    149a:	fc 81       	ldd	r31, Y+4	; 0x04
    149c:	91 87       	std	Z+9, r25	; 0x09
    149e:	80 87       	std	Z+8, r24	; 0x08
	}

}
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	cf 91       	pop	r28
    14aa:	df 91       	pop	r29
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	08 95       	ret

000014b2 <_ZN4Uart5writeEh>:
	operator UART*() const{
		return m_cstr;
	}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <_ZN4Uart5writeEh+0x6>
    14b8:	0f 92       	push	r0
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	9a 83       	std	Y+2, r25	; 0x02
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	6b 83       	std	Y+3, r22	; 0x03
		return _uartSendByte(m_cstr, data);
    14c4:	e9 81       	ldd	r30, Y+1	; 0x01
    14c6:	fa 81       	ldd	r31, Y+2	; 0x02
    14c8:	80 89       	ldd	r24, Z+16	; 0x10
    14ca:	91 89       	ldd	r25, Z+17	; 0x11
    14cc:	6b 81       	ldd	r22, Y+3	; 0x03
    14ce:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <_uartSendByte>
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
	}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <_ZN10SmartMotor5printEi>:
void SmartMotor::stop_motion()
{
	_step_count = 0;
}

void SmartMotor::print(int16_t i)
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
    14ea:	64 97       	sbiw	r28, 0x14	; 20
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	9a 8b       	std	Y+18, r25	; 0x12
    14f8:	89 8b       	std	Y+17, r24	; 0x11
    14fa:	7c 8b       	std	Y+20, r23	; 0x14
    14fc:	6b 8b       	std	Y+19, r22	; 0x13
{
		char str[10];
		for(int j=0;j<10;j++)
    14fe:	1c 82       	std	Y+4, r1	; 0x04
    1500:	1b 82       	std	Y+3, r1	; 0x03
    1502:	0d c0       	rjmp	.+26     	; 0x151e <_ZN10SmartMotor5printEi+0x3c>
			str[j] = 0;
    1504:	2b 81       	ldd	r18, Y+3	; 0x03
    1506:	3c 81       	ldd	r19, Y+4	; 0x04
    1508:	ce 01       	movw	r24, r28
    150a:	07 96       	adiw	r24, 0x07	; 7
    150c:	fc 01       	movw	r30, r24
    150e:	e2 0f       	add	r30, r18
    1510:	f3 1f       	adc	r31, r19
    1512:	10 82       	st	Z, r1
}

void SmartMotor::print(int16_t i)
{
		char str[10];
		for(int j=0;j<10;j++)
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	9c 83       	std	Y+4, r25	; 0x04
    151c:	8b 83       	std	Y+3, r24	; 0x03
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	8a 30       	cpi	r24, 0x0A	; 10
    1524:	91 05       	cpc	r25, r1
    1526:	74 f3       	brlt	.-36     	; 0x1504 <_ZN10SmartMotor5printEi+0x22>
			str[j] = 0;
		char *p = str;
    1528:	ce 01       	movw	r24, r28
    152a:	07 96       	adiw	r24, 0x07	; 7
    152c:	9e 83       	std	Y+6, r25	; 0x06
    152e:	8d 83       	std	Y+5, r24	; 0x05
		p=itoa(i, (char*)str, 10);
    1530:	8b 89       	ldd	r24, Y+19	; 0x13
    1532:	9c 89       	ldd	r25, Y+20	; 0x14
    1534:	9e 01       	movw	r18, r28
    1536:	29 5f       	subi	r18, 0xF9	; 249
    1538:	3f 4f       	sbci	r19, 0xFF	; 255
    153a:	b9 01       	movw	r22, r18
    153c:	4a e0       	ldi	r20, 0x0A	; 10
    153e:	50 e0       	ldi	r21, 0x00	; 0
    1540:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <itoa>
    1544:	9e 83       	std	Y+6, r25	; 0x06
    1546:	8d 83       	std	Y+5, r24	; 0x05
		for(int j=0;j<10;j++)
    1548:	1a 82       	std	Y+2, r1	; 0x02
    154a:	19 82       	std	Y+1, r1	; 0x01
    154c:	12 c0       	rjmp	.+36     	; 0x1572 <_ZN10SmartMotor5printEi+0x90>
		{
			uart1.write(p[j]);
    154e:	29 81       	ldd	r18, Y+1	; 0x01
    1550:	3a 81       	ldd	r19, Y+2	; 0x02
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	9e 81       	ldd	r25, Y+6	; 0x06
    1556:	fc 01       	movw	r30, r24
    1558:	e2 0f       	add	r30, r18
    155a:	f3 1f       	adc	r31, r19
    155c:	20 81       	ld	r18, Z
    155e:	8c e0       	ldi	r24, 0x0C	; 12
    1560:	94 e0       	ldi	r25, 0x04	; 4
    1562:	62 2f       	mov	r22, r18
    1564:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_ZN4Uart5writeEh>
		char str[10];
		for(int j=0;j<10;j++)
			str[j] = 0;
		char *p = str;
		p=itoa(i, (char*)str, 10);
		for(int j=0;j<10;j++)
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	9a 81       	ldd	r25, Y+2	; 0x02
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	9a 83       	std	Y+2, r25	; 0x02
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	9a 81       	ldd	r25, Y+2	; 0x02
    1576:	8a 30       	cpi	r24, 0x0A	; 10
    1578:	91 05       	cpc	r25, r1
    157a:	4c f3       	brlt	.-46     	; 0x154e <_ZN10SmartMotor5printEi+0x6c>
		{
			uart1.write(p[j]);
		} 
			uart1.write('\r');
    157c:	8c e0       	ldi	r24, 0x0C	; 12
    157e:	94 e0       	ldi	r25, 0x04	; 4
    1580:	6d e0       	ldi	r22, 0x0D	; 13
    1582:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_ZN4Uart5writeEh>
			uart1.write('\n');
    1586:	8c e0       	ldi	r24, 0x0C	; 12
    1588:	94 e0       	ldi	r25, 0x04	; 4
    158a:	6a e0       	ldi	r22, 0x0A	; 10
    158c:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_ZN4Uart5writeEh>
}
    1590:	64 96       	adiw	r28, 0x14	; 20
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <marquee_put_char>:
static MAKE_WRITER(marquee_put_char); /* Fwd Def */
MARQUEE _marquee_ = MAKE_MARQUEE(marquee_list,500000,2000000,&marquee_put_char);
// Create a Writer to write to marquee
// Do NOT call it directly instead, to write the char 'A' use:
// 	marqueeGetWriter(&marquee)('A');
static MAKE_WRITER(marquee_put_char){ /* createWriter */
    15a2:	68 2f       	mov	r22, r24
	return marqueeSendByte(&_marquee_,byte);
    15a4:	8a e7       	ldi	r24, 0x7A	; 122
    15a6:	92 e0       	ldi	r25, 0x02	; 2
    15a8:	0e 94 64 11 	call	0x22c8	; 0x22c8 <marqueeSendByte>
}
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	08 95       	ret

000015b0 <registerLED>:
static __inline__ void LED_off(LED* led){
	LED_set(led,FALSE);
}

static __inline__ void statusLEDregister(const IOPin* pin, boolean activeHigh){
	statusLED.pin = pin;
    15b0:	8b e0       	ldi	r24, 0x0B	; 11
    15b2:	93 e0       	ldi	r25, 0x03	; 3
    15b4:	90 93 58 04 	sts	0x0458, r25
    15b8:	80 93 57 04 	sts	0x0457, r24
	statusLED.activeHigh = activeHigh;
    15bc:	80 91 59 04 	lds	r24, 0x0459
	statusLED.initialised=FALSE;
    15c0:	8c 7f       	andi	r24, 0xFC	; 252
    15c2:	80 93 59 04 	sts	0x0459, r24


void LED_set(LED* led,	boolean value);

static __inline__ void LED_on(LED* led){
	LED_set(led,TRUE);
    15c6:	87 e5       	ldi	r24, 0x57	; 87
    15c8:	94 e0       	ldi	r25, 0x04	; 4
    15ca:	6f ef       	ldi	r22, 0xFF	; 255
    15cc:	0e 94 da 10 	call	0x21b4	; 0x21b4 <LED_set>
void initHardware(void){
	servoPWMInit(&_bank1_);
}
void registerLED(void){
	statusLEDregister(C1,false);
}
    15d0:	08 95       	ret

000015d2 <initHardware>:
	//segled_init(&_led_display_);
}

// ----------- Initialise my added devices ------
void initHardware(void){
	servoPWMInit(&_bank1_);
    15d2:	83 ed       	ldi	r24, 0xD3	; 211
    15d4:	92 e0       	ldi	r25, 0x02	; 2
    15d6:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <servoPWMInit>
}
    15da:	08 95       	ret

000015dc <sysInitHardware>:
static __inline__ boolean SWITCH_released(SWITCH* sw){
	return pin_is_high(sw->pin);
}

static __inline__ void SWITCH_init(SWITCH *sw){
	pin_make_input(sw->pin,TRUE);
    15dc:	80 91 67 02 	lds	r24, 0x0267
    15e0:	90 91 68 02 	lds	r25, 0x0268
    15e4:	6f ef       	ldi	r22, 0xFF	; 255
    15e6:	0e 94 8c 10 	call	0x2118	; 0x2118 <pin_make_input>
// ----------- Initialise built in devices ------
void sysInitHardware(void){
	SWITCH_init(&_button_);
//	setErrorLog(&uart1SendByte);
	//rprintfInit(&uart1SendByte);
	uartInit(_C_uart1,115200);
    15ea:	85 e3       	ldi	r24, 0x35	; 53
    15ec:	92 e0       	ldi	r25, 0x02	; 2
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	52 ec       	ldi	r21, 0xC2	; 194
    15f2:	61 e0       	ldi	r22, 0x01	; 1
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	0e 94 31 14 	call	0x2862	; 0x2862 <_uartInit>
// ----------- Register the statusLED -----------
	//segled_init(&_led_display_);
}
    15fa:	08 95       	ret

000015fc <__vector_36>:
#endif

#ifndef USART1_RX_vect
# error Uart1 Rx complete vector undefined
#else
ISR(USART1_RX_vect){
    15fc:	1f 92       	push	r1
    15fe:	0f 92       	push	r0
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	0f 92       	push	r0
    1604:	11 24       	eor	r1, r1
    1606:	2f 93       	push	r18
    1608:	3f 93       	push	r19
    160a:	4f 93       	push	r20
    160c:	5f 93       	push	r21
    160e:	6f 93       	push	r22
    1610:	7f 93       	push	r23
    1612:	8f 93       	push	r24
    1614:	9f 93       	push	r25
    1616:	af 93       	push	r26
    1618:	bf 93       	push	r27
    161a:	ef 93       	push	r30
    161c:	ff 93       	push	r31
	uartReceiveService(_C_uart1);
    161e:	e0 91 61 02 	lds	r30, 0x0261
    1622:	f0 91 62 02 	lds	r31, 0x0262
    1626:	60 81       	ld	r22, Z
    1628:	85 e3       	ldi	r24, 0x35	; 53
    162a:	92 e0       	ldi	r25, 0x02	; 2
    162c:	0e 94 65 15 	call	0x2aca	; 0x2aca <__uartReceiveService>
}
    1630:	ff 91       	pop	r31
    1632:	ef 91       	pop	r30
    1634:	bf 91       	pop	r27
    1636:	af 91       	pop	r26
    1638:	9f 91       	pop	r25
    163a:	8f 91       	pop	r24
    163c:	7f 91       	pop	r23
    163e:	6f 91       	pop	r22
    1640:	5f 91       	pop	r21
    1642:	4f 91       	pop	r20
    1644:	3f 91       	pop	r19
    1646:	2f 91       	pop	r18
    1648:	0f 90       	pop	r0
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	0f 90       	pop	r0
    164e:	1f 90       	pop	r1
    1650:	18 95       	reti

00001652 <__vector_38>:
HW_UART __C_uart1 = MAKE_UART_BUFFERED(null,null,UCSR1A,UCSR1B,UBRR1L,UBRR1H,UDR1,null,BV(U2X1),D2,D3,&uart1GetByte,&uart1SendByte);

#ifndef USART1_TX_vect
# error Uart1 Tx complete vector undefined
#else
ISR(USART1_TX_vect){
    1652:	1f 92       	push	r1
    1654:	0f 92       	push	r0
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	0f 92       	push	r0
    165a:	11 24       	eor	r1, r1
    165c:	2f 93       	push	r18
    165e:	3f 93       	push	r19
    1660:	4f 93       	push	r20
    1662:	5f 93       	push	r21
    1664:	6f 93       	push	r22
    1666:	7f 93       	push	r23
    1668:	8f 93       	push	r24
    166a:	9f 93       	push	r25
    166c:	af 93       	push	r26
    166e:	bf 93       	push	r27
    1670:	ef 93       	push	r30
    1672:	ff 93       	push	r31
	uartTransmitService(_C_uart1);
    1674:	85 e3       	ldi	r24, 0x35	; 53
    1676:	92 e0       	ldi	r25, 0x02	; 2
    1678:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__uartTransmitService>
}
    167c:	ff 91       	pop	r31
    167e:	ef 91       	pop	r30
    1680:	bf 91       	pop	r27
    1682:	af 91       	pop	r26
    1684:	9f 91       	pop	r25
    1686:	8f 91       	pop	r24
    1688:	7f 91       	pop	r23
    168a:	6f 91       	pop	r22
    168c:	5f 91       	pop	r21
    168e:	4f 91       	pop	r20
    1690:	3f 91       	pop	r19
    1692:	2f 91       	pop	r18
    1694:	0f 90       	pop	r0
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	0f 90       	pop	r0
    169a:	1f 90       	pop	r1
    169c:	18 95       	reti

0000169e <uart1GetByte>:
}

// Create a routine to read a byte from uart1
// Returns -1 if there was no data
MAKE_READER( uart1GetByte){
	return uartGetByte(_C_uart1);
    169e:	85 e3       	ldi	r24, 0x35	; 53
    16a0:	92 e0       	ldi	r25, 0x02	; 2
    16a2:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__uartGetByte>
}
    16a6:	08 95       	ret

000016a8 <uart1SendByte>:

// ------------------- uart1 -------------------

// Create a routine to write bytes to uart1
// You can set rprintf to use it by calling rprintfInit(&uart1SendByte)
MAKE_WRITER(uart1SendByte){
    16a8:	68 2f       	mov	r22, r24
	return uartSendByte(_C_uart1,byte);
    16aa:	85 e3       	ldi	r24, 0x35	; 53
    16ac:	92 e0       	ldi	r25, 0x02	; 2
    16ae:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <_uartSendByte>
}
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	08 95       	ret

000016b6 <clockGetSnapshot>:
#define STATUS_LED_DDR   DDRC		
#define STATUS_LED_PIN   PC1		
static uint8_t counter;
		

void clockGetSnapshot(TIMER_SNAPSHOT* snapshot){
    16b6:	fc 01       	movw	r30, r24
	// Clock timer uses TIMER_MODE_CTC_OCR which generate compare interrupts on channel A
	CRITICAL_SECTION{
    16b8:	6f b7       	in	r22, 0x3f	; 63
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
    16ba:	f8 94       	cli
		// get the current ticks from the timer
		uint16_t tcnt = TCNT5;
    16bc:	80 91 24 01 	lds	r24, 0x0124
    16c0:	90 91 25 01 	lds	r25, 0x0125
		// get the number of whole ticks
		snapshot->whole  = wholeTicks;
    16c4:	20 91 e1 03 	lds	r18, 0x03E1
    16c8:	30 91 e2 03 	lds	r19, 0x03E2
    16cc:	40 91 e3 03 	lds	r20, 0x03E3
    16d0:	50 91 e4 03 	lds	r21, 0x03E4
    16d4:	20 83       	st	Z, r18
    16d6:	31 83       	std	Z+1, r19	; 0x01
    16d8:	42 83       	std	Z+2, r20	; 0x02
    16da:	53 83       	std	Z+3, r21	; 0x03
		// get the current ticks again
		snapshot->part   = TCNT5;
    16dc:	20 91 24 01 	lds	r18, 0x0124
    16e0:	30 91 25 01 	lds	r19, 0x0125
    16e4:	35 83       	std	Z+5, r19	; 0x05
    16e6:	24 83       	std	Z+4, r18	; 0x04
		// If the second reading of tcnt has gone down then there must have been an overflow
		// since reading the 'rtn' value. Or there may be a pending interrupt which may be
		// because interrupts are currently turned off. In either case increment the 'rtn' value
		// as if the interrupt has happened
		if(snapshot->part < tcnt || CLOCK_INT_PENDING ){
    16e8:	28 17       	cp	r18, r24
    16ea:	39 07       	cpc	r19, r25
    16ec:	10 f0       	brcs	.+4      	; 0x16f2 <clockGetSnapshot+0x3c>
    16ee:	d1 9b       	sbis	0x1a, 1	; 26
    16f0:	12 c0       	rjmp	.+36     	; 0x1716 <clockGetSnapshot+0x60>
			snapshot->whole += usPerTop;
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	a2 81       	ldd	r26, Z+2	; 0x02
    16f8:	b3 81       	ldd	r27, Z+3	; 0x03
    16fa:	80 50       	subi	r24, 0x00	; 0
    16fc:	93 48       	sbci	r25, 0x83	; 131
    16fe:	af 4f       	sbci	r26, 0xFF	; 255
    1700:	bf 4f       	sbci	r27, 0xFF	; 255
    1702:	80 83       	st	Z, r24
    1704:	91 83       	std	Z+1, r25	; 0x01
    1706:	a2 83       	std	Z+2, r26	; 0x02
    1708:	b3 83       	std	Z+3, r27	; 0x03
			// get the current ticks again
			snapshot->part = TCNT5;
    170a:	80 91 24 01 	lds	r24, 0x0124
    170e:	90 91 25 01 	lds	r25, 0x0125
    1712:	95 83       	std	Z+5, r25	; 0x05
    1714:	84 83       	std	Z+4, r24	; 0x04
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    1716:	6f bf       	out	0x3f, r22	; 63
		}
	}
}
    1718:	08 95       	ret

0000171a <clockSnapshotToTicks>:

TICK_COUNT clockSnapshotToTicks(const TIMER_SNAPSHOT* snapshot){
    171a:	ef 92       	push	r14
    171c:	ff 92       	push	r15
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	fc 01       	movw	r30, r24
	TICK_COUNT rtn = snapshot->whole;
    1724:	e0 80       	ld	r14, Z
    1726:	f1 80       	ldd	r15, Z+1	; 0x01
    1728:	02 81       	ldd	r16, Z+2	; 0x02
    172a:	13 81       	ldd	r17, Z+3	; 0x03

	// top = usPerTop
	// part     x
	TICK_COUNT frac  = snapshot->part;
    172c:	64 81       	ldd	r22, Z+4	; 0x04
    172e:	75 81       	ldd	r23, Z+5	; 0x05
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	90 e0       	ldi	r25, 0x00	; 0
	frac *= usPerTop;
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	3d e7       	ldi	r19, 0x7D	; 125
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__mulsi3>
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	3a ef       	ldi	r19, 0xFA	; 250
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__udivmodsi4>
    174c:	2e 0d       	add	r18, r14
    174e:	3f 1d       	adc	r19, r15
    1750:	40 1f       	adc	r20, r16
    1752:	51 1f       	adc	r21, r17
	frac /= CLOCK_TOP;

	rtn += frac;

	return rtn;
}
    1754:	b9 01       	movw	r22, r18
    1756:	ca 01       	movw	r24, r20
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	ff 90       	pop	r15
    175e:	ef 90       	pop	r14
    1760:	08 95       	ret

00001762 <clockGetus>:

// Get the current clock time in uS
TICK_COUNT clockGetus(void){
    1762:	0f 93       	push	r16
    1764:	1f 93       	push	r17
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <clockGetus+0xa>
    176c:	00 d0       	rcall	.+0      	; 0x176e <clockGetus+0xc>
    176e:	00 d0       	rcall	.+0      	; 0x1770 <clockGetus+0xe>
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
	TIMER_SNAPSHOT snapshot;
	clockGetSnapshot(&snapshot);
    1774:	8e 01       	movw	r16, r28
    1776:	0f 5f       	subi	r16, 0xFF	; 255
    1778:	1f 4f       	sbci	r17, 0xFF	; 255
    177a:	c8 01       	movw	r24, r16
    177c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <clockGetSnapshot>

	return clockSnapshotToTicks(&snapshot);
    1780:	c8 01       	movw	r24, r16
    1782:	0e 94 8d 0b 	call	0x171a	; 0x171a <clockSnapshotToTicks>
}
    1786:	26 96       	adiw	r28, 0x06	; 6
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	08 95       	ret

0000179c <__clockInit>:

// Initialise the clock timer and turn it on
void __clockInit(void){
	// Set interrupt pending = false
	CLOCK_INT_CLEAR;
    179c:	d1 9a       	sbi	0x1a, 1	; 26
	
	// Enable interrupts
	CLOCK_INT_ENABLE;
    179e:	e3 e7       	ldi	r30, 0x73	; 115
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	82 60       	ori	r24, 0x02	; 2
    17a6:	80 83       	st	Z, r24
}
    17a8:	08 95       	ret

000017aa <__vector_47>:

// ISR for clock overflow. Occurs every msPerTop
ISR(TIMER5_COMPA_vect) {
    17aa:	1f 92       	push	r1
    17ac:	0f 92       	push	r0
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	0f 92       	push	r0
    17b2:	11 24       	eor	r1, r1
    17b4:	2f 93       	push	r18
    17b6:	8f 93       	push	r24
    17b8:	9f 93       	push	r25
    17ba:	af 93       	push	r26
    17bc:	bf 93       	push	r27
	wholeTicks += usPerTop;
    17be:	80 91 e1 03 	lds	r24, 0x03E1
    17c2:	90 91 e2 03 	lds	r25, 0x03E2
    17c6:	a0 91 e3 03 	lds	r26, 0x03E3
    17ca:	b0 91 e4 03 	lds	r27, 0x03E4
    17ce:	80 50       	subi	r24, 0x00	; 0
    17d0:	93 48       	sbci	r25, 0x83	; 131
    17d2:	af 4f       	sbci	r26, 0xFF	; 255
    17d4:	bf 4f       	sbci	r27, 0xFF	; 255
    17d6:	80 93 e1 03 	sts	0x03E1, r24
    17da:	90 93 e2 03 	sts	0x03E2, r25
    17de:	a0 93 e3 03 	sts	0x03E3, r26
    17e2:	b0 93 e4 03 	sts	0x03E4, r27

	
	// Flash the status led if there is an error
	ERROR* err = &__error;
	if(err->errorCode && bit_is_set(STATUS_LED_DDR,STATUS_LED_PIN)){
    17e6:	20 91 52 04 	lds	r18, 0x0452
    17ea:	22 23       	and	r18, r18
    17ec:	b9 f1       	breq	.+110    	; 0x185c <__vector_47+0xb2>
    17ee:	39 9b       	sbis	0x07, 1	; 7
    17f0:	35 c0       	rjmp	.+106    	; 0x185c <__vector_47+0xb2>
		// There is an error and status led pin is an output

		// Decrement any counter
		if(counter){
    17f2:	80 91 e5 03 	lds	r24, 0x03E5
    17f6:	88 23       	and	r24, r24
    17f8:	19 f0       	breq	.+6      	; 0x1800 <__vector_47+0x56>
			counter--;
    17fa:	81 50       	subi	r24, 0x01	; 1
    17fc:	80 93 e5 03 	sts	0x03E5, r24
		}
		if(counter==0){
    1800:	80 91 e5 03 	lds	r24, 0x03E5
    1804:	88 23       	and	r24, r24
    1806:	51 f5       	brne	.+84     	; 0x185c <__vector_47+0xb2>
			// Its time to do something
			if(err->remaining==0){
    1808:	80 91 53 04 	lds	r24, 0x0453
    180c:	88 23       	and	r24, r24
    180e:	59 f4       	brne	.+22     	; 0x1826 <__vector_47+0x7c>
				err->remaining = ABS(err->errorCode);
    1810:	82 2f       	mov	r24, r18
    1812:	99 27       	eor	r25, r25
    1814:	87 fd       	sbrc	r24, 7
    1816:	90 95       	com	r25
    1818:	97 ff       	sbrs	r25, 7
    181a:	03 c0       	rjmp	.+6      	; 0x1822 <__vector_47+0x78>
    181c:	90 95       	com	r25
    181e:	81 95       	neg	r24
    1820:	9f 4f       	sbci	r25, 0xFF	; 255
    1822:	80 93 53 04 	sts	0x0453, r24
			}

			uint8_t delay = (err->errorCode < 0 ) ? 250/msPerTop : 500/msPerTop;
    1826:	27 fd       	sbrc	r18, 7
    1828:	02 c0       	rjmp	.+4      	; 0x182e <__vector_47+0x84>
    182a:	9f e0       	ldi	r25, 0x0F	; 15
    182c:	01 c0       	rjmp	.+2      	; 0x1830 <__vector_47+0x86>
    182e:	97 e0       	ldi	r25, 0x07	; 7
			if(err->phase){
    1830:	20 91 54 04 	lds	r18, 0x0454
    1834:	22 23       	and	r18, r18
    1836:	41 f0       	breq	.+16     	; 0x1848 <__vector_47+0x9e>
				// turn led off
				if(-- err->remaining == 0){
    1838:	80 91 53 04 	lds	r24, 0x0453
    183c:	81 50       	subi	r24, 0x01	; 1
    183e:	80 93 53 04 	sts	0x0453, r24
    1842:	88 23       	and	r24, r24
    1844:	09 f4       	brne	.+2      	; 0x1848 <__vector_47+0x9e>
    1846:	9e e3       	ldi	r25, 0x3E	; 62
					delay = 2000/msPerTop;
				}
			}else{
				// turn led on
			}
			err->phase = !err->phase;
    1848:	10 92 54 04 	sts	0x0454, r1
    184c:	22 23       	and	r18, r18
    184e:	19 f4       	brne	.+6      	; 0x1856 <__vector_47+0xac>
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	80 93 54 04 	sts	0x0454, r24
			counter = delay;
    1856:	90 93 e5 03 	sts	0x03E5, r25
			// toggle the LED
			sbi(STATUS_LED_INPUT,STATUS_LED_PIN);
    185a:	31 9a       	sbi	0x06, 1	; 6
		}
	}
	
}
    185c:	bf 91       	pop	r27
    185e:	af 91       	pop	r26
    1860:	9f 91       	pop	r25
    1862:	8f 91       	pop	r24
    1864:	2f 91       	pop	r18
    1866:	0f 90       	pop	r0
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	0f 90       	pop	r0
    186c:	1f 90       	pop	r1
    186e:	18 95       	reti

00001870 <_ZN6Stream4_putEcP6__file>:
	/* function to write one char to device
	 * Called directly from the C FILE code
	 * when using commands from stdio.h
	 * This is passed on to the write of our C++ object
	 */
	static int	_put(char c, STREAM *s){
    1870:	28 2f       	mov	r18, r24
		Stream* str = (Stream*)s;
    1872:	61 15       	cp	r22, r1
    1874:	71 05       	cpc	r23, r1
    1876:	19 f4       	brne	.+6      	; 0x187e <_ZN6Stream4_putEcP6__file+0xe>
    1878:	a0 e0       	ldi	r26, 0x00	; 0
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <_ZN6Stream4_putEcP6__file+0x12>
    187e:	db 01       	movw	r26, r22
    1880:	12 97       	sbiw	r26, 0x02	; 2
		return str->write((uint8_t)c);
    1882:	ed 91       	ld	r30, X+
    1884:	fc 91       	ld	r31, X
    1886:	11 97       	sbiw	r26, 0x01	; 1
    1888:	01 90       	ld	r0, Z+
    188a:	f0 81       	ld	r31, Z
    188c:	e0 2d       	mov	r30, r0
    188e:	cd 01       	movw	r24, r26
    1890:	62 2f       	mov	r22, r18
    1892:	09 95       	icall
	}
    1894:	08 95       	ret

00001896 <_ZN6Stream4_getEP6__file>:
	 * Called directly from the C FILE code
	 * when using commands from stdio.h
	 * This is passed on to the read of our C++ object
	 */
	static int	_get(STREAM *s){
		Stream* str = (Stream*)s;
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	19 f4       	brne	.+6      	; 0x18a0 <_ZN6Stream4_getEP6__file+0xa>
    189a:	a0 e0       	ldi	r26, 0x00	; 0
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <_ZN6Stream4_getEP6__file+0xe>
    18a0:	dc 01       	movw	r26, r24
    18a2:	12 97       	sbiw	r26, 0x02	; 2
		return str->read();
    18a4:	ed 91       	ld	r30, X+
    18a6:	fc 91       	ld	r31, X
    18a8:	11 97       	sbiw	r26, 0x01	; 1
    18aa:	02 80       	ldd	r0, Z+2	; 0x02
    18ac:	f3 81       	ldd	r31, Z+3	; 0x03
    18ae:	e0 2d       	mov	r30, r0
    18b0:	cd 01       	movw	r24, r26
    18b2:	09 95       	icall
	}
    18b4:	08 95       	ret

000018b6 <_ZN10NullStream5writeEh>:
// A type of stream that just throws away output and returns EOF for input
class NullStream : public Stream{
public:
	NullStream(void) : Stream(){};
protected:
	virtual int write(uint8_t c) { return c;};
    18b6:	86 2f       	mov	r24, r22
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	08 95       	ret

000018bc <_ZN10NullStream4readEv>:
	virtual int read(void) {return EOF;};
    18bc:	8f ef       	ldi	r24, 0xFF	; 255
    18be:	9f ef       	ldi	r25, 0xFF	; 255
    18c0:	08 95       	ret

000018c2 <_ZN7Marquee4readEv>:
public:
	Marquee(MARQUEE* cstr) {m_cstr = cstr;}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){return marqueeSendByte(m_cstr,data);}
	virtual int read(void){return EOF;}
    18c2:	8f ef       	ldi	r24, 0xFF	; 255
    18c4:	9f ef       	ldi	r25, 0xFF	; 255
    18c6:	08 95       	ret

000018c8 <_Z10_cpp_Init_v>:
NullStream nullStream;

void __attribute__ ((constructor)) _cpp_Init_(void){
//	stdin = stdout = uart1;
//	stderr = uart1;
}
    18c8:	08 95       	ret

000018ca <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void){
    18ca:	ff cf       	rjmp	.-2      	; 0x18ca <__cxa_pure_virtual>

000018cc <_GLOBAL__I_statusLed>:
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class Led {
public:
	Led(LED * cstr){m_cstr = cstr;};
    18cc:	87 e5       	ldi	r24, 0x57	; 87
    18ce:	94 e0       	ldi	r25, 0x04	; 4
    18d0:	90 93 e9 03 	sts	0x03E9, r25
    18d4:	80 93 e8 03 	sts	0x03E8, r24
	LED* m_cstr;
};

class StatusLed : public Led {
public:
	StatusLed(LED * cstr) : Led(cstr){
    18d8:	84 ee       	ldi	r24, 0xE4	; 228
    18da:	92 e0       	ldi	r25, 0x02	; 2
    18dc:	90 93 e7 03 	sts	0x03E7, r25
    18e0:	80 93 e6 03 	sts	0x03E6, r24
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class Switch {
public:
	Switch(SWITCH * cstr){m_cstr = cstr;};
    18e4:	87 e6       	ldi	r24, 0x67	; 103
    18e6:	92 e0       	ldi	r25, 0x02	; 2
    18e8:	90 93 eb 03 	sts	0x03EB, r25
    18ec:	80 93 ea 03 	sts	0x03EA, r24

class Stream : STREAM{

public:
	Stream(void){
		fdev_setup_stream(this, &_put, &_get, _FDEV_SETUP_RW);
    18f0:	68 e3       	ldi	r22, 0x38	; 56
    18f2:	7c e0       	ldi	r23, 0x0C	; 12
    18f4:	70 93 f7 03 	sts	0x03F7, r23
    18f8:	60 93 f6 03 	sts	0x03F6, r22
    18fc:	4b e4       	ldi	r20, 0x4B	; 75
    18fe:	5c e0       	ldi	r21, 0x0C	; 12
    1900:	50 93 f9 03 	sts	0x03F9, r21
    1904:	40 93 f8 03 	sts	0x03F8, r20
    1908:	a3 e0       	ldi	r26, 0x03	; 3
    190a:	a0 93 f1 03 	sts	0x03F1, r26
    190e:	10 92 fb 03 	sts	0x03FB, r1
    1912:	10 92 fa 03 	sts	0x03FA, r1
};


class Marquee : public Stream {
public:
	Marquee(MARQUEE* cstr) {m_cstr = cstr;}
    1916:	80 ef       	ldi	r24, 0xF0	; 240
    1918:	92 e0       	ldi	r25, 0x02	; 2
    191a:	90 93 ed 03 	sts	0x03ED, r25
    191e:	80 93 ec 03 	sts	0x03EC, r24
    1922:	8a e7       	ldi	r24, 0x7A	; 122
    1924:	92 e0       	ldi	r25, 0x02	; 2
    1926:	90 93 fd 03 	sts	0x03FD, r25
    192a:	80 93 fc 03 	sts	0x03FC, r24
#ifdef __cplusplus
}
class Actuator{
public:
	Actuator(__ACTUATOR* cstr){
		m_cstr = cstr;
    192e:	81 e9       	ldi	r24, 0x91	; 145
    1930:	92 e0       	ldi	r25, 0x02	; 2
    1932:	90 93 ff 03 	sts	0x03FF, r25
    1936:	80 93 fe 03 	sts	0x03FE, r24
#ifdef __cplusplus
}
class Servo : public Actuator{
public:
	Servo(SERVO* cstr) : Actuator(&cstr->actuator){
		m_cstr = cstr;
    193a:	90 93 01 04 	sts	0x0401, r25
    193e:	80 93 00 04 	sts	0x0400, r24
    1942:	87 ea       	ldi	r24, 0xA7	; 167
    1944:	92 e0       	ldi	r25, 0x02	; 2
    1946:	90 93 03 04 	sts	0x0403, r25
    194a:	80 93 02 04 	sts	0x0402, r24
    194e:	90 93 05 04 	sts	0x0405, r25
    1952:	80 93 04 04 	sts	0x0404, r24
    1956:	8d eb       	ldi	r24, 0xBD	; 189
    1958:	92 e0       	ldi	r25, 0x02	; 2
    195a:	90 93 07 04 	sts	0x0407, r25
    195e:	80 93 06 04 	sts	0x0406, r24
    1962:	90 93 09 04 	sts	0x0409, r25
    1966:	80 93 08 04 	sts	0x0408, r24
};

class ServoDriver{
public:
	ServoDriver(SERVO_DRIVER* cstr){
		driver = cstr;
    196a:	83 ed       	ldi	r24, 0xD3	; 211
    196c:	92 e0       	ldi	r25, 0x02	; 2
    196e:	90 93 0b 04 	sts	0x040B, r25
    1972:	80 93 0a 04 	sts	0x040A, r24
    1976:	70 93 17 04 	sts	0x0417, r23
    197a:	60 93 16 04 	sts	0x0416, r22
    197e:	50 93 19 04 	sts	0x0419, r21
    1982:	40 93 18 04 	sts	0x0418, r20
    1986:	a0 93 11 04 	sts	0x0411, r26
    198a:	10 92 1b 04 	sts	0x041B, r1
    198e:	10 92 1a 04 	sts	0x041A, r1
/* ===================== C++ Wrapper Code ===============================================*/
#include "Stream/Stream.h"
class Uart : public Stream {
public:
	Uart(UART * cstr): Stream(){
		m_cstr = cstr;
    1992:	25 e3       	ldi	r18, 0x35	; 53
    1994:	32 e0       	ldi	r19, 0x02	; 2
    1996:	30 93 1d 04 	sts	0x041D, r19
    199a:	20 93 1c 04 	sts	0x041C, r18
		cstr->cpp = this;
    199e:	ec e0       	ldi	r30, 0x0C	; 12
    19a0:	f4 e0       	ldi	r31, 0x04	; 4
    19a2:	f0 93 4b 02 	sts	0x024B, r31
    19a6:	e0 93 4a 02 	sts	0x024A, r30
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class UartHW : public Uart {
public:
	UartHW(HW_UART* uart) : Uart(&uart->_uart_){
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	93 e0       	ldi	r25, 0x03	; 3
    19ae:	91 83       	std	Z+1, r25	; 0x01
    19b0:	80 83       	st	Z, r24
		m_hw = uart;
    19b2:	30 93 23 04 	sts	0x0423, r19
    19b6:	20 93 22 04 	sts	0x0422, r18
		m_polling = FALSE;
    19ba:	10 92 24 04 	sts	0x0424, r1
    19be:	70 93 30 04 	sts	0x0430, r23
    19c2:	60 93 2f 04 	sts	0x042F, r22
    19c6:	50 93 32 04 	sts	0x0432, r21
    19ca:	40 93 31 04 	sts	0x0431, r20
    19ce:	a0 93 2a 04 	sts	0x042A, r26
    19d2:	10 92 34 04 	sts	0x0434, r1
    19d6:	10 92 33 04 	sts	0x0433, r1
};

// A type of stream that just throws away output and returns EOF for input
class NullStream : public Stream{
public:
	NullStream(void) : Stream(){};
    19da:	80 e1       	ldi	r24, 0x10	; 16
    19dc:	93 e0       	ldi	r25, 0x03	; 3
    19de:	90 93 26 04 	sts	0x0426, r25
    19e2:	80 93 25 04 	sts	0x0425, r24
	while(1);
}
    19e6:	08 95       	ret

000019e8 <_ZNK9StatusLed3setEa>:
	}

	virtual void set(boolean value) const{
    19e8:	1f 93       	push	r17
    19ea:	16 2f       	mov	r17, r22
		LED_off(&statusLED);
	}
}

static __inline__ void statusLED_set(boolean value){
	if(pin_is_output(statusLED.pin)){
    19ec:	80 91 57 04 	lds	r24, 0x0457
    19f0:	90 91 58 04 	lds	r25, 0x0458
    19f4:	0e 94 77 10 	call	0x20ee	; 0x20ee <pin_is_output>
    19f8:	88 23       	and	r24, r24
    19fa:	29 f0       	breq	.+10     	; 0x1a06 <_ZNK9StatusLed3setEa+0x1e>
		LED_set(&statusLED, value);
    19fc:	87 e5       	ldi	r24, 0x57	; 87
    19fe:	94 e0       	ldi	r25, 0x04	; 4
    1a00:	61 2f       	mov	r22, r17
    1a02:	0e 94 da 10 	call	0x21b4	; 0x21b4 <LED_set>
	StatusLed(LED * cstr) : Led(cstr){
	}

	virtual void set(boolean value) const{
		statusLED_set(value);
	}
    1a06:	1f 91       	pop	r17
    1a08:	08 95       	ret

00001a0a <_ZNK3Led3setEa>:
	}
	void off(void) const{
		set(FALSE);
	}
	virtual void set(boolean value) const{
		LED_set(m_cstr,value);
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	0e 94 da 10 	call	0x21b4	; 0x21b4 <LED_set>
	}
    1a14:	08 95       	ret

00001a16 <_ZN7Marquee5writeEh>:

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){return marqueeSendByte(m_cstr,data);}
    1a16:	fc 01       	movw	r30, r24
    1a18:	80 89       	ldd	r24, Z+16	; 0x10
    1a1a:	91 89       	ldd	r25, Z+17	; 0x11
    1a1c:	0e 94 64 11 	call	0x22c8	; 0x22c8 <marqueeSendByte>
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	08 95       	ret

00001a24 <_ZN6UartHW4readEv>:
	};

	virtual int read(void){
    1a24:	fc 01       	movw	r30, r24
		int ch;

		if(m_polling){
    1a26:	80 8d       	ldd	r24, Z+24	; 0x18
    1a28:	88 23       	and	r24, r24
    1a2a:	29 f0       	breq	.+10     	; 0x1a36 <_ZN6UartHW4readEv+0x12>
			ch = uartPollByte(m_hw);
    1a2c:	86 89       	ldd	r24, Z+22	; 0x16
    1a2e:	97 89       	ldd	r25, Z+23	; 0x17
    1a30:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <uartPollByte>
    1a34:	08 95       	ret
		}else{
			ch = __uartGetByte(m_cstr);
    1a36:	80 89       	ldd	r24, Z+16	; 0x10
    1a38:	91 89       	ldd	r25, Z+17	; 0x11
    1a3a:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__uartGetByte>
		}

		return ch;
	}
    1a3e:	08 95       	ret

00001a40 <_ZN4Uart4readEv>:
	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
		return _uartSendByte(m_cstr, data);
	}
	virtual int read(void){
		return __uartGetByte(m_cstr);
    1a40:	fc 01       	movw	r30, r24
    1a42:	80 89       	ldd	r24, Z+16	; 0x10
    1a44:	91 89       	ldd	r25, Z+17	; 0x11
    1a46:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__uartGetByte>
	}
    1a4a:	08 95       	ret
		return m_cstr;
	}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
		return _uartSendByte(m_cstr, data);
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	80 89       	ldd	r24, Z+16	; 0x10
    1a50:	91 89       	ldd	r25, Z+17	; 0x11
    1a52:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <_uartSendByte>
	}
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	08 95       	ret

00001a5a <__initTimers>:
// Private methods

//int __timerPrescalerIndex(const Timer* timer, uint16_t prescaler);

static __inline__ TimerData* timerGetData(const Timer* timer){
	return (TimerData*)pgm_read_word(&timer->pgm_data);
    1a5a:	24 ea       	ldi	r18, 0xA4	; 164
    1a5c:	32 e0       	ldi	r19, 0x02	; 2
    1a5e:	f9 01       	movw	r30, r18
    1a60:	a5 91       	lpm	r26, Z+
    1a62:	b4 91       	lpm	r27, Z+
 
// Set Timer4 to the following:-
//		Mode 	 = TIMER_MODE_PWM_FAST_ICR
//		Prescale = 8
	// Save the timer mode
	timerGetData(&pgm_Timers[4])->mode = TIMER_MODE_PWM_FAST_ICR;
    1a64:	8e e0       	ldi	r24, 0x0E	; 14
    1a66:	1a 96       	adiw	r26, 0x0a	; 10
    1a68:	8c 93       	st	X, r24
    1a6a:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR4A,WGM40);
	} 
		
			
	if(14 & 2){
		sbi(TCCR4A,WGM41);
    1a6c:	e0 ea       	ldi	r30, 0xA0	; 160
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	82 60       	ori	r24, 0x02	; 2
    1a74:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 4){
		sbi(TCCR4B,WGM42);
    1a76:	e1 ea       	ldi	r30, 0xA1	; 161
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	88 60       	ori	r24, 0x08	; 8
    1a7e:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 8){
		sbi(TCCR4B,WGM43);
    1a80:	80 81       	ld	r24, Z
    1a82:	80 61       	ori	r24, 0x10	; 16
    1a84:	80 83       	st	Z, r24
	} 
		
	// Top is stored in ICR register
	ICR4 = 40000;			
    1a86:	80 e4       	ldi	r24, 0x40	; 64
    1a88:	9c e9       	ldi	r25, 0x9C	; 156
    1a8a:	90 93 a7 00 	sts	0x00A7, r25
    1a8e:	80 93 a6 00 	sts	0x00A6, r24
			
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[4])->prescale_value = 8;
    1a92:	48 e0       	ldi	r20, 0x08	; 8
    1a94:	50 e0       	ldi	r21, 0x00	; 0
    1a96:	4d 93       	st	X+, r20
    1a98:	5c 93       	st	X, r21
	TCCR4B |= 2;
    1a9a:	80 81       	ld	r24, Z
    1a9c:	82 60       	ori	r24, 0x02	; 2
    1a9e:	80 83       	st	Z, r24
    1aa0:	24 5d       	subi	r18, 0xD4	; 212
    1aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa4:	f9 01       	movw	r30, r18
    1aa6:	a5 91       	lpm	r26, Z+
    1aa8:	b4 91       	lpm	r27, Z+
	 
// Set Timer5 to the following:-
//		Mode 	 = TIMER_MODE_CTC_OCR
//		Prescale = 8
	// Save the timer mode
	timerGetData(&pgm_Timers[5])->mode = TIMER_MODE_CTC_OCR;
    1aaa:	84 e0       	ldi	r24, 0x04	; 4
    1aac:	1a 96       	adiw	r26, 0x0a	; 10
    1aae:	8c 93       	st	X, r24
    1ab0:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR5A,WGM51);
	} 
		
			
	if(4 & 4){
		sbi(TCCR5B,WGM52);
    1ab2:	e1 e2       	ldi	r30, 0x21	; 33
    1ab4:	f1 e0       	ldi	r31, 0x01	; 1
    1ab6:	80 81       	ld	r24, Z
    1ab8:	88 60       	ori	r24, 0x08	; 8
    1aba:	80 83       	st	Z, r24
	if(4 & 8){
		sbi(TCCR5B,WGM53);
	} 
		
	// Top is stored in Compare A OCR
				OCR5A = 64000;			
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	9a ef       	ldi	r25, 0xFA	; 250
    1ac0:	90 93 29 01 	sts	0x0129, r25
    1ac4:	80 93 28 01 	sts	0x0128, r24
				
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[5])->prescale_value = 8;
    1ac8:	4d 93       	st	X+, r20
    1aca:	5c 93       	st	X, r21
	TCCR5B |= 2;
    1acc:	80 81       	ld	r24, Z
    1ace:	82 60       	ori	r24, 0x02	; 2
    1ad0:	80 83       	st	Z, r24
	}
    1ad2:	08 95       	ret

00001ad4 <servoPWMInit>:
    1ad4:	8f 92       	push	r8
    1ad6:	9f 92       	push	r9
    1ad8:	af 92       	push	r10
    1ada:	bf 92       	push	r11
    1adc:	cf 92       	push	r12
    1ade:	df 92       	push	r13
    1ae0:	ef 92       	push	r14
    1ae2:	ff 92       	push	r15
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	6c 01       	movw	r12, r24
    1aee:	dc 01       	movw	r26, r24
    1af0:	12 96       	adiw	r26, 0x02	; 2
    1af2:	8c 91       	ld	r24, X
    1af4:	c8 2f       	mov	r28, r24
    1af6:	d0 e0       	ldi	r29, 0x00	; 0
    1af8:	21 97       	sbiw	r28, 0x01	; 1
    1afa:	7e 01       	movw	r14, r28
    1afc:	ee 0c       	add	r14, r14
    1afe:	ff 1c       	adc	r15, r15
    1b00:	9f e7       	ldi	r25, 0x7F	; 127
    1b02:	89 2e       	mov	r8, r25
    1b04:	93 e0       	ldi	r25, 0x03	; 3
    1b06:	99 2e       	mov	r9, r25
    1b08:	8c e2       	ldi	r24, 0x2C	; 44
    1b0a:	a8 2e       	mov	r10, r24
    1b0c:	47 c0       	rjmp	.+142    	; 0x1b9c <servoPWMInit+0xc8>
    1b0e:	d6 01       	movw	r26, r12
    1b10:	ed 91       	ld	r30, X+
    1b12:	fc 91       	ld	r31, X
    1b14:	ee 0d       	add	r30, r14
    1b16:	ff 1d       	adc	r31, r15
    1b18:	05 91       	lpm	r16, Z+
    1b1a:	14 91       	lpm	r17, Z+
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	d5 82       	std	Z+5, r13	; 0x05
    1b20:	c4 82       	std	Z+4, r12	; 0x04
    1b22:	86 81       	ldd	r24, Z+6	; 0x06
    1b24:	97 81       	ldd	r25, Z+7	; 0x07
    1b26:	0e 94 82 13 	call	0x2704	; 0x2704 <compareFromIOPin>
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	d8 01       	movw	r26, r16
    1b2e:	55 96       	adiw	r26, 0x15	; 21
    1b30:	9c 93       	st	X, r25
    1b32:	8e 93       	st	-X, r24
    1b34:	54 97       	sbiw	r26, 0x14	; 20
    1b36:	32 96       	adiw	r30, 0x02	; 2
    1b38:	b4 90       	lpm	r11, Z+
    1b3a:	11 96       	adiw	r26, 0x01	; 1
    1b3c:	9c 92       	st	X, r9
    1b3e:	8e 92       	st	-X, r8
    1b40:	16 96       	adiw	r26, 0x06	; 6
    1b42:	8d 91       	ld	r24, X+
    1b44:	9c 91       	ld	r25, X
    1b46:	17 97       	sbiw	r26, 0x07	; 7
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	0e 94 b3 10 	call	0x2166	; 0x2166 <pin_make_output>
    1b4e:	ba 9c       	mul	r11, r10
    1b50:	c0 01       	movw	r24, r0
    1b52:	11 24       	eor	r1, r1
    1b54:	8d 5e       	subi	r24, 0xED	; 237
    1b56:	9d 4f       	sbci	r25, 0xFD	; 253
    1b58:	fc 01       	movw	r30, r24
    1b5a:	a5 91       	lpm	r26, Z+
    1b5c:	b4 91       	lpm	r27, Z+
    1b5e:	8d 91       	ld	r24, X+
    1b60:	9c 91       	ld	r25, X
    1b62:	d8 01       	movw	r26, r16
    1b64:	53 96       	adiw	r26, 0x13	; 19
    1b66:	9c 93       	st	X, r25
    1b68:	8e 93       	st	-X, r24
    1b6a:	52 97       	sbiw	r26, 0x12	; 18
    1b6c:	18 96       	adiw	r26, 0x08	; 8
    1b6e:	6d 91       	ld	r22, X+
    1b70:	7c 91       	ld	r23, X
    1b72:	19 97       	sbiw	r26, 0x09	; 9
    1b74:	1a 96       	adiw	r26, 0x0a	; 10
    1b76:	4d 91       	ld	r20, X+
    1b78:	5c 91       	ld	r21, X
    1b7a:	1b 97       	sbiw	r26, 0x0b	; 11
    1b7c:	c8 01       	movw	r24, r16
    1b7e:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <servoSetConfig>
    1b82:	c8 01       	movw	r24, r16
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__act_setSpeed>
    1b8a:	c8 01       	movw	r24, r16
    1b8c:	6f ef       	ldi	r22, 0xFF	; 255
    1b8e:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__act_setConnected>
    1b92:	21 97       	sbiw	r28, 0x01	; 1
    1b94:	ee ef       	ldi	r30, 0xFE	; 254
    1b96:	ff ef       	ldi	r31, 0xFF	; 255
    1b98:	ee 0e       	add	r14, r30
    1b9a:	ff 1e       	adc	r15, r31
    1b9c:	ff ef       	ldi	r31, 0xFF	; 255
    1b9e:	cf 3f       	cpi	r28, 0xFF	; 255
    1ba0:	df 07       	cpc	r29, r31
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <servoPWMInit+0xd2>
    1ba4:	b4 cf       	rjmp	.-152    	; 0x1b0e <servoPWMInit+0x3a>
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	1f 91       	pop	r17
    1bac:	0f 91       	pop	r16
    1bae:	ff 90       	pop	r15
    1bb0:	ef 90       	pop	r14
    1bb2:	df 90       	pop	r13
    1bb4:	cf 90       	pop	r12
    1bb6:	bf 90       	pop	r11
    1bb8:	af 90       	pop	r10
    1bba:	9f 90       	pop	r9
    1bbc:	8f 90       	pop	r8
    1bbe:	08 95       	ret

00001bc0 <setConnected>:
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	84 89       	ldd	r24, Z+20	; 0x14
    1bc4:	95 89       	ldd	r25, Z+21	; 0x15
    1bc6:	61 11       	cpse	r22, r1
    1bc8:	62 e0       	ldi	r22, 0x02	; 2
    1bca:	0e 94 ce 13 	call	0x279c	; 0x279c <compareSetOutputMode>
    1bce:	08 95       	ret

00001bd0 <setSpeed>:
    1bd0:	ef 92       	push	r14
    1bd2:	ff 92       	push	r15
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	fc 01       	movw	r30, r24
    1bda:	e4 88       	ldd	r14, Z+20	; 0x14
    1bdc:	f5 88       	ldd	r15, Z+21	; 0x15
    1bde:	24 85       	ldd	r18, Z+12	; 0x0c
    1be0:	35 85       	ldd	r19, Z+13	; 0x0d
    1be2:	06 85       	ldd	r16, Z+14	; 0x0e
    1be4:	17 85       	ldd	r17, Z+15	; 0x0f
    1be6:	86 2f       	mov	r24, r22
    1be8:	99 27       	eor	r25, r25
    1bea:	87 fd       	sbrc	r24, 7
    1bec:	90 95       	com	r25
    1bee:	61 e8       	ldi	r22, 0x81	; 129
    1bf0:	7f ef       	ldi	r23, 0xFF	; 255
    1bf2:	4f e7       	ldi	r20, 0x7F	; 127
    1bf4:	50 e0       	ldi	r21, 0x00	; 0
    1bf6:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <interpolateU>
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	c7 01       	movw	r24, r14
    1bfe:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <compareSetThreshold>
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	ff 90       	pop	r15
    1c08:	ef 90       	pop	r14
    1c0a:	08 95       	ret

00001c0c <servoSetConfig>:
    1c0c:	9f 92       	push	r9
    1c0e:	af 92       	push	r10
    1c10:	bf 92       	push	r11
    1c12:	cf 92       	push	r12
    1c14:	df 92       	push	r13
    1c16:	ef 92       	push	r14
    1c18:	ff 92       	push	r15
    1c1a:	0f 93       	push	r16
    1c1c:	1f 93       	push	r17
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
    1c22:	ec 01       	movw	r28, r24
    1c24:	7b 01       	movw	r14, r22
    1c26:	8a 01       	movw	r16, r20
    1c28:	79 87       	std	Y+9, r23	; 0x09
    1c2a:	68 87       	std	Y+8, r22	; 0x08
    1c2c:	5b 87       	std	Y+11, r21	; 0x0b
    1c2e:	4a 87       	std	Y+10, r20	; 0x0a
    1c30:	8c 81       	ldd	r24, Y+4	; 0x04
    1c32:	9d 81       	ldd	r25, Y+5	; 0x05
    1c34:	89 2b       	or	r24, r25
    1c36:	09 f4       	brne	.+2      	; 0x1c3a <servoSetConfig+0x2e>
    1c38:	5e c0       	rjmp	.+188    	; 0x1cf6 <servoSetConfig+0xea>
    1c3a:	9f b6       	in	r9, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	8a 89       	ldd	r24, Y+18	; 0x12
    1c40:	9b 89       	ldd	r25, Y+19	; 0x13
    1c42:	68 ee       	ldi	r22, 0xE8	; 232
    1c44:	73 e0       	ldi	r23, 0x03	; 3
    1c46:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__udivmodhi4>
    1c4a:	5b 01       	movw	r10, r22
    1c4c:	cc 24       	eor	r12, r12
    1c4e:	dd 24       	eor	r13, r13
    1c50:	b7 01       	movw	r22, r14
    1c52:	60 1b       	sub	r22, r16
    1c54:	71 0b       	sbc	r23, r17
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a6 01       	movw	r20, r12
    1c5c:	95 01       	movw	r18, r10
    1c5e:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__mulsi3>
    1c62:	24 e1       	ldi	r18, 0x14	; 20
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	50 e0       	ldi	r21, 0x00	; 0
    1c6a:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__udivmodsi4>
    1c6e:	c9 01       	movw	r24, r18
    1c70:	da 01       	movw	r26, r20
    1c72:	9c 01       	movw	r18, r24
    1c74:	ad 01       	movw	r20, r26
    1c76:	da 01       	movw	r26, r20
    1c78:	c9 01       	movw	r24, r18
    1c7a:	80 70       	andi	r24, 0x00	; 0
    1c7c:	90 70       	andi	r25, 0x00	; 0
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	a1 05       	cpc	r26, r1
    1c82:	b1 05       	cpc	r27, r1
    1c84:	39 f0       	breq	.+14     	; 0x1c94 <servoSetConfig+0x88>
    1c86:	86 ee       	ldi	r24, 0xE6	; 230
    1c88:	0e 94 14 10 	call	0x2028	; 0x2028 <setError>
    1c8c:	2f ef       	ldi	r18, 0xFF	; 255
    1c8e:	3f ef       	ldi	r19, 0xFF	; 255
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	50 e0       	ldi	r21, 0x00	; 0
    1c94:	3d 87       	std	Y+13, r19	; 0x0d
    1c96:	2c 87       	std	Y+12, r18	; 0x0c
    1c98:	0e 0d       	add	r16, r14
    1c9a:	1f 1d       	adc	r17, r15
    1c9c:	b8 01       	movw	r22, r16
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	a6 01       	movw	r20, r12
    1ca4:	95 01       	movw	r18, r10
    1ca6:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__mulsi3>
    1caa:	24 e1       	ldi	r18, 0x14	; 20
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	50 e0       	ldi	r21, 0x00	; 0
    1cb2:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__udivmodsi4>
    1cb6:	c9 01       	movw	r24, r18
    1cb8:	da 01       	movw	r26, r20
    1cba:	9c 01       	movw	r18, r24
    1cbc:	ad 01       	movw	r20, r26
    1cbe:	da 01       	movw	r26, r20
    1cc0:	c9 01       	movw	r24, r18
    1cc2:	80 70       	andi	r24, 0x00	; 0
    1cc4:	90 70       	andi	r25, 0x00	; 0
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	a1 05       	cpc	r26, r1
    1cca:	b1 05       	cpc	r27, r1
    1ccc:	39 f0       	breq	.+14     	; 0x1cdc <servoSetConfig+0xd0>
    1cce:	86 ee       	ldi	r24, 0xE6	; 230
    1cd0:	0e 94 14 10 	call	0x2028	; 0x2028 <setError>
    1cd4:	2f ef       	ldi	r18, 0xFF	; 255
    1cd6:	3f ef       	ldi	r19, 0xFF	; 255
    1cd8:	40 e0       	ldi	r20, 0x00	; 0
    1cda:	50 e0       	ldi	r21, 0x00	; 0
    1cdc:	3f 87       	std	Y+15, r19	; 0x0f
    1cde:	2e 87       	std	Y+14, r18	; 0x0e
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	80 ff       	sbrs	r24, 0
    1ce4:	07 c0       	rjmp	.+14     	; 0x1cf4 <servoSetConfig+0xe8>
    1ce6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ce8:	61 50       	subi	r22, 0x01	; 1
    1cea:	6a 83       	std	Y+2, r22	; 0x02
    1cec:	6f 5f       	subi	r22, 0xFF	; 255
    1cee:	ce 01       	movw	r24, r28
    1cf0:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__act_setSpeed>
    1cf4:	9f be       	out	0x3f, r9	; 63
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
    1cfa:	1f 91       	pop	r17
    1cfc:	0f 91       	pop	r16
    1cfe:	ff 90       	pop	r15
    1d00:	ef 90       	pop	r14
    1d02:	df 90       	pop	r13
    1d04:	cf 90       	pop	r12
    1d06:	bf 90       	pop	r11
    1d08:	af 90       	pop	r10
    1d0a:	9f 90       	pop	r9
    1d0c:	08 95       	ret

00001d0e <_ZN6Stream5printElh>:
    1d0e:	0f 93       	push	r16
    1d10:	1f 93       	push	r17
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	a1 97       	sbiw	r28, 0x21	; 33
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	8c 01       	movw	r16, r24
    1d28:	22 30       	cpi	r18, 0x02	; 2
    1d2a:	08 f4       	brcc	.+2      	; 0x1d2e <_ZN6Stream5printElh+0x20>
    1d2c:	22 e0       	ldi	r18, 0x02	; 2
    1d2e:	cb 01       	movw	r24, r22
    1d30:	ba 01       	movw	r22, r20
    1d32:	ae 01       	movw	r20, r28
    1d34:	4f 5f       	subi	r20, 0xFF	; 255
    1d36:	5f 4f       	sbci	r21, 0xFF	; 255
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <ltoa>
    1d3e:	bc 01       	movw	r22, r24
    1d40:	c8 01       	movw	r24, r16
    1d42:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN6Stream5printEPKc>
    1d46:	a1 96       	adiw	r28, 0x21	; 33
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	1f 91       	pop	r17
    1d58:	0f 91       	pop	r16
    1d5a:	08 95       	ret

00001d5c <_ZN6Stream5printEl>:
    1d5c:	2a e0       	ldi	r18, 0x0A	; 10
    1d5e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <_ZN6Stream5printElh>
    1d62:	08 95       	ret

00001d64 <_ZN6Stream5printEih>:
    1d64:	ab 01       	movw	r20, r22
    1d66:	66 27       	eor	r22, r22
    1d68:	57 fd       	sbrc	r21, 7
    1d6a:	60 95       	com	r22
    1d6c:	76 2f       	mov	r23, r22
    1d6e:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <_ZN6Stream5printEl>
    1d72:	08 95       	ret

00001d74 <_ZN6Stream5printEi>:
    1d74:	ab 01       	movw	r20, r22
    1d76:	66 27       	eor	r22, r22
    1d78:	57 fd       	sbrc	r21, 7
    1d7a:	60 95       	com	r22
    1d7c:	76 2f       	mov	r23, r22
    1d7e:	2a e0       	ldi	r18, 0x0A	; 10
    1d80:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <_ZN6Stream5printElh>
    1d84:	08 95       	ret

00001d86 <_ZN6Stream5printEa>:
    1d86:	46 2f       	mov	r20, r22
    1d88:	55 27       	eor	r21, r21
    1d8a:	47 fd       	sbrc	r20, 7
    1d8c:	50 95       	com	r21
    1d8e:	65 2f       	mov	r22, r21
    1d90:	75 2f       	mov	r23, r21
    1d92:	2a e0       	ldi	r18, 0x0A	; 10
    1d94:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <_ZN6Stream5printElh>
    1d98:	08 95       	ret

00001d9a <_ZN6Stream5printEah>:
    1d9a:	ef 92       	push	r14
    1d9c:	ff 92       	push	r15
    1d9e:	0f 93       	push	r16
    1da0:	1f 93       	push	r17
    1da2:	e6 2e       	mov	r14, r22
    1da4:	24 2f       	mov	r18, r20
    1da6:	ff 24       	eor	r15, r15
    1da8:	e7 fc       	sbrc	r14, 7
    1daa:	f0 94       	com	r15
    1dac:	0f 2d       	mov	r16, r15
    1dae:	1f 2d       	mov	r17, r15
    1db0:	b8 01       	movw	r22, r16
    1db2:	a7 01       	movw	r20, r14
    1db4:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <_ZN6Stream5printElh>
    1db8:	1f 91       	pop	r17
    1dba:	0f 91       	pop	r16
    1dbc:	ff 90       	pop	r15
    1dbe:	ef 90       	pop	r14
    1dc0:	08 95       	ret

00001dc2 <_ZN6Stream5printEPKc>:
    1dc2:	0f 93       	push	r16
    1dc4:	1f 93       	push	r17
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	18 2f       	mov	r17, r24
    1dcc:	09 2f       	mov	r16, r25
    1dce:	eb 01       	movw	r28, r22
    1dd0:	04 c0       	rjmp	.+8      	; 0x1dda <_ZN6Stream5printEPKc+0x18>
    1dd2:	81 2f       	mov	r24, r17
    1dd4:	90 2f       	mov	r25, r16
    1dd6:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <_ZN6Stream5printEc>
    1dda:	69 91       	ld	r22, Y+
    1ddc:	66 23       	and	r22, r22
    1dde:	c9 f7       	brne	.-14     	; 0x1dd2 <_ZN6Stream5printEPKc+0x10>
    1de0:	81 2f       	mov	r24, r17
    1de2:	90 2f       	mov	r25, r16
    1de4:	df 91       	pop	r29
    1de6:	cf 91       	pop	r28
    1de8:	1f 91       	pop	r17
    1dea:	0f 91       	pop	r16
    1dec:	08 95       	ret

00001dee <_ZN6Stream5printEmh>:
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	a1 97       	sbiw	r28, 0x21	; 33
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	8c 01       	movw	r16, r24
    1e08:	22 30       	cpi	r18, 0x02	; 2
    1e0a:	08 f4       	brcc	.+2      	; 0x1e0e <_ZN6Stream5printEmh+0x20>
    1e0c:	22 e0       	ldi	r18, 0x02	; 2
    1e0e:	cb 01       	movw	r24, r22
    1e10:	ba 01       	movw	r22, r20
    1e12:	ae 01       	movw	r20, r28
    1e14:	4f 5f       	subi	r20, 0xFF	; 255
    1e16:	5f 4f       	sbci	r21, 0xFF	; 255
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <ultoa>
    1e1e:	bc 01       	movw	r22, r24
    1e20:	c8 01       	movw	r24, r16
    1e22:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN6Stream5printEPKc>
    1e26:	a1 96       	adiw	r28, 0x21	; 33
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	1f 91       	pop	r17
    1e38:	0f 91       	pop	r16
    1e3a:	08 95       	ret

00001e3c <_ZN6Stream5printEm>:
    1e3c:	2a e0       	ldi	r18, 0x0A	; 10
    1e3e:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <_ZN6Stream5printEmh>
    1e42:	08 95       	ret

00001e44 <_ZN6Stream5printEjh>:
    1e44:	ab 01       	movw	r20, r22
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	70 e0       	ldi	r23, 0x00	; 0
    1e4a:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN6Stream5printEm>
    1e4e:	08 95       	ret

00001e50 <_ZN6Stream5printEj>:
    1e50:	ab 01       	movw	r20, r22
    1e52:	60 e0       	ldi	r22, 0x00	; 0
    1e54:	70 e0       	ldi	r23, 0x00	; 0
    1e56:	2a e0       	ldi	r18, 0x0A	; 10
    1e58:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <_ZN6Stream5printEmh>
    1e5c:	08 95       	ret

00001e5e <_ZN6Stream5printEh>:
    1e5e:	46 2f       	mov	r20, r22
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    1e62:	60 e0       	ldi	r22, 0x00	; 0
    1e64:	70 e0       	ldi	r23, 0x00	; 0
    1e66:	2a e0       	ldi	r18, 0x0A	; 10
    1e68:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <_ZN6Stream5printEmh>
    1e6c:	08 95       	ret

00001e6e <_ZN6Stream5printEhh>:
    1e6e:	ef 92       	push	r14
    1e70:	ff 92       	push	r15
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	24 2f       	mov	r18, r20
    1e78:	e6 2e       	mov	r14, r22
    1e7a:	ff 24       	eor	r15, r15
    1e7c:	00 e0       	ldi	r16, 0x00	; 0
    1e7e:	10 e0       	ldi	r17, 0x00	; 0
    1e80:	b8 01       	movw	r22, r16
    1e82:	a7 01       	movw	r20, r14
    1e84:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <_ZN6Stream5printEmh>
    1e88:	1f 91       	pop	r17
    1e8a:	0f 91       	pop	r16
    1e8c:	ff 90       	pop	r15
    1e8e:	ef 90       	pop	r14
    1e90:	08 95       	ret

00001e92 <__act_setSpeed>:
    1e92:	1f 93       	push	r17
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	ec 01       	movw	r28, r24
    1e9a:	16 2f       	mov	r17, r22
    1e9c:	61 38       	cpi	r22, 0x81	; 129
    1e9e:	0c f4       	brge	.+2      	; 0x1ea2 <__act_setSpeed+0x10>
    1ea0:	11 e8       	ldi	r17, 0x81	; 129
    1ea2:	e8 81       	ld	r30, Y
    1ea4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ea6:	30 97       	sbiw	r30, 0x00	; 0
    1ea8:	79 f0       	breq	.+30     	; 0x1ec8 <__act_setSpeed+0x36>
    1eaa:	25 91       	lpm	r18, Z+
    1eac:	34 91       	lpm	r19, Z+
    1eae:	21 15       	cp	r18, r1
    1eb0:	31 05       	cpc	r19, r1
    1eb2:	51 f0       	breq	.+20     	; 0x1ec8 <__act_setSpeed+0x36>
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	81 fd       	sbrc	r24, 1
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <__act_setSpeed+0x2c>
    1eba:	61 2f       	mov	r22, r17
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <__act_setSpeed+0x30>
    1ebe:	61 2f       	mov	r22, r17
    1ec0:	61 95       	neg	r22
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	f9 01       	movw	r30, r18
    1ec6:	09 95       	icall
    1ec8:	1a 83       	std	Y+2, r17	; 0x02
    1eca:	df 91       	pop	r29
    1ecc:	cf 91       	pop	r28
    1ece:	1f 91       	pop	r17
    1ed0:	08 95       	ret

00001ed2 <__act_setConnected>:
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	96 2f       	mov	r25, r22
    1ed6:	91 70       	andi	r25, 0x01	; 1
    1ed8:	13 96       	adiw	r26, 0x03	; 3
    1eda:	8c 91       	ld	r24, X
    1edc:	13 97       	sbiw	r26, 0x03	; 3
    1ede:	8e 7f       	andi	r24, 0xFE	; 254
    1ee0:	89 2b       	or	r24, r25
    1ee2:	13 96       	adiw	r26, 0x03	; 3
    1ee4:	8c 93       	st	X, r24
    1ee6:	13 97       	sbiw	r26, 0x03	; 3
    1ee8:	8d 91       	ld	r24, X+
    1eea:	9c 91       	ld	r25, X
    1eec:	11 97       	sbiw	r26, 0x01	; 1
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	51 f0       	breq	.+20     	; 0x1f06 <__act_setConnected+0x34>
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	32 96       	adiw	r30, 0x02	; 2
    1ef6:	25 91       	lpm	r18, Z+
    1ef8:	34 91       	lpm	r19, Z+
    1efa:	21 15       	cp	r18, r1
    1efc:	31 05       	cpc	r19, r1
    1efe:	19 f0       	breq	.+6      	; 0x1f06 <__act_setConnected+0x34>
    1f00:	cd 01       	movw	r24, r26
    1f02:	f9 01       	movw	r30, r18
    1f04:	09 95       	icall
    1f06:	08 95       	ret

00001f08 <interpolate>:
    1f08:	4f 92       	push	r4
    1f0a:	5f 92       	push	r5
    1f0c:	6f 92       	push	r6
    1f0e:	7f 92       	push	r7
    1f10:	8f 92       	push	r8
    1f12:	9f 92       	push	r9
    1f14:	af 92       	push	r10
    1f16:	bf 92       	push	r11
    1f18:	cf 92       	push	r12
    1f1a:	df 92       	push	r13
    1f1c:	ef 92       	push	r14
    1f1e:	ff 92       	push	r15
    1f20:	0f 93       	push	r16
    1f22:	1f 93       	push	r17
    1f24:	2b 01       	movw	r4, r22
    1f26:	3a 01       	movw	r6, r20
    1f28:	59 01       	movw	r10, r18
    1f2a:	78 01       	movw	r14, r16
    1f2c:	e2 1a       	sub	r14, r18
    1f2e:	f3 0a       	sbc	r15, r19
    1f30:	00 27       	eor	r16, r16
    1f32:	f7 fc       	sbrc	r15, 7
    1f34:	00 95       	com	r16
    1f36:	10 2f       	mov	r17, r16
    1f38:	9c 01       	movw	r18, r24
    1f3a:	26 1b       	sub	r18, r22
    1f3c:	37 0b       	sbc	r19, r23
    1f3e:	44 27       	eor	r20, r20
    1f40:	37 fd       	sbrc	r19, 7
    1f42:	40 95       	com	r20
    1f44:	54 2f       	mov	r21, r20
    1f46:	c8 01       	movw	r24, r16
    1f48:	b7 01       	movw	r22, r14
    1f4a:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__mulsi3>
    1f4e:	64 18       	sub	r6, r4
    1f50:	75 08       	sbc	r7, r5
    1f52:	88 24       	eor	r8, r8
    1f54:	77 fc       	sbrc	r7, 7
    1f56:	80 94       	com	r8
    1f58:	98 2c       	mov	r9, r8
    1f5a:	a4 01       	movw	r20, r8
    1f5c:	93 01       	movw	r18, r6
    1f5e:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__divmodsi4>
    1f62:	c9 01       	movw	r24, r18
    1f64:	da 01       	movw	r26, r20
    1f66:	cc 24       	eor	r12, r12
    1f68:	b7 fc       	sbrc	r11, 7
    1f6a:	c0 94       	com	r12
    1f6c:	dc 2c       	mov	r13, r12
    1f6e:	a8 0e       	add	r10, r24
    1f70:	b9 1e       	adc	r11, r25
    1f72:	ca 1e       	adc	r12, r26
    1f74:	db 1e       	adc	r13, r27
    1f76:	c5 01       	movw	r24, r10
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	ff 90       	pop	r15
    1f7e:	ef 90       	pop	r14
    1f80:	df 90       	pop	r13
    1f82:	cf 90       	pop	r12
    1f84:	bf 90       	pop	r11
    1f86:	af 90       	pop	r10
    1f88:	9f 90       	pop	r9
    1f8a:	8f 90       	pop	r8
    1f8c:	7f 90       	pop	r7
    1f8e:	6f 90       	pop	r6
    1f90:	5f 90       	pop	r5
    1f92:	4f 90       	pop	r4
    1f94:	08 95       	ret

00001f96 <interpolateU>:
    1f96:	4f 92       	push	r4
    1f98:	5f 92       	push	r5
    1f9a:	6f 92       	push	r6
    1f9c:	7f 92       	push	r7
    1f9e:	8f 92       	push	r8
    1fa0:	9f 92       	push	r9
    1fa2:	af 92       	push	r10
    1fa4:	bf 92       	push	r11
    1fa6:	cf 92       	push	r12
    1fa8:	df 92       	push	r13
    1faa:	ef 92       	push	r14
    1fac:	ff 92       	push	r15
    1fae:	0f 93       	push	r16
    1fb0:	1f 93       	push	r17
    1fb2:	2b 01       	movw	r4, r22
    1fb4:	5a 01       	movw	r10, r20
    1fb6:	39 01       	movw	r6, r18
    1fb8:	78 01       	movw	r14, r16
    1fba:	e2 1a       	sub	r14, r18
    1fbc:	f3 0a       	sbc	r15, r19
    1fbe:	00 e0       	ldi	r16, 0x00	; 0
    1fc0:	10 e0       	ldi	r17, 0x00	; 0
    1fc2:	9c 01       	movw	r18, r24
    1fc4:	26 1b       	sub	r18, r22
    1fc6:	37 0b       	sbc	r19, r23
    1fc8:	44 27       	eor	r20, r20
    1fca:	37 fd       	sbrc	r19, 7
    1fcc:	40 95       	com	r20
    1fce:	54 2f       	mov	r21, r20
    1fd0:	c8 01       	movw	r24, r16
    1fd2:	b7 01       	movw	r22, r14
    1fd4:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__mulsi3>
    1fd8:	a4 18       	sub	r10, r4
    1fda:	b5 08       	sbc	r11, r5
    1fdc:	cc 24       	eor	r12, r12
    1fde:	b7 fc       	sbrc	r11, 7
    1fe0:	c0 94       	com	r12
    1fe2:	dc 2c       	mov	r13, r12
    1fe4:	a6 01       	movw	r20, r12
    1fe6:	95 01       	movw	r18, r10
    1fe8:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__divmodsi4>
    1fec:	88 24       	eor	r8, r8
    1fee:	99 24       	eor	r9, r9
    1ff0:	26 0d       	add	r18, r6
    1ff2:	37 1d       	adc	r19, r7
    1ff4:	48 1d       	adc	r20, r8
    1ff6:	59 1d       	adc	r21, r9
    1ff8:	c9 01       	movw	r24, r18
    1ffa:	1f 91       	pop	r17
    1ffc:	0f 91       	pop	r16
    1ffe:	ff 90       	pop	r15
    2000:	ef 90       	pop	r14
    2002:	df 90       	pop	r13
    2004:	cf 90       	pop	r12
    2006:	bf 90       	pop	r11
    2008:	af 90       	pop	r10
    200a:	9f 90       	pop	r9
    200c:	8f 90       	pop	r8
    200e:	7f 90       	pop	r7
    2010:	6f 90       	pop	r6
    2012:	5f 90       	pop	r5
    2014:	4f 90       	pop	r4
    2016:	08 95       	ret

00002018 <getError>:
    2018:	80 91 52 04 	lds	r24, 0x0452
    201c:	08 95       	ret

0000201e <setErrorLog>:
    201e:	90 93 56 04 	sts	0x0456, r25
    2022:	80 93 55 04 	sts	0x0455, r24
    2026:	08 95       	ret

00002028 <setError>:
    2028:	1f 93       	push	r17
    202a:	18 2f       	mov	r17, r24
    202c:	80 91 52 04 	lds	r24, 0x0452
    2030:	88 23       	and	r24, r24
    2032:	09 f0       	breq	.+2      	; 0x2036 <setError+0xe>
    2034:	5a c0       	rjmp	.+180    	; 0x20ea <setError+0xc2>
    2036:	10 93 52 04 	sts	0x0452, r17
    203a:	80 91 57 04 	lds	r24, 0x0457
    203e:	90 91 58 04 	lds	r25, 0x0458
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	49 f0       	breq	.+18     	; 0x2058 <setError+0x30>
    2046:	0e 94 77 10 	call	0x20ee	; 0x20ee <pin_is_output>
    204a:	88 23       	and	r24, r24
    204c:	29 f0       	breq	.+10     	; 0x2058 <setError+0x30>
    204e:	87 e5       	ldi	r24, 0x57	; 87
    2050:	94 e0       	ldi	r25, 0x04	; 4
    2052:	60 e0       	ldi	r22, 0x00	; 0
    2054:	0e 94 da 10 	call	0x21b4	; 0x21b4 <LED_set>
    2058:	80 91 62 04 	lds	r24, 0x0462
    205c:	90 91 63 04 	lds	r25, 0x0463
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	09 f4       	brne	.+2      	; 0x2066 <setError+0x3e>
    2064:	42 c0       	rjmp	.+132    	; 0x20ea <setError+0xc2>
    2066:	17 ff       	sbrs	r17, 7
    2068:	12 c0       	rjmp	.+36     	; 0x208e <setError+0x66>
    206a:	00 d0       	rcall	.+0      	; 0x206c <setError+0x44>
    206c:	00 d0       	rcall	.+0      	; 0x206e <setError+0x46>
    206e:	ad b7       	in	r26, 0x3d	; 61
    2070:	be b7       	in	r27, 0x3e	; 62
    2072:	12 96       	adiw	r26, 0x02	; 2
    2074:	9c 93       	st	X, r25
    2076:	8e 93       	st	-X, r24
    2078:	11 97       	sbiw	r26, 0x01	; 1
    207a:	84 e9       	ldi	r24, 0x94	; 148
    207c:	93 e0       	ldi	r25, 0x03	; 3
    207e:	14 96       	adiw	r26, 0x04	; 4
    2080:	9c 93       	st	X, r25
    2082:	8e 93       	st	-X, r24
    2084:	13 97       	sbiw	r26, 0x03	; 3
    2086:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <fprintf_P>
    208a:	11 95       	neg	r17
    208c:	0c c0       	rjmp	.+24     	; 0x20a6 <setError+0x7e>
    208e:	00 d0       	rcall	.+0      	; 0x2090 <setError+0x68>
    2090:	00 d0       	rcall	.+0      	; 0x2092 <setError+0x6a>
    2092:	ed b7       	in	r30, 0x3d	; 61
    2094:	fe b7       	in	r31, 0x3e	; 62
    2096:	92 83       	std	Z+2, r25	; 0x02
    2098:	81 83       	std	Z+1, r24	; 0x01
    209a:	8f e8       	ldi	r24, 0x8F	; 143
    209c:	93 e0       	ldi	r25, 0x03	; 3
    209e:	94 83       	std	Z+4, r25	; 0x04
    20a0:	83 83       	std	Z+3, r24	; 0x03
    20a2:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <fprintf_P>
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <setError+0x80>
    20a8:	ed b7       	in	r30, 0x3d	; 61
    20aa:	fe b7       	in	r31, 0x3e	; 62
    20ac:	31 96       	adiw	r30, 0x01	; 1
    20ae:	80 91 62 04 	lds	r24, 0x0462
    20b2:	90 91 63 04 	lds	r25, 0x0463
    20b6:	ad b7       	in	r26, 0x3d	; 61
    20b8:	be b7       	in	r27, 0x3e	; 62
    20ba:	12 96       	adiw	r26, 0x02	; 2
    20bc:	9c 93       	st	X, r25
    20be:	8e 93       	st	-X, r24
    20c0:	11 97       	sbiw	r26, 0x01	; 1
    20c2:	83 e8       	ldi	r24, 0x83	; 131
    20c4:	93 e0       	ldi	r25, 0x03	; 3
    20c6:	93 83       	std	Z+3, r25	; 0x03
    20c8:	82 83       	std	Z+2, r24	; 0x02
    20ca:	81 2f       	mov	r24, r17
    20cc:	99 27       	eor	r25, r25
    20ce:	87 fd       	sbrc	r24, 7
    20d0:	90 95       	com	r25
    20d2:	95 83       	std	Z+5, r25	; 0x05
    20d4:	84 83       	std	Z+4, r24	; 0x04
    20d6:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <fprintf_P>
    20da:	ed b7       	in	r30, 0x3d	; 61
    20dc:	fe b7       	in	r31, 0x3e	; 62
    20de:	36 96       	adiw	r30, 0x06	; 6
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	fe bf       	out	0x3e, r31	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	ed bf       	out	0x3d, r30	; 61
    20ea:	1f 91       	pop	r17
    20ec:	08 95       	ret

000020ee <pin_is_output>:
    20ee:	9c 01       	movw	r18, r24
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	81 f0       	breq	.+32     	; 0x2114 <pin_is_output+0x26>
    20f4:	fc 01       	movw	r30, r24
    20f6:	85 91       	lpm	r24, Z+
    20f8:	94 91       	lpm	r25, Z+
    20fa:	02 96       	adiw	r24, 0x02	; 2
    20fc:	fc 01       	movw	r30, r24
    20fe:	a5 91       	lpm	r26, Z+
    2100:	b4 91       	lpm	r27, Z+
    2102:	2e 5f       	subi	r18, 0xFE	; 254
    2104:	3f 4f       	sbci	r19, 0xFF	; 255
    2106:	f9 01       	movw	r30, r18
    2108:	94 91       	lpm	r25, Z+
    210a:	8c 91       	ld	r24, X
    210c:	89 23       	and	r24, r25
    210e:	11 f0       	breq	.+4      	; 0x2114 <pin_is_output+0x26>
    2110:	8f ef       	ldi	r24, 0xFF	; 255
    2112:	08 95       	ret
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	08 95       	ret

00002118 <pin_make_input>:
    2118:	cf 93       	push	r28
    211a:	df 93       	push	r29
    211c:	9c 01       	movw	r18, r24
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	f9 f0       	breq	.+62     	; 0x2160 <pin_make_input+0x48>
    2122:	fc 01       	movw	r30, r24
    2124:	45 91       	lpm	r20, Z+
    2126:	54 91       	lpm	r21, Z+
    2128:	ca 01       	movw	r24, r20
    212a:	02 96       	adiw	r24, 0x02	; 2
    212c:	fc 01       	movw	r30, r24
    212e:	a5 91       	lpm	r26, Z+
    2130:	b4 91       	lpm	r27, Z+
    2132:	fa 01       	movw	r30, r20
    2134:	c5 91       	lpm	r28, Z+
    2136:	d4 91       	lpm	r29, Z+
    2138:	2e 5f       	subi	r18, 0xFE	; 254
    213a:	3f 4f       	sbci	r19, 0xFF	; 255
    213c:	f9 01       	movw	r30, r18
    213e:	94 91       	lpm	r25, Z+
    2140:	3f b7       	in	r19, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	8c 91       	ld	r24, X
    2146:	29 2f       	mov	r18, r25
    2148:	20 95       	com	r18
    214a:	82 23       	and	r24, r18
    214c:	8c 93       	st	X, r24
    214e:	66 23       	and	r22, r22
    2150:	19 f0       	breq	.+6      	; 0x2158 <pin_make_input+0x40>
    2152:	88 81       	ld	r24, Y
    2154:	89 2b       	or	r24, r25
    2156:	02 c0       	rjmp	.+4      	; 0x215c <pin_make_input+0x44>
    2158:	88 81       	ld	r24, Y
    215a:	82 23       	and	r24, r18
    215c:	88 83       	st	Y, r24
    215e:	3f bf       	out	0x3f, r19	; 63
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	08 95       	ret

00002166 <pin_make_output>:
    2166:	cf 93       	push	r28
    2168:	df 93       	push	r29
    216a:	9c 01       	movw	r18, r24
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	f9 f0       	breq	.+62     	; 0x21ae <pin_make_output+0x48>
    2170:	fc 01       	movw	r30, r24
    2172:	45 91       	lpm	r20, Z+
    2174:	54 91       	lpm	r21, Z+
    2176:	ca 01       	movw	r24, r20
    2178:	02 96       	adiw	r24, 0x02	; 2
    217a:	fc 01       	movw	r30, r24
    217c:	c5 91       	lpm	r28, Z+
    217e:	d4 91       	lpm	r29, Z+
    2180:	fa 01       	movw	r30, r20
    2182:	a5 91       	lpm	r26, Z+
    2184:	b4 91       	lpm	r27, Z+
    2186:	2e 5f       	subi	r18, 0xFE	; 254
    2188:	3f 4f       	sbci	r19, 0xFF	; 255
    218a:	f9 01       	movw	r30, r18
    218c:	24 91       	lpm	r18, Z+
    218e:	3f b7       	in	r19, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	66 23       	and	r22, r22
    2194:	19 f0       	breq	.+6      	; 0x219c <pin_make_output+0x36>
    2196:	8c 91       	ld	r24, X
    2198:	82 2b       	or	r24, r18
    219a:	04 c0       	rjmp	.+8      	; 0x21a4 <pin_make_output+0x3e>
    219c:	8c 91       	ld	r24, X
    219e:	92 2f       	mov	r25, r18
    21a0:	90 95       	com	r25
    21a2:	89 23       	and	r24, r25
    21a4:	8c 93       	st	X, r24
    21a6:	88 81       	ld	r24, Y
    21a8:	82 2b       	or	r24, r18
    21aa:	88 83       	st	Y, r24
    21ac:	3f bf       	out	0x3f, r19	; 63
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	08 95       	ret

000021b4 <LED_set>:
    21b4:	1f 93       	push	r17
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	ec 01       	movw	r28, r24
    21bc:	16 2f       	mov	r17, r22
    21be:	88 81       	ld	r24, Y
    21c0:	99 81       	ldd	r25, Y+1	; 0x01
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	a9 f0       	breq	.+42     	; 0x21f0 <LED_set+0x3c>
    21c6:	3a 81       	ldd	r19, Y+2	; 0x02
    21c8:	30 fd       	sbrc	r19, 0
    21ca:	05 c0       	rjmp	.+10     	; 0x21d6 <LED_set+0x22>
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	66 23       	and	r22, r22
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <LED_set+0x20>
    21d2:	21 e0       	ldi	r18, 0x01	; 1
    21d4:	12 2f       	mov	r17, r18
    21d6:	31 fd       	sbrc	r19, 1
    21d8:	06 c0       	rjmp	.+12     	; 0x21e6 <LED_set+0x32>
    21da:	61 2f       	mov	r22, r17
    21dc:	0e 94 b3 10 	call	0x2166	; 0x2166 <pin_make_output>
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	82 60       	ori	r24, 0x02	; 2
    21e4:	8a 83       	std	Y+2, r24	; 0x02
    21e6:	88 81       	ld	r24, Y
    21e8:	99 81       	ldd	r25, Y+1	; 0x01
    21ea:	61 2f       	mov	r22, r17
    21ec:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <pin_set>
    21f0:	df 91       	pop	r29
    21f2:	cf 91       	pop	r28
    21f4:	1f 91       	pop	r17
    21f6:	08 95       	ret

000021f8 <main>:
    21f8:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <registerLED>
    21fc:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__initTimers>
    2200:	0e 94 ce 0b 	call	0x179c	; 0x179c <__clockInit>
    2204:	78 94       	sei
    2206:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <sysInitHardware>
    220a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <appInitHardware>
    220e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <clockGetus>
    2212:	60 93 39 04 	sts	0x0439, r22
    2216:	70 93 3a 04 	sts	0x043A, r23
    221a:	80 93 3b 04 	sts	0x043B, r24
    221e:	90 93 3c 04 	sts	0x043C, r25
    2222:	0e 94 4e 04 	call	0x89c	; 0x89c <appInitSoftware>
    2226:	60 93 3d 04 	sts	0x043D, r22
    222a:	70 93 3e 04 	sts	0x043E, r23
    222e:	80 93 3f 04 	sts	0x043F, r24
    2232:	90 93 40 04 	sts	0x0440, r25
    2236:	78 94       	sei
    2238:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <breathe>
    223c:	80 91 3d 04 	lds	r24, 0x043D
    2240:	90 91 3e 04 	lds	r25, 0x043E
    2244:	a0 91 3f 04 	lds	r26, 0x043F
    2248:	b0 91 40 04 	lds	r27, 0x0440
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	a1 05       	cpc	r26, r1
    2250:	b1 05       	cpc	r27, r1
    2252:	19 f4       	brne	.+6      	; 0x225a <__stack+0x5b>
    2254:	16 c0       	rjmp	.+44     	; 0x2282 <__stack+0x83>
    2256:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <breathe>
    225a:	60 91 39 04 	lds	r22, 0x0439
    225e:	70 91 3a 04 	lds	r23, 0x043A
    2262:	80 91 3b 04 	lds	r24, 0x043B
    2266:	90 91 3c 04 	lds	r25, 0x043C
    226a:	20 91 3d 04 	lds	r18, 0x043D
    226e:	30 91 3e 04 	lds	r19, 0x043E
    2272:	40 91 3f 04 	lds	r20, 0x043F
    2276:	50 91 40 04 	lds	r21, 0x0440
    227a:	0e 94 76 16 	call	0x2cec	; 0x2cec <clockHasElapsed>
    227e:	88 23       	and	r24, r24
    2280:	51 f3       	breq	.-44     	; 0x2256 <__stack+0x57>
    2282:	0e 94 b1 0b 	call	0x1762	; 0x1762 <clockGetus>
    2286:	9b 01       	movw	r18, r22
    2288:	ac 01       	movw	r20, r24
    228a:	60 93 39 04 	sts	0x0439, r22
    228e:	70 93 3a 04 	sts	0x043A, r23
    2292:	80 93 3b 04 	sts	0x043B, r24
    2296:	90 93 3c 04 	sts	0x043C, r25
    229a:	60 91 35 04 	lds	r22, 0x0435
    229e:	70 91 36 04 	lds	r23, 0x0436
    22a2:	80 91 37 04 	lds	r24, 0x0437
    22a6:	90 91 38 04 	lds	r25, 0x0438
    22aa:	6f 5f       	subi	r22, 0xFF	; 255
    22ac:	7f 4f       	sbci	r23, 0xFF	; 255
    22ae:	8f 4f       	sbci	r24, 0xFF	; 255
    22b0:	9f 4f       	sbci	r25, 0xFF	; 255
    22b2:	60 93 35 04 	sts	0x0435, r22
    22b6:	70 93 36 04 	sts	0x0436, r23
    22ba:	80 93 37 04 	sts	0x0437, r24
    22be:	90 93 38 04 	sts	0x0438, r25
    22c2:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <appControl>
    22c6:	af cf       	rjmp	.-162    	; 0x2226 <__stack+0x27>

000022c8 <marqueeSendByte>:
    22c8:	cf 92       	push	r12
    22ca:	df 92       	push	r13
    22cc:	ef 92       	push	r14
    22ce:	ff 92       	push	r15
    22d0:	0f 93       	push	r16
    22d2:	1f 93       	push	r17
    22d4:	cf 93       	push	r28
    22d6:	df 93       	push	r29
    22d8:	ec 01       	movw	r28, r24
    22da:	d6 2e       	mov	r13, r22
    22dc:	8c 81       	ldd	r24, Y+4	; 0x04
    22de:	9d 81       	ldd	r25, Y+5	; 0x05
    22e0:	89 2b       	or	r24, r25
    22e2:	a9 f5       	brne	.+106    	; 0x234e <marqueeSendByte+0x86>
    22e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    22e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    22e8:	01 96       	adiw	r24, 0x01	; 1
    22ea:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <malloc>
    22ee:	9d 83       	std	Y+5, r25	; 0x05
    22f0:	8c 83       	std	Y+4, r24	; 0x04
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	61 f1       	breq	.+88     	; 0x234e <marqueeSendByte+0x86>
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	07 c0       	rjmp	.+14     	; 0x230a <marqueeSendByte+0x42>
    22fc:	ec 81       	ldd	r30, Y+4	; 0x04
    22fe:	fd 81       	ldd	r31, Y+5	; 0x05
    2300:	e2 0f       	add	r30, r18
    2302:	f3 1f       	adc	r31, r19
    2304:	10 82       	st	Z, r1
    2306:	2f 5f       	subi	r18, 0xFF	; 255
    2308:	3f 4f       	sbci	r19, 0xFF	; 255
    230a:	8a 85       	ldd	r24, Y+10	; 0x0a
    230c:	9b 85       	ldd	r25, Y+11	; 0x0b
    230e:	82 17       	cp	r24, r18
    2310:	93 07       	cpc	r25, r19
    2312:	a0 f7       	brcc	.-24     	; 0x22fc <marqueeSendByte+0x34>
    2314:	19 86       	std	Y+9, r1	; 0x09
    2316:	18 86       	std	Y+8, r1	; 0x08
    2318:	1f 82       	std	Y+7, r1	; 0x07
    231a:	1e 82       	std	Y+6, r1	; 0x06
    231c:	8c 89       	ldd	r24, Y+20	; 0x14
    231e:	8e 7f       	andi	r24, 0xFE	; 254
    2320:	8c 8b       	std	Y+20, r24	; 0x14
    2322:	00 e0       	ldi	r16, 0x00	; 0
    2324:	10 e0       	ldi	r17, 0x00	; 0
    2326:	0e c0       	rjmp	.+28     	; 0x2344 <marqueeSendByte+0x7c>
    2328:	c8 01       	movw	r24, r16
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	e8 81       	ld	r30, Y
    2330:	f9 81       	ldd	r31, Y+1	; 0x01
    2332:	e8 0f       	add	r30, r24
    2334:	f9 1f       	adc	r31, r25
    2336:	85 91       	lpm	r24, Z+
    2338:	94 91       	lpm	r25, Z+
    233a:	60 e2       	ldi	r22, 0x20	; 32
    233c:	0e 94 c1 12 	call	0x2582	; 0x2582 <segled_put_char>
    2340:	0f 5f       	subi	r16, 0xFF	; 255
    2342:	1f 4f       	sbci	r17, 0xFF	; 255
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	9b 81       	ldd	r25, Y+3	; 0x03
    2348:	08 17       	cp	r16, r24
    234a:	19 07       	cpc	r17, r25
    234c:	68 f3       	brcs	.-38     	; 0x2328 <marqueeSendByte+0x60>
    234e:	ec 81       	ldd	r30, Y+4	; 0x04
    2350:	fd 81       	ldd	r31, Y+5	; 0x05
    2352:	30 97       	sbiw	r30, 0x00	; 0
    2354:	09 f4       	brne	.+2      	; 0x2358 <marqueeSendByte+0x90>
    2356:	3e c0       	rjmp	.+124    	; 0x23d4 <marqueeSendByte+0x10c>
    2358:	8a e0       	ldi	r24, 0x0A	; 10
    235a:	d8 16       	cp	r13, r24
    235c:	19 f5       	brne	.+70     	; 0x23a4 <marqueeSendByte+0xdc>
    235e:	88 85       	ldd	r24, Y+8	; 0x08
    2360:	99 85       	ldd	r25, Y+9	; 0x09
    2362:	e8 0f       	add	r30, r24
    2364:	f9 1f       	adc	r31, r25
    2366:	10 82       	st	Z, r1
    2368:	19 86       	std	Y+9, r1	; 0x09
    236a:	18 86       	std	Y+8, r1	; 0x08
    236c:	cf b6       	in	r12, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	8c 89       	ldd	r24, Y+20	; 0x14
    2372:	80 fd       	sbrc	r24, 0
    2374:	15 c0       	rjmp	.+42     	; 0x23a0 <marqueeSendByte+0xd8>
    2376:	8c 89       	ldd	r24, Y+20	; 0x14
    2378:	81 60       	ori	r24, 0x01	; 1
    237a:	8c 8b       	std	Y+20, r24	; 0x14
    237c:	8c 89       	ldd	r24, Y+20	; 0x14
    237e:	8d 7f       	andi	r24, 0xFD	; 253
    2380:	8c 8b       	std	Y+20, r24	; 0x14
    2382:	1f 82       	std	Y+7, r1	; 0x07
    2384:	1e 82       	std	Y+6, r1	; 0x06
    2386:	0e 94 b1 0b 	call	0x1762	; 0x1762 <clockGetus>
    238a:	9b 01       	movw	r18, r22
    238c:	ac 01       	movw	r20, r24
    238e:	ec 84       	ldd	r14, Y+12	; 0x0c
    2390:	fd 84       	ldd	r15, Y+13	; 0x0d
    2392:	0e 85       	ldd	r16, Y+14	; 0x0e
    2394:	1f 85       	ldd	r17, Y+15	; 0x0f
    2396:	84 ef       	ldi	r24, 0xF4	; 244
    2398:	91 e1       	ldi	r25, 0x11	; 17
    239a:	be 01       	movw	r22, r28
    239c:	0e 94 32 18 	call	0x3064	; 0x3064 <scheduleJob>
    23a0:	cf be       	out	0x3f, r12	; 63
    23a2:	18 c0       	rjmp	.+48     	; 0x23d4 <marqueeSendByte+0x10c>
    23a4:	8d e0       	ldi	r24, 0x0D	; 13
    23a6:	d8 16       	cp	r13, r24
    23a8:	a9 f0       	breq	.+42     	; 0x23d4 <marqueeSendByte+0x10c>
    23aa:	28 85       	ldd	r18, Y+8	; 0x08
    23ac:	39 85       	ldd	r19, Y+9	; 0x09
    23ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    23b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    23b2:	28 17       	cp	r18, r24
    23b4:	39 07       	cpc	r19, r25
    23b6:	70 f4       	brcc	.+28     	; 0x23d4 <marqueeSendByte+0x10c>
    23b8:	e2 0f       	add	r30, r18
    23ba:	f3 1f       	adc	r31, r19
    23bc:	2f b7       	in	r18, 0x3f	; 63
    23be:	f8 94       	cli
    23c0:	d0 82       	st	Z, r13
    23c2:	11 82       	std	Z+1, r1	; 0x01
    23c4:	88 85       	ldd	r24, Y+8	; 0x08
    23c6:	99 85       	ldd	r25, Y+9	; 0x09
    23c8:	01 96       	adiw	r24, 0x01	; 1
    23ca:	99 87       	std	Y+9, r25	; 0x09
    23cc:	88 87       	std	Y+8, r24	; 0x08
    23ce:	1f 82       	std	Y+7, r1	; 0x07
    23d0:	1e 82       	std	Y+6, r1	; 0x06
    23d2:	2f bf       	out	0x3f, r18	; 63
    23d4:	8d 2d       	mov	r24, r13
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	1f 91       	pop	r17
    23dc:	0f 91       	pop	r16
    23de:	ff 90       	pop	r15
    23e0:	ef 90       	pop	r14
    23e2:	df 90       	pop	r13
    23e4:	cf 90       	pop	r12
    23e6:	08 95       	ret

000023e8 <marqueeUpdate>:
    23e8:	2f 92       	push	r2
    23ea:	3f 92       	push	r3
    23ec:	4f 92       	push	r4
    23ee:	5f 92       	push	r5
    23f0:	6f 92       	push	r6
    23f2:	7f 92       	push	r7
    23f4:	8f 92       	push	r8
    23f6:	9f 92       	push	r9
    23f8:	af 92       	push	r10
    23fa:	bf 92       	push	r11
    23fc:	cf 92       	push	r12
    23fe:	df 92       	push	r13
    2400:	ef 92       	push	r14
    2402:	ff 92       	push	r15
    2404:	0f 93       	push	r16
    2406:	1f 93       	push	r17
    2408:	cf 93       	push	r28
    240a:	df 93       	push	r29
    240c:	38 2e       	mov	r3, r24
    240e:	29 2e       	mov	r2, r25
    2410:	2a 01       	movw	r4, r20
    2412:	3b 01       	movw	r6, r22
    2414:	c8 2f       	mov	r28, r24
    2416:	d9 2f       	mov	r29, r25
    2418:	0c 81       	ldd	r16, Y+4	; 0x04
    241a:	1d 81       	ldd	r17, Y+5	; 0x05
    241c:	8e 81       	ldd	r24, Y+6	; 0x06
    241e:	9f 81       	ldd	r25, Y+7	; 0x07
    2420:	08 0f       	add	r16, r24
    2422:	19 1f       	adc	r17, r25
    2424:	f8 01       	movw	r30, r16
    2426:	80 80       	ld	r8, Z
    2428:	8c 89       	ldd	r24, Y+20	; 0x14
    242a:	86 95       	lsr	r24
    242c:	81 70       	andi	r24, 0x01	; 1
    242e:	88 20       	and	r8, r8
    2430:	29 f4       	brne	.+10     	; 0x243c <marqueeUpdate+0x54>
    2432:	a8 88       	ldd	r10, Y+16	; 0x10
    2434:	b9 88       	ldd	r11, Y+17	; 0x11
    2436:	ca 88       	ldd	r12, Y+18	; 0x12
    2438:	db 88       	ldd	r13, Y+19	; 0x13
    243a:	04 c0       	rjmp	.+8      	; 0x2444 <marqueeUpdate+0x5c>
    243c:	ac 84       	ldd	r10, Y+12	; 0x0c
    243e:	bd 84       	ldd	r11, Y+13	; 0x0d
    2440:	ce 84       	ldd	r12, Y+14	; 0x0e
    2442:	df 84       	ldd	r13, Y+15	; 0x0f
    2444:	88 23       	and	r24, r24
    2446:	d1 f4       	brne	.+52     	; 0x247c <marqueeUpdate+0x94>
    2448:	88 20       	and	r8, r8
    244a:	c1 f0       	breq	.+48     	; 0x247c <marqueeUpdate+0x94>
    244c:	f8 01       	movw	r30, r16
    244e:	32 91       	ld	r19, -Z
    2450:	8f 01       	movw	r16, r30
    2452:	0f 5f       	subi	r16, 0xFF	; 255
    2454:	1f 4f       	sbci	r17, 0xFF	; 255
    2456:	4a 81       	ldd	r20, Y+2	; 0x02
    2458:	5b 81       	ldd	r21, Y+3	; 0x03
    245a:	f8 01       	movw	r30, r16
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	07 c0       	rjmp	.+14     	; 0x2470 <marqueeUpdate+0x88>
    2462:	20 81       	ld	r18, Z
    2464:	22 23       	and	r18, r18
    2466:	51 f0       	breq	.+20     	; 0x247c <marqueeUpdate+0x94>
    2468:	23 17       	cp	r18, r19
    246a:	41 f4       	brne	.+16     	; 0x247c <marqueeUpdate+0x94>
    246c:	31 96       	adiw	r30, 0x01	; 1
    246e:	01 96       	adiw	r24, 0x01	; 1
    2470:	84 17       	cp	r24, r20
    2472:	95 07       	cpc	r25, r21
    2474:	b0 f3       	brcs	.-20     	; 0x2462 <marqueeUpdate+0x7a>
    2476:	99 24       	eor	r9, r9
    2478:	9a 94       	dec	r9
    247a:	01 c0       	rjmp	.+2      	; 0x247e <marqueeUpdate+0x96>
    247c:	99 24       	eor	r9, r9
    247e:	8c 89       	ldd	r24, Y+20	; 0x14
    2480:	86 95       	lsr	r24
    2482:	81 70       	andi	r24, 0x01	; 1
    2484:	29 2d       	mov	r18, r9
    2486:	33 27       	eor	r19, r19
    2488:	27 fd       	sbrc	r18, 7
    248a:	30 95       	com	r19
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	28 17       	cp	r18, r24
    2490:	39 07       	cpc	r19, r25
    2492:	c1 f0       	breq	.+48     	; 0x24c4 <marqueeUpdate+0xdc>
    2494:	a6 01       	movw	r20, r12
    2496:	95 01       	movw	r18, r10
    2498:	62 e0       	ldi	r22, 0x02	; 2
    249a:	56 95       	lsr	r21
    249c:	47 95       	ror	r20
    249e:	37 95       	ror	r19
    24a0:	27 95       	ror	r18
    24a2:	6a 95       	dec	r22
    24a4:	d1 f7       	brne	.-12     	; 0x249a <marqueeUpdate+0xb2>
    24a6:	99 2d       	mov	r25, r9
    24a8:	92 70       	andi	r25, 0x02	; 2
    24aa:	8c 89       	ldd	r24, Y+20	; 0x14
    24ac:	8d 7f       	andi	r24, 0xFD	; 253
    24ae:	89 2b       	or	r24, r25
    24b0:	8c 8b       	std	Y+20, r24	; 0x14
    24b2:	99 20       	and	r9, r9
    24b4:	19 f0       	breq	.+6      	; 0x24bc <marqueeUpdate+0xd4>
    24b6:	59 01       	movw	r10, r18
    24b8:	6a 01       	movw	r12, r20
    24ba:	04 c0       	rjmp	.+8      	; 0x24c4 <marqueeUpdate+0xdc>
    24bc:	a2 1a       	sub	r10, r18
    24be:	b3 0a       	sbc	r11, r19
    24c0:	c4 0a       	sbc	r12, r20
    24c2:	d5 0a       	sbc	r13, r21
    24c4:	ee 24       	eor	r14, r14
    24c6:	ff 24       	eor	r15, r15
    24c8:	18 c0       	rjmp	.+48     	; 0x24fa <marqueeUpdate+0x112>
    24ca:	c7 01       	movw	r24, r14
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	e8 81       	ld	r30, Y
    24d2:	f9 81       	ldd	r31, Y+1	; 0x01
    24d4:	e8 0f       	add	r30, r24
    24d6:	f9 1f       	adc	r31, r25
    24d8:	85 91       	lpm	r24, Z+
    24da:	94 91       	lpm	r25, Z+
    24dc:	99 20       	and	r9, r9
    24de:	39 f4       	brne	.+14     	; 0x24ee <marqueeUpdate+0x106>
    24e0:	f8 01       	movw	r30, r16
    24e2:	60 81       	ld	r22, Z
    24e4:	66 23       	and	r22, r22
    24e6:	19 f0       	breq	.+6      	; 0x24ee <marqueeUpdate+0x106>
    24e8:	0f 5f       	subi	r16, 0xFF	; 255
    24ea:	1f 4f       	sbci	r17, 0xFF	; 255
    24ec:	01 c0       	rjmp	.+2      	; 0x24f0 <marqueeUpdate+0x108>
    24ee:	60 e2       	ldi	r22, 0x20	; 32
    24f0:	0e 94 c1 12 	call	0x2582	; 0x2582 <segled_put_char>
    24f4:	08 94       	sec
    24f6:	e1 1c       	adc	r14, r1
    24f8:	f1 1c       	adc	r15, r1
    24fa:	8a 81       	ldd	r24, Y+2	; 0x02
    24fc:	9b 81       	ldd	r25, Y+3	; 0x03
    24fe:	e8 16       	cp	r14, r24
    2500:	f9 06       	cpc	r15, r25
    2502:	18 f3       	brcs	.-58     	; 0x24ca <marqueeUpdate+0xe2>
    2504:	88 20       	and	r8, r8
    2506:	b1 f4       	brne	.+44     	; 0x2534 <marqueeUpdate+0x14c>
    2508:	1f 82       	std	Y+7, r1	; 0x07
    250a:	1e 82       	std	Y+6, r1	; 0x06
    250c:	88 89       	ldd	r24, Y+16	; 0x10
    250e:	99 89       	ldd	r25, Y+17	; 0x11
    2510:	aa 89       	ldd	r26, Y+18	; 0x12
    2512:	bb 89       	ldd	r27, Y+19	; 0x13
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	a1 05       	cpc	r26, r1
    2518:	b1 05       	cpc	r27, r1
    251a:	29 f0       	breq	.+10     	; 0x2526 <marqueeUpdate+0x13e>
    251c:	ec 81       	ldd	r30, Y+4	; 0x04
    251e:	fd 81       	ldd	r31, Y+5	; 0x05
    2520:	80 81       	ld	r24, Z
    2522:	88 23       	and	r24, r24
    2524:	19 f4       	brne	.+6      	; 0x252c <marqueeUpdate+0x144>
    2526:	8c 89       	ldd	r24, Y+20	; 0x14
    2528:	8e 7f       	andi	r24, 0xFE	; 254
    252a:	02 c0       	rjmp	.+4      	; 0x2530 <marqueeUpdate+0x148>
    252c:	8c 89       	ldd	r24, Y+20	; 0x14
    252e:	8d 7f       	andi	r24, 0xFD	; 253
    2530:	8c 8b       	std	Y+20, r24	; 0x14
    2532:	07 c0       	rjmp	.+14     	; 0x2542 <marqueeUpdate+0x15a>
    2534:	99 20       	and	r9, r9
    2536:	29 f4       	brne	.+10     	; 0x2542 <marqueeUpdate+0x15a>
    2538:	8e 81       	ldd	r24, Y+6	; 0x06
    253a:	9f 81       	ldd	r25, Y+7	; 0x07
    253c:	01 96       	adiw	r24, 0x01	; 1
    253e:	9f 83       	std	Y+7, r25	; 0x07
    2540:	8e 83       	std	Y+6, r24	; 0x06
    2542:	8c 89       	ldd	r24, Y+20	; 0x14
    2544:	80 ff       	sbrs	r24, 0
    2546:	0a c0       	rjmp	.+20     	; 0x255c <marqueeUpdate+0x174>
    2548:	84 ef       	ldi	r24, 0xF4	; 244
    254a:	91 e1       	ldi	r25, 0x11	; 17
    254c:	63 2d       	mov	r22, r3
    254e:	72 2d       	mov	r23, r2
    2550:	a3 01       	movw	r20, r6
    2552:	92 01       	movw	r18, r4
    2554:	86 01       	movw	r16, r12
    2556:	75 01       	movw	r14, r10
    2558:	0e 94 32 18 	call	0x3064	; 0x3064 <scheduleJob>
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	1f 91       	pop	r17
    2562:	0f 91       	pop	r16
    2564:	ff 90       	pop	r15
    2566:	ef 90       	pop	r14
    2568:	df 90       	pop	r13
    256a:	cf 90       	pop	r12
    256c:	bf 90       	pop	r11
    256e:	af 90       	pop	r10
    2570:	9f 90       	pop	r9
    2572:	8f 90       	pop	r8
    2574:	7f 90       	pop	r7
    2576:	6f 90       	pop	r6
    2578:	5f 90       	pop	r5
    257a:	4f 90       	pop	r4
    257c:	3f 90       	pop	r3
    257e:	2f 90       	pop	r2
    2580:	08 95       	ret

00002582 <segled_put_char>:
    2582:	ef 92       	push	r14
    2584:	ff 92       	push	r15
    2586:	0f 93       	push	r16
    2588:	1f 93       	push	r17
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	8c 01       	movw	r16, r24
    2590:	e6 2e       	mov	r14, r22
    2592:	fc 01       	movw	r30, r24
    2594:	80 89       	ldd	r24, Z+16	; 0x10
    2596:	81 fd       	sbrc	r24, 1
    2598:	12 c0       	rjmp	.+36     	; 0x25be <segled_put_char+0x3c>
    259a:	c0 e0       	ldi	r28, 0x00	; 0
    259c:	d0 e0       	ldi	r29, 0x00	; 0
    259e:	f8 01       	movw	r30, r16
    25a0:	ec 0f       	add	r30, r28
    25a2:	fd 1f       	adc	r31, r29
    25a4:	80 81       	ld	r24, Z
    25a6:	91 81       	ldd	r25, Z+1	; 0x01
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	0e 94 b3 10 	call	0x2166	; 0x2166 <pin_make_output>
    25ae:	22 96       	adiw	r28, 0x02	; 2
    25b0:	c0 31       	cpi	r28, 0x10	; 16
    25b2:	d1 05       	cpc	r29, r1
    25b4:	a1 f7       	brne	.-24     	; 0x259e <segled_put_char+0x1c>
    25b6:	f8 01       	movw	r30, r16
    25b8:	80 89       	ldd	r24, Z+16	; 0x10
    25ba:	82 60       	ori	r24, 0x02	; 2
    25bc:	80 8b       	std	Z+16, r24	; 0x10
    25be:	8e 2d       	mov	r24, r14
    25c0:	0e 94 47 13 	call	0x268e	; 0x268e <segled8_get_mask>
    25c4:	f8 2e       	mov	r15, r24
    25c6:	80 ff       	sbrs	r24, 0
    25c8:	07 c0       	rjmp	.+14     	; 0x25d8 <segled_put_char+0x56>
    25ca:	f8 01       	movw	r30, r16
    25cc:	86 85       	ldd	r24, Z+14	; 0x0e
    25ce:	97 85       	ldd	r25, Z+15	; 0x0f
    25d0:	89 2b       	or	r24, r25
    25d2:	11 f4       	brne	.+4      	; 0x25d8 <segled_put_char+0x56>
    25d4:	80 e1       	ldi	r24, 0x10	; 16
    25d6:	f8 2e       	mov	r15, r24
    25d8:	f8 01       	movw	r30, r16
    25da:	80 89       	ldd	r24, Z+16	; 0x10
    25dc:	80 ff       	sbrs	r24, 0
    25de:	f0 94       	com	r15
    25e0:	c0 e0       	ldi	r28, 0x00	; 0
    25e2:	d0 e0       	ldi	r29, 0x00	; 0
    25e4:	f8 01       	movw	r30, r16
    25e6:	ec 0f       	add	r30, r28
    25e8:	fd 1f       	adc	r31, r29
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
    25ee:	f7 fe       	sbrs	r15, 7
    25f0:	03 c0       	rjmp	.+6      	; 0x25f8 <segled_put_char+0x76>
    25f2:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <pin_high>
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <segled_put_char+0x7a>
    25f8:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <pin_low>
    25fc:	22 96       	adiw	r28, 0x02	; 2
    25fe:	c0 31       	cpi	r28, 0x10	; 16
    2600:	d1 05       	cpc	r29, r1
    2602:	11 f0       	breq	.+4      	; 0x2608 <segled_put_char+0x86>
    2604:	ff 0c       	add	r15, r15
    2606:	ee cf       	rjmp	.-36     	; 0x25e4 <segled_put_char+0x62>
    2608:	8e 2d       	mov	r24, r14
    260a:	df 91       	pop	r29
    260c:	cf 91       	pop	r28
    260e:	1f 91       	pop	r17
    2610:	0f 91       	pop	r16
    2612:	ff 90       	pop	r15
    2614:	ef 90       	pop	r14
    2616:	08 95       	ret

00002618 <segled_set>:
    2618:	ef 92       	push	r14
    261a:	ff 92       	push	r15
    261c:	0f 93       	push	r16
    261e:	1f 93       	push	r17
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	8c 01       	movw	r16, r24
    2626:	e6 2e       	mov	r14, r22
    2628:	f4 2e       	mov	r15, r20
    262a:	fc 01       	movw	r30, r24
    262c:	80 89       	ldd	r24, Z+16	; 0x10
    262e:	81 fd       	sbrc	r24, 1
    2630:	12 c0       	rjmp	.+36     	; 0x2656 <segled_set+0x3e>
    2632:	c0 e0       	ldi	r28, 0x00	; 0
    2634:	d0 e0       	ldi	r29, 0x00	; 0
    2636:	f8 01       	movw	r30, r16
    2638:	ec 0f       	add	r30, r28
    263a:	fd 1f       	adc	r31, r29
    263c:	80 81       	ld	r24, Z
    263e:	91 81       	ldd	r25, Z+1	; 0x01
    2640:	60 e0       	ldi	r22, 0x00	; 0
    2642:	0e 94 b3 10 	call	0x2166	; 0x2166 <pin_make_output>
    2646:	22 96       	adiw	r28, 0x02	; 2
    2648:	c0 31       	cpi	r28, 0x10	; 16
    264a:	d1 05       	cpc	r29, r1
    264c:	a1 f7       	brne	.-24     	; 0x2636 <segled_set+0x1e>
    264e:	f8 01       	movw	r30, r16
    2650:	80 89       	ldd	r24, Z+16	; 0x10
    2652:	82 60       	ori	r24, 0x02	; 2
    2654:	80 8b       	std	Z+16, r24	; 0x10
    2656:	f8 01       	movw	r30, r16
    2658:	80 89       	ldd	r24, Z+16	; 0x10
    265a:	80 fd       	sbrc	r24, 0
    265c:	06 c0       	rjmp	.+12     	; 0x266a <segled_set+0x52>
    265e:	ff 20       	and	r15, r15
    2660:	19 f4       	brne	.+6      	; 0x2668 <segled_set+0x50>
    2662:	ff 24       	eor	r15, r15
    2664:	fa 94       	dec	r15
    2666:	01 c0       	rjmp	.+2      	; 0x266a <segled_set+0x52>
    2668:	ff 24       	eor	r15, r15
    266a:	ee 2d       	mov	r30, r14
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	ee 0f       	add	r30, r30
    2670:	ff 1f       	adc	r31, r31
    2672:	e0 0f       	add	r30, r16
    2674:	f1 1f       	adc	r31, r17
    2676:	80 81       	ld	r24, Z
    2678:	91 81       	ldd	r25, Z+1	; 0x01
    267a:	6f 2d       	mov	r22, r15
    267c:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <pin_set>
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	1f 91       	pop	r17
    2686:	0f 91       	pop	r16
    2688:	ff 90       	pop	r15
    268a:	ef 90       	pop	r14
    268c:	08 95       	ret

0000268e <segled8_get_mask>:
    268e:	e8 2f       	mov	r30, r24
    2690:	81 54       	subi	r24, 0x41	; 65
    2692:	8a 31       	cpi	r24, 0x1A	; 26
    2694:	28 f4       	brcc	.+10     	; 0x26a0 <segled8_get_mask+0x12>
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	e3 5a       	subi	r30, 0xA3	; 163
    269a:	fc 4f       	sbci	r31, 0xFC	; 252
    269c:	84 91       	lpm	r24, Z+
    269e:	08 95       	ret
    26a0:	8e 2f       	mov	r24, r30
    26a2:	81 56       	subi	r24, 0x61	; 97
    26a4:	8a 31       	cpi	r24, 0x1A	; 26
    26a6:	28 f4       	brcc	.+10     	; 0x26b2 <segled8_get_mask+0x24>
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	e3 5c       	subi	r30, 0xC3	; 195
    26ac:	fc 4f       	sbci	r31, 0xFC	; 252
    26ae:	84 91       	lpm	r24, Z+
    26b0:	08 95       	ret
    26b2:	8e 2f       	mov	r24, r30
    26b4:	80 53       	subi	r24, 0x30	; 48
    26b6:	8a 30       	cpi	r24, 0x0A	; 10
    26b8:	28 f4       	brcc	.+10     	; 0x26c4 <segled8_get_mask+0x36>
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	e8 57       	subi	r30, 0x78	; 120
    26be:	fc 4f       	sbci	r31, 0xFC	; 252
    26c0:	84 91       	lpm	r24, Z+
    26c2:	08 95       	ret
    26c4:	ea 30       	cpi	r30, 0x0A	; 10
    26c6:	28 f4       	brcc	.+10     	; 0x26d2 <segled8_get_mask+0x44>
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	e8 54       	subi	r30, 0x48	; 72
    26cc:	fc 4f       	sbci	r31, 0xFC	; 252
    26ce:	84 91       	lpm	r24, Z+
    26d0:	08 95       	ret
    26d2:	ed 32       	cpi	r30, 0x2D	; 45
    26d4:	11 f4       	brne	.+4      	; 0x26da <segled8_get_mask+0x4c>
    26d6:	82 e0       	ldi	r24, 0x02	; 2
    26d8:	08 95       	ret
    26da:	eb 35       	cpi	r30, 0x5B	; 91
    26dc:	79 f0       	breq	.+30     	; 0x26fc <segled8_get_mask+0x6e>
    26de:	eb 37       	cpi	r30, 0x7B	; 123
    26e0:	69 f0       	breq	.+26     	; 0x26fc <segled8_get_mask+0x6e>
    26e2:	e8 32       	cpi	r30, 0x28	; 40
    26e4:	59 f0       	breq	.+22     	; 0x26fc <segled8_get_mask+0x6e>
    26e6:	ed 35       	cpi	r30, 0x5D	; 93
    26e8:	59 f0       	breq	.+22     	; 0x2700 <segled8_get_mask+0x72>
    26ea:	ed 37       	cpi	r30, 0x7D	; 125
    26ec:	49 f0       	breq	.+18     	; 0x2700 <segled8_get_mask+0x72>
    26ee:	e9 32       	cpi	r30, 0x29	; 41
    26f0:	39 f0       	breq	.+14     	; 0x2700 <segled8_get_mask+0x72>
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	ee 32       	cpi	r30, 0x2E	; 46
    26f6:	29 f4       	brne	.+10     	; 0x2702 <segled8_get_mask+0x74>
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	08 95       	ret
    26fc:	8c e9       	ldi	r24, 0x9C	; 156
    26fe:	08 95       	ret
    2700:	80 ef       	ldi	r24, 0xF0	; 240
    2702:	08 95       	ret

00002704 <compareFromIOPin>:
    2704:	bf 92       	push	r11
    2706:	cf 92       	push	r12
    2708:	df 92       	push	r13
    270a:	ef 92       	push	r14
    270c:	ff 92       	push	r15
    270e:	0f 93       	push	r16
    2710:	1f 93       	push	r17
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	6c 01       	movw	r12, r24
    2718:	b0 90 df 02 	lds	r11, 0x02DF
    271c:	24 ef       	ldi	r18, 0xF4	; 244
    271e:	31 e0       	ldi	r19, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	c0 e0       	ldi	r28, 0x00	; 0
    2724:	d0 e0       	ldi	r29, 0x00	; 0
    2726:	2d c0       	rjmp	.+90     	; 0x2782 <compareFromIOPin+0x7e>
    2728:	28 5f       	subi	r18, 0xF8	; 248
    272a:	3f 4f       	sbci	r19, 0xFF	; 255
    272c:	f9 01       	movw	r30, r18
    272e:	e4 90       	lpm	r14, Z+
    2730:	28 50       	subi	r18, 0x08	; 8
    2732:	30 40       	sbci	r19, 0x00	; 0
    2734:	f9 01       	movw	r30, r18
    2736:	77 96       	adiw	r30, 0x17	; 23
    2738:	2a 5f       	subi	r18, 0xFA	; 250
    273a:	3f 4f       	sbci	r19, 0xFF	; 255
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	a0 e0       	ldi	r26, 0x00	; 0
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	05 91       	lpm	r16, Z+
    2744:	14 91       	lpm	r17, Z+
    2746:	f9 01       	movw	r30, r18
    2748:	f4 90       	lpm	r15, Z+
    274a:	26 50       	subi	r18, 0x06	; 6
    274c:	30 40       	sbci	r19, 0x00	; 0
    274e:	14 c0       	rjmp	.+40     	; 0x2778 <compareFromIOPin+0x74>
    2750:	b8 01       	movw	r22, r16
    2752:	6a 0f       	add	r22, r26
    2754:	7b 1f       	adc	r23, r27
    2756:	fb 01       	movw	r30, r22
    2758:	3e 96       	adiw	r30, 0x0e	; 14
    275a:	45 91       	lpm	r20, Z+
    275c:	54 91       	lpm	r21, Z+
    275e:	41 15       	cp	r20, r1
    2760:	51 05       	cpc	r21, r1
    2762:	41 f0       	breq	.+16     	; 0x2774 <compareFromIOPin+0x70>
    2764:	4c 15       	cp	r20, r12
    2766:	5d 05       	cpc	r21, r13
    2768:	29 f4       	brne	.+10     	; 0x2774 <compareFromIOPin+0x70>
    276a:	ff 20       	and	r15, r15
    276c:	11 f0       	breq	.+4      	; 0x2772 <compareFromIOPin+0x6e>
    276e:	eb 01       	movw	r28, r22
    2770:	0a c0       	rjmp	.+20     	; 0x2786 <compareFromIOPin+0x82>
    2772:	eb 01       	movw	r28, r22
    2774:	8f 5f       	subi	r24, 0xFF	; 255
    2776:	50 96       	adiw	r26, 0x10	; 16
    2778:	8e 15       	cp	r24, r14
    277a:	50 f3       	brcs	.-44     	; 0x2750 <compareFromIOPin+0x4c>
    277c:	9f 5f       	subi	r25, 0xFF	; 255
    277e:	24 5d       	subi	r18, 0xD4	; 212
    2780:	3f 4f       	sbci	r19, 0xFF	; 255
    2782:	9b 15       	cp	r25, r11
    2784:	88 f2       	brcs	.-94     	; 0x2728 <compareFromIOPin+0x24>
    2786:	ce 01       	movw	r24, r28
    2788:	df 91       	pop	r29
    278a:	cf 91       	pop	r28
    278c:	1f 91       	pop	r17
    278e:	0f 91       	pop	r16
    2790:	ff 90       	pop	r15
    2792:	ef 90       	pop	r14
    2794:	df 90       	pop	r13
    2796:	cf 90       	pop	r12
    2798:	bf 90       	pop	r11
    279a:	08 95       	ret

0000279c <compareSetOutputMode>:
    279c:	9c 01       	movw	r18, r24
    279e:	0b 96       	adiw	r24, 0x0b	; 11
    27a0:	fc 01       	movw	r30, r24
    27a2:	a5 91       	lpm	r26, Z+
    27a4:	b4 91       	lpm	r27, Z+
    27a6:	23 5f       	subi	r18, 0xF3	; 243
    27a8:	3f 4f       	sbci	r19, 0xFF	; 255
    27aa:	f9 01       	movw	r30, r18
    27ac:	24 91       	lpm	r18, Z+
    27ae:	70 e0       	ldi	r23, 0x00	; 0
    27b0:	02 2e       	mov	r0, r18
    27b2:	02 c0       	rjmp	.+4      	; 0x27b8 <compareSetOutputMode+0x1c>
    27b4:	66 0f       	add	r22, r22
    27b6:	77 1f       	adc	r23, r23
    27b8:	0a 94       	dec	r0
    27ba:	e2 f7       	brpl	.-8      	; 0x27b4 <compareSetOutputMode+0x18>
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <compareSetOutputMode+0x2a>
    27c2:	88 0f       	add	r24, r24
    27c4:	99 1f       	adc	r25, r25
    27c6:	2a 95       	dec	r18
    27c8:	e2 f7       	brpl	.-8      	; 0x27c2 <compareSetOutputMode+0x26>
    27ca:	28 2f       	mov	r18, r24
    27cc:	22 0f       	add	r18, r18
    27ce:	28 2b       	or	r18, r24
    27d0:	9c 91       	ld	r25, X
    27d2:	82 2f       	mov	r24, r18
    27d4:	86 23       	and	r24, r22
    27d6:	20 95       	com	r18
    27d8:	29 23       	and	r18, r25
    27da:	82 2b       	or	r24, r18
    27dc:	8c 93       	st	X, r24
    27de:	08 95       	ret

000027e0 <compareSetThreshold>:
    27e0:	cf 93       	push	r28
    27e2:	df 93       	push	r29
    27e4:	9c 01       	movw	r18, r24
    27e6:	2e 5f       	subi	r18, 0xFE	; 254
    27e8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ea:	f9 01       	movw	r30, r18
    27ec:	84 91       	lpm	r24, Z+
    27ee:	22 50       	subi	r18, 0x02	; 2
    27f0:	30 40       	sbci	r19, 0x00	; 0
    27f2:	9c e2       	ldi	r25, 0x2C	; 44
    27f4:	89 9f       	mul	r24, r25
    27f6:	a0 01       	movw	r20, r0
    27f8:	11 24       	eor	r1, r1
    27fa:	4c 50       	subi	r20, 0x0C	; 12
    27fc:	5e 4f       	sbci	r21, 0xFE	; 254
    27fe:	48 5f       	subi	r20, 0xF8	; 248
    2800:	5f 4f       	sbci	r21, 0xFF	; 255
    2802:	fa 01       	movw	r30, r20
    2804:	84 91       	lpm	r24, Z+
    2806:	48 50       	subi	r20, 0x08	; 8
    2808:	50 40       	sbci	r21, 0x00	; 0
    280a:	88 23       	and	r24, r24
    280c:	c1 f0       	breq	.+48     	; 0x283e <compareSetThreshold+0x5e>
    280e:	c9 01       	movw	r24, r18
    2810:	06 96       	adiw	r24, 0x06	; 6
    2812:	fc 01       	movw	r30, r24
    2814:	c5 91       	lpm	r28, Z+
    2816:	d4 91       	lpm	r29, Z+
    2818:	fa 01       	movw	r30, r20
    281a:	36 96       	adiw	r30, 0x06	; 6
    281c:	e4 91       	lpm	r30, Z+
    281e:	ee 23       	and	r30, r30
    2820:	19 f0       	breq	.+6      	; 0x2828 <compareSetThreshold+0x48>
    2822:	79 83       	std	Y+1, r23	; 0x01
    2824:	68 83       	st	Y, r22
    2826:	0e c0       	rjmp	.+28     	; 0x2844 <compareSetThreshold+0x64>
    2828:	6f 3f       	cpi	r22, 0xFF	; 255
    282a:	71 05       	cpc	r23, r1
    282c:	31 f0       	breq	.+12     	; 0x283a <compareSetThreshold+0x5a>
    282e:	28 f0       	brcs	.+10     	; 0x283a <compareSetThreshold+0x5a>
    2830:	8e ef       	ldi	r24, 0xFE	; 254
    2832:	0e 94 14 10 	call	0x2028	; 0x2028 <setError>
    2836:	6f ef       	ldi	r22, 0xFF	; 255
    2838:	70 e0       	ldi	r23, 0x00	; 0
    283a:	68 83       	st	Y, r22
    283c:	03 c0       	rjmp	.+6      	; 0x2844 <compareSetThreshold+0x64>
    283e:	8d ef       	ldi	r24, 0xFD	; 253
    2840:	0e 94 14 10 	call	0x2028	; 0x2028 <setError>
    2844:	df 91       	pop	r29
    2846:	cf 91       	pop	r28
    2848:	08 95       	ret

0000284a <_uartSetBaudRate>:
    284a:	dc 01       	movw	r26, r24
    284c:	19 96       	adiw	r26, 0x09	; 9
    284e:	8d 91       	ld	r24, X+
    2850:	9c 91       	ld	r25, X
    2852:	1a 97       	sbiw	r26, 0x0a	; 10
    2854:	fc 01       	movw	r30, r24
    2856:	25 91       	lpm	r18, Z+
    2858:	34 91       	lpm	r19, Z+
    285a:	cd 01       	movw	r24, r26
    285c:	f9 01       	movw	r30, r18
    285e:	09 95       	icall
    2860:	08 95       	ret

00002862 <_uartInit>:
    2862:	df 92       	push	r13
    2864:	ef 92       	push	r14
    2866:	ff 92       	push	r15
    2868:	0f 93       	push	r16
    286a:	1f 93       	push	r17
    286c:	cf 93       	push	r28
    286e:	df 93       	push	r29
    2870:	ec 01       	movw	r28, r24
    2872:	7a 01       	movw	r14, r20
    2874:	8b 01       	movw	r16, r22
    2876:	df b6       	in	r13, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	2d 85       	ldd	r18, Y+13	; 0x0d
    287c:	3e 85       	ldd	r19, Y+14	; 0x0e
    287e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2880:	98 89       	ldd	r25, Y+16	; 0x10
    2882:	28 17       	cp	r18, r24
    2884:	39 07       	cpc	r19, r25
    2886:	11 f0       	breq	.+4      	; 0x288c <_uartInit+0x2a>
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	01 c0       	rjmp	.+2      	; 0x288e <_uartInit+0x2c>
    288c:	8f ef       	ldi	r24, 0xFF	; 255
    288e:	8f 8b       	std	Y+23, r24	; 0x17
    2890:	88 23       	and	r24, r24
    2892:	81 f0       	breq	.+32     	; 0x28b4 <_uartInit+0x52>
    2894:	2d 85       	ldd	r18, Y+13	; 0x0d
    2896:	3e 85       	ldd	r19, Y+14	; 0x0e
    2898:	8f 85       	ldd	r24, Y+15	; 0x0f
    289a:	98 89       	ldd	r25, Y+16	; 0x10
    289c:	28 17       	cp	r18, r24
    289e:	39 07       	cpc	r19, r25
    28a0:	21 f0       	breq	.+8      	; 0x28aa <_uartInit+0x48>
    28a2:	c9 01       	movw	r24, r18
    28a4:	60 e0       	ldi	r22, 0x00	; 0
    28a6:	0e 94 8c 10 	call	0x2118	; 0x2118 <pin_make_input>
    28aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ac:	98 89       	ldd	r25, Y+16	; 0x10
    28ae:	6f ef       	ldi	r22, 0xFF	; 255
    28b0:	0e 94 8c 10 	call	0x2118	; 0x2118 <pin_make_input>
    28b4:	88 85       	ldd	r24, Y+8	; 0x08
    28b6:	81 60       	ori	r24, 0x01	; 1
    28b8:	88 87       	std	Y+8, r24	; 0x08
    28ba:	88 85       	ldd	r24, Y+8	; 0x08
    28bc:	8b 7f       	andi	r24, 0xFB	; 251
    28be:	88 87       	std	Y+8, r24	; 0x08
    28c0:	88 85       	ldd	r24, Y+8	; 0x08
    28c2:	8d 7f       	andi	r24, 0xFD	; 253
    28c4:	88 87       	std	Y+8, r24	; 0x08
    28c6:	89 85       	ldd	r24, Y+9	; 0x09
    28c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ca:	04 96       	adiw	r24, 0x04	; 4
    28cc:	fc 01       	movw	r30, r24
    28ce:	25 91       	lpm	r18, Z+
    28d0:	34 91       	lpm	r19, Z+
    28d2:	ce 01       	movw	r24, r28
    28d4:	b8 01       	movw	r22, r16
    28d6:	a7 01       	movw	r20, r14
    28d8:	f9 01       	movw	r30, r18
    28da:	09 95       	icall
    28dc:	df be       	out	0x3f, r13	; 63
    28de:	df 91       	pop	r29
    28e0:	cf 91       	pop	r28
    28e2:	1f 91       	pop	r17
    28e4:	0f 91       	pop	r16
    28e6:	ff 90       	pop	r15
    28e8:	ef 90       	pop	r14
    28ea:	df 90       	pop	r13
    28ec:	08 95       	ret

000028ee <__uartHWSetBaudRate>:
    28ee:	bf 92       	push	r11
    28f0:	cf 92       	push	r12
    28f2:	df 92       	push	r13
    28f4:	ef 92       	push	r14
    28f6:	ff 92       	push	r15
    28f8:	0f 93       	push	r16
    28fa:	1f 93       	push	r17
    28fc:	cf 93       	push	r28
    28fe:	df 93       	push	r29
    2900:	7a 01       	movw	r14, r20
    2902:	8b 01       	movw	r16, r22
    2904:	ec 01       	movw	r28, r24
    2906:	bf b6       	in	r11, 0x3f	; 63
    2908:	f8 94       	cli
    290a:	4f 3f       	cpi	r20, 0xFF	; 255
    290c:	8f ef       	ldi	r24, 0xFF	; 255
    290e:	58 07       	cpc	r21, r24
    2910:	8f ef       	ldi	r24, 0xFF	; 255
    2912:	68 07       	cpc	r22, r24
    2914:	8f ef       	ldi	r24, 0xFF	; 255
    2916:	78 07       	cpc	r23, r24
    2918:	21 f4       	brne	.+8      	; 0x2922 <__uartHWSetBaudRate+0x34>
    291a:	a1 e0       	ldi	r26, 0x01	; 1
    291c:	ca 2e       	mov	r12, r26
    291e:	d1 2c       	mov	r13, r1
    2920:	24 c0       	rjmp	.+72     	; 0x296a <__uartHWSetBaudRate+0x7c>
    2922:	cb 01       	movw	r24, r22
    2924:	ba 01       	movw	r22, r20
    2926:	f3 e0       	ldi	r31, 0x03	; 3
    2928:	66 0f       	add	r22, r22
    292a:	77 1f       	adc	r23, r23
    292c:	88 1f       	adc	r24, r24
    292e:	99 1f       	adc	r25, r25
    2930:	fa 95       	dec	r31
    2932:	d1 f7       	brne	.-12     	; 0x2928 <__uartHWSetBaudRate+0x3a>
    2934:	20 91 2d 02 	lds	r18, 0x022D
    2938:	30 91 2e 02 	lds	r19, 0x022E
    293c:	40 91 2f 02 	lds	r20, 0x022F
    2940:	50 91 30 02 	lds	r21, 0x0230
    2944:	62 0f       	add	r22, r18
    2946:	73 1f       	adc	r23, r19
    2948:	84 1f       	adc	r24, r20
    294a:	95 1f       	adc	r25, r21
    294c:	a8 01       	movw	r20, r16
    294e:	97 01       	movw	r18, r14
    2950:	e4 e0       	ldi	r30, 0x04	; 4
    2952:	22 0f       	add	r18, r18
    2954:	33 1f       	adc	r19, r19
    2956:	44 1f       	adc	r20, r20
    2958:	55 1f       	adc	r21, r21
    295a:	ea 95       	dec	r30
    295c:	d1 f7       	brne	.-12     	; 0x2952 <__uartHWSetBaudRate+0x64>
    295e:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__udivmodsi4>
    2962:	69 01       	movw	r12, r18
    2964:	08 94       	sec
    2966:	c1 08       	sbc	r12, r1
    2968:	d1 08       	sbc	r13, r1
    296a:	98 a9       	ldd	r25, Y+48	; 0x30
    296c:	99 23       	and	r25, r25
    296e:	c9 f1       	breq	.+114    	; 0x29e2 <__uartHWSetBaudRate+0xf4>
    2970:	ec a1       	ldd	r30, Y+36	; 0x24
    2972:	fd a1       	ldd	r31, Y+37	; 0x25
    2974:	80 81       	ld	r24, Z
    2976:	90 95       	com	r25
    2978:	89 23       	and	r24, r25
    297a:	80 83       	st	Z, r24
    297c:	8f ef       	ldi	r24, 0xFF	; 255
    297e:	e8 16       	cp	r14, r24
    2980:	8f ef       	ldi	r24, 0xFF	; 255
    2982:	f8 06       	cpc	r15, r24
    2984:	8f ef       	ldi	r24, 0xFF	; 255
    2986:	08 07       	cpc	r16, r24
    2988:	8f ef       	ldi	r24, 0xFF	; 255
    298a:	18 07       	cpc	r17, r24
    298c:	19 f4       	brne	.+6      	; 0x2994 <__uartHWSetBaudRate+0xa6>
    298e:	21 e0       	ldi	r18, 0x01	; 1
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	1d c0       	rjmp	.+58     	; 0x29ce <__uartHWSetBaudRate+0xe0>
    2994:	32 e0       	ldi	r19, 0x02	; 2
    2996:	ee 0c       	add	r14, r14
    2998:	ff 1c       	adc	r15, r15
    299a:	00 1f       	adc	r16, r16
    299c:	11 1f       	adc	r17, r17
    299e:	3a 95       	dec	r19
    29a0:	d1 f7       	brne	.-12     	; 0x2996 <__uartHWSetBaudRate+0xa8>
    29a2:	60 91 2d 02 	lds	r22, 0x022D
    29a6:	70 91 2e 02 	lds	r23, 0x022E
    29aa:	80 91 2f 02 	lds	r24, 0x022F
    29ae:	90 91 30 02 	lds	r25, 0x0230
    29b2:	6e 0d       	add	r22, r14
    29b4:	7f 1d       	adc	r23, r15
    29b6:	80 1f       	adc	r24, r16
    29b8:	91 1f       	adc	r25, r17
    29ba:	ee 0c       	add	r14, r14
    29bc:	ff 1c       	adc	r15, r15
    29be:	00 1f       	adc	r16, r16
    29c0:	11 1f       	adc	r17, r17
    29c2:	a8 01       	movw	r20, r16
    29c4:	97 01       	movw	r18, r14
    29c6:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__udivmodsi4>
    29ca:	21 50       	subi	r18, 0x01	; 1
    29cc:	30 40       	sbci	r19, 0x00	; 0
    29ce:	2c 15       	cp	r18, r12
    29d0:	3d 05       	cpc	r19, r13
    29d2:	38 f0       	brcs	.+14     	; 0x29e2 <__uartHWSetBaudRate+0xf4>
    29d4:	ec a1       	ldd	r30, Y+36	; 0x24
    29d6:	fd a1       	ldd	r31, Y+37	; 0x25
    29d8:	80 81       	ld	r24, Z
    29da:	98 a9       	ldd	r25, Y+48	; 0x30
    29dc:	89 2b       	or	r24, r25
    29de:	80 83       	st	Z, r24
    29e0:	69 01       	movw	r12, r18
    29e2:	e8 a5       	ldd	r30, Y+40	; 0x28
    29e4:	f9 a5       	ldd	r31, Y+41	; 0x29
    29e6:	c0 82       	st	Z, r12
    29e8:	ea a5       	ldd	r30, Y+42	; 0x2a
    29ea:	fb a5       	ldd	r31, Y+43	; 0x2b
    29ec:	d0 82       	st	Z, r13
    29ee:	bf be       	out	0x3f, r11	; 63
    29f0:	df 91       	pop	r29
    29f2:	cf 91       	pop	r28
    29f4:	1f 91       	pop	r17
    29f6:	0f 91       	pop	r16
    29f8:	ff 90       	pop	r15
    29fa:	ef 90       	pop	r14
    29fc:	df 90       	pop	r13
    29fe:	cf 90       	pop	r12
    2a00:	bf 90       	pop	r11
    2a02:	08 95       	ret

00002a04 <__uartHWOff>:
    2a04:	dc 01       	movw	r26, r24
    2a06:	96 96       	adiw	r26, 0x26	; 38
    2a08:	ed 91       	ld	r30, X+
    2a0a:	fc 91       	ld	r31, X
    2a0c:	97 97       	sbiw	r26, 0x27	; 39
    2a0e:	80 81       	ld	r24, Z
    2a10:	87 72       	andi	r24, 0x27	; 39
    2a12:	80 83       	st	Z, r24
    2a14:	d0 96       	adiw	r26, 0x30	; 48
    2a16:	9c 91       	ld	r25, X
    2a18:	d0 97       	sbiw	r26, 0x30	; 48
    2a1a:	99 23       	and	r25, r25
    2a1c:	41 f0       	breq	.+16     	; 0x2a2e <__uartHWOff+0x2a>
    2a1e:	94 96       	adiw	r26, 0x24	; 36
    2a20:	ed 91       	ld	r30, X+
    2a22:	fc 91       	ld	r31, X
    2a24:	95 97       	sbiw	r26, 0x25	; 37
    2a26:	80 81       	ld	r24, Z
    2a28:	90 95       	com	r25
    2a2a:	89 23       	and	r24, r25
    2a2c:	80 83       	st	Z, r24
    2a2e:	08 95       	ret

00002a30 <oneWireReceiveMode>:
    2a30:	dc 01       	movw	r26, r24
    2a32:	57 96       	adiw	r26, 0x17	; 23
    2a34:	8c 91       	ld	r24, X
    2a36:	57 97       	sbiw	r26, 0x17	; 23
    2a38:	88 23       	and	r24, r24
    2a3a:	71 f0       	breq	.+28     	; 0x2a58 <oneWireReceiveMode+0x28>
    2a3c:	96 96       	adiw	r26, 0x26	; 38
    2a3e:	ed 91       	ld	r30, X+
    2a40:	fc 91       	ld	r31, X
    2a42:	97 97       	sbiw	r26, 0x27	; 39
    2a44:	80 81       	ld	r24, Z
    2a46:	87 7b       	andi	r24, 0xB7	; 183
    2a48:	80 83       	st	Z, r24
    2a4a:	96 96       	adiw	r26, 0x26	; 38
    2a4c:	ed 91       	ld	r30, X+
    2a4e:	fc 91       	ld	r31, X
    2a50:	97 97       	sbiw	r26, 0x27	; 39
    2a52:	80 81       	ld	r24, Z
    2a54:	80 69       	ori	r24, 0x90	; 144
    2a56:	80 83       	st	Z, r24
    2a58:	08 95       	ret

00002a5a <__uartHWStartXmit>:
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	9c 96       	adiw	r26, 0x2c	; 44
    2a5e:	ed 91       	ld	r30, X+
    2a60:	fc 91       	ld	r31, X
    2a62:	9d 97       	sbiw	r26, 0x2d	; 45
    2a64:	60 83       	st	Z, r22
    2a66:	08 95       	ret

00002a68 <startXmitMode>:
    2a68:	dc 01       	movw	r26, r24
    2a6a:	57 96       	adiw	r26, 0x17	; 23
    2a6c:	8c 91       	ld	r24, X
    2a6e:	57 97       	sbiw	r26, 0x17	; 23
    2a70:	88 23       	and	r24, r24
    2a72:	71 f0       	breq	.+28     	; 0x2a90 <startXmitMode+0x28>
    2a74:	96 96       	adiw	r26, 0x26	; 38
    2a76:	ed 91       	ld	r30, X+
    2a78:	fc 91       	ld	r31, X
    2a7a:	97 97       	sbiw	r26, 0x27	; 39
    2a7c:	80 81       	ld	r24, Z
    2a7e:	8f 76       	andi	r24, 0x6F	; 111
    2a80:	80 83       	st	Z, r24
    2a82:	96 96       	adiw	r26, 0x26	; 38
    2a84:	ed 91       	ld	r30, X+
    2a86:	fc 91       	ld	r31, X
    2a88:	97 97       	sbiw	r26, 0x27	; 39
    2a8a:	80 81       	ld	r24, Z
    2a8c:	88 64       	ori	r24, 0x48	; 72
    2a8e:	80 83       	st	Z, r24
    2a90:	08 95       	ret

00002a92 <__uartHWInit>:
    2a92:	cf 93       	push	r28
    2a94:	df 93       	push	r29
    2a96:	ec 01       	movw	r28, r24
    2a98:	0e 94 25 14 	call	0x284a	; 0x284a <_uartSetBaudRate>
    2a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a9e:	88 23       	and	r24, r24
    2aa0:	11 f0       	breq	.+4      	; 0x2aa6 <__uartHWInit+0x14>
    2aa2:	20 e9       	ldi	r18, 0x90	; 144
    2aa4:	0c c0       	rjmp	.+24     	; 0x2abe <__uartHWInit+0x2c>
    2aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aaa:	89 2b       	or	r24, r25
    2aac:	11 f0       	breq	.+4      	; 0x2ab2 <__uartHWInit+0x20>
    2aae:	20 e9       	ldi	r18, 0x90	; 144
    2ab0:	01 c0       	rjmp	.+2      	; 0x2ab4 <__uartHWInit+0x22>
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab6:	98 89       	ldd	r25, Y+16	; 0x10
    2ab8:	89 2b       	or	r24, r25
    2aba:	09 f0       	breq	.+2      	; 0x2abe <__uartHWInit+0x2c>
    2abc:	28 64       	ori	r18, 0x48	; 72
    2abe:	ee a1       	ldd	r30, Y+38	; 0x26
    2ac0:	ff a1       	ldd	r31, Y+39	; 0x27
    2ac2:	20 83       	st	Z, r18
    2ac4:	df 91       	pop	r29
    2ac6:	cf 91       	pop	r28
    2ac8:	08 95       	ret

00002aca <__uartReceiveService>:
    2aca:	dc 01       	movw	r26, r24
    2acc:	26 2f       	mov	r18, r22
    2ace:	14 96       	adiw	r26, 0x04	; 4
    2ad0:	8d 91       	ld	r24, X+
    2ad2:	9c 91       	ld	r25, X
    2ad4:	15 97       	sbiw	r26, 0x05	; 5
    2ad6:	89 2b       	or	r24, r25
    2ad8:	59 f0       	breq	.+22     	; 0x2af0 <__uartReceiveService+0x26>
    2ada:	14 96       	adiw	r26, 0x04	; 4
    2adc:	ed 91       	ld	r30, X+
    2ade:	fc 91       	ld	r31, X
    2ae0:	15 97       	sbiw	r26, 0x05	; 5
    2ae2:	16 96       	adiw	r26, 0x06	; 6
    2ae4:	6d 91       	ld	r22, X+
    2ae6:	7c 91       	ld	r23, X
    2ae8:	17 97       	sbiw	r26, 0x07	; 7
    2aea:	82 2f       	mov	r24, r18
    2aec:	09 95       	icall
    2aee:	08 95       	ret
    2af0:	90 96       	adiw	r26, 0x20	; 32
    2af2:	ed 91       	ld	r30, X+
    2af4:	fc 91       	ld	r31, X
    2af6:	91 97       	sbiw	r26, 0x21	; 33
    2af8:	cd 01       	movw	r24, r26
    2afa:	09 95       	icall
    2afc:	08 95       	ret

00002afe <__uartGetByte>:
    2afe:	fc 01       	movw	r30, r24
    2b00:	22 a1       	ldd	r18, Z+34	; 0x22
    2b02:	33 a1       	ldd	r19, Z+35	; 0x23
    2b04:	f9 01       	movw	r30, r18
    2b06:	09 95       	icall
    2b08:	08 95       	ret

00002b0a <__uartGetByteUnbuffered>:
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	4f b7       	in	r20, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	23 85       	ldd	r18, Z+11	; 0x0b
    2b12:	34 85       	ldd	r19, Z+12	; 0x0c
    2b14:	8f ef       	ldi	r24, 0xFF	; 255
    2b16:	9f ef       	ldi	r25, 0xFF	; 255
    2b18:	94 87       	std	Z+12, r25	; 0x0c
    2b1a:	83 87       	std	Z+11, r24	; 0x0b
    2b1c:	4f bf       	out	0x3f, r20	; 63
    2b1e:	c9 01       	movw	r24, r18
    2b20:	08 95       	ret

00002b22 <__uartReceiveUnbuffered>:
    2b22:	fc 01       	movw	r30, r24
    2b24:	83 85       	ldd	r24, Z+11	; 0x0b
    2b26:	94 85       	ldd	r25, Z+12	; 0x0c
    2b28:	8f 5f       	subi	r24, 0xFF	; 255
    2b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b2c:	29 f4       	brne	.+10     	; 0x2b38 <__uartReceiveUnbuffered+0x16>
    2b2e:	86 2f       	mov	r24, r22
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	94 87       	std	Z+12, r25	; 0x0c
    2b34:	83 87       	std	Z+11, r24	; 0x0b
    2b36:	08 95       	ret
    2b38:	80 85       	ldd	r24, Z+8	; 0x08
    2b3a:	84 60       	ori	r24, 0x04	; 4
    2b3c:	80 87       	std	Z+8, r24	; 0x08
    2b3e:	85 ef       	ldi	r24, 0xF5	; 245
    2b40:	0e 94 14 10 	call	0x2028	; 0x2028 <setError>
    2b44:	08 95       	ret

00002b46 <_uartStartXmit>:
    2b46:	dc 01       	movw	r26, r24
    2b48:	19 96       	adiw	r26, 0x09	; 9
    2b4a:	8d 91       	ld	r24, X+
    2b4c:	9c 91       	ld	r25, X
    2b4e:	1a 97       	sbiw	r26, 0x0a	; 10
    2b50:	02 96       	adiw	r24, 0x02	; 2
    2b52:	fc 01       	movw	r30, r24
    2b54:	25 91       	lpm	r18, Z+
    2b56:	34 91       	lpm	r19, Z+
    2b58:	cd 01       	movw	r24, r26
    2b5a:	f9 01       	movw	r30, r18
    2b5c:	09 95       	icall
    2b5e:	08 95       	ret

00002b60 <_uartTransmitBlockStart>:
    2b60:	cf 93       	push	r28
    2b62:	df 93       	push	r29
    2b64:	ec 01       	movw	r28, r24
    2b66:	88 85       	ldd	r24, Y+8	; 0x08
    2b68:	8e 7f       	andi	r24, 0xFE	; 254
    2b6a:	88 87       	std	Y+8, r24	; 0x08
    2b6c:	e8 8d       	ldd	r30, Y+24	; 0x18
    2b6e:	f9 8d       	ldd	r31, Y+25	; 0x19
    2b70:	30 97       	sbiw	r30, 0x00	; 0
    2b72:	21 f0       	breq	.+8      	; 0x2b7c <_uartTransmitBlockStart+0x1c>
    2b74:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b76:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b78:	6f ef       	ldi	r22, 0xFF	; 255
    2b7a:	09 95       	icall
    2b7c:	e9 85       	ldd	r30, Y+9	; 0x09
    2b7e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2b80:	38 96       	adiw	r30, 0x08	; 8
    2b82:	25 91       	lpm	r18, Z+
    2b84:	34 91       	lpm	r19, Z+
    2b86:	21 15       	cp	r18, r1
    2b88:	31 05       	cpc	r19, r1
    2b8a:	19 f0       	breq	.+6      	; 0x2b92 <_uartTransmitBlockStart+0x32>
    2b8c:	ce 01       	movw	r24, r28
    2b8e:	f9 01       	movw	r30, r18
    2b90:	09 95       	icall
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	08 95       	ret

00002b98 <_uartTransmitBlockEnd>:
    2b98:	cf 93       	push	r28
    2b9a:	df 93       	push	r29
    2b9c:	ec 01       	movw	r28, r24
    2b9e:	88 85       	ldd	r24, Y+8	; 0x08
    2ba0:	81 60       	ori	r24, 0x01	; 1
    2ba2:	88 87       	std	Y+8, r24	; 0x08
    2ba4:	e9 85       	ldd	r30, Y+9	; 0x09
    2ba6:	fa 85       	ldd	r31, Y+10	; 0x0a
    2ba8:	3a 96       	adiw	r30, 0x0a	; 10
    2baa:	25 91       	lpm	r18, Z+
    2bac:	34 91       	lpm	r19, Z+
    2bae:	21 15       	cp	r18, r1
    2bb0:	31 05       	cpc	r19, r1
    2bb2:	19 f0       	breq	.+6      	; 0x2bba <_uartTransmitBlockEnd+0x22>
    2bb4:	ce 01       	movw	r24, r28
    2bb6:	f9 01       	movw	r30, r18
    2bb8:	09 95       	icall
    2bba:	e8 8d       	ldd	r30, Y+24	; 0x18
    2bbc:	f9 8d       	ldd	r31, Y+25	; 0x19
    2bbe:	30 97       	sbiw	r30, 0x00	; 0
    2bc0:	21 f0       	breq	.+8      	; 0x2bca <_uartTransmitBlockEnd+0x32>
    2bc2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bc4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2bc6:	60 e0       	ldi	r22, 0x00	; 0
    2bc8:	09 95       	icall
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	08 95       	ret

00002bd0 <_uartSendBuffer>:
    2bd0:	ef 92       	push	r14
    2bd2:	ff 92       	push	r15
    2bd4:	0f 93       	push	r16
    2bd6:	1f 93       	push	r17
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	8c 01       	movw	r16, r24
    2bde:	7b 01       	movw	r14, r22
    2be0:	ea 01       	movw	r28, r20
    2be2:	0b c0       	rjmp	.+22     	; 0x2bfa <_uartSendBuffer+0x2a>
    2be4:	d7 01       	movw	r26, r14
    2be6:	6d 91       	ld	r22, X+
    2be8:	7d 01       	movw	r14, r26
    2bea:	d8 01       	movw	r26, r16
    2bec:	5c 96       	adiw	r26, 0x1c	; 28
    2bee:	ed 91       	ld	r30, X+
    2bf0:	fc 91       	ld	r31, X
    2bf2:	5d 97       	sbiw	r26, 0x1d	; 29
    2bf4:	c8 01       	movw	r24, r16
    2bf6:	09 95       	icall
    2bf8:	21 97       	sbiw	r28, 0x01	; 1
    2bfa:	20 97       	sbiw	r28, 0x00	; 0
    2bfc:	99 f7       	brne	.-26     	; 0x2be4 <_uartSendBuffer+0x14>
    2bfe:	df 91       	pop	r29
    2c00:	cf 91       	pop	r28
    2c02:	1f 91       	pop	r17
    2c04:	0f 91       	pop	r16
    2c06:	ff 90       	pop	r15
    2c08:	ef 90       	pop	r14
    2c0a:	08 95       	ret

00002c0c <_uartSendByte>:
    2c0c:	1f 93       	push	r17
    2c0e:	fc 01       	movw	r30, r24
    2c10:	16 2f       	mov	r17, r22
    2c12:	24 8d       	ldd	r18, Z+28	; 0x1c
    2c14:	35 8d       	ldd	r19, Z+29	; 0x1d
    2c16:	f9 01       	movw	r30, r18
    2c18:	09 95       	icall
    2c1a:	81 2f       	mov	r24, r17
    2c1c:	1f 91       	pop	r17
    2c1e:	08 95       	ret

00002c20 <__uartTransmitService>:
    2c20:	fc 01       	movw	r30, r24
    2c22:	26 8d       	ldd	r18, Z+30	; 0x1e
    2c24:	37 8d       	ldd	r19, Z+31	; 0x1f
    2c26:	f9 01       	movw	r30, r18
    2c28:	09 95       	icall
    2c2a:	08 95       	ret

00002c2c <__uartSendNextUnbuffered>:
    2c2c:	1f 93       	push	r17
    2c2e:	1f b7       	in	r17, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <_uartTransmitBlockEnd>
    2c36:	1f bf       	out	0x3f, r17	; 63
    2c38:	1f 91       	pop	r17
    2c3a:	08 95       	ret

00002c3c <__uartSendUnbuffered>:
    2c3c:	0f 93       	push	r16
    2c3e:	1f 93       	push	r17
    2c40:	cf 93       	push	r28
    2c42:	df 93       	push	r29
    2c44:	06 2f       	mov	r16, r22
    2c46:	ec 01       	movw	r28, r24
    2c48:	02 c0       	rjmp	.+4      	; 0x2c4e <__uartSendUnbuffered+0x12>
    2c4a:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <breathe>
    2c4e:	88 85       	ldd	r24, Y+8	; 0x08
    2c50:	80 ff       	sbrs	r24, 0
    2c52:	fb cf       	rjmp	.-10     	; 0x2c4a <__uartSendUnbuffered+0xe>
    2c54:	1f b7       	in	r17, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	ce 01       	movw	r24, r28
    2c5a:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <_uartTransmitBlockStart>
    2c5e:	ce 01       	movw	r24, r28
    2c60:	60 2f       	mov	r22, r16
    2c62:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <_uartStartXmit>
    2c66:	1f bf       	out	0x3f, r17	; 63
    2c68:	df 91       	pop	r29
    2c6a:	cf 91       	pop	r28
    2c6c:	1f 91       	pop	r17
    2c6e:	0f 91       	pop	r16
    2c70:	08 95       	ret

00002c72 <uartReceivePollingMode>:
    2c72:	dc 01       	movw	r26, r24
    2c74:	96 96       	adiw	r26, 0x26	; 38
    2c76:	ed 91       	ld	r30, X+
    2c78:	fc 91       	ld	r31, X
    2c7a:	97 97       	sbiw	r26, 0x27	; 39
    2c7c:	66 23       	and	r22, r22
    2c7e:	19 f0       	breq	.+6      	; 0x2c86 <uartReceivePollingMode+0x14>
    2c80:	80 81       	ld	r24, Z
    2c82:	8f 77       	andi	r24, 0x7F	; 127
    2c84:	02 c0       	rjmp	.+4      	; 0x2c8a <uartReceivePollingMode+0x18>
    2c86:	80 81       	ld	r24, Z
    2c88:	80 68       	ori	r24, 0x80	; 128
    2c8a:	80 83       	st	Z, r24
    2c8c:	08 95       	ret

00002c8e <uartPollByte>:
    2c8e:	dc 01       	movw	r26, r24
    2c90:	94 96       	adiw	r26, 0x24	; 36
    2c92:	ed 91       	ld	r30, X+
    2c94:	fc 91       	ld	r31, X
    2c96:	95 97       	sbiw	r26, 0x25	; 37
    2c98:	80 81       	ld	r24, Z
    2c9a:	87 fd       	sbrc	r24, 7
    2c9c:	03 c0       	rjmp	.+6      	; 0x2ca4 <uartPollByte+0x16>
    2c9e:	2f ef       	ldi	r18, 0xFF	; 255
    2ca0:	3f ef       	ldi	r19, 0xFF	; 255
    2ca2:	07 c0       	rjmp	.+14     	; 0x2cb2 <uartPollByte+0x24>
    2ca4:	9c 96       	adiw	r26, 0x2c	; 44
    2ca6:	ed 91       	ld	r30, X+
    2ca8:	fc 91       	ld	r31, X
    2caa:	9d 97       	sbiw	r26, 0x2d	; 45
    2cac:	80 81       	ld	r24, Z
    2cae:	28 2f       	mov	r18, r24
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	c9 01       	movw	r24, r18
    2cb4:	08 95       	ret

00002cb6 <_ZN6Stream5printEc>:
    2cb6:	1f 93       	push	r17
    2cb8:	cf 93       	push	r28
    2cba:	df 93       	push	r29
    2cbc:	ec 01       	movw	r28, r24
    2cbe:	16 2f       	mov	r17, r22
    2cc0:	6a 30       	cpi	r22, 0x0A	; 10
    2cc2:	39 f4       	brne	.+14     	; 0x2cd2 <_ZN6Stream5printEc+0x1c>
    2cc4:	e8 81       	ld	r30, Y
    2cc6:	f9 81       	ldd	r31, Y+1	; 0x01
    2cc8:	01 90       	ld	r0, Z+
    2cca:	f0 81       	ld	r31, Z
    2ccc:	e0 2d       	mov	r30, r0
    2cce:	6d e0       	ldi	r22, 0x0D	; 13
    2cd0:	09 95       	icall
    2cd2:	e8 81       	ld	r30, Y
    2cd4:	f9 81       	ldd	r31, Y+1	; 0x01
    2cd6:	01 90       	ld	r0, Z+
    2cd8:	f0 81       	ld	r31, Z
    2cda:	e0 2d       	mov	r30, r0
    2cdc:	ce 01       	movw	r24, r28
    2cde:	61 2f       	mov	r22, r17
    2ce0:	09 95       	icall
    2ce2:	ce 01       	movw	r24, r28
    2ce4:	df 91       	pop	r29
    2ce6:	cf 91       	pop	r28
    2ce8:	1f 91       	pop	r17
    2cea:	08 95       	ret

00002cec <clockHasElapsed>:
    2cec:	0f 93       	push	r16
    2cee:	1f 93       	push	r17
    2cf0:	00 e0       	ldi	r16, 0x00	; 0
    2cf2:	10 e0       	ldi	r17, 0x00	; 0
    2cf4:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <clockHasElapsedGetOverflow>
    2cf8:	1f 91       	pop	r17
    2cfa:	0f 91       	pop	r16
    2cfc:	08 95       	ret

00002cfe <clockHasElapsedGetOverflow>:
    2cfe:	8f 92       	push	r8
    2d00:	9f 92       	push	r9
    2d02:	af 92       	push	r10
    2d04:	bf 92       	push	r11
    2d06:	cf 92       	push	r12
    2d08:	df 92       	push	r13
    2d0a:	ef 92       	push	r14
    2d0c:	ff 92       	push	r15
    2d0e:	0f 93       	push	r16
    2d10:	1f 93       	push	r17
    2d12:	cf 93       	push	r28
    2d14:	df 93       	push	r29
    2d16:	6b 01       	movw	r12, r22
    2d18:	7c 01       	movw	r14, r24
    2d1a:	49 01       	movw	r8, r18
    2d1c:	5a 01       	movw	r10, r20
    2d1e:	e8 01       	movw	r28, r16
    2d20:	0e 94 b1 0b 	call	0x1762	; 0x1762 <clockGetus>
    2d24:	6c 19       	sub	r22, r12
    2d26:	7d 09       	sbc	r23, r13
    2d28:	8e 09       	sbc	r24, r14
    2d2a:	9f 09       	sbc	r25, r15
    2d2c:	68 15       	cp	r22, r8
    2d2e:	79 05       	cpc	r23, r9
    2d30:	8a 05       	cpc	r24, r10
    2d32:	9b 05       	cpc	r25, r11
    2d34:	68 f0       	brcs	.+26     	; 0x2d50 <clockHasElapsedGetOverflow+0x52>
    2d36:	01 15       	cp	r16, r1
    2d38:	11 05       	cpc	r17, r1
    2d3a:	41 f0       	breq	.+16     	; 0x2d4c <clockHasElapsedGetOverflow+0x4e>
    2d3c:	68 19       	sub	r22, r8
    2d3e:	79 09       	sbc	r23, r9
    2d40:	8a 09       	sbc	r24, r10
    2d42:	9b 09       	sbc	r25, r11
    2d44:	68 83       	st	Y, r22
    2d46:	79 83       	std	Y+1, r23	; 0x01
    2d48:	8a 83       	std	Y+2, r24	; 0x02
    2d4a:	9b 83       	std	Y+3, r25	; 0x03
    2d4c:	8f ef       	ldi	r24, 0xFF	; 255
    2d4e:	0c c0       	rjmp	.+24     	; 0x2d68 <clockHasElapsedGetOverflow+0x6a>
    2d50:	01 15       	cp	r16, r1
    2d52:	11 05       	cpc	r17, r1
    2d54:	41 f0       	breq	.+16     	; 0x2d66 <clockHasElapsedGetOverflow+0x68>
    2d56:	86 1a       	sub	r8, r22
    2d58:	97 0a       	sbc	r9, r23
    2d5a:	a8 0a       	sbc	r10, r24
    2d5c:	b9 0a       	sbc	r11, r25
    2d5e:	88 82       	st	Y, r8
    2d60:	99 82       	std	Y+1, r9	; 0x01
    2d62:	aa 82       	std	Y+2, r10	; 0x02
    2d64:	bb 82       	std	Y+3, r11	; 0x03
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	df 91       	pop	r29
    2d6a:	cf 91       	pop	r28
    2d6c:	1f 91       	pop	r17
    2d6e:	0f 91       	pop	r16
    2d70:	ff 90       	pop	r15
    2d72:	ef 90       	pop	r14
    2d74:	df 90       	pop	r13
    2d76:	cf 90       	pop	r12
    2d78:	bf 90       	pop	r11
    2d7a:	af 90       	pop	r10
    2d7c:	9f 90       	pop	r9
    2d7e:	8f 90       	pop	r8
    2d80:	08 95       	ret

00002d82 <breathe>:
    2d82:	8f b7       	in	r24, 0x3f	; 63
    2d84:	78 94       	sei
	...
    2d92:	00 00       	nop
    2d94:	8f bf       	out	0x3f, r24	; 63
    2d96:	08 95       	ret

00002d98 <pin_low>:
    2d98:	cf 93       	push	r28
    2d9a:	df 93       	push	r29
    2d9c:	9c 01       	movw	r18, r24
    2d9e:	00 97       	sbiw	r24, 0x00	; 0
    2da0:	e9 f0       	breq	.+58     	; 0x2ddc <pin_low+0x44>
    2da2:	fc 01       	movw	r30, r24
    2da4:	85 91       	lpm	r24, Z+
    2da6:	94 91       	lpm	r25, Z+
    2da8:	fc 01       	movw	r30, r24
    2daa:	a5 91       	lpm	r26, Z+
    2dac:	b4 91       	lpm	r27, Z+
    2dae:	02 96       	adiw	r24, 0x02	; 2
    2db0:	fc 01       	movw	r30, r24
    2db2:	c5 91       	lpm	r28, Z+
    2db4:	d4 91       	lpm	r29, Z+
    2db6:	2e 5f       	subi	r18, 0xFE	; 254
    2db8:	3f 4f       	sbci	r19, 0xFF	; 255
    2dba:	f9 01       	movw	r30, r18
    2dbc:	24 91       	lpm	r18, Z+
    2dbe:	88 81       	ld	r24, Y
    2dc0:	82 23       	and	r24, r18
    2dc2:	49 f0       	breq	.+18     	; 0x2dd6 <pin_low+0x3e>
    2dc4:	9f b7       	in	r25, 0x3f	; 63
    2dc6:	f8 94       	cli
    2dc8:	8c 91       	ld	r24, X
    2dca:	20 95       	com	r18
    2dcc:	82 23       	and	r24, r18
    2dce:	8c 93       	st	X, r24
    2dd0:	9f bf       	out	0x3f, r25	; 63
    2dd2:	00 00       	nop
    2dd4:	03 c0       	rjmp	.+6      	; 0x2ddc <pin_low+0x44>
    2dd6:	87 ef       	ldi	r24, 0xF7	; 247
    2dd8:	0e 94 14 10 	call	0x2028	; 0x2028 <setError>
    2ddc:	df 91       	pop	r29
    2dde:	cf 91       	pop	r28
    2de0:	08 95       	ret

00002de2 <pin_high>:
    2de2:	cf 93       	push	r28
    2de4:	df 93       	push	r29
    2de6:	9c 01       	movw	r18, r24
    2de8:	00 97       	sbiw	r24, 0x00	; 0
    2dea:	e1 f0       	breq	.+56     	; 0x2e24 <pin_high+0x42>
    2dec:	fc 01       	movw	r30, r24
    2dee:	85 91       	lpm	r24, Z+
    2df0:	94 91       	lpm	r25, Z+
    2df2:	fc 01       	movw	r30, r24
    2df4:	a5 91       	lpm	r26, Z+
    2df6:	b4 91       	lpm	r27, Z+
    2df8:	02 96       	adiw	r24, 0x02	; 2
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	c5 91       	lpm	r28, Z+
    2dfe:	d4 91       	lpm	r29, Z+
    2e00:	2e 5f       	subi	r18, 0xFE	; 254
    2e02:	3f 4f       	sbci	r19, 0xFF	; 255
    2e04:	f9 01       	movw	r30, r18
    2e06:	24 91       	lpm	r18, Z+
    2e08:	88 81       	ld	r24, Y
    2e0a:	82 23       	and	r24, r18
    2e0c:	41 f0       	breq	.+16     	; 0x2e1e <pin_high+0x3c>
    2e0e:	9f b7       	in	r25, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	8c 91       	ld	r24, X
    2e14:	82 2b       	or	r24, r18
    2e16:	8c 93       	st	X, r24
    2e18:	9f bf       	out	0x3f, r25	; 63
    2e1a:	00 00       	nop
    2e1c:	03 c0       	rjmp	.+6      	; 0x2e24 <pin_high+0x42>
    2e1e:	87 ef       	ldi	r24, 0xF7	; 247
    2e20:	0e 94 14 10 	call	0x2028	; 0x2028 <setError>
    2e24:	df 91       	pop	r29
    2e26:	cf 91       	pop	r28
    2e28:	08 95       	ret

00002e2a <pin_set>:
    2e2a:	66 23       	and	r22, r22
    2e2c:	19 f0       	breq	.+6      	; 0x2e34 <pin_set+0xa>
    2e2e:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <pin_high>
    2e32:	08 95       	ret
    2e34:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <pin_low>
    2e38:	08 95       	ret

00002e3a <__scheduleUpdate>:
	uint16_t rtn = MIN(ticks,CLOCK_TOP);
	return rtn;
}

// called under compare interrupts when there is something in the queue
static void __scheduleUpdate(void){
    2e3a:	2f 92       	push	r2
    2e3c:	3f 92       	push	r3
    2e3e:	4f 92       	push	r4
    2e40:	5f 92       	push	r5
    2e42:	6f 92       	push	r6
    2e44:	7f 92       	push	r7
    2e46:	8f 92       	push	r8
    2e48:	9f 92       	push	r9
    2e4a:	af 92       	push	r10
    2e4c:	bf 92       	push	r11
    2e4e:	cf 92       	push	r12
    2e50:	df 92       	push	r13
    2e52:	ef 92       	push	r14
    2e54:	ff 92       	push	r15
    2e56:	0f 93       	push	r16
    2e58:	1f 93       	push	r17
    2e5a:	df 93       	push	r29
    2e5c:	cf 93       	push	r28
    2e5e:	cd b7       	in	r28, 0x3d	; 61
    2e60:	de b7       	in	r29, 0x3e	; 62
    2e62:	27 97       	sbiw	r28, 0x07	; 7
    2e64:	0f b6       	in	r0, 0x3f	; 63
    2e66:	f8 94       	cli
    2e68:	de bf       	out	0x3e, r29	; 62
    2e6a:	0f be       	out	0x3f, r0	; 63
    2e6c:	cd bf       	out	0x3d, r28	; 61
	// Dont call me again - turn off compare interrupts
	SCHEDULER_INT_DISABLE;
    2e6e:	80 91 73 00 	lds	r24, 0x0073
    2e72:	8b 7f       	andi	r24, 0xFB	; 251
    2e74:	80 93 73 00 	sts	0x0073, r24

	// Turn interrupts back on
	INTERRUPTABLE_SECTION{
    2e78:	2f b7       	in	r18, 0x3f	; 63
    2e7a:	2f 83       	std	Y+7, r18	; 0x07
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
    2e7c:	78 94       	sei
		__running = TRUE;
    2e7e:	8f ef       	ldi	r24, 0xFF	; 255
    2e80:	80 93 4e 04 	sts	0x044E, r24
		TICK_COUNT lowest;
		do{
			int slot;
			__recheck = FALSE;
    2e84:	10 92 4f 04 	sts	0x044F, r1
			JOB* job;
			lowest=0;
			for(slot=maxJobs-1, job=&__queue[slot]; slot>=0; slot--, job--){
    2e88:	80 91 14 03 	lds	r24, 0x0314
    2e8c:	a8 2f       	mov	r26, r24
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	11 97       	sbiw	r26, 0x01	; 1
    2e92:	be 83       	std	Y+6, r27	; 0x06
    2e94:	ad 83       	std	Y+5, r26	; 0x05
    2e96:	ed e0       	ldi	r30, 0x0D	; 13
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	ae 9f       	mul	r26, r30
    2e9c:	50 01       	movw	r10, r0
    2e9e:	af 9f       	mul	r26, r31
    2ea0:	b0 0c       	add	r11, r0
    2ea2:	be 9f       	mul	r27, r30
    2ea4:	b0 0c       	add	r11, r0
    2ea6:	11 24       	eor	r1, r1
    2ea8:	21 e4       	ldi	r18, 0x41	; 65
    2eaa:	34 e0       	ldi	r19, 0x04	; 4
    2eac:	a2 0e       	add	r10, r18
    2eae:	b3 1e       	adc	r11, r19
    2eb0:	66 24       	eor	r6, r6
    2eb2:	77 24       	eor	r7, r7
    2eb4:	43 01       	movw	r8, r6
    2eb6:	5a c0       	rjmp	.+180    	; 0x2f6c <__scheduleUpdate+0x132>
				if(job->used){
    2eb8:	d5 01       	movw	r26, r10
    2eba:	8c 91       	ld	r24, X
    2ebc:	88 23       	and	r24, r24
    2ebe:	09 f4       	brne	.+2      	; 0x2ec2 <__scheduleUpdate+0x88>
    2ec0:	4c c0       	rjmp	.+152    	; 0x2f5a <__scheduleUpdate+0x120>
					// check if time has elapsed
					TICK_COUNT overflow;	// how many us the timer has overshot when it should have happened
					TICK_COUNT start=job->start;
    2ec2:	19 96       	adiw	r26, 0x09	; 9
    2ec4:	2d 90       	ld	r2, X+
    2ec6:	3d 90       	ld	r3, X+
    2ec8:	4d 90       	ld	r4, X+
    2eca:	5c 90       	ld	r5, X
    2ecc:	1c 97       	sbiw	r26, 0x0c	; 12
					TICK_COUNT delay=job->delay;
    2ece:	15 96       	adiw	r26, 0x05	; 5
    2ed0:	cd 90       	ld	r12, X+
    2ed2:	dd 90       	ld	r13, X+
    2ed4:	ed 90       	ld	r14, X+
    2ed6:	fc 90       	ld	r15, X
    2ed8:	18 97       	sbiw	r26, 0x08	; 8
					if(clockHasElapsedGetOverflow(start, delay, &overflow)){
    2eda:	c2 01       	movw	r24, r4
    2edc:	b1 01       	movw	r22, r2
    2ede:	a7 01       	movw	r20, r14
    2ee0:	96 01       	movw	r18, r12
    2ee2:	8e 01       	movw	r16, r28
    2ee4:	0f 5f       	subi	r16, 0xFF	; 255
    2ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee8:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <clockHasElapsedGetOverflow>
    2eec:	88 23       	and	r24, r24
    2eee:	19 f1       	breq	.+70     	; 0x2f36 <__scheduleUpdate+0xfc>
						SchedulerCallback callback = job->callback;
    2ef0:	d5 01       	movw	r26, r10
    2ef2:	11 96       	adiw	r26, 0x01	; 1
    2ef4:	ed 91       	ld	r30, X+
    2ef6:	fc 91       	ld	r31, X
    2ef8:	12 97       	sbiw	r26, 0x02	; 2
						SchedulerData data = job->data;
    2efa:	13 96       	adiw	r26, 0x03	; 3
    2efc:	8d 91       	ld	r24, X+
    2efe:	9c 91       	ld	r25, X
    2f00:	14 97       	sbiw	r26, 0x04	; 4

						// Mark this job as unused. No more references shoud be made to job->xxxx
						job->used = FALSE;
    2f02:	1c 92       	st	X, r1
						--__numJobs;
    2f04:	20 91 50 04 	lds	r18, 0x0450
    2f08:	30 91 51 04 	lds	r19, 0x0451
    2f0c:	21 50       	subi	r18, 0x01	; 1
    2f0e:	30 40       	sbci	r19, 0x00	; 0
    2f10:	30 93 51 04 	sts	0x0451, r19
    2f14:	20 93 50 04 	sts	0x0450, r18

						// Run the job with interrupts enabled
						callback(data,start+delay,overflow);
    2f18:	c2 0c       	add	r12, r2
    2f1a:	d3 1c       	adc	r13, r3
    2f1c:	e4 1c       	adc	r14, r4
    2f1e:	f5 1c       	adc	r15, r5
    2f20:	09 81       	ldd	r16, Y+1	; 0x01
    2f22:	1a 81       	ldd	r17, Y+2	; 0x02
    2f24:	2b 81       	ldd	r18, Y+3	; 0x03
    2f26:	3c 81       	ldd	r19, Y+4	; 0x04
    2f28:	b7 01       	movw	r22, r14
    2f2a:	a6 01       	movw	r20, r12
    2f2c:	09 95       	icall


						// Force another loop as the time taken may mean
						// something else can now run
						__recheck = TRUE;
    2f2e:	bf ef       	ldi	r27, 0xFF	; 255
    2f30:	b0 93 4f 04 	sts	0x044F, r27
    2f34:	12 c0       	rjmp	.+36     	; 0x2f5a <__scheduleUpdate+0x120>
					}else{
					   // overflow has the remaining number of microseconds to wait
					   if(lowest==0 || overflow < lowest){
    2f36:	61 14       	cp	r6, r1
    2f38:	71 04       	cpc	r7, r1
    2f3a:	81 04       	cpc	r8, r1
    2f3c:	91 04       	cpc	r9, r1
    2f3e:	49 f0       	breq	.+18     	; 0x2f52 <__scheduleUpdate+0x118>
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	9a 81       	ldd	r25, Y+2	; 0x02
    2f44:	ab 81       	ldd	r26, Y+3	; 0x03
    2f46:	bc 81       	ldd	r27, Y+4	; 0x04
    2f48:	86 15       	cp	r24, r6
    2f4a:	97 05       	cpc	r25, r7
    2f4c:	a8 05       	cpc	r26, r8
    2f4e:	b9 05       	cpc	r27, r9
    2f50:	20 f4       	brcc	.+8      	; 0x2f5a <__scheduleUpdate+0x120>
						   lowest = overflow;
    2f52:	69 80       	ldd	r6, Y+1	; 0x01
    2f54:	7a 80       	ldd	r7, Y+2	; 0x02
    2f56:	8b 80       	ldd	r8, Y+3	; 0x03
    2f58:	9c 80       	ldd	r9, Y+4	; 0x04
		do{
			int slot;
			__recheck = FALSE;
			JOB* job;
			lowest=0;
			for(slot=maxJobs-1, job=&__queue[slot]; slot>=0; slot--, job--){
    2f5a:	ed 81       	ldd	r30, Y+5	; 0x05
    2f5c:	fe 81       	ldd	r31, Y+6	; 0x06
    2f5e:	31 97       	sbiw	r30, 0x01	; 1
    2f60:	fe 83       	std	Y+6, r31	; 0x06
    2f62:	ed 83       	std	Y+5, r30	; 0x05
    2f64:	23 ef       	ldi	r18, 0xF3	; 243
    2f66:	3f ef       	ldi	r19, 0xFF	; 255
    2f68:	a2 0e       	add	r10, r18
    2f6a:	b3 1e       	adc	r11, r19
    2f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f70:	8f 5f       	subi	r24, 0xFF	; 255
    2f72:	9f 4f       	sbci	r25, 0xFF	; 255
    2f74:	09 f0       	breq	.+2      	; 0x2f78 <__scheduleUpdate+0x13e>
    2f76:	a0 cf       	rjmp	.-192    	; 0x2eb8 <__scheduleUpdate+0x7e>
						   lowest = overflow;
					   }
					}
				}
			}
		}while( __recheck);
    2f78:	80 91 4f 04 	lds	r24, 0x044F
    2f7c:	88 23       	and	r24, r24
    2f7e:	09 f0       	breq	.+2      	; 0x2f82 <__scheduleUpdate+0x148>
    2f80:	81 cf       	rjmp	.-254    	; 0x2e84 <__scheduleUpdate+0x4a>
		__running=FALSE;
    2f82:	10 92 4e 04 	sts	0x044E, r1

		if(__numJobs > 0){
    2f86:	80 91 50 04 	lds	r24, 0x0450
    2f8a:	90 91 51 04 	lds	r25, 0x0451
    2f8e:	18 16       	cp	r1, r24
    2f90:	19 06       	cpc	r1, r25
    2f92:	4c f5       	brge	.+82     	; 0x2fe6 <__scheduleUpdate+0x1ac>
			// Decide when we need to interrupt again
			uint16_t compare = calcTicks(lowest) + CLOCK_COUNTER;
    2f94:	20 91 24 01 	lds	r18, 0x0124
    2f98:	30 91 25 01 	lds	r19, 0x0125
    2f9c:	d4 01       	movw	r26, r8
    2f9e:	c3 01       	movw	r24, r6
    2fa0:	88 0f       	add	r24, r24
    2fa2:	99 1f       	adc	r25, r25
    2fa4:	aa 1f       	adc	r26, r26
    2fa6:	bb 1f       	adc	r27, r27
    2fa8:	81 30       	cpi	r24, 0x01	; 1
    2faa:	ea ef       	ldi	r30, 0xFA	; 250
    2fac:	9e 07       	cpc	r25, r30
    2fae:	e0 e0       	ldi	r30, 0x00	; 0
    2fb0:	ae 07       	cpc	r26, r30
    2fb2:	e0 e0       	ldi	r30, 0x00	; 0
    2fb4:	be 07       	cpc	r27, r30
    2fb6:	20 f0       	brcs	.+8      	; 0x2fc0 <__scheduleUpdate+0x186>
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	9a ef       	ldi	r25, 0xFA	; 250
    2fbc:	a0 e0       	ldi	r26, 0x00	; 0
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	82 0f       	add	r24, r18
    2fc2:	93 1f       	adc	r25, r19
    2fc4:	02 c0       	rjmp	.+4      	; 0x2fca <__scheduleUpdate+0x190>
			while(compare >= CLOCK_TOP){
				compare -= CLOCK_TOP;
    2fc6:	80 50       	subi	r24, 0x00	; 0
    2fc8:	9a 4f       	sbci	r25, 0xFA	; 250
		__running=FALSE;

		if(__numJobs > 0){
			// Decide when we need to interrupt again
			uint16_t compare = calcTicks(lowest) + CLOCK_COUNTER;
			while(compare >= CLOCK_TOP){
    2fca:	fa ef       	ldi	r31, 0xFA	; 250
    2fcc:	80 30       	cpi	r24, 0x00	; 0
    2fce:	9f 07       	cpc	r25, r31
    2fd0:	d0 f7       	brcc	.-12     	; 0x2fc6 <__scheduleUpdate+0x18c>
				compare -= CLOCK_TOP;
			}
			// Set when next interrupt should occur
			SCHEDULER_THRESHOLD = compare;
    2fd2:	90 93 2b 01 	sts	0x012B, r25
    2fd6:	80 93 2a 01 	sts	0x012A, r24
			// Clear any pending interrupt
			SCHEDULER_INT_CLEAR;
    2fda:	d2 9a       	sbi	0x1a, 2	; 26
			// Look for new interrupts
			SCHEDULER_INT_ENABLE;
    2fdc:	80 91 73 00 	lds	r24, 0x0073
    2fe0:	84 60       	ori	r24, 0x04	; 4
    2fe2:	80 93 73 00 	sts	0x0073, r24
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    2fe6:	2f 81       	ldd	r18, Y+7	; 0x07
    2fe8:	2f bf       	out	0x3f, r18	; 63
		}

	} // Restore previous interrupt enable
}
    2fea:	27 96       	adiw	r28, 0x07	; 7
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	cd bf       	out	0x3d, r28	; 61
    2ff6:	cf 91       	pop	r28
    2ff8:	df 91       	pop	r29
    2ffa:	1f 91       	pop	r17
    2ffc:	0f 91       	pop	r16
    2ffe:	ff 90       	pop	r15
    3000:	ef 90       	pop	r14
    3002:	df 90       	pop	r13
    3004:	cf 90       	pop	r12
    3006:	bf 90       	pop	r11
    3008:	af 90       	pop	r10
    300a:	9f 90       	pop	r9
    300c:	8f 90       	pop	r8
    300e:	7f 90       	pop	r7
    3010:	6f 90       	pop	r6
    3012:	5f 90       	pop	r5
    3014:	4f 90       	pop	r4
    3016:	3f 90       	pop	r3
    3018:	2f 90       	pop	r2
    301a:	08 95       	ret

0000301c <__vector_48>:
}



// ISR for scheduler match - check if another job needs to run
ISR(TIMER5_COMPB_vect) {
    301c:	1f 92       	push	r1
    301e:	0f 92       	push	r0
    3020:	0f b6       	in	r0, 0x3f	; 63
    3022:	0f 92       	push	r0
    3024:	11 24       	eor	r1, r1
    3026:	2f 93       	push	r18
    3028:	3f 93       	push	r19
    302a:	4f 93       	push	r20
    302c:	5f 93       	push	r21
    302e:	6f 93       	push	r22
    3030:	7f 93       	push	r23
    3032:	8f 93       	push	r24
    3034:	9f 93       	push	r25
    3036:	af 93       	push	r26
    3038:	bf 93       	push	r27
    303a:	ef 93       	push	r30
    303c:	ff 93       	push	r31
	__scheduleUpdate();
    303e:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__scheduleUpdate>
}
    3042:	ff 91       	pop	r31
    3044:	ef 91       	pop	r30
    3046:	bf 91       	pop	r27
    3048:	af 91       	pop	r26
    304a:	9f 91       	pop	r25
    304c:	8f 91       	pop	r24
    304e:	7f 91       	pop	r23
    3050:	6f 91       	pop	r22
    3052:	5f 91       	pop	r21
    3054:	4f 91       	pop	r20
    3056:	3f 91       	pop	r19
    3058:	2f 91       	pop	r18
    305a:	0f 90       	pop	r0
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	0f 90       	pop	r0
    3060:	1f 90       	pop	r1
    3062:	18 95       	reti

00003064 <scheduleJob>:
// schedule a new job
// callback Is the function to be run at a later date
// data is a block of data to be passed into the callback
// start (in us) Is the start time of the delay
// delay (in us) Is the amount to delay by
void scheduleJob(SchedulerCallback callback, SchedulerData data, TICK_COUNT start, TICK_COUNT delay){
    3064:	2f 92       	push	r2
    3066:	3f 92       	push	r3
    3068:	4f 92       	push	r4
    306a:	5f 92       	push	r5
    306c:	6f 92       	push	r6
    306e:	7f 92       	push	r7
    3070:	8f 92       	push	r8
    3072:	9f 92       	push	r9
    3074:	af 92       	push	r10
    3076:	bf 92       	push	r11
    3078:	cf 92       	push	r12
    307a:	df 92       	push	r13
    307c:	ef 92       	push	r14
    307e:	ff 92       	push	r15
    3080:	0f 93       	push	r16
    3082:	1f 93       	push	r17
    3084:	df 93       	push	r29
    3086:	cf 93       	push	r28
    3088:	00 d0       	rcall	.+0      	; 0x308a <scheduleJob+0x26>
    308a:	00 d0       	rcall	.+0      	; 0x308c <scheduleJob+0x28>
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
    3090:	1c 01       	movw	r2, r24
    3092:	2b 01       	movw	r4, r22
    3094:	49 01       	movw	r8, r18
    3096:	5a 01       	movw	r10, r20
    3098:	67 01       	movw	r12, r14
    309a:	78 01       	movw	r14, r16
	boolean doItNow = FALSE;

 	if(delay < 1000U){
    309c:	88 ee       	ldi	r24, 0xE8	; 232
    309e:	c8 16       	cp	r12, r24
    30a0:	83 e0       	ldi	r24, 0x03	; 3
    30a2:	d8 06       	cpc	r13, r24
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	e8 06       	cpc	r14, r24
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	f8 06       	cpc	r15, r24
    30ac:	38 f4       	brcc	.+14     	; 0x30bc <scheduleJob+0x58>
		// it needs to happen now as the delay is less than the heartbeat timer interrupt of 1ms
		if(__running){
    30ae:	80 91 4e 04 	lds	r24, 0x044E
    30b2:	88 23       	and	r24, r24
    30b4:	c1 f1       	breq	.+112    	; 0x3126 <scheduleJob+0xc2>
			// make sure we do another loop of __scheduleUpdate to find it
			__recheck=TRUE;
    30b6:	8f ef       	ldi	r24, 0xFF	; 255
    30b8:	80 93 4f 04 	sts	0x044F, r24

	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
    30bc:	6f b7       	in	r22, 0x3f	; 63
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
    30be:	f8 94       	cli
			for(slot=0; slot < maxJobs; slot++){
    30c0:	80 91 14 03 	lds	r24, 0x0314
    30c4:	48 2f       	mov	r20, r24
    30c6:	50 e0       	ldi	r21, 0x00	; 0
    30c8:	a1 e4       	ldi	r26, 0x41	; 65
    30ca:	b4 e0       	ldi	r27, 0x04	; 4
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	20 c0       	rjmp	.+64     	; 0x3112 <scheduleJob+0xae>

	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
    30d2:	fd 01       	movw	r30, r26
			for(slot=0; slot < maxJobs; slot++){
				JOB* job = &__queue[slot];
				if(!job->used){
    30d4:	8c 91       	ld	r24, X
    30d6:	1d 96       	adiw	r26, 0x0d	; 13
    30d8:	88 23       	and	r24, r24
    30da:	c9 f4       	brne	.+50     	; 0x310e <scheduleJob+0xaa>
					job->used = TRUE;
    30dc:	8f ef       	ldi	r24, 0xFF	; 255
    30de:	80 83       	st	Z, r24
					job->callback = callback;
    30e0:	32 82       	std	Z+2, r3	; 0x02
    30e2:	21 82       	std	Z+1, r2	; 0x01
					job->data = data;
    30e4:	54 82       	std	Z+4, r5	; 0x04
    30e6:	43 82       	std	Z+3, r4	; 0x03
					job->start=start;
    30e8:	81 86       	std	Z+9, r8	; 0x09
    30ea:	92 86       	std	Z+10, r9	; 0x0a
    30ec:	a3 86       	std	Z+11, r10	; 0x0b
    30ee:	b4 86       	std	Z+12, r11	; 0x0c
					job->delay=delay;
    30f0:	c5 82       	std	Z+5, r12	; 0x05
    30f2:	d6 82       	std	Z+6, r13	; 0x06
    30f4:	e7 82       	std	Z+7, r14	; 0x07
    30f6:	f0 86       	std	Z+8, r15	; 0x08
					found=TRUE;
					__numJobs++;
    30f8:	80 91 50 04 	lds	r24, 0x0450
    30fc:	90 91 51 04 	lds	r25, 0x0451
    3100:	01 96       	adiw	r24, 0x01	; 1
    3102:	90 93 51 04 	sts	0x0451, r25
    3106:	80 93 50 04 	sts	0x0450, r24
    310a:	8f ef       	ldi	r24, 0xFF	; 255
    310c:	06 c0       	rjmp	.+12     	; 0x311a <scheduleJob+0xb6>
	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
			for(slot=0; slot < maxJobs; slot++){
    310e:	2f 5f       	subi	r18, 0xFF	; 255
    3110:	3f 4f       	sbci	r19, 0xFF	; 255
    3112:	24 17       	cp	r18, r20
    3114:	35 07       	cpc	r19, r21
    3116:	ec f2       	brlt	.-70     	; 0x30d2 <scheduleJob+0x6e>
    3118:	80 e0       	ldi	r24, 0x00	; 0
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    311a:	6f bf       	out	0x3f, r22	; 63
					break;
				}
			}
		}

		if(!found){
    311c:	88 23       	and	r24, r24
    311e:	f1 f4       	brne	.+60     	; 0x315c <scheduleJob+0xf8>
			// the queue is exhausted
			setError(SCHEDULER_EXHAUSTED);
    3120:	8f ef       	ldi	r24, 0xFF	; 255
    3122:	0e 94 14 10 	call	0x2028	; 0x2028 <setError>
	if(doItNow){
		// we need to do it now
		TICK_COUNT overflow;

		// wait for expiry
		while(!clockHasElapsedGetOverflow(start, delay, &overflow));
    3126:	3e 01       	movw	r6, r28
    3128:	08 94       	sec
    312a:	61 1c       	adc	r6, r1
    312c:	71 1c       	adc	r7, r1
    312e:	c5 01       	movw	r24, r10
    3130:	b4 01       	movw	r22, r8
    3132:	a7 01       	movw	r20, r14
    3134:	96 01       	movw	r18, r12
    3136:	83 01       	movw	r16, r6
    3138:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <clockHasElapsedGetOverflow>
    313c:	88 23       	and	r24, r24
    313e:	b9 f3       	breq	.-18     	; 0x312e <scheduleJob+0xca>

		// call the queued routine
		callback(data,start+delay,overflow);
    3140:	c8 0c       	add	r12, r8
    3142:	d9 1c       	adc	r13, r9
    3144:	ea 1c       	adc	r14, r10
    3146:	fb 1c       	adc	r15, r11
    3148:	09 81       	ldd	r16, Y+1	; 0x01
    314a:	1a 81       	ldd	r17, Y+2	; 0x02
    314c:	2b 81       	ldd	r18, Y+3	; 0x03
    314e:	3c 81       	ldd	r19, Y+4	; 0x04
    3150:	c2 01       	movw	r24, r4
    3152:	b7 01       	movw	r22, r14
    3154:	a6 01       	movw	r20, r12
    3156:	f1 01       	movw	r30, r2
    3158:	09 95       	icall
    315a:	06 c0       	rjmp	.+12     	; 0x3168 <scheduleJob+0x104>
	}else{
		if(!__running){
    315c:	80 91 4e 04 	lds	r24, 0x044E
    3160:	88 23       	and	r24, r24
    3162:	11 f4       	brne	.+4      	; 0x3168 <scheduleJob+0x104>
			__scheduleUpdate();
    3164:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__scheduleUpdate>
		}
	}
}
    3168:	0f 90       	pop	r0
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	0f 90       	pop	r0
    3170:	cf 91       	pop	r28
    3172:	df 91       	pop	r29
    3174:	1f 91       	pop	r17
    3176:	0f 91       	pop	r16
    3178:	ff 90       	pop	r15
    317a:	ef 90       	pop	r14
    317c:	df 90       	pop	r13
    317e:	cf 90       	pop	r12
    3180:	bf 90       	pop	r11
    3182:	af 90       	pop	r10
    3184:	9f 90       	pop	r9
    3186:	8f 90       	pop	r8
    3188:	7f 90       	pop	r7
    318a:	6f 90       	pop	r6
    318c:	5f 90       	pop	r5
    318e:	4f 90       	pop	r4
    3190:	3f 90       	pop	r3
    3192:	2f 90       	pop	r2
    3194:	08 95       	ret

00003196 <vfprintf>:
    3196:	a1 e1       	ldi	r26, 0x11	; 17
    3198:	b0 e0       	ldi	r27, 0x00	; 0
    319a:	e1 ed       	ldi	r30, 0xD1	; 209
    319c:	f8 e1       	ldi	r31, 0x18	; 24
    319e:	0c 94 03 20 	jmp	0x4006	; 0x4006 <__prologue_saves__>
    31a2:	3c 01       	movw	r6, r24
    31a4:	7f 87       	std	Y+15, r23	; 0x0f
    31a6:	6e 87       	std	Y+14, r22	; 0x0e
    31a8:	6a 01       	movw	r12, r20
    31aa:	fc 01       	movw	r30, r24
    31ac:	17 82       	std	Z+7, r1	; 0x07
    31ae:	16 82       	std	Z+6, r1	; 0x06
    31b0:	83 81       	ldd	r24, Z+3	; 0x03
    31b2:	81 fd       	sbrc	r24, 1
    31b4:	03 c0       	rjmp	.+6      	; 0x31bc <vfprintf+0x26>
    31b6:	6f ef       	ldi	r22, 0xFF	; 255
    31b8:	7f ef       	ldi	r23, 0xFF	; 255
    31ba:	6f c3       	rjmp	.+1758   	; 0x389a <vfprintf+0x704>
    31bc:	9e 01       	movw	r18, r28
    31be:	2f 5f       	subi	r18, 0xFF	; 255
    31c0:	3f 4f       	sbci	r19, 0xFF	; 255
    31c2:	39 8b       	std	Y+17, r19	; 0x11
    31c4:	28 8b       	std	Y+16, r18	; 0x10
    31c6:	f3 01       	movw	r30, r6
    31c8:	23 81       	ldd	r18, Z+3	; 0x03
    31ca:	ee 85       	ldd	r30, Y+14	; 0x0e
    31cc:	ff 85       	ldd	r31, Y+15	; 0x0f
    31ce:	23 fd       	sbrc	r18, 3
    31d0:	85 91       	lpm	r24, Z+
    31d2:	23 ff       	sbrs	r18, 3
    31d4:	81 91       	ld	r24, Z+
    31d6:	ff 87       	std	Y+15, r31	; 0x0f
    31d8:	ee 87       	std	Y+14, r30	; 0x0e
    31da:	88 23       	and	r24, r24
    31dc:	09 f4       	brne	.+2      	; 0x31e0 <vfprintf+0x4a>
    31de:	5a c3       	rjmp	.+1716   	; 0x3894 <vfprintf+0x6fe>
    31e0:	85 32       	cpi	r24, 0x25	; 37
    31e2:	51 f4       	brne	.+20     	; 0x31f8 <vfprintf+0x62>
    31e4:	ee 85       	ldd	r30, Y+14	; 0x0e
    31e6:	ff 85       	ldd	r31, Y+15	; 0x0f
    31e8:	23 fd       	sbrc	r18, 3
    31ea:	85 91       	lpm	r24, Z+
    31ec:	23 ff       	sbrs	r18, 3
    31ee:	81 91       	ld	r24, Z+
    31f0:	ff 87       	std	Y+15, r31	; 0x0f
    31f2:	ee 87       	std	Y+14, r30	; 0x0e
    31f4:	85 32       	cpi	r24, 0x25	; 37
    31f6:	29 f4       	brne	.+10     	; 0x3202 <vfprintf+0x6c>
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	b3 01       	movw	r22, r6
    31fc:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    3200:	e2 cf       	rjmp	.-60     	; 0x31c6 <vfprintf+0x30>
    3202:	98 2f       	mov	r25, r24
    3204:	10 e0       	ldi	r17, 0x00	; 0
    3206:	88 24       	eor	r8, r8
    3208:	99 24       	eor	r9, r9
    320a:	10 32       	cpi	r17, 0x20	; 32
    320c:	b0 f4       	brcc	.+44     	; 0x323a <vfprintf+0xa4>
    320e:	9b 32       	cpi	r25, 0x2B	; 43
    3210:	69 f0       	breq	.+26     	; 0x322c <vfprintf+0x96>
    3212:	9c 32       	cpi	r25, 0x2C	; 44
    3214:	28 f4       	brcc	.+10     	; 0x3220 <vfprintf+0x8a>
    3216:	90 32       	cpi	r25, 0x20	; 32
    3218:	51 f0       	breq	.+20     	; 0x322e <vfprintf+0x98>
    321a:	93 32       	cpi	r25, 0x23	; 35
    321c:	71 f4       	brne	.+28     	; 0x323a <vfprintf+0xa4>
    321e:	0b c0       	rjmp	.+22     	; 0x3236 <vfprintf+0xa0>
    3220:	9d 32       	cpi	r25, 0x2D	; 45
    3222:	39 f0       	breq	.+14     	; 0x3232 <vfprintf+0x9c>
    3224:	90 33       	cpi	r25, 0x30	; 48
    3226:	49 f4       	brne	.+18     	; 0x323a <vfprintf+0xa4>
    3228:	11 60       	ori	r17, 0x01	; 1
    322a:	28 c0       	rjmp	.+80     	; 0x327c <vfprintf+0xe6>
    322c:	12 60       	ori	r17, 0x02	; 2
    322e:	14 60       	ori	r17, 0x04	; 4
    3230:	25 c0       	rjmp	.+74     	; 0x327c <vfprintf+0xe6>
    3232:	18 60       	ori	r17, 0x08	; 8
    3234:	23 c0       	rjmp	.+70     	; 0x327c <vfprintf+0xe6>
    3236:	10 61       	ori	r17, 0x10	; 16
    3238:	21 c0       	rjmp	.+66     	; 0x327c <vfprintf+0xe6>
    323a:	17 fd       	sbrc	r17, 7
    323c:	2a c0       	rjmp	.+84     	; 0x3292 <vfprintf+0xfc>
    323e:	89 2f       	mov	r24, r25
    3240:	80 53       	subi	r24, 0x30	; 48
    3242:	8a 30       	cpi	r24, 0x0A	; 10
    3244:	78 f4       	brcc	.+30     	; 0x3264 <vfprintf+0xce>
    3246:	16 ff       	sbrs	r17, 6
    3248:	06 c0       	rjmp	.+12     	; 0x3256 <vfprintf+0xc0>
    324a:	fa e0       	ldi	r31, 0x0A	; 10
    324c:	9f 9e       	mul	r9, r31
    324e:	90 2c       	mov	r9, r0
    3250:	11 24       	eor	r1, r1
    3252:	98 0e       	add	r9, r24
    3254:	13 c0       	rjmp	.+38     	; 0x327c <vfprintf+0xe6>
    3256:	3a e0       	ldi	r19, 0x0A	; 10
    3258:	83 9e       	mul	r8, r19
    325a:	80 2c       	mov	r8, r0
    325c:	11 24       	eor	r1, r1
    325e:	88 0e       	add	r8, r24
    3260:	10 62       	ori	r17, 0x20	; 32
    3262:	0c c0       	rjmp	.+24     	; 0x327c <vfprintf+0xe6>
    3264:	9e 32       	cpi	r25, 0x2E	; 46
    3266:	21 f4       	brne	.+8      	; 0x3270 <vfprintf+0xda>
    3268:	16 fd       	sbrc	r17, 6
    326a:	14 c3       	rjmp	.+1576   	; 0x3894 <vfprintf+0x6fe>
    326c:	10 64       	ori	r17, 0x40	; 64
    326e:	06 c0       	rjmp	.+12     	; 0x327c <vfprintf+0xe6>
    3270:	9c 36       	cpi	r25, 0x6C	; 108
    3272:	11 f4       	brne	.+4      	; 0x3278 <vfprintf+0xe2>
    3274:	10 68       	ori	r17, 0x80	; 128
    3276:	02 c0       	rjmp	.+4      	; 0x327c <vfprintf+0xe6>
    3278:	98 36       	cpi	r25, 0x68	; 104
    327a:	59 f4       	brne	.+22     	; 0x3292 <vfprintf+0xfc>
    327c:	ee 85       	ldd	r30, Y+14	; 0x0e
    327e:	ff 85       	ldd	r31, Y+15	; 0x0f
    3280:	23 fd       	sbrc	r18, 3
    3282:	95 91       	lpm	r25, Z+
    3284:	23 ff       	sbrs	r18, 3
    3286:	91 91       	ld	r25, Z+
    3288:	ff 87       	std	Y+15, r31	; 0x0f
    328a:	ee 87       	std	Y+14, r30	; 0x0e
    328c:	99 23       	and	r25, r25
    328e:	09 f0       	breq	.+2      	; 0x3292 <vfprintf+0xfc>
    3290:	bc cf       	rjmp	.-136    	; 0x320a <vfprintf+0x74>
    3292:	89 2f       	mov	r24, r25
    3294:	85 54       	subi	r24, 0x45	; 69
    3296:	83 30       	cpi	r24, 0x03	; 3
    3298:	20 f4       	brcc	.+8      	; 0x32a2 <vfprintf+0x10c>
    329a:	81 2f       	mov	r24, r17
    329c:	80 61       	ori	r24, 0x10	; 16
    329e:	90 5e       	subi	r25, 0xE0	; 224
    32a0:	07 c0       	rjmp	.+14     	; 0x32b0 <vfprintf+0x11a>
    32a2:	89 2f       	mov	r24, r25
    32a4:	85 56       	subi	r24, 0x65	; 101
    32a6:	83 30       	cpi	r24, 0x03	; 3
    32a8:	08 f0       	brcs	.+2      	; 0x32ac <vfprintf+0x116>
    32aa:	9f c1       	rjmp	.+830    	; 0x35ea <vfprintf+0x454>
    32ac:	81 2f       	mov	r24, r17
    32ae:	8f 7e       	andi	r24, 0xEF	; 239
    32b0:	86 fd       	sbrc	r24, 6
    32b2:	02 c0       	rjmp	.+4      	; 0x32b8 <vfprintf+0x122>
    32b4:	76 e0       	ldi	r23, 0x06	; 6
    32b6:	97 2e       	mov	r9, r23
    32b8:	6f e3       	ldi	r22, 0x3F	; 63
    32ba:	f6 2e       	mov	r15, r22
    32bc:	f8 22       	and	r15, r24
    32be:	95 36       	cpi	r25, 0x65	; 101
    32c0:	19 f4       	brne	.+6      	; 0x32c8 <vfprintf+0x132>
    32c2:	f0 e4       	ldi	r31, 0x40	; 64
    32c4:	ff 2a       	or	r15, r31
    32c6:	07 c0       	rjmp	.+14     	; 0x32d6 <vfprintf+0x140>
    32c8:	96 36       	cpi	r25, 0x66	; 102
    32ca:	19 f4       	brne	.+6      	; 0x32d2 <vfprintf+0x13c>
    32cc:	20 e8       	ldi	r18, 0x80	; 128
    32ce:	f2 2a       	or	r15, r18
    32d0:	02 c0       	rjmp	.+4      	; 0x32d6 <vfprintf+0x140>
    32d2:	91 10       	cpse	r9, r1
    32d4:	9a 94       	dec	r9
    32d6:	f7 fe       	sbrs	r15, 7
    32d8:	0a c0       	rjmp	.+20     	; 0x32ee <vfprintf+0x158>
    32da:	3b e3       	ldi	r19, 0x3B	; 59
    32dc:	39 15       	cp	r19, r9
    32de:	18 f4       	brcc	.+6      	; 0x32e6 <vfprintf+0x150>
    32e0:	5c e3       	ldi	r21, 0x3C	; 60
    32e2:	b5 2e       	mov	r11, r21
    32e4:	02 c0       	rjmp	.+4      	; 0x32ea <vfprintf+0x154>
    32e6:	b9 2c       	mov	r11, r9
    32e8:	b3 94       	inc	r11
    32ea:	27 e0       	ldi	r18, 0x07	; 7
    32ec:	09 c0       	rjmp	.+18     	; 0x3300 <vfprintf+0x16a>
    32ee:	47 e0       	ldi	r20, 0x07	; 7
    32f0:	49 15       	cp	r20, r9
    32f2:	20 f4       	brcc	.+8      	; 0x32fc <vfprintf+0x166>
    32f4:	bb 24       	eor	r11, r11
    32f6:	47 e0       	ldi	r20, 0x07	; 7
    32f8:	94 2e       	mov	r9, r20
    32fa:	f7 cf       	rjmp	.-18     	; 0x32ea <vfprintf+0x154>
    32fc:	29 2d       	mov	r18, r9
    32fe:	bb 24       	eor	r11, r11
    3300:	c6 01       	movw	r24, r12
    3302:	04 96       	adiw	r24, 0x04	; 4
    3304:	9d 87       	std	Y+13, r25	; 0x0d
    3306:	8c 87       	std	Y+12, r24	; 0x0c
    3308:	f6 01       	movw	r30, r12
    330a:	60 81       	ld	r22, Z
    330c:	71 81       	ldd	r23, Z+1	; 0x01
    330e:	82 81       	ldd	r24, Z+2	; 0x02
    3310:	93 81       	ldd	r25, Z+3	; 0x03
    3312:	ae 01       	movw	r20, r28
    3314:	4f 5f       	subi	r20, 0xFF	; 255
    3316:	5f 4f       	sbci	r21, 0xFF	; 255
    3318:	0b 2d       	mov	r16, r11
    331a:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <__ftoa_engine>
    331e:	6c 01       	movw	r12, r24
    3320:	09 81       	ldd	r16, Y+1	; 0x01
    3322:	20 2e       	mov	r2, r16
    3324:	33 24       	eor	r3, r3
    3326:	00 ff       	sbrs	r16, 0
    3328:	04 c0       	rjmp	.+8      	; 0x3332 <vfprintf+0x19c>
    332a:	03 fd       	sbrc	r16, 3
    332c:	02 c0       	rjmp	.+4      	; 0x3332 <vfprintf+0x19c>
    332e:	1d e2       	ldi	r17, 0x2D	; 45
    3330:	09 c0       	rjmp	.+18     	; 0x3344 <vfprintf+0x1ae>
    3332:	f1 fe       	sbrs	r15, 1
    3334:	02 c0       	rjmp	.+4      	; 0x333a <vfprintf+0x1a4>
    3336:	1b e2       	ldi	r17, 0x2B	; 43
    3338:	05 c0       	rjmp	.+10     	; 0x3344 <vfprintf+0x1ae>
    333a:	f2 fc       	sbrc	r15, 2
    333c:	02 c0       	rjmp	.+4      	; 0x3342 <vfprintf+0x1ac>
    333e:	10 e0       	ldi	r17, 0x00	; 0
    3340:	01 c0       	rjmp	.+2      	; 0x3344 <vfprintf+0x1ae>
    3342:	10 e2       	ldi	r17, 0x20	; 32
    3344:	c1 01       	movw	r24, r2
    3346:	8c 70       	andi	r24, 0x0C	; 12
    3348:	90 70       	andi	r25, 0x00	; 0
    334a:	89 2b       	or	r24, r25
    334c:	b9 f1       	breq	.+110    	; 0x33bc <vfprintf+0x226>
    334e:	11 23       	and	r17, r17
    3350:	11 f4       	brne	.+4      	; 0x3356 <vfprintf+0x1c0>
    3352:	83 e0       	ldi	r24, 0x03	; 3
    3354:	01 c0       	rjmp	.+2      	; 0x3358 <vfprintf+0x1c2>
    3356:	84 e0       	ldi	r24, 0x04	; 4
    3358:	88 15       	cp	r24, r8
    335a:	10 f0       	brcs	.+4      	; 0x3360 <vfprintf+0x1ca>
    335c:	88 24       	eor	r8, r8
    335e:	0a c0       	rjmp	.+20     	; 0x3374 <vfprintf+0x1de>
    3360:	88 1a       	sub	r8, r24
    3362:	f3 fc       	sbrc	r15, 3
    3364:	07 c0       	rjmp	.+14     	; 0x3374 <vfprintf+0x1de>
    3366:	80 e2       	ldi	r24, 0x20	; 32
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	b3 01       	movw	r22, r6
    336c:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    3370:	8a 94       	dec	r8
    3372:	c9 f7       	brne	.-14     	; 0x3366 <vfprintf+0x1d0>
    3374:	11 23       	and	r17, r17
    3376:	29 f0       	breq	.+10     	; 0x3382 <vfprintf+0x1ec>
    3378:	81 2f       	mov	r24, r17
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	b3 01       	movw	r22, r6
    337e:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    3382:	23 fe       	sbrs	r2, 3
    3384:	03 c0       	rjmp	.+6      	; 0x338c <vfprintf+0x1f6>
    3386:	04 ee       	ldi	r16, 0xE4	; 228
    3388:	10 e0       	ldi	r17, 0x00	; 0
    338a:	0e c0       	rjmp	.+28     	; 0x33a8 <vfprintf+0x212>
    338c:	08 ee       	ldi	r16, 0xE8	; 232
    338e:	10 e0       	ldi	r17, 0x00	; 0
    3390:	0b c0       	rjmp	.+22     	; 0x33a8 <vfprintf+0x212>
    3392:	e1 14       	cp	r14, r1
    3394:	f1 04       	cpc	r15, r1
    3396:	09 f0       	breq	.+2      	; 0x339a <vfprintf+0x204>
    3398:	80 52       	subi	r24, 0x20	; 32
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	b3 01       	movw	r22, r6
    339e:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    33a2:	0f 5f       	subi	r16, 0xFF	; 255
    33a4:	1f 4f       	sbci	r17, 0xFF	; 255
    33a6:	05 c0       	rjmp	.+10     	; 0x33b2 <vfprintf+0x21c>
    33a8:	ef 2c       	mov	r14, r15
    33aa:	ff 24       	eor	r15, r15
    33ac:	f0 e1       	ldi	r31, 0x10	; 16
    33ae:	ef 22       	and	r14, r31
    33b0:	ff 24       	eor	r15, r15
    33b2:	f8 01       	movw	r30, r16
    33b4:	84 91       	lpm	r24, Z+
    33b6:	88 23       	and	r24, r24
    33b8:	61 f7       	brne	.-40     	; 0x3392 <vfprintf+0x1fc>
    33ba:	14 c1       	rjmp	.+552    	; 0x35e4 <vfprintf+0x44e>
    33bc:	f7 fe       	sbrs	r15, 7
    33be:	12 c0       	rjmp	.+36     	; 0x33e4 <vfprintf+0x24e>
    33c0:	bc 0c       	add	r11, r12
    33c2:	24 fe       	sbrs	r2, 4
    33c4:	04 c0       	rjmp	.+8      	; 0x33ce <vfprintf+0x238>
    33c6:	8a 81       	ldd	r24, Y+2	; 0x02
    33c8:	81 33       	cpi	r24, 0x31	; 49
    33ca:	09 f4       	brne	.+2      	; 0x33ce <vfprintf+0x238>
    33cc:	ba 94       	dec	r11
    33ce:	1b 14       	cp	r1, r11
    33d0:	1c f0       	brlt	.+6      	; 0x33d8 <vfprintf+0x242>
    33d2:	bb 24       	eor	r11, r11
    33d4:	b3 94       	inc	r11
    33d6:	2d c0       	rjmp	.+90     	; 0x3432 <vfprintf+0x29c>
    33d8:	f8 e0       	ldi	r31, 0x08	; 8
    33da:	fb 15       	cp	r31, r11
    33dc:	50 f5       	brcc	.+84     	; 0x3432 <vfprintf+0x29c>
    33de:	38 e0       	ldi	r19, 0x08	; 8
    33e0:	b3 2e       	mov	r11, r19
    33e2:	27 c0       	rjmp	.+78     	; 0x3432 <vfprintf+0x29c>
    33e4:	f6 fc       	sbrc	r15, 6
    33e6:	25 c0       	rjmp	.+74     	; 0x3432 <vfprintf+0x29c>
    33e8:	89 2d       	mov	r24, r9
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	8c 15       	cp	r24, r12
    33ee:	9d 05       	cpc	r25, r13
    33f0:	4c f0       	brlt	.+18     	; 0x3404 <vfprintf+0x26e>
    33f2:	2c ef       	ldi	r18, 0xFC	; 252
    33f4:	c2 16       	cp	r12, r18
    33f6:	2f ef       	ldi	r18, 0xFF	; 255
    33f8:	d2 06       	cpc	r13, r18
    33fa:	24 f0       	brlt	.+8      	; 0x3404 <vfprintf+0x26e>
    33fc:	30 e8       	ldi	r19, 0x80	; 128
    33fe:	f3 2a       	or	r15, r19
    3400:	01 c0       	rjmp	.+2      	; 0x3404 <vfprintf+0x26e>
    3402:	9a 94       	dec	r9
    3404:	99 20       	and	r9, r9
    3406:	49 f0       	breq	.+18     	; 0x341a <vfprintf+0x284>
    3408:	e2 e0       	ldi	r30, 0x02	; 2
    340a:	f0 e0       	ldi	r31, 0x00	; 0
    340c:	ec 0f       	add	r30, r28
    340e:	fd 1f       	adc	r31, r29
    3410:	e9 0d       	add	r30, r9
    3412:	f1 1d       	adc	r31, r1
    3414:	80 81       	ld	r24, Z
    3416:	80 33       	cpi	r24, 0x30	; 48
    3418:	a1 f3       	breq	.-24     	; 0x3402 <vfprintf+0x26c>
    341a:	f7 fe       	sbrs	r15, 7
    341c:	0a c0       	rjmp	.+20     	; 0x3432 <vfprintf+0x29c>
    341e:	b9 2c       	mov	r11, r9
    3420:	b3 94       	inc	r11
    3422:	89 2d       	mov	r24, r9
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	c8 16       	cp	r12, r24
    3428:	d9 06       	cpc	r13, r25
    342a:	14 f0       	brlt	.+4      	; 0x3430 <vfprintf+0x29a>
    342c:	99 24       	eor	r9, r9
    342e:	01 c0       	rjmp	.+2      	; 0x3432 <vfprintf+0x29c>
    3430:	9c 18       	sub	r9, r12
    3432:	f7 fc       	sbrc	r15, 7
    3434:	03 c0       	rjmp	.+6      	; 0x343c <vfprintf+0x2a6>
    3436:	25 e0       	ldi	r18, 0x05	; 5
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	09 c0       	rjmp	.+18     	; 0x344e <vfprintf+0x2b8>
    343c:	1c 14       	cp	r1, r12
    343e:	1d 04       	cpc	r1, r13
    3440:	1c f0       	brlt	.+6      	; 0x3448 <vfprintf+0x2b2>
    3442:	21 e0       	ldi	r18, 0x01	; 1
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	03 c0       	rjmp	.+6      	; 0x344e <vfprintf+0x2b8>
    3448:	96 01       	movw	r18, r12
    344a:	2f 5f       	subi	r18, 0xFF	; 255
    344c:	3f 4f       	sbci	r19, 0xFF	; 255
    344e:	11 23       	and	r17, r17
    3450:	11 f0       	breq	.+4      	; 0x3456 <vfprintf+0x2c0>
    3452:	2f 5f       	subi	r18, 0xFF	; 255
    3454:	3f 4f       	sbci	r19, 0xFF	; 255
    3456:	99 20       	and	r9, r9
    3458:	29 f0       	breq	.+10     	; 0x3464 <vfprintf+0x2ce>
    345a:	89 2d       	mov	r24, r9
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	01 96       	adiw	r24, 0x01	; 1
    3460:	28 0f       	add	r18, r24
    3462:	39 1f       	adc	r19, r25
    3464:	88 2d       	mov	r24, r8
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	28 17       	cp	r18, r24
    346a:	39 07       	cpc	r19, r25
    346c:	14 f0       	brlt	.+4      	; 0x3472 <vfprintf+0x2dc>
    346e:	88 24       	eor	r8, r8
    3470:	01 c0       	rjmp	.+2      	; 0x3474 <vfprintf+0x2de>
    3472:	82 1a       	sub	r8, r18
    3474:	4f 2c       	mov	r4, r15
    3476:	55 24       	eor	r5, r5
    3478:	c2 01       	movw	r24, r4
    347a:	89 70       	andi	r24, 0x09	; 9
    347c:	90 70       	andi	r25, 0x00	; 0
    347e:	89 2b       	or	r24, r25
    3480:	39 f0       	breq	.+14     	; 0x3490 <vfprintf+0x2fa>
    3482:	08 c0       	rjmp	.+16     	; 0x3494 <vfprintf+0x2fe>
    3484:	80 e2       	ldi	r24, 0x20	; 32
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	b3 01       	movw	r22, r6
    348a:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    348e:	8a 94       	dec	r8
    3490:	88 20       	and	r8, r8
    3492:	c1 f7       	brne	.-16     	; 0x3484 <vfprintf+0x2ee>
    3494:	11 23       	and	r17, r17
    3496:	29 f0       	breq	.+10     	; 0x34a2 <vfprintf+0x30c>
    3498:	81 2f       	mov	r24, r17
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	b3 01       	movw	r22, r6
    349e:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    34a2:	43 fe       	sbrs	r4, 3
    34a4:	07 c0       	rjmp	.+14     	; 0x34b4 <vfprintf+0x31e>
    34a6:	08 c0       	rjmp	.+16     	; 0x34b8 <vfprintf+0x322>
    34a8:	80 e3       	ldi	r24, 0x30	; 48
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	b3 01       	movw	r22, r6
    34ae:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    34b2:	8a 94       	dec	r8
    34b4:	88 20       	and	r8, r8
    34b6:	c1 f7       	brne	.-16     	; 0x34a8 <vfprintf+0x312>
    34b8:	f7 fe       	sbrs	r15, 7
    34ba:	46 c0       	rjmp	.+140    	; 0x3548 <vfprintf+0x3b2>
    34bc:	86 01       	movw	r16, r12
    34be:	d7 fe       	sbrs	r13, 7
    34c0:	02 c0       	rjmp	.+4      	; 0x34c6 <vfprintf+0x330>
    34c2:	00 e0       	ldi	r16, 0x00	; 0
    34c4:	10 e0       	ldi	r17, 0x00	; 0
    34c6:	76 01       	movw	r14, r12
    34c8:	08 94       	sec
    34ca:	e1 1c       	adc	r14, r1
    34cc:	f1 1c       	adc	r15, r1
    34ce:	e0 1a       	sub	r14, r16
    34d0:	f1 0a       	sbc	r15, r17
    34d2:	41 e0       	ldi	r20, 0x01	; 1
    34d4:	50 e0       	ldi	r21, 0x00	; 0
    34d6:	4c 0f       	add	r20, r28
    34d8:	5d 1f       	adc	r21, r29
    34da:	e4 0e       	add	r14, r20
    34dc:	f5 1e       	adc	r15, r21
    34de:	26 01       	movw	r4, r12
    34e0:	4b 18       	sub	r4, r11
    34e2:	51 08       	sbc	r5, r1
    34e4:	89 2d       	mov	r24, r9
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	aa 24       	eor	r10, r10
    34ea:	bb 24       	eor	r11, r11
    34ec:	a8 1a       	sub	r10, r24
    34ee:	b9 0a       	sbc	r11, r25
    34f0:	5f ef       	ldi	r21, 0xFF	; 255
    34f2:	0f 3f       	cpi	r16, 0xFF	; 255
    34f4:	15 07       	cpc	r17, r21
    34f6:	29 f4       	brne	.+10     	; 0x3502 <vfprintf+0x36c>
    34f8:	8e e2       	ldi	r24, 0x2E	; 46
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	b3 01       	movw	r22, r6
    34fe:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    3502:	c0 16       	cp	r12, r16
    3504:	d1 06       	cpc	r13, r17
    3506:	34 f0       	brlt	.+12     	; 0x3514 <vfprintf+0x37e>
    3508:	40 16       	cp	r4, r16
    350a:	51 06       	cpc	r5, r17
    350c:	1c f4       	brge	.+6      	; 0x3514 <vfprintf+0x37e>
    350e:	f7 01       	movw	r30, r14
    3510:	80 81       	ld	r24, Z
    3512:	01 c0       	rjmp	.+2      	; 0x3516 <vfprintf+0x380>
    3514:	80 e3       	ldi	r24, 0x30	; 48
    3516:	01 50       	subi	r16, 0x01	; 1
    3518:	10 40       	sbci	r17, 0x00	; 0
    351a:	08 94       	sec
    351c:	e1 1c       	adc	r14, r1
    351e:	f1 1c       	adc	r15, r1
    3520:	0a 15       	cp	r16, r10
    3522:	1b 05       	cpc	r17, r11
    3524:	2c f0       	brlt	.+10     	; 0x3530 <vfprintf+0x39a>
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	b3 01       	movw	r22, r6
    352a:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    352e:	e0 cf       	rjmp	.-64     	; 0x34f0 <vfprintf+0x35a>
    3530:	0c 15       	cp	r16, r12
    3532:	1d 05       	cpc	r17, r13
    3534:	39 f4       	brne	.+14     	; 0x3544 <vfprintf+0x3ae>
    3536:	9a 81       	ldd	r25, Y+2	; 0x02
    3538:	96 33       	cpi	r25, 0x36	; 54
    353a:	18 f4       	brcc	.+6      	; 0x3542 <vfprintf+0x3ac>
    353c:	95 33       	cpi	r25, 0x35	; 53
    353e:	11 f4       	brne	.+4      	; 0x3544 <vfprintf+0x3ae>
    3540:	24 fe       	sbrs	r2, 4
    3542:	81 e3       	ldi	r24, 0x31	; 49
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	4b c0       	rjmp	.+150    	; 0x35de <vfprintf+0x448>
    3548:	8a 81       	ldd	r24, Y+2	; 0x02
    354a:	81 33       	cpi	r24, 0x31	; 49
    354c:	09 f0       	breq	.+2      	; 0x3550 <vfprintf+0x3ba>
    354e:	0f 7e       	andi	r16, 0xEF	; 239
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	b3 01       	movw	r22, r6
    3554:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    3558:	99 20       	and	r9, r9
    355a:	a1 f0       	breq	.+40     	; 0x3584 <vfprintf+0x3ee>
    355c:	8e e2       	ldi	r24, 0x2E	; 46
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	b3 01       	movw	r22, r6
    3562:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    3566:	12 e0       	ldi	r17, 0x02	; 2
    3568:	e1 e0       	ldi	r30, 0x01	; 1
    356a:	f0 e0       	ldi	r31, 0x00	; 0
    356c:	ec 0f       	add	r30, r28
    356e:	fd 1f       	adc	r31, r29
    3570:	e1 0f       	add	r30, r17
    3572:	f1 1d       	adc	r31, r1
    3574:	1f 5f       	subi	r17, 0xFF	; 255
    3576:	80 81       	ld	r24, Z
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	b3 01       	movw	r22, r6
    357c:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    3580:	9a 94       	dec	r9
    3582:	91 f7       	brne	.-28     	; 0x3568 <vfprintf+0x3d2>
    3584:	44 fc       	sbrc	r4, 4
    3586:	03 c0       	rjmp	.+6      	; 0x358e <vfprintf+0x3f8>
    3588:	85 e6       	ldi	r24, 0x65	; 101
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	02 c0       	rjmp	.+4      	; 0x3592 <vfprintf+0x3fc>
    358e:	85 e4       	ldi	r24, 0x45	; 69
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	b3 01       	movw	r22, r6
    3594:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    3598:	d7 fc       	sbrc	r13, 7
    359a:	05 c0       	rjmp	.+10     	; 0x35a6 <vfprintf+0x410>
    359c:	c1 14       	cp	r12, r1
    359e:	d1 04       	cpc	r13, r1
    35a0:	41 f4       	brne	.+16     	; 0x35b2 <vfprintf+0x41c>
    35a2:	04 ff       	sbrs	r16, 4
    35a4:	06 c0       	rjmp	.+12     	; 0x35b2 <vfprintf+0x41c>
    35a6:	d0 94       	com	r13
    35a8:	c1 94       	neg	r12
    35aa:	d1 08       	sbc	r13, r1
    35ac:	d3 94       	inc	r13
    35ae:	8d e2       	ldi	r24, 0x2D	; 45
    35b0:	01 c0       	rjmp	.+2      	; 0x35b4 <vfprintf+0x41e>
    35b2:	8b e2       	ldi	r24, 0x2B	; 43
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	b3 01       	movw	r22, r6
    35b8:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    35bc:	80 e3       	ldi	r24, 0x30	; 48
    35be:	05 c0       	rjmp	.+10     	; 0x35ca <vfprintf+0x434>
    35c0:	8f 5f       	subi	r24, 0xFF	; 255
    35c2:	26 ef       	ldi	r18, 0xF6	; 246
    35c4:	3f ef       	ldi	r19, 0xFF	; 255
    35c6:	c2 0e       	add	r12, r18
    35c8:	d3 1e       	adc	r13, r19
    35ca:	3a e0       	ldi	r19, 0x0A	; 10
    35cc:	c3 16       	cp	r12, r19
    35ce:	d1 04       	cpc	r13, r1
    35d0:	bc f7       	brge	.-18     	; 0x35c0 <vfprintf+0x42a>
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	b3 01       	movw	r22, r6
    35d6:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    35da:	c6 01       	movw	r24, r12
    35dc:	c0 96       	adiw	r24, 0x30	; 48
    35de:	b3 01       	movw	r22, r6
    35e0:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    35e4:	cc 84       	ldd	r12, Y+12	; 0x0c
    35e6:	dd 84       	ldd	r13, Y+13	; 0x0d
    35e8:	52 c1       	rjmp	.+676    	; 0x388e <vfprintf+0x6f8>
    35ea:	93 36       	cpi	r25, 0x63	; 99
    35ec:	31 f0       	breq	.+12     	; 0x35fa <vfprintf+0x464>
    35ee:	93 37       	cpi	r25, 0x73	; 115
    35f0:	99 f0       	breq	.+38     	; 0x3618 <vfprintf+0x482>
    35f2:	93 35       	cpi	r25, 0x53	; 83
    35f4:	09 f0       	breq	.+2      	; 0x35f8 <vfprintf+0x462>
    35f6:	59 c0       	rjmp	.+178    	; 0x36aa <vfprintf+0x514>
    35f8:	23 c0       	rjmp	.+70     	; 0x3640 <vfprintf+0x4aa>
    35fa:	f6 01       	movw	r30, r12
    35fc:	80 81       	ld	r24, Z
    35fe:	89 83       	std	Y+1, r24	; 0x01
    3600:	5e 01       	movw	r10, r28
    3602:	08 94       	sec
    3604:	a1 1c       	adc	r10, r1
    3606:	b1 1c       	adc	r11, r1
    3608:	22 e0       	ldi	r18, 0x02	; 2
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	c2 0e       	add	r12, r18
    360e:	d3 1e       	adc	r13, r19
    3610:	21 e0       	ldi	r18, 0x01	; 1
    3612:	e2 2e       	mov	r14, r18
    3614:	f1 2c       	mov	r15, r1
    3616:	12 c0       	rjmp	.+36     	; 0x363c <vfprintf+0x4a6>
    3618:	f6 01       	movw	r30, r12
    361a:	a0 80       	ld	r10, Z
    361c:	b1 80       	ldd	r11, Z+1	; 0x01
    361e:	16 fd       	sbrc	r17, 6
    3620:	03 c0       	rjmp	.+6      	; 0x3628 <vfprintf+0x492>
    3622:	6f ef       	ldi	r22, 0xFF	; 255
    3624:	7f ef       	ldi	r23, 0xFF	; 255
    3626:	02 c0       	rjmp	.+4      	; 0x362c <vfprintf+0x496>
    3628:	69 2d       	mov	r22, r9
    362a:	70 e0       	ldi	r23, 0x00	; 0
    362c:	22 e0       	ldi	r18, 0x02	; 2
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	c2 0e       	add	r12, r18
    3632:	d3 1e       	adc	r13, r19
    3634:	c5 01       	movw	r24, r10
    3636:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <strnlen>
    363a:	7c 01       	movw	r14, r24
    363c:	1f 77       	andi	r17, 0x7F	; 127
    363e:	13 c0       	rjmp	.+38     	; 0x3666 <vfprintf+0x4d0>
    3640:	f6 01       	movw	r30, r12
    3642:	a0 80       	ld	r10, Z
    3644:	b1 80       	ldd	r11, Z+1	; 0x01
    3646:	16 fd       	sbrc	r17, 6
    3648:	03 c0       	rjmp	.+6      	; 0x3650 <vfprintf+0x4ba>
    364a:	6f ef       	ldi	r22, 0xFF	; 255
    364c:	7f ef       	ldi	r23, 0xFF	; 255
    364e:	02 c0       	rjmp	.+4      	; 0x3654 <vfprintf+0x4be>
    3650:	69 2d       	mov	r22, r9
    3652:	70 e0       	ldi	r23, 0x00	; 0
    3654:	22 e0       	ldi	r18, 0x02	; 2
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	c2 0e       	add	r12, r18
    365a:	d3 1e       	adc	r13, r19
    365c:	c5 01       	movw	r24, r10
    365e:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <strnlen_P>
    3662:	7c 01       	movw	r14, r24
    3664:	10 68       	ori	r17, 0x80	; 128
    3666:	13 ff       	sbrs	r17, 3
    3668:	07 c0       	rjmp	.+14     	; 0x3678 <vfprintf+0x4e2>
    366a:	1b c0       	rjmp	.+54     	; 0x36a2 <vfprintf+0x50c>
    366c:	80 e2       	ldi	r24, 0x20	; 32
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	b3 01       	movw	r22, r6
    3672:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    3676:	8a 94       	dec	r8
    3678:	88 2d       	mov	r24, r8
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	e8 16       	cp	r14, r24
    367e:	f9 06       	cpc	r15, r25
    3680:	a8 f3       	brcs	.-22     	; 0x366c <vfprintf+0x4d6>
    3682:	0f c0       	rjmp	.+30     	; 0x36a2 <vfprintf+0x50c>
    3684:	f5 01       	movw	r30, r10
    3686:	17 fd       	sbrc	r17, 7
    3688:	85 91       	lpm	r24, Z+
    368a:	17 ff       	sbrs	r17, 7
    368c:	81 91       	ld	r24, Z+
    368e:	5f 01       	movw	r10, r30
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	b3 01       	movw	r22, r6
    3694:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    3698:	81 10       	cpse	r8, r1
    369a:	8a 94       	dec	r8
    369c:	08 94       	sec
    369e:	e1 08       	sbc	r14, r1
    36a0:	f1 08       	sbc	r15, r1
    36a2:	e1 14       	cp	r14, r1
    36a4:	f1 04       	cpc	r15, r1
    36a6:	71 f7       	brne	.-36     	; 0x3684 <vfprintf+0x4ee>
    36a8:	f2 c0       	rjmp	.+484    	; 0x388e <vfprintf+0x6f8>
    36aa:	94 36       	cpi	r25, 0x64	; 100
    36ac:	11 f0       	breq	.+4      	; 0x36b2 <vfprintf+0x51c>
    36ae:	99 36       	cpi	r25, 0x69	; 105
    36b0:	89 f5       	brne	.+98     	; 0x3714 <vfprintf+0x57e>
    36b2:	17 ff       	sbrs	r17, 7
    36b4:	08 c0       	rjmp	.+16     	; 0x36c6 <vfprintf+0x530>
    36b6:	f6 01       	movw	r30, r12
    36b8:	20 81       	ld	r18, Z
    36ba:	31 81       	ldd	r19, Z+1	; 0x01
    36bc:	42 81       	ldd	r20, Z+2	; 0x02
    36be:	53 81       	ldd	r21, Z+3	; 0x03
    36c0:	84 e0       	ldi	r24, 0x04	; 4
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	0a c0       	rjmp	.+20     	; 0x36da <vfprintf+0x544>
    36c6:	f6 01       	movw	r30, r12
    36c8:	80 81       	ld	r24, Z
    36ca:	91 81       	ldd	r25, Z+1	; 0x01
    36cc:	9c 01       	movw	r18, r24
    36ce:	44 27       	eor	r20, r20
    36d0:	37 fd       	sbrc	r19, 7
    36d2:	40 95       	com	r20
    36d4:	54 2f       	mov	r21, r20
    36d6:	82 e0       	ldi	r24, 0x02	; 2
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	c8 0e       	add	r12, r24
    36dc:	d9 1e       	adc	r13, r25
    36de:	9f e6       	ldi	r25, 0x6F	; 111
    36e0:	f9 2e       	mov	r15, r25
    36e2:	f1 22       	and	r15, r17
    36e4:	57 ff       	sbrs	r21, 7
    36e6:	09 c0       	rjmp	.+18     	; 0x36fa <vfprintf+0x564>
    36e8:	50 95       	com	r21
    36ea:	40 95       	com	r20
    36ec:	30 95       	com	r19
    36ee:	21 95       	neg	r18
    36f0:	3f 4f       	sbci	r19, 0xFF	; 255
    36f2:	4f 4f       	sbci	r20, 0xFF	; 255
    36f4:	5f 4f       	sbci	r21, 0xFF	; 255
    36f6:	90 e8       	ldi	r25, 0x80	; 128
    36f8:	f9 2a       	or	r15, r25
    36fa:	ca 01       	movw	r24, r20
    36fc:	b9 01       	movw	r22, r18
    36fe:	ae 01       	movw	r20, r28
    3700:	4f 5f       	subi	r20, 0xFF	; 255
    3702:	5f 4f       	sbci	r21, 0xFF	; 255
    3704:	2a e0       	ldi	r18, 0x0A	; 10
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__ultoa_invert>
    370c:	e8 2e       	mov	r14, r24
    370e:	e8 89       	ldd	r30, Y+16	; 0x10
    3710:	ee 1a       	sub	r14, r30
    3712:	41 c0       	rjmp	.+130    	; 0x3796 <vfprintf+0x600>
    3714:	95 37       	cpi	r25, 0x75	; 117
    3716:	21 f4       	brne	.+8      	; 0x3720 <vfprintf+0x58a>
    3718:	1f 7e       	andi	r17, 0xEF	; 239
    371a:	2a e0       	ldi	r18, 0x0A	; 10
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	1c c0       	rjmp	.+56     	; 0x3758 <vfprintf+0x5c2>
    3720:	19 7f       	andi	r17, 0xF9	; 249
    3722:	9f 36       	cpi	r25, 0x6F	; 111
    3724:	61 f0       	breq	.+24     	; 0x373e <vfprintf+0x5a8>
    3726:	90 37       	cpi	r25, 0x70	; 112
    3728:	20 f4       	brcc	.+8      	; 0x3732 <vfprintf+0x59c>
    372a:	98 35       	cpi	r25, 0x58	; 88
    372c:	09 f0       	breq	.+2      	; 0x3730 <vfprintf+0x59a>
    372e:	b2 c0       	rjmp	.+356    	; 0x3894 <vfprintf+0x6fe>
    3730:	0f c0       	rjmp	.+30     	; 0x3750 <vfprintf+0x5ba>
    3732:	90 37       	cpi	r25, 0x70	; 112
    3734:	39 f0       	breq	.+14     	; 0x3744 <vfprintf+0x5ae>
    3736:	98 37       	cpi	r25, 0x78	; 120
    3738:	09 f0       	breq	.+2      	; 0x373c <vfprintf+0x5a6>
    373a:	ac c0       	rjmp	.+344    	; 0x3894 <vfprintf+0x6fe>
    373c:	04 c0       	rjmp	.+8      	; 0x3746 <vfprintf+0x5b0>
    373e:	28 e0       	ldi	r18, 0x08	; 8
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	0a c0       	rjmp	.+20     	; 0x3758 <vfprintf+0x5c2>
    3744:	10 61       	ori	r17, 0x10	; 16
    3746:	14 fd       	sbrc	r17, 4
    3748:	14 60       	ori	r17, 0x04	; 4
    374a:	20 e1       	ldi	r18, 0x10	; 16
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	04 c0       	rjmp	.+8      	; 0x3758 <vfprintf+0x5c2>
    3750:	14 fd       	sbrc	r17, 4
    3752:	16 60       	ori	r17, 0x06	; 6
    3754:	20 e1       	ldi	r18, 0x10	; 16
    3756:	32 e0       	ldi	r19, 0x02	; 2
    3758:	17 ff       	sbrs	r17, 7
    375a:	08 c0       	rjmp	.+16     	; 0x376c <vfprintf+0x5d6>
    375c:	f6 01       	movw	r30, r12
    375e:	60 81       	ld	r22, Z
    3760:	71 81       	ldd	r23, Z+1	; 0x01
    3762:	82 81       	ldd	r24, Z+2	; 0x02
    3764:	93 81       	ldd	r25, Z+3	; 0x03
    3766:	44 e0       	ldi	r20, 0x04	; 4
    3768:	50 e0       	ldi	r21, 0x00	; 0
    376a:	08 c0       	rjmp	.+16     	; 0x377c <vfprintf+0x5e6>
    376c:	f6 01       	movw	r30, r12
    376e:	80 81       	ld	r24, Z
    3770:	91 81       	ldd	r25, Z+1	; 0x01
    3772:	bc 01       	movw	r22, r24
    3774:	80 e0       	ldi	r24, 0x00	; 0
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	42 e0       	ldi	r20, 0x02	; 2
    377a:	50 e0       	ldi	r21, 0x00	; 0
    377c:	c4 0e       	add	r12, r20
    377e:	d5 1e       	adc	r13, r21
    3780:	ae 01       	movw	r20, r28
    3782:	4f 5f       	subi	r20, 0xFF	; 255
    3784:	5f 4f       	sbci	r21, 0xFF	; 255
    3786:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__ultoa_invert>
    378a:	e8 2e       	mov	r14, r24
    378c:	58 89       	ldd	r21, Y+16	; 0x10
    378e:	e5 1a       	sub	r14, r21
    3790:	8f e7       	ldi	r24, 0x7F	; 127
    3792:	f8 2e       	mov	r15, r24
    3794:	f1 22       	and	r15, r17
    3796:	f6 fe       	sbrs	r15, 6
    3798:	0b c0       	rjmp	.+22     	; 0x37b0 <vfprintf+0x61a>
    379a:	8e ef       	ldi	r24, 0xFE	; 254
    379c:	f8 22       	and	r15, r24
    379e:	e9 14       	cp	r14, r9
    37a0:	38 f4       	brcc	.+14     	; 0x37b0 <vfprintf+0x61a>
    37a2:	f4 fe       	sbrs	r15, 4
    37a4:	07 c0       	rjmp	.+14     	; 0x37b4 <vfprintf+0x61e>
    37a6:	f2 fc       	sbrc	r15, 2
    37a8:	05 c0       	rjmp	.+10     	; 0x37b4 <vfprintf+0x61e>
    37aa:	9f ee       	ldi	r25, 0xEF	; 239
    37ac:	f9 22       	and	r15, r25
    37ae:	02 c0       	rjmp	.+4      	; 0x37b4 <vfprintf+0x61e>
    37b0:	1e 2d       	mov	r17, r14
    37b2:	01 c0       	rjmp	.+2      	; 0x37b6 <vfprintf+0x620>
    37b4:	19 2d       	mov	r17, r9
    37b6:	f4 fe       	sbrs	r15, 4
    37b8:	0d c0       	rjmp	.+26     	; 0x37d4 <vfprintf+0x63e>
    37ba:	fe 01       	movw	r30, r28
    37bc:	ee 0d       	add	r30, r14
    37be:	f1 1d       	adc	r31, r1
    37c0:	80 81       	ld	r24, Z
    37c2:	80 33       	cpi	r24, 0x30	; 48
    37c4:	19 f4       	brne	.+6      	; 0x37cc <vfprintf+0x636>
    37c6:	e9 ee       	ldi	r30, 0xE9	; 233
    37c8:	fe 22       	and	r15, r30
    37ca:	08 c0       	rjmp	.+16     	; 0x37dc <vfprintf+0x646>
    37cc:	1f 5f       	subi	r17, 0xFF	; 255
    37ce:	f2 fe       	sbrs	r15, 2
    37d0:	05 c0       	rjmp	.+10     	; 0x37dc <vfprintf+0x646>
    37d2:	03 c0       	rjmp	.+6      	; 0x37da <vfprintf+0x644>
    37d4:	8f 2d       	mov	r24, r15
    37d6:	86 78       	andi	r24, 0x86	; 134
    37d8:	09 f0       	breq	.+2      	; 0x37dc <vfprintf+0x646>
    37da:	1f 5f       	subi	r17, 0xFF	; 255
    37dc:	0f 2d       	mov	r16, r15
    37de:	f3 fc       	sbrc	r15, 3
    37e0:	14 c0       	rjmp	.+40     	; 0x380a <vfprintf+0x674>
    37e2:	f0 fe       	sbrs	r15, 0
    37e4:	0f c0       	rjmp	.+30     	; 0x3804 <vfprintf+0x66e>
    37e6:	18 15       	cp	r17, r8
    37e8:	10 f0       	brcs	.+4      	; 0x37ee <vfprintf+0x658>
    37ea:	9e 2c       	mov	r9, r14
    37ec:	0b c0       	rjmp	.+22     	; 0x3804 <vfprintf+0x66e>
    37ee:	9e 2c       	mov	r9, r14
    37f0:	98 0c       	add	r9, r8
    37f2:	91 1a       	sub	r9, r17
    37f4:	18 2d       	mov	r17, r8
    37f6:	06 c0       	rjmp	.+12     	; 0x3804 <vfprintf+0x66e>
    37f8:	80 e2       	ldi	r24, 0x20	; 32
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	b3 01       	movw	r22, r6
    37fe:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    3802:	1f 5f       	subi	r17, 0xFF	; 255
    3804:	18 15       	cp	r17, r8
    3806:	c0 f3       	brcs	.-16     	; 0x37f8 <vfprintf+0x662>
    3808:	04 c0       	rjmp	.+8      	; 0x3812 <vfprintf+0x67c>
    380a:	18 15       	cp	r17, r8
    380c:	10 f4       	brcc	.+4      	; 0x3812 <vfprintf+0x67c>
    380e:	81 1a       	sub	r8, r17
    3810:	01 c0       	rjmp	.+2      	; 0x3814 <vfprintf+0x67e>
    3812:	88 24       	eor	r8, r8
    3814:	04 ff       	sbrs	r16, 4
    3816:	0f c0       	rjmp	.+30     	; 0x3836 <vfprintf+0x6a0>
    3818:	80 e3       	ldi	r24, 0x30	; 48
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	b3 01       	movw	r22, r6
    381e:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    3822:	02 ff       	sbrs	r16, 2
    3824:	1d c0       	rjmp	.+58     	; 0x3860 <vfprintf+0x6ca>
    3826:	01 fd       	sbrc	r16, 1
    3828:	03 c0       	rjmp	.+6      	; 0x3830 <vfprintf+0x69a>
    382a:	88 e7       	ldi	r24, 0x78	; 120
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	0e c0       	rjmp	.+28     	; 0x384c <vfprintf+0x6b6>
    3830:	88 e5       	ldi	r24, 0x58	; 88
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	0b c0       	rjmp	.+22     	; 0x384c <vfprintf+0x6b6>
    3836:	80 2f       	mov	r24, r16
    3838:	86 78       	andi	r24, 0x86	; 134
    383a:	91 f0       	breq	.+36     	; 0x3860 <vfprintf+0x6ca>
    383c:	01 ff       	sbrs	r16, 1
    383e:	02 c0       	rjmp	.+4      	; 0x3844 <vfprintf+0x6ae>
    3840:	8b e2       	ldi	r24, 0x2B	; 43
    3842:	01 c0       	rjmp	.+2      	; 0x3846 <vfprintf+0x6b0>
    3844:	80 e2       	ldi	r24, 0x20	; 32
    3846:	f7 fc       	sbrc	r15, 7
    3848:	8d e2       	ldi	r24, 0x2D	; 45
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	b3 01       	movw	r22, r6
    384e:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    3852:	06 c0       	rjmp	.+12     	; 0x3860 <vfprintf+0x6ca>
    3854:	80 e3       	ldi	r24, 0x30	; 48
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	b3 01       	movw	r22, r6
    385a:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    385e:	9a 94       	dec	r9
    3860:	e9 14       	cp	r14, r9
    3862:	c0 f3       	brcs	.-16     	; 0x3854 <vfprintf+0x6be>
    3864:	ea 94       	dec	r14
    3866:	e1 e0       	ldi	r30, 0x01	; 1
    3868:	f0 e0       	ldi	r31, 0x00	; 0
    386a:	ec 0f       	add	r30, r28
    386c:	fd 1f       	adc	r31, r29
    386e:	ee 0d       	add	r30, r14
    3870:	f1 1d       	adc	r31, r1
    3872:	80 81       	ld	r24, Z
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	b3 01       	movw	r22, r6
    3878:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    387c:	ee 20       	and	r14, r14
    387e:	91 f7       	brne	.-28     	; 0x3864 <vfprintf+0x6ce>
    3880:	06 c0       	rjmp	.+12     	; 0x388e <vfprintf+0x6f8>
    3882:	80 e2       	ldi	r24, 0x20	; 32
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	b3 01       	movw	r22, r6
    3888:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <fputc>
    388c:	8a 94       	dec	r8
    388e:	88 20       	and	r8, r8
    3890:	c1 f7       	brne	.-16     	; 0x3882 <vfprintf+0x6ec>
    3892:	99 cc       	rjmp	.-1742   	; 0x31c6 <vfprintf+0x30>
    3894:	f3 01       	movw	r30, r6
    3896:	66 81       	ldd	r22, Z+6	; 0x06
    3898:	77 81       	ldd	r23, Z+7	; 0x07
    389a:	cb 01       	movw	r24, r22
    389c:	61 96       	adiw	r28, 0x11	; 17
    389e:	e2 e1       	ldi	r30, 0x12	; 18
    38a0:	0c 94 1f 20 	jmp	0x403e	; 0x403e <__epilogue_restores__>

000038a4 <malloc>:
    38a4:	cf 93       	push	r28
    38a6:	df 93       	push	r29
    38a8:	bc 01       	movw	r22, r24
    38aa:	82 30       	cpi	r24, 0x02	; 2
    38ac:	91 05       	cpc	r25, r1
    38ae:	10 f4       	brcc	.+4      	; 0x38b4 <malloc+0x10>
    38b0:	62 e0       	ldi	r22, 0x02	; 2
    38b2:	70 e0       	ldi	r23, 0x00	; 0
    38b4:	a0 91 5c 04 	lds	r26, 0x045C
    38b8:	b0 91 5d 04 	lds	r27, 0x045D
    38bc:	ed 01       	movw	r28, r26
    38be:	e0 e0       	ldi	r30, 0x00	; 0
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	40 e0       	ldi	r20, 0x00	; 0
    38c4:	50 e0       	ldi	r21, 0x00	; 0
    38c6:	21 c0       	rjmp	.+66     	; 0x390a <malloc+0x66>
    38c8:	88 81       	ld	r24, Y
    38ca:	99 81       	ldd	r25, Y+1	; 0x01
    38cc:	86 17       	cp	r24, r22
    38ce:	97 07       	cpc	r25, r23
    38d0:	69 f4       	brne	.+26     	; 0x38ec <malloc+0x48>
    38d2:	8a 81       	ldd	r24, Y+2	; 0x02
    38d4:	9b 81       	ldd	r25, Y+3	; 0x03
    38d6:	30 97       	sbiw	r30, 0x00	; 0
    38d8:	19 f0       	breq	.+6      	; 0x38e0 <malloc+0x3c>
    38da:	93 83       	std	Z+3, r25	; 0x03
    38dc:	82 83       	std	Z+2, r24	; 0x02
    38de:	04 c0       	rjmp	.+8      	; 0x38e8 <malloc+0x44>
    38e0:	90 93 5d 04 	sts	0x045D, r25
    38e4:	80 93 5c 04 	sts	0x045C, r24
    38e8:	fe 01       	movw	r30, r28
    38ea:	34 c0       	rjmp	.+104    	; 0x3954 <malloc+0xb0>
    38ec:	68 17       	cp	r22, r24
    38ee:	79 07       	cpc	r23, r25
    38f0:	38 f4       	brcc	.+14     	; 0x3900 <malloc+0x5c>
    38f2:	41 15       	cp	r20, r1
    38f4:	51 05       	cpc	r21, r1
    38f6:	19 f0       	breq	.+6      	; 0x38fe <malloc+0x5a>
    38f8:	84 17       	cp	r24, r20
    38fa:	95 07       	cpc	r25, r21
    38fc:	08 f4       	brcc	.+2      	; 0x3900 <malloc+0x5c>
    38fe:	ac 01       	movw	r20, r24
    3900:	fe 01       	movw	r30, r28
    3902:	8a 81       	ldd	r24, Y+2	; 0x02
    3904:	9b 81       	ldd	r25, Y+3	; 0x03
    3906:	9c 01       	movw	r18, r24
    3908:	e9 01       	movw	r28, r18
    390a:	20 97       	sbiw	r28, 0x00	; 0
    390c:	e9 f6       	brne	.-70     	; 0x38c8 <malloc+0x24>
    390e:	41 15       	cp	r20, r1
    3910:	51 05       	cpc	r21, r1
    3912:	a9 f1       	breq	.+106    	; 0x397e <malloc+0xda>
    3914:	ca 01       	movw	r24, r20
    3916:	86 1b       	sub	r24, r22
    3918:	97 0b       	sbc	r25, r23
    391a:	04 97       	sbiw	r24, 0x04	; 4
    391c:	08 f4       	brcc	.+2      	; 0x3920 <malloc+0x7c>
    391e:	ba 01       	movw	r22, r20
    3920:	e0 e0       	ldi	r30, 0x00	; 0
    3922:	f0 e0       	ldi	r31, 0x00	; 0
    3924:	2a c0       	rjmp	.+84     	; 0x397a <malloc+0xd6>
    3926:	8d 91       	ld	r24, X+
    3928:	9c 91       	ld	r25, X
    392a:	11 97       	sbiw	r26, 0x01	; 1
    392c:	84 17       	cp	r24, r20
    392e:	95 07       	cpc	r25, r21
    3930:	f9 f4       	brne	.+62     	; 0x3970 <malloc+0xcc>
    3932:	64 17       	cp	r22, r20
    3934:	75 07       	cpc	r23, r21
    3936:	81 f4       	brne	.+32     	; 0x3958 <malloc+0xb4>
    3938:	12 96       	adiw	r26, 0x02	; 2
    393a:	8d 91       	ld	r24, X+
    393c:	9c 91       	ld	r25, X
    393e:	13 97       	sbiw	r26, 0x03	; 3
    3940:	30 97       	sbiw	r30, 0x00	; 0
    3942:	19 f0       	breq	.+6      	; 0x394a <malloc+0xa6>
    3944:	93 83       	std	Z+3, r25	; 0x03
    3946:	82 83       	std	Z+2, r24	; 0x02
    3948:	04 c0       	rjmp	.+8      	; 0x3952 <malloc+0xae>
    394a:	90 93 5d 04 	sts	0x045D, r25
    394e:	80 93 5c 04 	sts	0x045C, r24
    3952:	fd 01       	movw	r30, r26
    3954:	32 96       	adiw	r30, 0x02	; 2
    3956:	4f c0       	rjmp	.+158    	; 0x39f6 <malloc+0x152>
    3958:	ca 01       	movw	r24, r20
    395a:	86 1b       	sub	r24, r22
    395c:	97 0b       	sbc	r25, r23
    395e:	fd 01       	movw	r30, r26
    3960:	e8 0f       	add	r30, r24
    3962:	f9 1f       	adc	r31, r25
    3964:	61 93       	st	Z+, r22
    3966:	71 93       	st	Z+, r23
    3968:	02 97       	sbiw	r24, 0x02	; 2
    396a:	8d 93       	st	X+, r24
    396c:	9c 93       	st	X, r25
    396e:	43 c0       	rjmp	.+134    	; 0x39f6 <malloc+0x152>
    3970:	fd 01       	movw	r30, r26
    3972:	82 81       	ldd	r24, Z+2	; 0x02
    3974:	93 81       	ldd	r25, Z+3	; 0x03
    3976:	9c 01       	movw	r18, r24
    3978:	d9 01       	movw	r26, r18
    397a:	10 97       	sbiw	r26, 0x00	; 0
    397c:	a1 f6       	brne	.-88     	; 0x3926 <malloc+0x82>
    397e:	80 91 5a 04 	lds	r24, 0x045A
    3982:	90 91 5b 04 	lds	r25, 0x045B
    3986:	89 2b       	or	r24, r25
    3988:	41 f4       	brne	.+16     	; 0x399a <malloc+0xf6>
    398a:	80 91 17 03 	lds	r24, 0x0317
    398e:	90 91 18 03 	lds	r25, 0x0318
    3992:	90 93 5b 04 	sts	0x045B, r25
    3996:	80 93 5a 04 	sts	0x045A, r24
    399a:	40 91 19 03 	lds	r20, 0x0319
    399e:	50 91 1a 03 	lds	r21, 0x031A
    39a2:	41 15       	cp	r20, r1
    39a4:	51 05       	cpc	r21, r1
    39a6:	41 f4       	brne	.+16     	; 0x39b8 <malloc+0x114>
    39a8:	4d b7       	in	r20, 0x3d	; 61
    39aa:	5e b7       	in	r21, 0x3e	; 62
    39ac:	80 91 15 03 	lds	r24, 0x0315
    39b0:	90 91 16 03 	lds	r25, 0x0316
    39b4:	48 1b       	sub	r20, r24
    39b6:	59 0b       	sbc	r21, r25
    39b8:	20 91 5a 04 	lds	r18, 0x045A
    39bc:	30 91 5b 04 	lds	r19, 0x045B
    39c0:	24 17       	cp	r18, r20
    39c2:	35 07       	cpc	r19, r21
    39c4:	b0 f4       	brcc	.+44     	; 0x39f2 <malloc+0x14e>
    39c6:	ca 01       	movw	r24, r20
    39c8:	82 1b       	sub	r24, r18
    39ca:	93 0b       	sbc	r25, r19
    39cc:	86 17       	cp	r24, r22
    39ce:	97 07       	cpc	r25, r23
    39d0:	80 f0       	brcs	.+32     	; 0x39f2 <malloc+0x14e>
    39d2:	ab 01       	movw	r20, r22
    39d4:	4e 5f       	subi	r20, 0xFE	; 254
    39d6:	5f 4f       	sbci	r21, 0xFF	; 255
    39d8:	84 17       	cp	r24, r20
    39da:	95 07       	cpc	r25, r21
    39dc:	50 f0       	brcs	.+20     	; 0x39f2 <malloc+0x14e>
    39de:	42 0f       	add	r20, r18
    39e0:	53 1f       	adc	r21, r19
    39e2:	50 93 5b 04 	sts	0x045B, r21
    39e6:	40 93 5a 04 	sts	0x045A, r20
    39ea:	f9 01       	movw	r30, r18
    39ec:	61 93       	st	Z+, r22
    39ee:	71 93       	st	Z+, r23
    39f0:	02 c0       	rjmp	.+4      	; 0x39f6 <malloc+0x152>
    39f2:	e0 e0       	ldi	r30, 0x00	; 0
    39f4:	f0 e0       	ldi	r31, 0x00	; 0
    39f6:	cf 01       	movw	r24, r30
    39f8:	df 91       	pop	r29
    39fa:	cf 91       	pop	r28
    39fc:	08 95       	ret

000039fe <free>:
    39fe:	cf 93       	push	r28
    3a00:	df 93       	push	r29
    3a02:	00 97       	sbiw	r24, 0x00	; 0
    3a04:	09 f4       	brne	.+2      	; 0x3a08 <free+0xa>
    3a06:	50 c0       	rjmp	.+160    	; 0x3aa8 <free+0xaa>
    3a08:	ec 01       	movw	r28, r24
    3a0a:	22 97       	sbiw	r28, 0x02	; 2
    3a0c:	1b 82       	std	Y+3, r1	; 0x03
    3a0e:	1a 82       	std	Y+2, r1	; 0x02
    3a10:	a0 91 5c 04 	lds	r26, 0x045C
    3a14:	b0 91 5d 04 	lds	r27, 0x045D
    3a18:	10 97       	sbiw	r26, 0x00	; 0
    3a1a:	09 f1       	breq	.+66     	; 0x3a5e <free+0x60>
    3a1c:	40 e0       	ldi	r20, 0x00	; 0
    3a1e:	50 e0       	ldi	r21, 0x00	; 0
    3a20:	ac 17       	cp	r26, r28
    3a22:	bd 07       	cpc	r27, r29
    3a24:	08 f1       	brcs	.+66     	; 0x3a68 <free+0x6a>
    3a26:	bb 83       	std	Y+3, r27	; 0x03
    3a28:	aa 83       	std	Y+2, r26	; 0x02
    3a2a:	fe 01       	movw	r30, r28
    3a2c:	21 91       	ld	r18, Z+
    3a2e:	31 91       	ld	r19, Z+
    3a30:	e2 0f       	add	r30, r18
    3a32:	f3 1f       	adc	r31, r19
    3a34:	ae 17       	cp	r26, r30
    3a36:	bf 07       	cpc	r27, r31
    3a38:	79 f4       	brne	.+30     	; 0x3a58 <free+0x5a>
    3a3a:	8d 91       	ld	r24, X+
    3a3c:	9c 91       	ld	r25, X
    3a3e:	11 97       	sbiw	r26, 0x01	; 1
    3a40:	28 0f       	add	r18, r24
    3a42:	39 1f       	adc	r19, r25
    3a44:	2e 5f       	subi	r18, 0xFE	; 254
    3a46:	3f 4f       	sbci	r19, 0xFF	; 255
    3a48:	39 83       	std	Y+1, r19	; 0x01
    3a4a:	28 83       	st	Y, r18
    3a4c:	12 96       	adiw	r26, 0x02	; 2
    3a4e:	8d 91       	ld	r24, X+
    3a50:	9c 91       	ld	r25, X
    3a52:	13 97       	sbiw	r26, 0x03	; 3
    3a54:	9b 83       	std	Y+3, r25	; 0x03
    3a56:	8a 83       	std	Y+2, r24	; 0x02
    3a58:	41 15       	cp	r20, r1
    3a5a:	51 05       	cpc	r21, r1
    3a5c:	71 f4       	brne	.+28     	; 0x3a7a <free+0x7c>
    3a5e:	d0 93 5d 04 	sts	0x045D, r29
    3a62:	c0 93 5c 04 	sts	0x045C, r28
    3a66:	20 c0       	rjmp	.+64     	; 0x3aa8 <free+0xaa>
    3a68:	12 96       	adiw	r26, 0x02	; 2
    3a6a:	8d 91       	ld	r24, X+
    3a6c:	9c 91       	ld	r25, X
    3a6e:	13 97       	sbiw	r26, 0x03	; 3
    3a70:	ad 01       	movw	r20, r26
    3a72:	00 97       	sbiw	r24, 0x00	; 0
    3a74:	11 f0       	breq	.+4      	; 0x3a7a <free+0x7c>
    3a76:	dc 01       	movw	r26, r24
    3a78:	d3 cf       	rjmp	.-90     	; 0x3a20 <free+0x22>
    3a7a:	fa 01       	movw	r30, r20
    3a7c:	d3 83       	std	Z+3, r29	; 0x03
    3a7e:	c2 83       	std	Z+2, r28	; 0x02
    3a80:	21 91       	ld	r18, Z+
    3a82:	31 91       	ld	r19, Z+
    3a84:	e2 0f       	add	r30, r18
    3a86:	f3 1f       	adc	r31, r19
    3a88:	ce 17       	cp	r28, r30
    3a8a:	df 07       	cpc	r29, r31
    3a8c:	69 f4       	brne	.+26     	; 0x3aa8 <free+0xaa>
    3a8e:	88 81       	ld	r24, Y
    3a90:	99 81       	ldd	r25, Y+1	; 0x01
    3a92:	28 0f       	add	r18, r24
    3a94:	39 1f       	adc	r19, r25
    3a96:	2e 5f       	subi	r18, 0xFE	; 254
    3a98:	3f 4f       	sbci	r19, 0xFF	; 255
    3a9a:	fa 01       	movw	r30, r20
    3a9c:	31 83       	std	Z+1, r19	; 0x01
    3a9e:	20 83       	st	Z, r18
    3aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    3aa4:	93 83       	std	Z+3, r25	; 0x03
    3aa6:	82 83       	std	Z+2, r24	; 0x02
    3aa8:	df 91       	pop	r29
    3aaa:	cf 91       	pop	r28
    3aac:	08 95       	ret

00003aae <exit>:
    3aae:	f8 94       	cli
    3ab0:	0c 94 40 20 	jmp	0x4080	; 0x4080 <__do_global_dtors>

00003ab4 <__ftoa_engine>:
    3ab4:	28 30       	cpi	r18, 0x08	; 8
    3ab6:	08 f0       	brcs	.+2      	; 0x3aba <__ftoa_engine+0x6>
    3ab8:	27 e0       	ldi	r18, 0x07	; 7
    3aba:	33 27       	eor	r19, r19
    3abc:	da 01       	movw	r26, r20
    3abe:	99 0f       	add	r25, r25
    3ac0:	31 1d       	adc	r19, r1
    3ac2:	87 fd       	sbrc	r24, 7
    3ac4:	91 60       	ori	r25, 0x01	; 1
    3ac6:	00 96       	adiw	r24, 0x00	; 0
    3ac8:	61 05       	cpc	r22, r1
    3aca:	71 05       	cpc	r23, r1
    3acc:	39 f4       	brne	.+14     	; 0x3adc <__ftoa_engine+0x28>
    3ace:	32 60       	ori	r19, 0x02	; 2
    3ad0:	2e 5f       	subi	r18, 0xFE	; 254
    3ad2:	3d 93       	st	X+, r19
    3ad4:	30 e3       	ldi	r19, 0x30	; 48
    3ad6:	2a 95       	dec	r18
    3ad8:	e1 f7       	brne	.-8      	; 0x3ad2 <__ftoa_engine+0x1e>
    3ada:	08 95       	ret
    3adc:	9f 3f       	cpi	r25, 0xFF	; 255
    3ade:	30 f0       	brcs	.+12     	; 0x3aec <__ftoa_engine+0x38>
    3ae0:	80 38       	cpi	r24, 0x80	; 128
    3ae2:	71 05       	cpc	r23, r1
    3ae4:	61 05       	cpc	r22, r1
    3ae6:	09 f0       	breq	.+2      	; 0x3aea <__ftoa_engine+0x36>
    3ae8:	3c 5f       	subi	r19, 0xFC	; 252
    3aea:	3c 5f       	subi	r19, 0xFC	; 252
    3aec:	3d 93       	st	X+, r19
    3aee:	91 30       	cpi	r25, 0x01	; 1
    3af0:	08 f0       	brcs	.+2      	; 0x3af4 <__ftoa_engine+0x40>
    3af2:	80 68       	ori	r24, 0x80	; 128
    3af4:	91 1d       	adc	r25, r1
    3af6:	df 93       	push	r29
    3af8:	cf 93       	push	r28
    3afa:	1f 93       	push	r17
    3afc:	0f 93       	push	r16
    3afe:	ff 92       	push	r15
    3b00:	ef 92       	push	r14
    3b02:	19 2f       	mov	r17, r25
    3b04:	98 7f       	andi	r25, 0xF8	; 248
    3b06:	96 95       	lsr	r25
    3b08:	e9 2f       	mov	r30, r25
    3b0a:	96 95       	lsr	r25
    3b0c:	96 95       	lsr	r25
    3b0e:	e9 0f       	add	r30, r25
    3b10:	ff 27       	eor	r31, r31
    3b12:	e8 5d       	subi	r30, 0xD8	; 216
    3b14:	fb 4f       	sbci	r31, 0xFB	; 251
    3b16:	99 27       	eor	r25, r25
    3b18:	33 27       	eor	r19, r19
    3b1a:	ee 24       	eor	r14, r14
    3b1c:	ff 24       	eor	r15, r15
    3b1e:	a7 01       	movw	r20, r14
    3b20:	e7 01       	movw	r28, r14
    3b22:	05 90       	lpm	r0, Z+
    3b24:	08 94       	sec
    3b26:	07 94       	ror	r0
    3b28:	28 f4       	brcc	.+10     	; 0x3b34 <__ftoa_engine+0x80>
    3b2a:	36 0f       	add	r19, r22
    3b2c:	e7 1e       	adc	r14, r23
    3b2e:	f8 1e       	adc	r15, r24
    3b30:	49 1f       	adc	r20, r25
    3b32:	51 1d       	adc	r21, r1
    3b34:	66 0f       	add	r22, r22
    3b36:	77 1f       	adc	r23, r23
    3b38:	88 1f       	adc	r24, r24
    3b3a:	99 1f       	adc	r25, r25
    3b3c:	06 94       	lsr	r0
    3b3e:	a1 f7       	brne	.-24     	; 0x3b28 <__ftoa_engine+0x74>
    3b40:	05 90       	lpm	r0, Z+
    3b42:	07 94       	ror	r0
    3b44:	28 f4       	brcc	.+10     	; 0x3b50 <__ftoa_engine+0x9c>
    3b46:	e7 0e       	add	r14, r23
    3b48:	f8 1e       	adc	r15, r24
    3b4a:	49 1f       	adc	r20, r25
    3b4c:	56 1f       	adc	r21, r22
    3b4e:	c1 1d       	adc	r28, r1
    3b50:	77 0f       	add	r23, r23
    3b52:	88 1f       	adc	r24, r24
    3b54:	99 1f       	adc	r25, r25
    3b56:	66 1f       	adc	r22, r22
    3b58:	06 94       	lsr	r0
    3b5a:	a1 f7       	brne	.-24     	; 0x3b44 <__ftoa_engine+0x90>
    3b5c:	05 90       	lpm	r0, Z+
    3b5e:	07 94       	ror	r0
    3b60:	28 f4       	brcc	.+10     	; 0x3b6c <__ftoa_engine+0xb8>
    3b62:	f8 0e       	add	r15, r24
    3b64:	49 1f       	adc	r20, r25
    3b66:	56 1f       	adc	r21, r22
    3b68:	c7 1f       	adc	r28, r23
    3b6a:	d1 1d       	adc	r29, r1
    3b6c:	88 0f       	add	r24, r24
    3b6e:	99 1f       	adc	r25, r25
    3b70:	66 1f       	adc	r22, r22
    3b72:	77 1f       	adc	r23, r23
    3b74:	06 94       	lsr	r0
    3b76:	a1 f7       	brne	.-24     	; 0x3b60 <__ftoa_engine+0xac>
    3b78:	05 90       	lpm	r0, Z+
    3b7a:	07 94       	ror	r0
    3b7c:	20 f4       	brcc	.+8      	; 0x3b86 <__ftoa_engine+0xd2>
    3b7e:	49 0f       	add	r20, r25
    3b80:	56 1f       	adc	r21, r22
    3b82:	c7 1f       	adc	r28, r23
    3b84:	d8 1f       	adc	r29, r24
    3b86:	99 0f       	add	r25, r25
    3b88:	66 1f       	adc	r22, r22
    3b8a:	77 1f       	adc	r23, r23
    3b8c:	88 1f       	adc	r24, r24
    3b8e:	06 94       	lsr	r0
    3b90:	a9 f7       	brne	.-22     	; 0x3b7c <__ftoa_engine+0xc8>
    3b92:	84 91       	lpm	r24, Z+
    3b94:	10 95       	com	r17
    3b96:	17 70       	andi	r17, 0x07	; 7
    3b98:	41 f0       	breq	.+16     	; 0x3baa <__ftoa_engine+0xf6>
    3b9a:	d6 95       	lsr	r29
    3b9c:	c7 95       	ror	r28
    3b9e:	57 95       	ror	r21
    3ba0:	47 95       	ror	r20
    3ba2:	f7 94       	ror	r15
    3ba4:	e7 94       	ror	r14
    3ba6:	1a 95       	dec	r17
    3ba8:	c1 f7       	brne	.-16     	; 0x3b9a <__ftoa_engine+0xe6>
    3baa:	ee ec       	ldi	r30, 0xCE	; 206
    3bac:	f3 e0       	ldi	r31, 0x03	; 3
    3bae:	68 94       	set
    3bb0:	15 90       	lpm	r1, Z+
    3bb2:	15 91       	lpm	r17, Z+
    3bb4:	35 91       	lpm	r19, Z+
    3bb6:	65 91       	lpm	r22, Z+
    3bb8:	95 91       	lpm	r25, Z+
    3bba:	05 90       	lpm	r0, Z+
    3bbc:	7f e2       	ldi	r23, 0x2F	; 47
    3bbe:	73 95       	inc	r23
    3bc0:	e1 18       	sub	r14, r1
    3bc2:	f1 0a       	sbc	r15, r17
    3bc4:	43 0b       	sbc	r20, r19
    3bc6:	56 0b       	sbc	r21, r22
    3bc8:	c9 0b       	sbc	r28, r25
    3bca:	d0 09       	sbc	r29, r0
    3bcc:	c0 f7       	brcc	.-16     	; 0x3bbe <__ftoa_engine+0x10a>
    3bce:	e1 0c       	add	r14, r1
    3bd0:	f1 1e       	adc	r15, r17
    3bd2:	43 1f       	adc	r20, r19
    3bd4:	56 1f       	adc	r21, r22
    3bd6:	c9 1f       	adc	r28, r25
    3bd8:	d0 1d       	adc	r29, r0
    3bda:	7e f4       	brtc	.+30     	; 0x3bfa <__ftoa_engine+0x146>
    3bdc:	70 33       	cpi	r23, 0x30	; 48
    3bde:	11 f4       	brne	.+4      	; 0x3be4 <__ftoa_engine+0x130>
    3be0:	8a 95       	dec	r24
    3be2:	e6 cf       	rjmp	.-52     	; 0x3bb0 <__ftoa_engine+0xfc>
    3be4:	e8 94       	clt
    3be6:	01 50       	subi	r16, 0x01	; 1
    3be8:	30 f0       	brcs	.+12     	; 0x3bf6 <__ftoa_engine+0x142>
    3bea:	08 0f       	add	r16, r24
    3bec:	0a f4       	brpl	.+2      	; 0x3bf0 <__ftoa_engine+0x13c>
    3bee:	00 27       	eor	r16, r16
    3bf0:	02 17       	cp	r16, r18
    3bf2:	08 f4       	brcc	.+2      	; 0x3bf6 <__ftoa_engine+0x142>
    3bf4:	20 2f       	mov	r18, r16
    3bf6:	23 95       	inc	r18
    3bf8:	02 2f       	mov	r16, r18
    3bfa:	7a 33       	cpi	r23, 0x3A	; 58
    3bfc:	28 f0       	brcs	.+10     	; 0x3c08 <__ftoa_engine+0x154>
    3bfe:	79 e3       	ldi	r23, 0x39	; 57
    3c00:	7d 93       	st	X+, r23
    3c02:	2a 95       	dec	r18
    3c04:	e9 f7       	brne	.-6      	; 0x3c00 <__ftoa_engine+0x14c>
    3c06:	10 c0       	rjmp	.+32     	; 0x3c28 <__ftoa_engine+0x174>
    3c08:	7d 93       	st	X+, r23
    3c0a:	2a 95       	dec	r18
    3c0c:	89 f6       	brne	.-94     	; 0x3bb0 <__ftoa_engine+0xfc>
    3c0e:	06 94       	lsr	r0
    3c10:	97 95       	ror	r25
    3c12:	67 95       	ror	r22
    3c14:	37 95       	ror	r19
    3c16:	17 95       	ror	r17
    3c18:	17 94       	ror	r1
    3c1a:	e1 18       	sub	r14, r1
    3c1c:	f1 0a       	sbc	r15, r17
    3c1e:	43 0b       	sbc	r20, r19
    3c20:	56 0b       	sbc	r21, r22
    3c22:	c9 0b       	sbc	r28, r25
    3c24:	d0 09       	sbc	r29, r0
    3c26:	98 f0       	brcs	.+38     	; 0x3c4e <__ftoa_engine+0x19a>
    3c28:	23 95       	inc	r18
    3c2a:	7e 91       	ld	r23, -X
    3c2c:	73 95       	inc	r23
    3c2e:	7a 33       	cpi	r23, 0x3A	; 58
    3c30:	08 f0       	brcs	.+2      	; 0x3c34 <__ftoa_engine+0x180>
    3c32:	70 e3       	ldi	r23, 0x30	; 48
    3c34:	7c 93       	st	X, r23
    3c36:	20 13       	cpse	r18, r16
    3c38:	b8 f7       	brcc	.-18     	; 0x3c28 <__ftoa_engine+0x174>
    3c3a:	7e 91       	ld	r23, -X
    3c3c:	70 61       	ori	r23, 0x10	; 16
    3c3e:	7d 93       	st	X+, r23
    3c40:	30 f0       	brcs	.+12     	; 0x3c4e <__ftoa_engine+0x19a>
    3c42:	83 95       	inc	r24
    3c44:	71 e3       	ldi	r23, 0x31	; 49
    3c46:	7d 93       	st	X+, r23
    3c48:	70 e3       	ldi	r23, 0x30	; 48
    3c4a:	2a 95       	dec	r18
    3c4c:	e1 f7       	brne	.-8      	; 0x3c46 <__ftoa_engine+0x192>
    3c4e:	11 24       	eor	r1, r1
    3c50:	ef 90       	pop	r14
    3c52:	ff 90       	pop	r15
    3c54:	0f 91       	pop	r16
    3c56:	1f 91       	pop	r17
    3c58:	cf 91       	pop	r28
    3c5a:	df 91       	pop	r29
    3c5c:	99 27       	eor	r25, r25
    3c5e:	87 fd       	sbrc	r24, 7
    3c60:	90 95       	com	r25
    3c62:	08 95       	ret

00003c64 <strnlen_P>:
    3c64:	fc 01       	movw	r30, r24
    3c66:	05 90       	lpm	r0, Z+
    3c68:	61 50       	subi	r22, 0x01	; 1
    3c6a:	70 40       	sbci	r23, 0x00	; 0
    3c6c:	01 10       	cpse	r0, r1
    3c6e:	d8 f7       	brcc	.-10     	; 0x3c66 <strnlen_P+0x2>
    3c70:	80 95       	com	r24
    3c72:	90 95       	com	r25
    3c74:	8e 0f       	add	r24, r30
    3c76:	9f 1f       	adc	r25, r31
    3c78:	08 95       	ret

00003c7a <memset>:
    3c7a:	dc 01       	movw	r26, r24
    3c7c:	01 c0       	rjmp	.+2      	; 0x3c80 <memset+0x6>
    3c7e:	6d 93       	st	X+, r22
    3c80:	41 50       	subi	r20, 0x01	; 1
    3c82:	50 40       	sbci	r21, 0x00	; 0
    3c84:	e0 f7       	brcc	.-8      	; 0x3c7e <memset+0x4>
    3c86:	08 95       	ret

00003c88 <strnlen>:
    3c88:	fc 01       	movw	r30, r24
    3c8a:	61 50       	subi	r22, 0x01	; 1
    3c8c:	70 40       	sbci	r23, 0x00	; 0
    3c8e:	01 90       	ld	r0, Z+
    3c90:	01 10       	cpse	r0, r1
    3c92:	d8 f7       	brcc	.-10     	; 0x3c8a <strnlen+0x2>
    3c94:	80 95       	com	r24
    3c96:	90 95       	com	r25
    3c98:	8e 0f       	add	r24, r30
    3c9a:	9f 1f       	adc	r25, r31
    3c9c:	08 95       	ret

00003c9e <itoa>:
    3c9e:	fb 01       	movw	r30, r22
    3ca0:	9f 01       	movw	r18, r30
    3ca2:	e8 94       	clt
    3ca4:	42 30       	cpi	r20, 0x02	; 2
    3ca6:	c4 f0       	brlt	.+48     	; 0x3cd8 <itoa+0x3a>
    3ca8:	45 32       	cpi	r20, 0x25	; 37
    3caa:	b4 f4       	brge	.+44     	; 0x3cd8 <itoa+0x3a>
    3cac:	4a 30       	cpi	r20, 0x0A	; 10
    3cae:	29 f4       	brne	.+10     	; 0x3cba <itoa+0x1c>
    3cb0:	97 fb       	bst	r25, 7
    3cb2:	1e f4       	brtc	.+6      	; 0x3cba <itoa+0x1c>
    3cb4:	90 95       	com	r25
    3cb6:	81 95       	neg	r24
    3cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cba:	64 2f       	mov	r22, r20
    3cbc:	77 27       	eor	r23, r23
    3cbe:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__udivmodhi4>
    3cc2:	80 5d       	subi	r24, 0xD0	; 208
    3cc4:	8a 33       	cpi	r24, 0x3A	; 58
    3cc6:	0c f0       	brlt	.+2      	; 0x3cca <itoa+0x2c>
    3cc8:	89 5d       	subi	r24, 0xD9	; 217
    3cca:	81 93       	st	Z+, r24
    3ccc:	cb 01       	movw	r24, r22
    3cce:	00 97       	sbiw	r24, 0x00	; 0
    3cd0:	a1 f7       	brne	.-24     	; 0x3cba <itoa+0x1c>
    3cd2:	16 f4       	brtc	.+4      	; 0x3cd8 <itoa+0x3a>
    3cd4:	5d e2       	ldi	r21, 0x2D	; 45
    3cd6:	51 93       	st	Z+, r21
    3cd8:	10 82       	st	Z, r1
    3cda:	c9 01       	movw	r24, r18
    3cdc:	0c 94 70 1f 	jmp	0x3ee0	; 0x3ee0 <strrev>

00003ce0 <ltoa>:
    3ce0:	fa 01       	movw	r30, r20
    3ce2:	cf 93       	push	r28
    3ce4:	ff 93       	push	r31
    3ce6:	ef 93       	push	r30
    3ce8:	22 30       	cpi	r18, 0x02	; 2
    3cea:	44 f1       	brlt	.+80     	; 0x3d3c <ltoa+0x5c>
    3cec:	25 32       	cpi	r18, 0x25	; 37
    3cee:	34 f5       	brge	.+76     	; 0x3d3c <ltoa+0x5c>
    3cf0:	c2 2f       	mov	r28, r18
    3cf2:	e8 94       	clt
    3cf4:	ca 30       	cpi	r28, 0x0A	; 10
    3cf6:	49 f4       	brne	.+18     	; 0x3d0a <ltoa+0x2a>
    3cf8:	97 fb       	bst	r25, 7
    3cfa:	3e f4       	brtc	.+14     	; 0x3d0a <ltoa+0x2a>
    3cfc:	90 95       	com	r25
    3cfe:	80 95       	com	r24
    3d00:	70 95       	com	r23
    3d02:	61 95       	neg	r22
    3d04:	7f 4f       	sbci	r23, 0xFF	; 255
    3d06:	8f 4f       	sbci	r24, 0xFF	; 255
    3d08:	9f 4f       	sbci	r25, 0xFF	; 255
    3d0a:	2c 2f       	mov	r18, r28
    3d0c:	33 27       	eor	r19, r19
    3d0e:	44 27       	eor	r20, r20
    3d10:	55 27       	eor	r21, r21
    3d12:	ff 93       	push	r31
    3d14:	ef 93       	push	r30
    3d16:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__udivmodsi4>
    3d1a:	ef 91       	pop	r30
    3d1c:	ff 91       	pop	r31
    3d1e:	60 5d       	subi	r22, 0xD0	; 208
    3d20:	6a 33       	cpi	r22, 0x3A	; 58
    3d22:	0c f0       	brlt	.+2      	; 0x3d26 <ltoa+0x46>
    3d24:	69 5d       	subi	r22, 0xD9	; 217
    3d26:	61 93       	st	Z+, r22
    3d28:	b9 01       	movw	r22, r18
    3d2a:	ca 01       	movw	r24, r20
    3d2c:	60 50       	subi	r22, 0x00	; 0
    3d2e:	70 40       	sbci	r23, 0x00	; 0
    3d30:	80 40       	sbci	r24, 0x00	; 0
    3d32:	90 40       	sbci	r25, 0x00	; 0
    3d34:	51 f7       	brne	.-44     	; 0x3d0a <ltoa+0x2a>
    3d36:	16 f4       	brtc	.+4      	; 0x3d3c <ltoa+0x5c>
    3d38:	cd e2       	ldi	r28, 0x2D	; 45
    3d3a:	c1 93       	st	Z+, r28
    3d3c:	10 82       	st	Z, r1
    3d3e:	8f 91       	pop	r24
    3d40:	9f 91       	pop	r25
    3d42:	cf 91       	pop	r28
    3d44:	0c 94 70 1f 	jmp	0x3ee0	; 0x3ee0 <strrev>

00003d48 <ultoa>:
    3d48:	fa 01       	movw	r30, r20
    3d4a:	cf 93       	push	r28
    3d4c:	ff 93       	push	r31
    3d4e:	ef 93       	push	r30
    3d50:	22 30       	cpi	r18, 0x02	; 2
    3d52:	cc f0       	brlt	.+50     	; 0x3d86 <ultoa+0x3e>
    3d54:	25 32       	cpi	r18, 0x25	; 37
    3d56:	bc f4       	brge	.+46     	; 0x3d86 <ultoa+0x3e>
    3d58:	c2 2f       	mov	r28, r18
    3d5a:	2c 2f       	mov	r18, r28
    3d5c:	33 27       	eor	r19, r19
    3d5e:	44 27       	eor	r20, r20
    3d60:	55 27       	eor	r21, r21
    3d62:	ff 93       	push	r31
    3d64:	ef 93       	push	r30
    3d66:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__udivmodsi4>
    3d6a:	ef 91       	pop	r30
    3d6c:	ff 91       	pop	r31
    3d6e:	60 5d       	subi	r22, 0xD0	; 208
    3d70:	6a 33       	cpi	r22, 0x3A	; 58
    3d72:	0c f0       	brlt	.+2      	; 0x3d76 <ultoa+0x2e>
    3d74:	69 5d       	subi	r22, 0xD9	; 217
    3d76:	61 93       	st	Z+, r22
    3d78:	b9 01       	movw	r22, r18
    3d7a:	ca 01       	movw	r24, r20
    3d7c:	60 50       	subi	r22, 0x00	; 0
    3d7e:	70 40       	sbci	r23, 0x00	; 0
    3d80:	80 40       	sbci	r24, 0x00	; 0
    3d82:	90 40       	sbci	r25, 0x00	; 0
    3d84:	51 f7       	brne	.-44     	; 0x3d5a <ultoa+0x12>
    3d86:	10 82       	st	Z, r1
    3d88:	8f 91       	pop	r24
    3d8a:	9f 91       	pop	r25
    3d8c:	cf 91       	pop	r28
    3d8e:	0c 94 70 1f 	jmp	0x3ee0	; 0x3ee0 <strrev>

00003d92 <fprintf_P>:
    3d92:	a0 e0       	ldi	r26, 0x00	; 0
    3d94:	b0 e0       	ldi	r27, 0x00	; 0
    3d96:	ef ec       	ldi	r30, 0xCF	; 207
    3d98:	fe e1       	ldi	r31, 0x1E	; 30
    3d9a:	0c 94 11 20 	jmp	0x4022	; 0x4022 <__prologue_saves__+0x1c>
    3d9e:	0f 81       	ldd	r16, Y+7	; 0x07
    3da0:	18 85       	ldd	r17, Y+8	; 0x08
    3da2:	9e 01       	movw	r18, r28
    3da4:	25 5f       	subi	r18, 0xF5	; 245
    3da6:	3f 4f       	sbci	r19, 0xFF	; 255
    3da8:	f8 01       	movw	r30, r16
    3daa:	83 81       	ldd	r24, Z+3	; 0x03
    3dac:	88 60       	ori	r24, 0x08	; 8
    3dae:	83 83       	std	Z+3, r24	; 0x03
    3db0:	c8 01       	movw	r24, r16
    3db2:	69 85       	ldd	r22, Y+9	; 0x09
    3db4:	7a 85       	ldd	r23, Y+10	; 0x0a
    3db6:	a9 01       	movw	r20, r18
    3db8:	0e 94 cb 18 	call	0x3196	; 0x3196 <vfprintf>
    3dbc:	f8 01       	movw	r30, r16
    3dbe:	23 81       	ldd	r18, Z+3	; 0x03
    3dc0:	27 7f       	andi	r18, 0xF7	; 247
    3dc2:	23 83       	std	Z+3, r18	; 0x03
    3dc4:	20 96       	adiw	r28, 0x00	; 0
    3dc6:	e4 e0       	ldi	r30, 0x04	; 4
    3dc8:	0c 94 2d 20 	jmp	0x405a	; 0x405a <__epilogue_restores__+0x1c>

00003dcc <fputc>:
    3dcc:	0f 93       	push	r16
    3dce:	1f 93       	push	r17
    3dd0:	cf 93       	push	r28
    3dd2:	df 93       	push	r29
    3dd4:	8c 01       	movw	r16, r24
    3dd6:	eb 01       	movw	r28, r22
    3dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dda:	81 ff       	sbrs	r24, 1
    3ddc:	1b c0       	rjmp	.+54     	; 0x3e14 <fputc+0x48>
    3dde:	82 ff       	sbrs	r24, 2
    3de0:	0d c0       	rjmp	.+26     	; 0x3dfc <fputc+0x30>
    3de2:	2e 81       	ldd	r18, Y+6	; 0x06
    3de4:	3f 81       	ldd	r19, Y+7	; 0x07
    3de6:	8c 81       	ldd	r24, Y+4	; 0x04
    3de8:	9d 81       	ldd	r25, Y+5	; 0x05
    3dea:	28 17       	cp	r18, r24
    3dec:	39 07       	cpc	r19, r25
    3dee:	64 f4       	brge	.+24     	; 0x3e08 <fputc+0x3c>
    3df0:	e8 81       	ld	r30, Y
    3df2:	f9 81       	ldd	r31, Y+1	; 0x01
    3df4:	01 93       	st	Z+, r16
    3df6:	f9 83       	std	Y+1, r31	; 0x01
    3df8:	e8 83       	st	Y, r30
    3dfa:	06 c0       	rjmp	.+12     	; 0x3e08 <fputc+0x3c>
    3dfc:	e8 85       	ldd	r30, Y+8	; 0x08
    3dfe:	f9 85       	ldd	r31, Y+9	; 0x09
    3e00:	80 2f       	mov	r24, r16
    3e02:	09 95       	icall
    3e04:	89 2b       	or	r24, r25
    3e06:	31 f4       	brne	.+12     	; 0x3e14 <fputc+0x48>
    3e08:	8e 81       	ldd	r24, Y+6	; 0x06
    3e0a:	9f 81       	ldd	r25, Y+7	; 0x07
    3e0c:	01 96       	adiw	r24, 0x01	; 1
    3e0e:	9f 83       	std	Y+7, r25	; 0x07
    3e10:	8e 83       	std	Y+6, r24	; 0x06
    3e12:	02 c0       	rjmp	.+4      	; 0x3e18 <fputc+0x4c>
    3e14:	0f ef       	ldi	r16, 0xFF	; 255
    3e16:	1f ef       	ldi	r17, 0xFF	; 255
    3e18:	c8 01       	movw	r24, r16
    3e1a:	df 91       	pop	r29
    3e1c:	cf 91       	pop	r28
    3e1e:	1f 91       	pop	r17
    3e20:	0f 91       	pop	r16
    3e22:	08 95       	ret

00003e24 <__ultoa_invert>:
    3e24:	fa 01       	movw	r30, r20
    3e26:	aa 27       	eor	r26, r26
    3e28:	28 30       	cpi	r18, 0x08	; 8
    3e2a:	51 f1       	breq	.+84     	; 0x3e80 <__ultoa_invert+0x5c>
    3e2c:	20 31       	cpi	r18, 0x10	; 16
    3e2e:	81 f1       	breq	.+96     	; 0x3e90 <__ultoa_invert+0x6c>
    3e30:	e8 94       	clt
    3e32:	6f 93       	push	r22
    3e34:	6e 7f       	andi	r22, 0xFE	; 254
    3e36:	6e 5f       	subi	r22, 0xFE	; 254
    3e38:	7f 4f       	sbci	r23, 0xFF	; 255
    3e3a:	8f 4f       	sbci	r24, 0xFF	; 255
    3e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e3e:	af 4f       	sbci	r26, 0xFF	; 255
    3e40:	b1 e0       	ldi	r27, 0x01	; 1
    3e42:	3e d0       	rcall	.+124    	; 0x3ec0 <__ultoa_invert+0x9c>
    3e44:	b4 e0       	ldi	r27, 0x04	; 4
    3e46:	3c d0       	rcall	.+120    	; 0x3ec0 <__ultoa_invert+0x9c>
    3e48:	67 0f       	add	r22, r23
    3e4a:	78 1f       	adc	r23, r24
    3e4c:	89 1f       	adc	r24, r25
    3e4e:	9a 1f       	adc	r25, r26
    3e50:	a1 1d       	adc	r26, r1
    3e52:	68 0f       	add	r22, r24
    3e54:	79 1f       	adc	r23, r25
    3e56:	8a 1f       	adc	r24, r26
    3e58:	91 1d       	adc	r25, r1
    3e5a:	a1 1d       	adc	r26, r1
    3e5c:	6a 0f       	add	r22, r26
    3e5e:	71 1d       	adc	r23, r1
    3e60:	81 1d       	adc	r24, r1
    3e62:	91 1d       	adc	r25, r1
    3e64:	a1 1d       	adc	r26, r1
    3e66:	20 d0       	rcall	.+64     	; 0x3ea8 <__ultoa_invert+0x84>
    3e68:	09 f4       	brne	.+2      	; 0x3e6c <__ultoa_invert+0x48>
    3e6a:	68 94       	set
    3e6c:	3f 91       	pop	r19
    3e6e:	2a e0       	ldi	r18, 0x0A	; 10
    3e70:	26 9f       	mul	r18, r22
    3e72:	11 24       	eor	r1, r1
    3e74:	30 19       	sub	r19, r0
    3e76:	30 5d       	subi	r19, 0xD0	; 208
    3e78:	31 93       	st	Z+, r19
    3e7a:	de f6       	brtc	.-74     	; 0x3e32 <__ultoa_invert+0xe>
    3e7c:	cf 01       	movw	r24, r30
    3e7e:	08 95       	ret
    3e80:	46 2f       	mov	r20, r22
    3e82:	47 70       	andi	r20, 0x07	; 7
    3e84:	40 5d       	subi	r20, 0xD0	; 208
    3e86:	41 93       	st	Z+, r20
    3e88:	b3 e0       	ldi	r27, 0x03	; 3
    3e8a:	0f d0       	rcall	.+30     	; 0x3eaa <__ultoa_invert+0x86>
    3e8c:	c9 f7       	brne	.-14     	; 0x3e80 <__ultoa_invert+0x5c>
    3e8e:	f6 cf       	rjmp	.-20     	; 0x3e7c <__ultoa_invert+0x58>
    3e90:	46 2f       	mov	r20, r22
    3e92:	4f 70       	andi	r20, 0x0F	; 15
    3e94:	40 5d       	subi	r20, 0xD0	; 208
    3e96:	4a 33       	cpi	r20, 0x3A	; 58
    3e98:	18 f0       	brcs	.+6      	; 0x3ea0 <__ultoa_invert+0x7c>
    3e9a:	49 5d       	subi	r20, 0xD9	; 217
    3e9c:	31 fd       	sbrc	r19, 1
    3e9e:	40 52       	subi	r20, 0x20	; 32
    3ea0:	41 93       	st	Z+, r20
    3ea2:	02 d0       	rcall	.+4      	; 0x3ea8 <__ultoa_invert+0x84>
    3ea4:	a9 f7       	brne	.-22     	; 0x3e90 <__ultoa_invert+0x6c>
    3ea6:	ea cf       	rjmp	.-44     	; 0x3e7c <__ultoa_invert+0x58>
    3ea8:	b4 e0       	ldi	r27, 0x04	; 4
    3eaa:	a6 95       	lsr	r26
    3eac:	97 95       	ror	r25
    3eae:	87 95       	ror	r24
    3eb0:	77 95       	ror	r23
    3eb2:	67 95       	ror	r22
    3eb4:	ba 95       	dec	r27
    3eb6:	c9 f7       	brne	.-14     	; 0x3eaa <__ultoa_invert+0x86>
    3eb8:	00 97       	sbiw	r24, 0x00	; 0
    3eba:	61 05       	cpc	r22, r1
    3ebc:	71 05       	cpc	r23, r1
    3ebe:	08 95       	ret
    3ec0:	9b 01       	movw	r18, r22
    3ec2:	ac 01       	movw	r20, r24
    3ec4:	0a 2e       	mov	r0, r26
    3ec6:	06 94       	lsr	r0
    3ec8:	57 95       	ror	r21
    3eca:	47 95       	ror	r20
    3ecc:	37 95       	ror	r19
    3ece:	27 95       	ror	r18
    3ed0:	ba 95       	dec	r27
    3ed2:	c9 f7       	brne	.-14     	; 0x3ec6 <__ultoa_invert+0xa2>
    3ed4:	62 0f       	add	r22, r18
    3ed6:	73 1f       	adc	r23, r19
    3ed8:	84 1f       	adc	r24, r20
    3eda:	95 1f       	adc	r25, r21
    3edc:	a0 1d       	adc	r26, r0
    3ede:	08 95       	ret

00003ee0 <strrev>:
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	fc 01       	movw	r30, r24
    3ee4:	67 2f       	mov	r22, r23
    3ee6:	71 91       	ld	r23, Z+
    3ee8:	77 23       	and	r23, r23
    3eea:	e1 f7       	brne	.-8      	; 0x3ee4 <strrev+0x4>
    3eec:	32 97       	sbiw	r30, 0x02	; 2
    3eee:	04 c0       	rjmp	.+8      	; 0x3ef8 <strrev+0x18>
    3ef0:	7c 91       	ld	r23, X
    3ef2:	6d 93       	st	X+, r22
    3ef4:	70 83       	st	Z, r23
    3ef6:	62 91       	ld	r22, -Z
    3ef8:	ae 17       	cp	r26, r30
    3efa:	bf 07       	cpc	r27, r31
    3efc:	c8 f3       	brcs	.-14     	; 0x3ef0 <strrev+0x10>
    3efe:	08 95       	ret

00003f00 <__mulsi3>:
    3f00:	62 9f       	mul	r22, r18
    3f02:	d0 01       	movw	r26, r0
    3f04:	73 9f       	mul	r23, r19
    3f06:	f0 01       	movw	r30, r0
    3f08:	82 9f       	mul	r24, r18
    3f0a:	e0 0d       	add	r30, r0
    3f0c:	f1 1d       	adc	r31, r1
    3f0e:	64 9f       	mul	r22, r20
    3f10:	e0 0d       	add	r30, r0
    3f12:	f1 1d       	adc	r31, r1
    3f14:	92 9f       	mul	r25, r18
    3f16:	f0 0d       	add	r31, r0
    3f18:	83 9f       	mul	r24, r19
    3f1a:	f0 0d       	add	r31, r0
    3f1c:	74 9f       	mul	r23, r20
    3f1e:	f0 0d       	add	r31, r0
    3f20:	65 9f       	mul	r22, r21
    3f22:	f0 0d       	add	r31, r0
    3f24:	99 27       	eor	r25, r25
    3f26:	72 9f       	mul	r23, r18
    3f28:	b0 0d       	add	r27, r0
    3f2a:	e1 1d       	adc	r30, r1
    3f2c:	f9 1f       	adc	r31, r25
    3f2e:	63 9f       	mul	r22, r19
    3f30:	b0 0d       	add	r27, r0
    3f32:	e1 1d       	adc	r30, r1
    3f34:	f9 1f       	adc	r31, r25
    3f36:	bd 01       	movw	r22, r26
    3f38:	cf 01       	movw	r24, r30
    3f3a:	11 24       	eor	r1, r1
    3f3c:	08 95       	ret

00003f3e <__udivmodhi4>:
    3f3e:	aa 1b       	sub	r26, r26
    3f40:	bb 1b       	sub	r27, r27
    3f42:	51 e1       	ldi	r21, 0x11	; 17
    3f44:	07 c0       	rjmp	.+14     	; 0x3f54 <__udivmodhi4_ep>

00003f46 <__udivmodhi4_loop>:
    3f46:	aa 1f       	adc	r26, r26
    3f48:	bb 1f       	adc	r27, r27
    3f4a:	a6 17       	cp	r26, r22
    3f4c:	b7 07       	cpc	r27, r23
    3f4e:	10 f0       	brcs	.+4      	; 0x3f54 <__udivmodhi4_ep>
    3f50:	a6 1b       	sub	r26, r22
    3f52:	b7 0b       	sbc	r27, r23

00003f54 <__udivmodhi4_ep>:
    3f54:	88 1f       	adc	r24, r24
    3f56:	99 1f       	adc	r25, r25
    3f58:	5a 95       	dec	r21
    3f5a:	a9 f7       	brne	.-22     	; 0x3f46 <__udivmodhi4_loop>
    3f5c:	80 95       	com	r24
    3f5e:	90 95       	com	r25
    3f60:	bc 01       	movw	r22, r24
    3f62:	cd 01       	movw	r24, r26
    3f64:	08 95       	ret

00003f66 <__divmodhi4>:
    3f66:	97 fb       	bst	r25, 7
    3f68:	09 2e       	mov	r0, r25
    3f6a:	07 26       	eor	r0, r23
    3f6c:	0a d0       	rcall	.+20     	; 0x3f82 <__divmodhi4_neg1>
    3f6e:	77 fd       	sbrc	r23, 7
    3f70:	04 d0       	rcall	.+8      	; 0x3f7a <__divmodhi4_neg2>
    3f72:	e5 df       	rcall	.-54     	; 0x3f3e <__udivmodhi4>
    3f74:	06 d0       	rcall	.+12     	; 0x3f82 <__divmodhi4_neg1>
    3f76:	00 20       	and	r0, r0
    3f78:	1a f4       	brpl	.+6      	; 0x3f80 <__divmodhi4_exit>

00003f7a <__divmodhi4_neg2>:
    3f7a:	70 95       	com	r23
    3f7c:	61 95       	neg	r22
    3f7e:	7f 4f       	sbci	r23, 0xFF	; 255

00003f80 <__divmodhi4_exit>:
    3f80:	08 95       	ret

00003f82 <__divmodhi4_neg1>:
    3f82:	f6 f7       	brtc	.-4      	; 0x3f80 <__divmodhi4_exit>
    3f84:	90 95       	com	r25
    3f86:	81 95       	neg	r24
    3f88:	9f 4f       	sbci	r25, 0xFF	; 255
    3f8a:	08 95       	ret

00003f8c <__udivmodsi4>:
    3f8c:	a1 e2       	ldi	r26, 0x21	; 33
    3f8e:	1a 2e       	mov	r1, r26
    3f90:	aa 1b       	sub	r26, r26
    3f92:	bb 1b       	sub	r27, r27
    3f94:	fd 01       	movw	r30, r26
    3f96:	0d c0       	rjmp	.+26     	; 0x3fb2 <__udivmodsi4_ep>

00003f98 <__udivmodsi4_loop>:
    3f98:	aa 1f       	adc	r26, r26
    3f9a:	bb 1f       	adc	r27, r27
    3f9c:	ee 1f       	adc	r30, r30
    3f9e:	ff 1f       	adc	r31, r31
    3fa0:	a2 17       	cp	r26, r18
    3fa2:	b3 07       	cpc	r27, r19
    3fa4:	e4 07       	cpc	r30, r20
    3fa6:	f5 07       	cpc	r31, r21
    3fa8:	20 f0       	brcs	.+8      	; 0x3fb2 <__udivmodsi4_ep>
    3faa:	a2 1b       	sub	r26, r18
    3fac:	b3 0b       	sbc	r27, r19
    3fae:	e4 0b       	sbc	r30, r20
    3fb0:	f5 0b       	sbc	r31, r21

00003fb2 <__udivmodsi4_ep>:
    3fb2:	66 1f       	adc	r22, r22
    3fb4:	77 1f       	adc	r23, r23
    3fb6:	88 1f       	adc	r24, r24
    3fb8:	99 1f       	adc	r25, r25
    3fba:	1a 94       	dec	r1
    3fbc:	69 f7       	brne	.-38     	; 0x3f98 <__udivmodsi4_loop>
    3fbe:	60 95       	com	r22
    3fc0:	70 95       	com	r23
    3fc2:	80 95       	com	r24
    3fc4:	90 95       	com	r25
    3fc6:	9b 01       	movw	r18, r22
    3fc8:	ac 01       	movw	r20, r24
    3fca:	bd 01       	movw	r22, r26
    3fcc:	cf 01       	movw	r24, r30
    3fce:	08 95       	ret

00003fd0 <__divmodsi4>:
    3fd0:	97 fb       	bst	r25, 7
    3fd2:	09 2e       	mov	r0, r25
    3fd4:	05 26       	eor	r0, r21
    3fd6:	0e d0       	rcall	.+28     	; 0x3ff4 <__divmodsi4_neg1>
    3fd8:	57 fd       	sbrc	r21, 7
    3fda:	04 d0       	rcall	.+8      	; 0x3fe4 <__divmodsi4_neg2>
    3fdc:	d7 df       	rcall	.-82     	; 0x3f8c <__udivmodsi4>
    3fde:	0a d0       	rcall	.+20     	; 0x3ff4 <__divmodsi4_neg1>
    3fe0:	00 1c       	adc	r0, r0
    3fe2:	38 f4       	brcc	.+14     	; 0x3ff2 <__divmodsi4_exit>

00003fe4 <__divmodsi4_neg2>:
    3fe4:	50 95       	com	r21
    3fe6:	40 95       	com	r20
    3fe8:	30 95       	com	r19
    3fea:	21 95       	neg	r18
    3fec:	3f 4f       	sbci	r19, 0xFF	; 255
    3fee:	4f 4f       	sbci	r20, 0xFF	; 255
    3ff0:	5f 4f       	sbci	r21, 0xFF	; 255

00003ff2 <__divmodsi4_exit>:
    3ff2:	08 95       	ret

00003ff4 <__divmodsi4_neg1>:
    3ff4:	f6 f7       	brtc	.-4      	; 0x3ff2 <__divmodsi4_exit>
    3ff6:	90 95       	com	r25
    3ff8:	80 95       	com	r24
    3ffa:	70 95       	com	r23
    3ffc:	61 95       	neg	r22
    3ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    4000:	8f 4f       	sbci	r24, 0xFF	; 255
    4002:	9f 4f       	sbci	r25, 0xFF	; 255
    4004:	08 95       	ret

00004006 <__prologue_saves__>:
    4006:	2f 92       	push	r2
    4008:	3f 92       	push	r3
    400a:	4f 92       	push	r4
    400c:	5f 92       	push	r5
    400e:	6f 92       	push	r6
    4010:	7f 92       	push	r7
    4012:	8f 92       	push	r8
    4014:	9f 92       	push	r9
    4016:	af 92       	push	r10
    4018:	bf 92       	push	r11
    401a:	cf 92       	push	r12
    401c:	df 92       	push	r13
    401e:	ef 92       	push	r14
    4020:	ff 92       	push	r15
    4022:	0f 93       	push	r16
    4024:	1f 93       	push	r17
    4026:	cf 93       	push	r28
    4028:	df 93       	push	r29
    402a:	cd b7       	in	r28, 0x3d	; 61
    402c:	de b7       	in	r29, 0x3e	; 62
    402e:	ca 1b       	sub	r28, r26
    4030:	db 0b       	sbc	r29, r27
    4032:	0f b6       	in	r0, 0x3f	; 63
    4034:	f8 94       	cli
    4036:	de bf       	out	0x3e, r29	; 62
    4038:	0f be       	out	0x3f, r0	; 63
    403a:	cd bf       	out	0x3d, r28	; 61
    403c:	09 94       	ijmp

0000403e <__epilogue_restores__>:
    403e:	2a 88       	ldd	r2, Y+18	; 0x12
    4040:	39 88       	ldd	r3, Y+17	; 0x11
    4042:	48 88       	ldd	r4, Y+16	; 0x10
    4044:	5f 84       	ldd	r5, Y+15	; 0x0f
    4046:	6e 84       	ldd	r6, Y+14	; 0x0e
    4048:	7d 84       	ldd	r7, Y+13	; 0x0d
    404a:	8c 84       	ldd	r8, Y+12	; 0x0c
    404c:	9b 84       	ldd	r9, Y+11	; 0x0b
    404e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4050:	b9 84       	ldd	r11, Y+9	; 0x09
    4052:	c8 84       	ldd	r12, Y+8	; 0x08
    4054:	df 80       	ldd	r13, Y+7	; 0x07
    4056:	ee 80       	ldd	r14, Y+6	; 0x06
    4058:	fd 80       	ldd	r15, Y+5	; 0x05
    405a:	0c 81       	ldd	r16, Y+4	; 0x04
    405c:	1b 81       	ldd	r17, Y+3	; 0x03
    405e:	aa 81       	ldd	r26, Y+2	; 0x02
    4060:	b9 81       	ldd	r27, Y+1	; 0x01
    4062:	ce 0f       	add	r28, r30
    4064:	d1 1d       	adc	r29, r1
    4066:	0f b6       	in	r0, 0x3f	; 63
    4068:	f8 94       	cli
    406a:	de bf       	out	0x3e, r29	; 62
    406c:	0f be       	out	0x3f, r0	; 63
    406e:	cd bf       	out	0x3d, r28	; 61
    4070:	ed 01       	movw	r28, r26
    4072:	08 95       	ret

00004074 <__tablejump2__>:
    4074:	ee 0f       	add	r30, r30
    4076:	ff 1f       	adc	r31, r31

00004078 <__tablejump__>:
    4078:	05 90       	lpm	r0, Z+
    407a:	f4 91       	lpm	r31, Z+
    407c:	e0 2d       	mov	r30, r0
    407e:	09 94       	ijmp

00004080 <__do_global_dtors>:
    4080:	14 e0       	ldi	r17, 0x04	; 4
    4082:	ce ec       	ldi	r28, 0xCE	; 206
    4084:	d4 e0       	ldi	r29, 0x04	; 4
    4086:	04 c0       	rjmp	.+8      	; 0x4090 <.do_global_dtors_start>

00004088 <.do_global_dtors_loop>:
    4088:	fe 01       	movw	r30, r28
    408a:	0e 94 3c 20 	call	0x4078	; 0x4078 <__tablejump__>
    408e:	22 96       	adiw	r28, 0x02	; 2

00004090 <.do_global_dtors_start>:
    4090:	c0 3d       	cpi	r28, 0xD0	; 208
    4092:	d1 07       	cpc	r29, r17
    4094:	c9 f7       	brne	.-14     	; 0x4088 <.do_global_dtors_loop>
    4096:	f8 94       	cli

00004098 <__stop_program>:
    4098:	ff cf       	rjmp	.-2      	; 0x4098 <__stop_program>
