
beta.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800200  00003582  00003616  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003582  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000143  008002fa  008002fa  00003710  2**0
                  ALLOC
  3 .debug_aranges 000004a0  00000000  00000000  00003710  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000d29  00000000  00000000  00003bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001124a  00000000  00000000  000048d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000044ab  00000000  00000000  00015b23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000040d8  00000000  00000000  00019fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000930  00000000  00000000  0001e0a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000022d5  00000000  00000000  0001e9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000020ed  00000000  00000000  00020cad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00022d9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__ctors_end>
       4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
       8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
       c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      10:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      14:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      18:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      1c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      20:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      24:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      28:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      2c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      30:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      34:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      38:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      3c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      40:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      44:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      48:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      4c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      50:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      54:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      58:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      5c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      60:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      64:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      68:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      6c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      70:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      74:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      78:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      7c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      80:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      84:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      88:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      8c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      90:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__vector_36>
      94:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      98:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__vector_38>
      9c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      a0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      a4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      a8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      ac:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      b0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      b4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      b8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      bc:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__vector_47>
      c0:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__vector_48>
      c4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      c8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      cc:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      d0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      d4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      d8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      dc:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      e0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>

000000e4 <__c.1790>:
      e4:	6e 61 6e 00                                         nan.

000000e8 <__c.1788>:
      e8:	69 6e 66 00                                         inf.

000000ec <marquee_list>:
      ec:	48 02                                               H.

000000ee <bank1_list>:
      ee:	70 02 86 02 9c 02                                   p.....

000000f4 <__timer0Compare>:
      f4:	38 03 00 6e 00 02 47 00 35 00 02 44 00 06 05 03     8..n..G.5..D....
     104:	3c 03 00 6e 00 04 48 00 35 00 04 44 00 04 35 03     <..n..H.5..D..5.

00000114 <__timer1Compare>:
     114:	40 03 01 6f 00 02 88 00 36 00 02 80 00 06 ff 02     @..o....6.......
     124:	44 03 01 6f 00 04 8a 00 36 00 04 80 00 04 02 03     D..o....6.......
     134:	48 03 01 6f 00 08 8c 00 36 00 08 80 00 02 05 03     H..o....6.......

00000144 <__timer2Compare>:
     144:	4c 03 02 70 00 02 b3 00 37 00 02 b0 00 06 fc 02     L..p....7.......
     154:	50 03 02 70 00 04 b4 00 37 00 04 b0 00 04 41 03     P..p....7.....A.

00000164 <__timer3Compare>:
     164:	54 03 03 71 00 02 98 00 38 00 02 90 00 06 29 03     T..q....8.....).
     174:	58 03 03 71 00 04 9a 00 38 00 04 90 00 04 2c 03     X..q....8.....,.
     184:	5c 03 03 71 00 08 9c 00 38 00 08 90 00 02 2f 03     \..q....8...../.

00000194 <__timer4Compare>:
     194:	60 03 04 72 00 02 a8 00 39 00 02 a0 00 06 38 03     `..r....9.....8.
     1a4:	64 03 04 72 00 04 aa 00 39 00 04 a0 00 04 3b 03     d..r....9.....;.
     1b4:	68 03 04 72 00 08 ac 00 39 00 08 a0 00 02 3e 03     h..r....9.....>.

000001c4 <__timer5Compare>:
     1c4:	6c 03 05 73 00 02 28 01 3a 00 02 20 01 06 4a 03     l..s..(.:.. ..J.
     1d4:	70 03 05 73 00 04 2a 01 3a 00 04 20 01 04 4d 03     p..s..*.:.. ..M.
     1e4:	74 03 05 73 00 08 2c 01 3a 00 08 20 01 02 50 03     t..s..,.:.. ..P.

000001f4 <pgm_Timers>:
     1f4:	78 03 46 00 45 00 00 00 02 33 88 44 00 01 44 00     x.F.E....3.D..D.
     204:	02 45 00 08 00 00 01 f4 00 6e 00 01 35 00 01 00     .E.......n..5...
     214:	00 00 00 01 00 00 01 00 00 01 00 00 83 03 84 00     ................
     224:	81 00 ff 00 03 ff df 80 00 01 80 00 02 81 00 08     ................
     234:	81 00 10 14 01 6f 00 01 36 00 01 86 00 6f 00 20     .....o..6....o. 
     244:	36 00 20 81 00 40 00 00 8e 03 b2 00 b1 00 00 ff     6. ..@..........
     254:	02 33 88 b0 00 01 b0 00 02 b1 00 08 00 00 01 44     .3.............D
     264:	01 70 00 01 37 00 01 00 00 00 00 01 00 00 01 00     .p..7...........
     274:	00 01 00 00 99 03 94 00 91 00 ff 00 03 ff df 90     ................
     284:	00 01 90 00 02 91 00 08 91 00 10 64 01 71 00 01     ...........d.q..
     294:	38 00 01 96 00 71 00 20 38 00 20 91 00 40 32 03     8....q. 8. ..@2.
     2a4:	a4 03 a4 00 a1 00 ff 00 03 ff df a0 00 01 a0 00     ................
     2b4:	02 a1 00 08 a1 00 10 94 01 72 00 01 39 00 01 a6     .........r..9...
     2c4:	00 72 00 20 39 00 20 a1 00 40 44 03 af 03 24 01     .r. 9. ..@D...$.
     2d4:	21 01 ff 00 03 ff df 20 01 01 20 01 02 21 01 08     !...... .. ..!..
     2e4:	21 01 10 c4 01 73 00 01 3a 00 01 26 01 73 00 20     !....s..:..&.s. 
     2f4:	3a 00 20 21 01 40 47 03                             :. !.@G.

000002fc <_B4>:
     2fc:	55 03 10                                            U..

000002ff <_B5>:
     2ff:	55 03 20                                            U. 

00000302 <_B6>:
     302:	55 03 40                                            U.@

00000305 <_B7>:
     305:	55 03 80                                            U..

00000308 <_C0>:
     308:	5b 03 01                                            [..

0000030b <_C1>:
     30b:	5b 03 02                                            [..

0000030e <_C2>:
     30e:	5b 03 04                                            [..

00000311 <_C3>:
     311:	5b 03 08                                            [..

00000314 <_C4>:
     314:	5b 03 10                                            [..

00000317 <_C5>:
     317:	5b 03 20                                            [. 

0000031a <_D2>:
     31a:	61 03 04                                            a..

0000031d <_D3>:
     31d:	61 03 08                                            a..

00000320 <_D5>:
     320:	61 03 20                                            a. 

00000323 <_D6>:
     323:	61 03 40                                            a.@

00000326 <_D7>:
     326:	61 03 80                                            a..

00000329 <_E3>:
     329:	67 03 08                                            g..

0000032c <_E4>:
     32c:	67 03 10                                            g..

0000032f <_E5>:
     32f:	67 03 20                                            g. 

00000332 <_E7>:
     332:	67 03 80                                            g..

00000335 <_G5>:
     335:	6d 03 20                                            m. 

00000338 <_H3>:
     338:	73 03 08                                            s..

0000033b <_H4>:
     33b:	73 03 10                                            s..

0000033e <_H5>:
     33e:	73 03 20                                            s. 

00000341 <_H6>:
     341:	73 03 40                                            s.@

00000344 <_L0>:
     344:	79 03 01                                            y..

00000347 <_L1>:
     347:	79 03 02                                            y..

0000034a <_L3>:
     34a:	79 03 08                                            y..

0000034d <_L4>:
     34d:	79 03 10                                            y..

00000350 <_L5>:
     350:	79 03 20                                            y. 

00000353 <AVcc_MV>:
     353:	88 13                                               ..

00000355 <_PORTB>:
     355:	25 00 24 00 23 00                                   %.$.#.

0000035b <_PORTC>:
     35b:	28 00 27 00 26 00                                   (.'.&.

00000361 <_PORTD>:
     361:	2b 00 2a 00 29 00                                   +.*.).

00000367 <_PORTE>:
     367:	2e 00 2d 00 2c 00                                   ..-.,.

0000036d <_PORTG>:
     36d:	34 00 33 00 32 00                                   4.3.2.

00000373 <_PORTH>:
     373:	02 01 01 01 00 01                                   ......

00000379 <_PORTL>:
     379:	0b 01 0a 01 09 01                                   ......

0000037f <c_servoPWM>:
     37f:	0d 0a 05 0a                                         ....

00000383 <__c.1911>:
     383:	20 45 72 72 6f 72 3a 25 64 0d 0a 00                  Error:%d...

0000038f <__c.1909>:
     38f:	55 73 65 72 00                                      User.

00000394 <__c.1907>:
     394:	57 65 62 62 6f 74 4c 69 62 00                       WebbotLib.

0000039e <atoz>:
     39e:	ee 3e 9c 7a 9e 8e f6 2e 0c 78 ae 1c aa 2a 3a ce     .>.z.....x...*:.
     3ae:	e6 0a b6 1e 38 7c b8 6e 76 da                       ....8|.nv.

000003b8 <digits>:
     3b8:	fc 60 da f2 66 b6 3e e0 fe e6                       .`..f.>...

000003c2 <c_hw_uart>:
     3c2:	ae 0f 64 10 80 10 39 10 6b 10 4f 10 00 40 7a 10     ..d...9.k.O..@z.
     3d2:	f3 5a 00 a0 72 4e 18 09 00 10 a5 d4 e8 00 00 e8     .Z..rN..........
     3e2:	76 48 17 00 00 e4 0b 54 02 00 00 ca 9a 3b 00 00     vH.....T.....;..
     3f2:	00 e1 f5 05 00 00 80 96 98 00 00 00 40 42 0f 00     ............@B..
     402:	00 00 a0 86 01 00 00 00 10 27 00 00 00 00 e8 03     .........'......
     412:	00 00 00 00 64 00 00 00 00 00 0a 00 00 00 00 00     ....d...........
     422:	01 00 00 00 00 00 2c 76 d8 88 dc 67 4f 08 23 df     ......,v...gO.#.
     432:	c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51     ...Y.......S.:.Q
     442:	99 76 96 e8 e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c     .v.....&....b.@|
     452:	6f fc ef bc 9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a     o.....@...o....Z
     462:	2a f7 5c 93 6b 6c f9 67 6d c1 1b fc e0 e4 0d 47     *.\.kl.gm......G
     472:	fe f5 20 e6 b5 00 d0 ed 90 2e 03 00 94 35 77 05     .. ..........5w.
     482:	00 80 84 1e 08 00 00 20 4e 0a 00 00 00 c8 0c 33     ....... N......3
     492:	33 33 33 0f 98 6e 12 83 11 41 ef 8d 21 14 89 3b     333..n...A..!..;
     4a2:	e6 55 16 cf fe e6 db 18 d1 84 4b 38 1b f7 7c 1d     .U........K8..|.
     4b2:	90 1d a4 bb e4 24 20 32 84 72 5e 22 81 00 c9 f1     .....$ 2.r^"....
     4c2:	24 ec a1 e5 3d 27                                   $...='

000004c8 <__ctors_start>:
     4c8:	b5 02       	muls	r27, r21
     4ca:	7b 08       	sbc	r7, r11
     4cc:	8b 08       	sbc	r8, r11

000004ce <__ctors_end>:
     4ce:	11 24       	eor	r1, r1
     4d0:	1f be       	out	0x3f, r1	; 63
     4d2:	cf ef       	ldi	r28, 0xFF	; 255
     4d4:	d1 e2       	ldi	r29, 0x21	; 33
     4d6:	de bf       	out	0x3e, r29	; 62
     4d8:	cd bf       	out	0x3d, r28	; 61

000004da <__do_copy_data>:
     4da:	12 e0       	ldi	r17, 0x02	; 2
     4dc:	a0 e0       	ldi	r26, 0x00	; 0
     4de:	b2 e0       	ldi	r27, 0x02	; 2
     4e0:	e2 e8       	ldi	r30, 0x82	; 130
     4e2:	f5 e3       	ldi	r31, 0x35	; 53
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <.do_copy_data_start>

000004e6 <.do_copy_data_loop>:
     4e6:	05 90       	lpm	r0, Z+
     4e8:	0d 92       	st	X+, r0

000004ea <.do_copy_data_start>:
     4ea:	aa 3f       	cpi	r26, 0xFA	; 250
     4ec:	b1 07       	cpc	r27, r17
     4ee:	d9 f7       	brne	.-10     	; 0x4e6 <.do_copy_data_loop>

000004f0 <__do_clear_bss>:
     4f0:	14 e0       	ldi	r17, 0x04	; 4
     4f2:	aa ef       	ldi	r26, 0xFA	; 250
     4f4:	b2 e0       	ldi	r27, 0x02	; 2
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <.do_clear_bss_start>

000004f8 <.do_clear_bss_loop>:
     4f8:	1d 92       	st	X+, r1

000004fa <.do_clear_bss_start>:
     4fa:	ad 33       	cpi	r26, 0x3D	; 61
     4fc:	b1 07       	cpc	r27, r17
     4fe:	e1 f7       	brne	.-8      	; 0x4f8 <.do_clear_bss_loop>

00000500 <__do_global_ctors>:
     500:	14 e0       	ldi	r17, 0x04	; 4
     502:	ce ec       	ldi	r28, 0xCE	; 206
     504:	d4 e0       	ldi	r29, 0x04	; 4
     506:	04 c0       	rjmp	.+8      	; 0x510 <.do_global_ctors_start>

00000508 <.do_global_ctors_loop>:
     508:	22 97       	sbiw	r28, 0x02	; 2
     50a:	fe 01       	movw	r30, r28
     50c:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__tablejump__>

00000510 <.do_global_ctors_start>:
     510:	c8 3c       	cpi	r28, 0xC8	; 200
     512:	d1 07       	cpc	r29, r17
     514:	c9 f7       	brne	.-14     	; 0x508 <.do_global_ctors_loop>
     516:	0e 94 33 0c 	call	0x1866	; 0x1866 <main>
     51a:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <exit>

0000051e <__bad_interrupt>:
     51e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000522 <_Z41__static_initialization_and_destruction_0ii>:
	servo2.setSpeed(speed);
	servo3.setSpeed(speed);
	// -------- End   Actuators -------
*/
	return 0;
}
     522:	df 93       	push	r29
     524:	cf 93       	push	r28
     526:	00 d0       	rcall	.+0      	; 0x528 <_Z41__static_initialization_and_destruction_0ii+0x6>
     528:	00 d0       	rcall	.+0      	; 0x52a <_Z41__static_initialization_and_destruction_0ii+0x8>
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	9a 83       	std	Y+2, r25	; 0x02
     530:	89 83       	std	Y+1, r24	; 0x01
     532:	7c 83       	std	Y+4, r23	; 0x04
     534:	6b 83       	std	Y+3, r22	; 0x03
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	9a 81       	ldd	r25, Y+2	; 0x02
     53a:	81 30       	cpi	r24, 0x01	; 1
     53c:	91 05       	cpc	r25, r1
     53e:	71 f4       	brne	.+28     	; 0x55c <_Z41__static_initialization_and_destruction_0ii+0x3a>
     540:	8b 81       	ldd	r24, Y+3	; 0x03
     542:	9c 81       	ldd	r25, Y+4	; 0x04
     544:	2f ef       	ldi	r18, 0xFF	; 255
     546:	8f 3f       	cpi	r24, 0xFF	; 255
     548:	92 07       	cpc	r25, r18
     54a:	41 f4       	brne	.+16     	; 0x55c <_Z41__static_initialization_and_destruction_0ii+0x3a>
#include "hardware.h"
#include "protocol.h"
#include "services.h"

Protocol test;
     54c:	8a ef       	ldi	r24, 0xFA	; 250
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8ProtocolC1Ev>
PingService ping;
     554:	83 e3       	ldi	r24, 0x33	; 51
     556:	93 e0       	ldi	r25, 0x03	; 3
     558:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_ZN11PingServiceC1Ev>
	servo2.setSpeed(speed);
	servo3.setSpeed(speed);
	// -------- End   Actuators -------
*/
	return 0;
}
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	cf 91       	pop	r28
     566:	df 91       	pop	r29
     568:	08 95       	ret

0000056a <_GLOBAL__I_test>:
     56a:	df 93       	push	r29
     56c:	cf 93       	push	r28
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	6f ef       	ldi	r22, 0xFF	; 255
     578:	7f ef       	ldi	r23, 0xFF	; 255
     57a:	0e 94 91 02 	call	0x522	; 0x522 <_Z41__static_initialization_and_destruction_0ii>
     57e:	cf 91       	pop	r28
     580:	df 91       	pop	r29
     582:	08 95       	ret

00000584 <appControl>:
	return 0;
}


// This is the main loop
TICK_COUNT appControl(LOOP_COUNT loopCount, TICK_COUNT loopStart) {
     584:	df 93       	push	r29
     586:	cf 93       	push	r28
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
     58c:	28 97       	sbiw	r28, 0x08	; 8
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
     598:	69 83       	std	Y+1, r22	; 0x01
     59a:	7a 83       	std	Y+2, r23	; 0x02
     59c:	8b 83       	std	Y+3, r24	; 0x03
     59e:	9c 83       	std	Y+4, r25	; 0x04
     5a0:	2d 83       	std	Y+5, r18	; 0x05
     5a2:	3e 83       	std	Y+6, r19	; 0x06
     5a4:	4f 83       	std	Y+7, r20	; 0x07
     5a6:	58 87       	std	Y+8, r21	; 0x08

    
	// treat input/output for the protocol
	test.treatIO();
     5a8:	8a ef       	ldi	r24, 0xFA	; 250
     5aa:	92 e0       	ldi	r25, 0x02	; 2
     5ac:	0e 94 96 05 	call	0xb2c	; 0xb2c <_ZN8Protocol7treatIOEv>
	servo1.setSpeed(speed);
	servo2.setSpeed(speed);
	servo3.setSpeed(speed);
	// -------- End   Actuators -------
*/
	return 0;
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	a0 e0       	ldi	r26, 0x00	; 0
     5b6:	b0 e0       	ldi	r27, 0x00	; 0
}
     5b8:	bc 01       	movw	r22, r24
     5ba:	cd 01       	movw	r24, r26
     5bc:	28 96       	adiw	r28, 0x08	; 8
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	cf 91       	pop	r28
     5ca:	df 91       	pop	r29
     5cc:	08 95       	ret

000005ce <_ZN6UartHW14setPollingModeEa>:

		return ch;
	}

	// Put the receiver in polling mode (TRUE) or interrupt mode (FALSE)
	void setPollingMode(boolean polling){
     5ce:	df 93       	push	r29
     5d0:	cf 93       	push	r28
     5d2:	00 d0       	rcall	.+0      	; 0x5d4 <_ZN6UartHW14setPollingModeEa+0x6>
     5d4:	0f 92       	push	r0
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
     5da:	9a 83       	std	Y+2, r25	; 0x02
     5dc:	89 83       	std	Y+1, r24	; 0x01
     5de:	6b 83       	std	Y+3, r22	; 0x03
		uartReceivePollingMode(m_hw, polling);
     5e0:	e9 81       	ldd	r30, Y+1	; 0x01
     5e2:	fa 81       	ldd	r31, Y+2	; 0x02
     5e4:	86 89       	ldd	r24, Z+22	; 0x16
     5e6:	97 89       	ldd	r25, Z+23	; 0x17
     5e8:	6b 81       	ldd	r22, Y+3	; 0x03
     5ea:	0e 94 70 11 	call	0x22e0	; 0x22e0 <uartReceivePollingMode>
		m_polling = polling;
     5ee:	e9 81       	ldd	r30, Y+1	; 0x01
     5f0:	fa 81       	ldd	r31, Y+2	; 0x02
     5f2:	8b 81       	ldd	r24, Y+3	; 0x03
     5f4:	80 8f       	std	Z+24, r24	; 0x18
	}
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	cf 91       	pop	r28
     5fe:	df 91       	pop	r29
     600:	08 95       	ret

00000602 <appInitSoftware>:
	initHardware();
}


// Initialise the software
TICK_COUNT appInitSoftware(TICK_COUNT loopStart){
     602:	df 93       	push	r29
     604:	cf 93       	push	r28
     606:	00 d0       	rcall	.+0      	; 0x608 <appInitSoftware+0x6>
     608:	00 d0       	rcall	.+0      	; 0x60a <appInitSoftware+0x8>
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	69 83       	std	Y+1, r22	; 0x01
     610:	7a 83       	std	Y+2, r23	; 0x02
     612:	8b 83       	std	Y+3, r24	; 0x03
     614:	9c 83       	std	Y+4, r25	; 0x04
	uart1.setPollingMode(false);
     616:	85 ee       	ldi	r24, 0xE5	; 229
     618:	93 e0       	ldi	r25, 0x03	; 3
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN6UartHW14setPollingModeEa>
	test.init(&uart1);
     620:	8a ef       	ldi	r24, 0xFA	; 250
     622:	92 e0       	ldi	r25, 0x02	; 2
     624:	25 ee       	ldi	r18, 0xE5	; 229
     626:	33 e0       	ldi	r19, 0x03	; 3
     628:	b9 01       	movw	r22, r18
     62a:	0e 94 75 03 	call	0x6ea	; 0x6ea <_ZN8Protocol4initEP6UartHW>
    ping.init(&test);
     62e:	83 e3       	ldi	r24, 0x33	; 51
     630:	93 e0       	ldi	r25, 0x03	; 3
     632:	2a ef       	ldi	r18, 0xFA	; 250
     634:	32 e0       	ldi	r19, 0x02	; 2
     636:	b9 01       	movw	r22, r18
     638:	0e 94 69 06 	call	0xcd2	; 0xcd2 <_ZN7Service4initEP8Protocol>
	return 0;
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	a0 e0       	ldi	r26, 0x00	; 0
     642:	b0 e0       	ldi	r27, 0x00	; 0
}
     644:	bc 01       	movw	r22, r24
     646:	cd 01       	movw	r24, r26
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	cf 91       	pop	r28
     652:	df 91       	pop	r29
     654:	08 95       	ret

00000656 <appInitHardware>:

Protocol test;
PingService ping;

// Initialise the hardware
void appInitHardware(void) {
     656:	df 93       	push	r29
     658:	cf 93       	push	r28
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
	initHardware();
     65e:	0e 94 00 07 	call	0xe00	; 0xe00 <initHardware>
}
     662:	cf 91       	pop	r28
     664:	df 91       	pop	r29
     666:	08 95       	ret

00000668 <__iCliRetVal>:
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
     668:	df 93       	push	r29
     66a:	cf 93       	push	r28
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	f8 94       	cli
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	cf 91       	pop	r28
     676:	df 91       	pop	r29
     678:	08 95       	ret

0000067a <__iRestore>:
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
     67a:	df 93       	push	r29
     67c:	cf 93       	push	r28
     67e:	00 d0       	rcall	.+0      	; 0x680 <__iRestore+0x6>
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62
     684:	9a 83       	std	Y+2, r25	; 0x02
     686:	89 83       	std	Y+1, r24	; 0x01
     688:	ef e5       	ldi	r30, 0x5F	; 95
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	a9 81       	ldd	r26, Y+1	; 0x01
     68e:	ba 81       	ldd	r27, Y+2	; 0x02
     690:	8c 91       	ld	r24, X
     692:	80 83       	st	Z, r24
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	cf 91       	pop	r28
     69a:	df 91       	pop	r29
     69c:	08 95       	ret

0000069e <_ZN6PacketC2Ev>:
#include <stdio.h>
#include <string.h>
#include "protocol.h"

Packet::Packet()
     69e:	df 93       	push	r29
     6a0:	cf 93       	push	r28
     6a2:	00 d0       	rcall	.+0      	; 0x6a4 <_ZN6PacketC2Ev+0x6>
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	9a 83       	std	Y+2, r25	; 0x02
     6aa:	89 83       	std	Y+1, r24	; 0x01
{
	command = PROT_ERROR;
     6ac:	e9 81       	ldd	r30, Y+1	; 0x01
     6ae:	fa 81       	ldd	r31, Y+2	; 0x02
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	80 83       	st	Z, r24
	len = 0;
     6b4:	e9 81       	ldd	r30, Y+1	; 0x01
     6b6:	fa 81       	ldd	r31, Y+2	; 0x02
     6b8:	11 82       	std	Z+1, r1	; 0x01
}
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	cf 91       	pop	r28
     6c0:	df 91       	pop	r29
     6c2:	08 95       	ret

000006c4 <_ZN6PacketC1Ev>:
#include <stdio.h>
#include <string.h>
#include "protocol.h"

Packet::Packet()
     6c4:	df 93       	push	r29
     6c6:	cf 93       	push	r28
     6c8:	00 d0       	rcall	.+0      	; 0x6ca <_ZN6PacketC1Ev+0x6>
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
     6ce:	9a 83       	std	Y+2, r25	; 0x02
     6d0:	89 83       	std	Y+1, r24	; 0x01
{
	command = PROT_ERROR;
     6d2:	e9 81       	ldd	r30, Y+1	; 0x01
     6d4:	fa 81       	ldd	r31, Y+2	; 0x02
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	80 83       	st	Z, r24
	len = 0;
     6da:	e9 81       	ldd	r30, Y+1	; 0x01
     6dc:	fa 81       	ldd	r31, Y+2	; 0x02
     6de:	11 82       	std	Z+1, r1	; 0x01
}
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	cf 91       	pop	r28
     6e6:	df 91       	pop	r29
     6e8:	08 95       	ret

000006ea <_ZN8Protocol4initEP6UartHW>:
	memset(in, 0, Protocol::BUFFER_SIZE);
	memset(out, 0, Protocol::BUFFER_SIZE);
	haveMessage = false;
}

void Protocol::init(UartHW *uart)
     6ea:	df 93       	push	r29
     6ec:	cf 93       	push	r28
     6ee:	00 d0       	rcall	.+0      	; 0x6f0 <_ZN8Protocol4initEP6UartHW+0x6>
     6f0:	00 d0       	rcall	.+0      	; 0x6f2 <_ZN8Protocol4initEP6UartHW+0x8>
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	9a 83       	std	Y+2, r25	; 0x02
     6f8:	89 83       	std	Y+1, r24	; 0x01
     6fa:	7c 83       	std	Y+4, r23	; 0x04
     6fc:	6b 83       	std	Y+3, r22	; 0x03
{
	_uart = uart;
     6fe:	e9 81       	ldd	r30, Y+1	; 0x01
     700:	fa 81       	ldd	r31, Y+2	; 0x02
     702:	8b 81       	ldd	r24, Y+3	; 0x03
     704:	9c 81       	ldd	r25, Y+4	; 0x04
     706:	95 87       	std	Z+13, r25	; 0x0d
     708:	84 87       	std	Z+12, r24	; 0x0c
}
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	cf 91       	pop	r28
     714:	df 91       	pop	r29
     716:	08 95       	ret

00000718 <_ZN8Protocol7receiveEv>:
	DUMP(c, 0x01);

	*_uart<<'\n';
}

bool Protocol::receive()
     718:	df 93       	push	r29
     71a:	cf 93       	push	r28
     71c:	00 d0       	rcall	.+0      	; 0x71e <_ZN8Protocol7receiveEv+0x6>
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
     722:	9a 83       	std	Y+2, r25	; 0x02
     724:	89 83       	std	Y+1, r24	; 0x01
        	in_offset = 0;
			_write("true", 4);
        	return true;
		}
    }*/
	return false;
     726:	80 e0       	ldi	r24, 0x00	; 0
}
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	cf 91       	pop	r28
     72e:	df 91       	pop	r29
     730:	08 95       	ret

00000732 <_ZN8Protocol4sendER6Packet>:

void Protocol::send(Packet &msg)
     732:	df 93       	push	r29
     734:	cf 93       	push	r28
     736:	00 d0       	rcall	.+0      	; 0x738 <_ZN8Protocol4sendER6Packet+0x6>
     738:	00 d0       	rcall	.+0      	; 0x73a <_ZN8Protocol4sendER6Packet+0x8>
     73a:	00 d0       	rcall	.+0      	; 0x73c <_ZN8Protocol4sendER6Packet+0xa>
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	9c 83       	std	Y+4, r25	; 0x04
     742:	8b 83       	std	Y+3, r24	; 0x03
     744:	7e 83       	std	Y+6, r23	; 0x06
     746:	6d 83       	std	Y+5, r22	; 0x05
{
    if((out_offset + msg.len + 2) < Protocol::BUFFER_SIZE)
     748:	eb 81       	ldd	r30, Y+3	; 0x03
     74a:	fc 81       	ldd	r31, Y+4	; 0x04
     74c:	87 a9       	ldd	r24, Z+55	; 0x37
     74e:	28 2f       	mov	r18, r24
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	ed 81       	ldd	r30, Y+5	; 0x05
     754:	fe 81       	ldd	r31, Y+6	; 0x06
     756:	81 81       	ldd	r24, Z+1	; 0x01
     758:	88 2f       	mov	r24, r24
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	82 0f       	add	r24, r18
     75e:	93 1f       	adc	r25, r19
     760:	02 96       	adiw	r24, 0x02	; 2
     762:	84 31       	cpi	r24, 0x14	; 20
     764:	91 05       	cpc	r25, r1
     766:	0c f0       	brlt	.+2      	; 0x76a <_ZN8Protocol4sendER6Packet+0x38>
     768:	54 c0       	rjmp	.+168    	; 0x812 <_ZN8Protocol4sendER6Packet+0xe0>
    {
        out[out_offset++] = msg.command;
     76a:	eb 81       	ldd	r30, Y+3	; 0x03
     76c:	fc 81       	ldd	r31, Y+4	; 0x04
     76e:	57 a9       	ldd	r21, Z+55	; 0x37
     770:	25 2f       	mov	r18, r21
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	ed 81       	ldd	r30, Y+5	; 0x05
     776:	fe 81       	ldd	r31, Y+6	; 0x06
     778:	40 81       	ld	r20, Z
     77a:	8b 81       	ldd	r24, Y+3	; 0x03
     77c:	9c 81       	ldd	r25, Y+4	; 0x04
     77e:	82 0f       	add	r24, r18
     780:	93 1f       	adc	r25, r19
     782:	fc 01       	movw	r30, r24
     784:	b2 96       	adiw	r30, 0x22	; 34
     786:	40 83       	st	Z, r20
     788:	85 2f       	mov	r24, r21
     78a:	8f 5f       	subi	r24, 0xFF	; 255
     78c:	eb 81       	ldd	r30, Y+3	; 0x03
     78e:	fc 81       	ldd	r31, Y+4	; 0x04
     790:	87 ab       	std	Z+55, r24	; 0x37
        out[out_offset++] = msg.len;
     792:	eb 81       	ldd	r30, Y+3	; 0x03
     794:	fc 81       	ldd	r31, Y+4	; 0x04
     796:	57 a9       	ldd	r21, Z+55	; 0x37
     798:	25 2f       	mov	r18, r21
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	ed 81       	ldd	r30, Y+5	; 0x05
     79e:	fe 81       	ldd	r31, Y+6	; 0x06
     7a0:	41 81       	ldd	r20, Z+1	; 0x01
     7a2:	8b 81       	ldd	r24, Y+3	; 0x03
     7a4:	9c 81       	ldd	r25, Y+4	; 0x04
     7a6:	82 0f       	add	r24, r18
     7a8:	93 1f       	adc	r25, r19
     7aa:	fc 01       	movw	r30, r24
     7ac:	b2 96       	adiw	r30, 0x22	; 34
     7ae:	40 83       	st	Z, r20
     7b0:	85 2f       	mov	r24, r21
     7b2:	8f 5f       	subi	r24, 0xFF	; 255
     7b4:	eb 81       	ldd	r30, Y+3	; 0x03
     7b6:	fc 81       	ldd	r31, Y+4	; 0x04
     7b8:	87 ab       	std	Z+55, r24	; 0x37
        for(int i=0;i<msg.len;i++)
     7ba:	1a 82       	std	Y+2, r1	; 0x02
     7bc:	19 82       	std	Y+1, r1	; 0x01
     7be:	1f c0       	rjmp	.+62     	; 0x7fe <_ZN8Protocol4sendER6Packet+0xcc>
            out[out_offset++] = msg.data[i];
     7c0:	eb 81       	ldd	r30, Y+3	; 0x03
     7c2:	fc 81       	ldd	r31, Y+4	; 0x04
     7c4:	67 a9       	ldd	r22, Z+55	; 0x37
     7c6:	46 2f       	mov	r20, r22
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	29 81       	ldd	r18, Y+1	; 0x01
     7cc:	3a 81       	ldd	r19, Y+2	; 0x02
     7ce:	8d 81       	ldd	r24, Y+5	; 0x05
     7d0:	9e 81       	ldd	r25, Y+6	; 0x06
     7d2:	82 0f       	add	r24, r18
     7d4:	93 1f       	adc	r25, r19
     7d6:	fc 01       	movw	r30, r24
     7d8:	32 96       	adiw	r30, 0x02	; 2
     7da:	20 81       	ld	r18, Z
     7dc:	8b 81       	ldd	r24, Y+3	; 0x03
     7de:	9c 81       	ldd	r25, Y+4	; 0x04
     7e0:	84 0f       	add	r24, r20
     7e2:	95 1f       	adc	r25, r21
     7e4:	fc 01       	movw	r30, r24
     7e6:	b2 96       	adiw	r30, 0x22	; 34
     7e8:	20 83       	st	Z, r18
     7ea:	86 2f       	mov	r24, r22
     7ec:	8f 5f       	subi	r24, 0xFF	; 255
     7ee:	eb 81       	ldd	r30, Y+3	; 0x03
     7f0:	fc 81       	ldd	r31, Y+4	; 0x04
     7f2:	87 ab       	std	Z+55, r24	; 0x37
{
    if((out_offset + msg.len + 2) < Protocol::BUFFER_SIZE)
    {
        out[out_offset++] = msg.command;
        out[out_offset++] = msg.len;
        for(int i=0;i<msg.len;i++)
     7f4:	89 81       	ldd	r24, Y+1	; 0x01
     7f6:	9a 81       	ldd	r25, Y+2	; 0x02
     7f8:	01 96       	adiw	r24, 0x01	; 1
     7fa:	9a 83       	std	Y+2, r25	; 0x02
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	ed 81       	ldd	r30, Y+5	; 0x05
     800:	fe 81       	ldd	r31, Y+6	; 0x06
     802:	81 81       	ldd	r24, Z+1	; 0x01
     804:	28 2f       	mov	r18, r24
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	89 81       	ldd	r24, Y+1	; 0x01
     80a:	9a 81       	ldd	r25, Y+2	; 0x02
     80c:	82 17       	cp	r24, r18
     80e:	93 07       	cpc	r25, r19
     810:	bc f2       	brlt	.-82     	; 0x7c0 <_ZN8Protocol4sendER6Packet+0x8e>
            out[out_offset++] = msg.data[i];
    }
}
     812:	26 96       	adiw	r28, 0x06	; 6
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61
     81e:	cf 91       	pop	r28
     820:	df 91       	pop	r29
     822:	08 95       	ret

00000824 <_ZN8Protocol6_writeEPhi>:

//////////////////////////////////////////
//
// PRIVATE
//////////////////////////////////////////////
void Protocol::_write(uint8_t *data, int size)
     824:	df 93       	push	r29
     826:	cf 93       	push	r28
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	28 97       	sbiw	r28, 0x08	; 8
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	de bf       	out	0x3e, r29	; 62
     834:	0f be       	out	0x3f, r0	; 63
     836:	cd bf       	out	0x3d, r28	; 61
     838:	9c 83       	std	Y+4, r25	; 0x04
     83a:	8b 83       	std	Y+3, r24	; 0x03
     83c:	7e 83       	std	Y+6, r23	; 0x06
     83e:	6d 83       	std	Y+5, r22	; 0x05
     840:	58 87       	std	Y+8, r21	; 0x08
     842:	4f 83       	std	Y+7, r20	; 0x07
{
	uint8_t *p = data;
     844:	8d 81       	ldd	r24, Y+5	; 0x05
     846:	9e 81       	ldd	r25, Y+6	; 0x06
     848:	9a 83       	std	Y+2, r25	; 0x02
     84a:	89 83       	std	Y+1, r24	; 0x01
     84c:	19 c0       	rjmp	.+50     	; 0x880 <_ZN8Protocol6_writeEPhi+0x5c>
	while(p-data < size)
	{
		_uart->write(*p);
     84e:	eb 81       	ldd	r30, Y+3	; 0x03
     850:	fc 81       	ldd	r31, Y+4	; 0x04
     852:	04 84       	ldd	r0, Z+12	; 0x0c
     854:	f5 85       	ldd	r31, Z+13	; 0x0d
     856:	e0 2d       	mov	r30, r0
     858:	01 90       	ld	r0, Z+
     85a:	f0 81       	ld	r31, Z
     85c:	e0 2d       	mov	r30, r0
     85e:	40 81       	ld	r20, Z
     860:	51 81       	ldd	r21, Z+1	; 0x01
     862:	eb 81       	ldd	r30, Y+3	; 0x03
     864:	fc 81       	ldd	r31, Y+4	; 0x04
     866:	84 85       	ldd	r24, Z+12	; 0x0c
     868:	95 85       	ldd	r25, Z+13	; 0x0d
     86a:	e9 81       	ldd	r30, Y+1	; 0x01
     86c:	fa 81       	ldd	r31, Y+2	; 0x02
     86e:	20 81       	ld	r18, Z
     870:	62 2f       	mov	r22, r18
     872:	fa 01       	movw	r30, r20
     874:	09 95       	icall
		p++;
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	9a 81       	ldd	r25, Y+2	; 0x02
     87a:	01 96       	adiw	r24, 0x01	; 1
     87c:	9a 83       	std	Y+2, r25	; 0x02
     87e:	89 83       	std	Y+1, r24	; 0x01
// PRIVATE
//////////////////////////////////////////////
void Protocol::_write(uint8_t *data, int size)
{
	uint8_t *p = data;
	while(p-data < size)
     880:	29 81       	ldd	r18, Y+1	; 0x01
     882:	3a 81       	ldd	r19, Y+2	; 0x02
     884:	8d 81       	ldd	r24, Y+5	; 0x05
     886:	9e 81       	ldd	r25, Y+6	; 0x06
     888:	28 1b       	sub	r18, r24
     88a:	39 0b       	sbc	r19, r25
     88c:	8f 81       	ldd	r24, Y+7	; 0x07
     88e:	98 85       	ldd	r25, Y+8	; 0x08
     890:	28 17       	cp	r18, r24
     892:	39 07       	cpc	r19, r25
     894:	e4 f2       	brlt	.-72     	; 0x84e <_ZN8Protocol6_writeEPhi+0x2a>
	{
		_uart->write(*p);
		p++;
	}
}
     896:	28 96       	adiw	r28, 0x08	; 8
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	f8 94       	cli
     89c:	de bf       	out	0x3e, r29	; 62
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	cd bf       	out	0x3d, r28	; 61
     8a2:	cf 91       	pop	r28
     8a4:	df 91       	pop	r29
     8a6:	08 95       	ret

000008a8 <_ZN8Protocol5_readEv>:

uint8_t Protocol::_read()
     8a8:	df 93       	push	r29
     8aa:	cf 93       	push	r28
     8ac:	00 d0       	rcall	.+0      	; 0x8ae <_ZN8Protocol5_readEv+0x6>
     8ae:	00 d0       	rcall	.+0      	; 0x8b0 <_ZN8Protocol5_readEv+0x8>
     8b0:	00 d0       	rcall	.+0      	; 0x8b2 <_ZN8Protocol5_readEv+0xa>
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	9e 83       	std	Y+6, r25	; 0x06
     8b8:	8d 83       	std	Y+5, r24	; 0x05
{
	int c = -1;
     8ba:	8f ef       	ldi	r24, 0xFF	; 255
     8bc:	9f ef       	ldi	r25, 0xFF	; 255
     8be:	9b 83       	std	Y+3, r25	; 0x03
     8c0:	8a 83       	std	Y+2, r24	; 0x02
	CRITICAL_SECTION{
     8c2:	ef e5       	ldi	r30, 0x5F	; 95
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	80 81       	ld	r24, Z
     8c8:	8c 83       	std	Y+4, r24	; 0x04
     8ca:	0e 94 34 03 	call	0x668	; 0x668 <__iCliRetVal>
     8ce:	89 83       	std	Y+1, r24	; 0x01
     8d0:	3f c0       	rjmp	.+126    	; 0x950 <_ZN8Protocol5_readEv+0xa8>
	while(in_offset < Protocol::BUFFER_SIZE )
	{
		c = _uart->read();
     8d2:	ed 81       	ldd	r30, Y+5	; 0x05
     8d4:	fe 81       	ldd	r31, Y+6	; 0x06
     8d6:	04 84       	ldd	r0, Z+12	; 0x0c
     8d8:	f5 85       	ldd	r31, Z+13	; 0x0d
     8da:	e0 2d       	mov	r30, r0
     8dc:	80 81       	ld	r24, Z
     8de:	91 81       	ldd	r25, Z+1	; 0x01
     8e0:	fc 01       	movw	r30, r24
     8e2:	32 96       	adiw	r30, 0x02	; 2
     8e4:	20 81       	ld	r18, Z
     8e6:	31 81       	ldd	r19, Z+1	; 0x01
     8e8:	ed 81       	ldd	r30, Y+5	; 0x05
     8ea:	fe 81       	ldd	r31, Y+6	; 0x06
     8ec:	84 85       	ldd	r24, Z+12	; 0x0c
     8ee:	95 85       	ldd	r25, Z+13	; 0x0d
     8f0:	f9 01       	movw	r30, r18
     8f2:	09 95       	icall
     8f4:	9b 83       	std	Y+3, r25	; 0x03
     8f6:	8a 83       	std	Y+2, r24	; 0x02
		if(c == -1)
     8f8:	8a 81       	ldd	r24, Y+2	; 0x02
     8fa:	9b 81       	ldd	r25, Y+3	; 0x03
     8fc:	2f ef       	ldi	r18, 0xFF	; 255
     8fe:	8f 3f       	cpi	r24, 0xFF	; 255
     900:	92 07       	cpc	r25, r18
     902:	29 f1       	breq	.+74     	; 0x94e <_ZN8Protocol5_readEv+0xa6>
			break;
		in[in_offset] = 0;
     904:	ed 81       	ldd	r30, Y+5	; 0x05
     906:	fe 81       	ldd	r31, Y+6	; 0x06
     908:	86 a9       	ldd	r24, Z+54	; 0x36
     90a:	28 2f       	mov	r18, r24
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	8d 81       	ldd	r24, Y+5	; 0x05
     910:	9e 81       	ldd	r25, Y+6	; 0x06
     912:	82 0f       	add	r24, r18
     914:	93 1f       	adc	r25, r19
     916:	fc 01       	movw	r30, r24
     918:	3e 96       	adiw	r30, 0x0e	; 14
     91a:	10 82       	st	Z, r1
		in[in_offset] = (uint8_t)(c & 0xFF);
     91c:	ed 81       	ldd	r30, Y+5	; 0x05
     91e:	fe 81       	ldd	r31, Y+6	; 0x06
     920:	86 a9       	ldd	r24, Z+54	; 0x36
     922:	28 2f       	mov	r18, r24
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	4a 81       	ldd	r20, Y+2	; 0x02
     928:	8d 81       	ldd	r24, Y+5	; 0x05
     92a:	9e 81       	ldd	r25, Y+6	; 0x06
     92c:	82 0f       	add	r24, r18
     92e:	93 1f       	adc	r25, r19
     930:	fc 01       	movw	r30, r24
     932:	3e 96       	adiw	r30, 0x0e	; 14
     934:	40 83       	st	Z, r20
		in_offset++;
     936:	ed 81       	ldd	r30, Y+5	; 0x05
     938:	fe 81       	ldd	r31, Y+6	; 0x06
     93a:	86 a9       	ldd	r24, Z+54	; 0x36
     93c:	8f 5f       	subi	r24, 0xFF	; 255
     93e:	ed 81       	ldd	r30, Y+5	; 0x05
     940:	fe 81       	ldd	r31, Y+6	; 0x06
     942:	86 ab       	std	Z+54, r24	; 0x36

uint8_t Protocol::_read()
{
	int c = -1;
	CRITICAL_SECTION{
	while(in_offset < Protocol::BUFFER_SIZE )
     944:	ed 81       	ldd	r30, Y+5	; 0x05
     946:	fe 81       	ldd	r31, Y+6	; 0x06
     948:	86 a9       	ldd	r24, Z+54	; 0x36
     94a:	84 31       	cpi	r24, 0x14	; 20
     94c:	10 f2       	brcs	.-124    	; 0x8d2 <_ZN8Protocol5_readEv+0x2a>
}

uint8_t Protocol::_read()
{
	int c = -1;
	CRITICAL_SECTION{
     94e:	19 82       	std	Y+1, r1	; 0x01
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	88 23       	and	r24, r24
     954:	b9 f7       	brne	.-18     	; 0x944 <_ZN8Protocol5_readEv+0x9c>
			break;
		in[in_offset] = 0;
		in[in_offset] = (uint8_t)(c & 0xFF);
		in_offset++;
	}
	}
     956:	ce 01       	movw	r24, r28
     958:	04 96       	adiw	r24, 0x04	; 4
     95a:	0e 94 3d 03 	call	0x67a	; 0x67a <__iRestore>
	return 0;
     95e:	80 e0       	ldi	r24, 0x00	; 0
}
     960:	26 96       	adiw	r28, 0x06	; 6
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	f8 94       	cli
     966:	de bf       	out	0x3e, r29	; 62
     968:	0f be       	out	0x3f, r0	; 63
     96a:	cd bf       	out	0x3d, r28	; 61
     96c:	cf 91       	pop	r28
     96e:	df 91       	pop	r29
     970:	08 95       	ret

00000972 <_ZN6StreamlsEc>:
	}

	Stream& operator<< (const char str[] ){
		return print(str);
	}
	Stream& operator<< (char c ){
     972:	df 93       	push	r29
     974:	cf 93       	push	r28
     976:	00 d0       	rcall	.+0      	; 0x978 <_ZN6StreamlsEc+0x6>
     978:	0f 92       	push	r0
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	9a 83       	std	Y+2, r25	; 0x02
     980:	89 83       	std	Y+1, r24	; 0x01
     982:	6b 83       	std	Y+3, r22	; 0x03
		return print(c);
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	9a 81       	ldd	r25, Y+2	; 0x02
     988:	6b 81       	ldd	r22, Y+3	; 0x03
     98a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_ZN6Stream5printEc>
	}
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	cf 91       	pop	r28
     996:	df 91       	pop	r29
     998:	08 95       	ret

0000099a <_ZN8Protocol4dumpEh>:
#define DUMP(X, Y) 	if(X & Y) \
		*_uart<<'1';\
	else\
		*_uart<<'0';

void Protocol::dump(uint8_t c)
     99a:	df 93       	push	r29
     99c:	cf 93       	push	r28
     99e:	00 d0       	rcall	.+0      	; 0x9a0 <_ZN8Protocol4dumpEh+0x6>
     9a0:	0f 92       	push	r0
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	9a 83       	std	Y+2, r25	; 0x02
     9a8:	89 83       	std	Y+1, r24	; 0x01
     9aa:	6b 83       	std	Y+3, r22	; 0x03
{
	DUMP(c, 0x80);
     9ac:	8b 81       	ldd	r24, Y+3	; 0x03
     9ae:	88 23       	and	r24, r24
     9b0:	44 f4       	brge	.+16     	; 0x9c2 <_ZN8Protocol4dumpEh+0x28>
     9b2:	e9 81       	ldd	r30, Y+1	; 0x01
     9b4:	fa 81       	ldd	r31, Y+2	; 0x02
     9b6:	84 85       	ldd	r24, Z+12	; 0x0c
     9b8:	95 85       	ldd	r25, Z+13	; 0x0d
     9ba:	61 e3       	ldi	r22, 0x31	; 49
     9bc:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6StreamlsEc>
     9c0:	07 c0       	rjmp	.+14     	; 0x9d0 <_ZN8Protocol4dumpEh+0x36>
     9c2:	e9 81       	ldd	r30, Y+1	; 0x01
     9c4:	fa 81       	ldd	r31, Y+2	; 0x02
     9c6:	84 85       	ldd	r24, Z+12	; 0x0c
     9c8:	95 85       	ldd	r25, Z+13	; 0x0d
     9ca:	60 e3       	ldi	r22, 0x30	; 48
     9cc:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6StreamlsEc>
	DUMP(c, 0x40);
     9d0:	8b 81       	ldd	r24, Y+3	; 0x03
     9d2:	88 2f       	mov	r24, r24
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	80 74       	andi	r24, 0x40	; 64
     9d8:	90 70       	andi	r25, 0x00	; 0
     9da:	00 97       	sbiw	r24, 0x00	; 0
     9dc:	41 f0       	breq	.+16     	; 0x9ee <_ZN8Protocol4dumpEh+0x54>
     9de:	e9 81       	ldd	r30, Y+1	; 0x01
     9e0:	fa 81       	ldd	r31, Y+2	; 0x02
     9e2:	84 85       	ldd	r24, Z+12	; 0x0c
     9e4:	95 85       	ldd	r25, Z+13	; 0x0d
     9e6:	61 e3       	ldi	r22, 0x31	; 49
     9e8:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6StreamlsEc>
     9ec:	07 c0       	rjmp	.+14     	; 0x9fc <_ZN8Protocol4dumpEh+0x62>
     9ee:	e9 81       	ldd	r30, Y+1	; 0x01
     9f0:	fa 81       	ldd	r31, Y+2	; 0x02
     9f2:	84 85       	ldd	r24, Z+12	; 0x0c
     9f4:	95 85       	ldd	r25, Z+13	; 0x0d
     9f6:	60 e3       	ldi	r22, 0x30	; 48
     9f8:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6StreamlsEc>
	DUMP(c, 0x20);
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	88 2f       	mov	r24, r24
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	80 72       	andi	r24, 0x20	; 32
     a04:	90 70       	andi	r25, 0x00	; 0
     a06:	00 97       	sbiw	r24, 0x00	; 0
     a08:	41 f0       	breq	.+16     	; 0xa1a <_ZN8Protocol4dumpEh+0x80>
     a0a:	e9 81       	ldd	r30, Y+1	; 0x01
     a0c:	fa 81       	ldd	r31, Y+2	; 0x02
     a0e:	84 85       	ldd	r24, Z+12	; 0x0c
     a10:	95 85       	ldd	r25, Z+13	; 0x0d
     a12:	61 e3       	ldi	r22, 0x31	; 49
     a14:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6StreamlsEc>
     a18:	07 c0       	rjmp	.+14     	; 0xa28 <_ZN8Protocol4dumpEh+0x8e>
     a1a:	e9 81       	ldd	r30, Y+1	; 0x01
     a1c:	fa 81       	ldd	r31, Y+2	; 0x02
     a1e:	84 85       	ldd	r24, Z+12	; 0x0c
     a20:	95 85       	ldd	r25, Z+13	; 0x0d
     a22:	60 e3       	ldi	r22, 0x30	; 48
     a24:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6StreamlsEc>
	DUMP(c, 0x10);
     a28:	8b 81       	ldd	r24, Y+3	; 0x03
     a2a:	88 2f       	mov	r24, r24
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	80 71       	andi	r24, 0x10	; 16
     a30:	90 70       	andi	r25, 0x00	; 0
     a32:	00 97       	sbiw	r24, 0x00	; 0
     a34:	41 f0       	breq	.+16     	; 0xa46 <_ZN8Protocol4dumpEh+0xac>
     a36:	e9 81       	ldd	r30, Y+1	; 0x01
     a38:	fa 81       	ldd	r31, Y+2	; 0x02
     a3a:	84 85       	ldd	r24, Z+12	; 0x0c
     a3c:	95 85       	ldd	r25, Z+13	; 0x0d
     a3e:	61 e3       	ldi	r22, 0x31	; 49
     a40:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6StreamlsEc>
     a44:	07 c0       	rjmp	.+14     	; 0xa54 <_ZN8Protocol4dumpEh+0xba>
     a46:	e9 81       	ldd	r30, Y+1	; 0x01
     a48:	fa 81       	ldd	r31, Y+2	; 0x02
     a4a:	84 85       	ldd	r24, Z+12	; 0x0c
     a4c:	95 85       	ldd	r25, Z+13	; 0x0d
     a4e:	60 e3       	ldi	r22, 0x30	; 48
     a50:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6StreamlsEc>

	*_uart<<' ';
     a54:	e9 81       	ldd	r30, Y+1	; 0x01
     a56:	fa 81       	ldd	r31, Y+2	; 0x02
     a58:	84 85       	ldd	r24, Z+12	; 0x0c
     a5a:	95 85       	ldd	r25, Z+13	; 0x0d
     a5c:	60 e2       	ldi	r22, 0x20	; 32
     a5e:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6StreamlsEc>

	DUMP(c, 0x08);
     a62:	8b 81       	ldd	r24, Y+3	; 0x03
     a64:	88 2f       	mov	r24, r24
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	88 70       	andi	r24, 0x08	; 8
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	41 f0       	breq	.+16     	; 0xa80 <_ZN8Protocol4dumpEh+0xe6>
     a70:	e9 81       	ldd	r30, Y+1	; 0x01
     a72:	fa 81       	ldd	r31, Y+2	; 0x02
     a74:	84 85       	ldd	r24, Z+12	; 0x0c
     a76:	95 85       	ldd	r25, Z+13	; 0x0d
     a78:	61 e3       	ldi	r22, 0x31	; 49
     a7a:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6StreamlsEc>
     a7e:	07 c0       	rjmp	.+14     	; 0xa8e <_ZN8Protocol4dumpEh+0xf4>
     a80:	e9 81       	ldd	r30, Y+1	; 0x01
     a82:	fa 81       	ldd	r31, Y+2	; 0x02
     a84:	84 85       	ldd	r24, Z+12	; 0x0c
     a86:	95 85       	ldd	r25, Z+13	; 0x0d
     a88:	60 e3       	ldi	r22, 0x30	; 48
     a8a:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6StreamlsEc>
	DUMP(c, 0x04);
     a8e:	8b 81       	ldd	r24, Y+3	; 0x03
     a90:	88 2f       	mov	r24, r24
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	84 70       	andi	r24, 0x04	; 4
     a96:	90 70       	andi	r25, 0x00	; 0
     a98:	00 97       	sbiw	r24, 0x00	; 0
     a9a:	41 f0       	breq	.+16     	; 0xaac <_ZN8Protocol4dumpEh+0x112>
     a9c:	e9 81       	ldd	r30, Y+1	; 0x01
     a9e:	fa 81       	ldd	r31, Y+2	; 0x02
     aa0:	84 85       	ldd	r24, Z+12	; 0x0c
     aa2:	95 85       	ldd	r25, Z+13	; 0x0d
     aa4:	61 e3       	ldi	r22, 0x31	; 49
     aa6:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6StreamlsEc>
     aaa:	07 c0       	rjmp	.+14     	; 0xaba <_ZN8Protocol4dumpEh+0x120>
     aac:	e9 81       	ldd	r30, Y+1	; 0x01
     aae:	fa 81       	ldd	r31, Y+2	; 0x02
     ab0:	84 85       	ldd	r24, Z+12	; 0x0c
     ab2:	95 85       	ldd	r25, Z+13	; 0x0d
     ab4:	60 e3       	ldi	r22, 0x30	; 48
     ab6:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6StreamlsEc>
	DUMP(c, 0x02);
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	88 2f       	mov	r24, r24
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	82 70       	andi	r24, 0x02	; 2
     ac2:	90 70       	andi	r25, 0x00	; 0
     ac4:	00 97       	sbiw	r24, 0x00	; 0
     ac6:	41 f0       	breq	.+16     	; 0xad8 <_ZN8Protocol4dumpEh+0x13e>
     ac8:	e9 81       	ldd	r30, Y+1	; 0x01
     aca:	fa 81       	ldd	r31, Y+2	; 0x02
     acc:	84 85       	ldd	r24, Z+12	; 0x0c
     ace:	95 85       	ldd	r25, Z+13	; 0x0d
     ad0:	61 e3       	ldi	r22, 0x31	; 49
     ad2:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6StreamlsEc>
     ad6:	07 c0       	rjmp	.+14     	; 0xae6 <_ZN8Protocol4dumpEh+0x14c>
     ad8:	e9 81       	ldd	r30, Y+1	; 0x01
     ada:	fa 81       	ldd	r31, Y+2	; 0x02
     adc:	84 85       	ldd	r24, Z+12	; 0x0c
     ade:	95 85       	ldd	r25, Z+13	; 0x0d
     ae0:	60 e3       	ldi	r22, 0x30	; 48
     ae2:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6StreamlsEc>
	DUMP(c, 0x01);
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	88 2f       	mov	r24, r24
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	81 70       	andi	r24, 0x01	; 1
     aee:	90 70       	andi	r25, 0x00	; 0
     af0:	88 23       	and	r24, r24
     af2:	41 f0       	breq	.+16     	; 0xb04 <_ZN8Protocol4dumpEh+0x16a>
     af4:	e9 81       	ldd	r30, Y+1	; 0x01
     af6:	fa 81       	ldd	r31, Y+2	; 0x02
     af8:	84 85       	ldd	r24, Z+12	; 0x0c
     afa:	95 85       	ldd	r25, Z+13	; 0x0d
     afc:	61 e3       	ldi	r22, 0x31	; 49
     afe:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6StreamlsEc>
     b02:	07 c0       	rjmp	.+14     	; 0xb12 <_ZN8Protocol4dumpEh+0x178>
     b04:	e9 81       	ldd	r30, Y+1	; 0x01
     b06:	fa 81       	ldd	r31, Y+2	; 0x02
     b08:	84 85       	ldd	r24, Z+12	; 0x0c
     b0a:	95 85       	ldd	r25, Z+13	; 0x0d
     b0c:	60 e3       	ldi	r22, 0x30	; 48
     b0e:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6StreamlsEc>

	*_uart<<'\n';
     b12:	e9 81       	ldd	r30, Y+1	; 0x01
     b14:	fa 81       	ldd	r31, Y+2	; 0x02
     b16:	84 85       	ldd	r24, Z+12	; 0x0c
     b18:	95 85       	ldd	r25, Z+13	; 0x0d
     b1a:	6a e0       	ldi	r22, 0x0A	; 10
     b1c:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN6StreamlsEc>
}
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	cf 91       	pop	r28
     b28:	df 91       	pop	r29
     b2a:	08 95       	ret

00000b2c <_ZN8Protocol7treatIOEv>:
void Protocol::init(UartHW *uart)
{
	_uart = uart;
}

void Protocol::treatIO()
     b2c:	df 93       	push	r29
     b2e:	cf 93       	push	r28
     b30:	00 d0       	rcall	.+0      	; 0xb32 <_ZN8Protocol7treatIOEv+0x6>
     b32:	00 d0       	rcall	.+0      	; 0xb34 <_ZN8Protocol7treatIOEv+0x8>
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
     b38:	9c 83       	std	Y+4, r25	; 0x04
     b3a:	8b 83       	std	Y+3, r24	; 0x03
{
	_read();
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	9c 81       	ldd	r25, Y+4	; 0x04
     b40:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_ZN8Protocol5_readEv>
	if(in_offset >0 )
     b44:	eb 81       	ldd	r30, Y+3	; 0x03
     b46:	fc 81       	ldd	r31, Y+4	; 0x04
     b48:	86 a9       	ldd	r24, Z+54	; 0x36
     b4a:	88 23       	and	r24, r24
     b4c:	19 f1       	breq	.+70     	; 0xb94 <_ZN8Protocol7treatIOEv+0x68>
{
//_write((uint8_t*)"test\n", 5);

for(int i=0;i<in_offset;i++)
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	19 82       	std	Y+1, r1	; 0x01
     b52:	13 c0       	rjmp	.+38     	; 0xb7a <_ZN8Protocol7treatIOEv+0x4e>
	dump(in[i]);
     b54:	29 81       	ldd	r18, Y+1	; 0x01
     b56:	3a 81       	ldd	r19, Y+2	; 0x02
     b58:	8b 81       	ldd	r24, Y+3	; 0x03
     b5a:	9c 81       	ldd	r25, Y+4	; 0x04
     b5c:	82 0f       	add	r24, r18
     b5e:	93 1f       	adc	r25, r19
     b60:	fc 01       	movw	r30, r24
     b62:	3e 96       	adiw	r30, 0x0e	; 14
     b64:	20 81       	ld	r18, Z
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	9c 81       	ldd	r25, Y+4	; 0x04
     b6a:	62 2f       	mov	r22, r18
     b6c:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN8Protocol4dumpEh>
	_read();
	if(in_offset >0 )
{
//_write((uint8_t*)"test\n", 5);

for(int i=0;i<in_offset;i++)
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	9a 81       	ldd	r25, Y+2	; 0x02
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	9a 83       	std	Y+2, r25	; 0x02
     b78:	89 83       	std	Y+1, r24	; 0x01
     b7a:	eb 81       	ldd	r30, Y+3	; 0x03
     b7c:	fc 81       	ldd	r31, Y+4	; 0x04
     b7e:	86 a9       	ldd	r24, Z+54	; 0x36
     b80:	28 2f       	mov	r18, r24
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	9a 81       	ldd	r25, Y+2	; 0x02
     b88:	82 17       	cp	r24, r18
     b8a:	93 07       	cpc	r25, r19
     b8c:	1c f3       	brlt	.-58     	; 0xb54 <_ZN8Protocol7treatIOEv+0x28>
	dump(in[i]);
//_write(in, in_offset);
        	in_offset = 0;
     b8e:	eb 81       	ldd	r30, Y+3	; 0x03
     b90:	fc 81       	ldd	r31, Y+4	; 0x04
     b92:	16 aa       	std	Z+54, r1	; 0x36
    if(out_offset > 0)
    {
        _write(out, out_offset);
        out_offset = 0;
    }*/
}
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <_ZN8ProtocolC1Ev>:
{
	command = PROT_ERROR;
	len = 0;
}

Protocol::Protocol()
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <_ZN8ProtocolC1Ev+0x6>
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	9a 83       	std	Y+2, r25	; 0x02
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	9a 81       	ldd	r25, Y+2	; 0x02
     bb4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN6PacketC1Ev>
{
	_uart = NULL;
     bb8:	e9 81       	ldd	r30, Y+1	; 0x01
     bba:	fa 81       	ldd	r31, Y+2	; 0x02
     bbc:	15 86       	std	Z+13, r1	; 0x0d
     bbe:	14 86       	std	Z+12, r1	; 0x0c
	in_offset = 0;
     bc0:	e9 81       	ldd	r30, Y+1	; 0x01
     bc2:	fa 81       	ldd	r31, Y+2	; 0x02
     bc4:	16 aa       	std	Z+54, r1	; 0x36
	out_offset = 0;
     bc6:	e9 81       	ldd	r30, Y+1	; 0x01
     bc8:	fa 81       	ldd	r31, Y+2	; 0x02
     bca:	17 aa       	std	Z+55, r1	; 0x37
	memset(in, 0, Protocol::BUFFER_SIZE);
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	9a 81       	ldd	r25, Y+2	; 0x02
     bd0:	0e 96       	adiw	r24, 0x0e	; 14
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	44 e1       	ldi	r20, 0x14	; 20
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	0e 94 59 19 	call	0x32b2	; 0x32b2 <memset>
	memset(out, 0, Protocol::BUFFER_SIZE);
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	9a 81       	ldd	r25, Y+2	; 0x02
     be2:	82 96       	adiw	r24, 0x22	; 34
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	44 e1       	ldi	r20, 0x14	; 20
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	0e 94 59 19 	call	0x32b2	; 0x32b2 <memset>
	haveMessage = false;
     bf0:	e9 81       	ldd	r30, Y+1	; 0x01
     bf2:	fa 81       	ldd	r31, Y+2	; 0x02
     bf4:	10 ae       	std	Z+56, r1	; 0x38
}
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	cf 91       	pop	r28
     bfc:	df 91       	pop	r29
     bfe:	08 95       	ret

00000c00 <_ZN8ProtocolC2Ev>:
{
	command = PROT_ERROR;
	len = 0;
}

Protocol::Protocol()
     c00:	df 93       	push	r29
     c02:	cf 93       	push	r28
     c04:	00 d0       	rcall	.+0      	; 0xc06 <_ZN8ProtocolC2Ev+0x6>
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	9a 83       	std	Y+2, r25	; 0x02
     c0c:	89 83       	std	Y+1, r24	; 0x01
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	9a 81       	ldd	r25, Y+2	; 0x02
     c12:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN6PacketC1Ev>
{
	_uart = NULL;
     c16:	e9 81       	ldd	r30, Y+1	; 0x01
     c18:	fa 81       	ldd	r31, Y+2	; 0x02
     c1a:	15 86       	std	Z+13, r1	; 0x0d
     c1c:	14 86       	std	Z+12, r1	; 0x0c
	in_offset = 0;
     c1e:	e9 81       	ldd	r30, Y+1	; 0x01
     c20:	fa 81       	ldd	r31, Y+2	; 0x02
     c22:	16 aa       	std	Z+54, r1	; 0x36
	out_offset = 0;
     c24:	e9 81       	ldd	r30, Y+1	; 0x01
     c26:	fa 81       	ldd	r31, Y+2	; 0x02
     c28:	17 aa       	std	Z+55, r1	; 0x37
	memset(in, 0, Protocol::BUFFER_SIZE);
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02
     c2e:	0e 96       	adiw	r24, 0x0e	; 14
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	44 e1       	ldi	r20, 0x14	; 20
     c36:	50 e0       	ldi	r21, 0x00	; 0
     c38:	0e 94 59 19 	call	0x32b2	; 0x32b2 <memset>
	memset(out, 0, Protocol::BUFFER_SIZE);
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	82 96       	adiw	r24, 0x22	; 34
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	44 e1       	ldi	r20, 0x14	; 20
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	0e 94 59 19 	call	0x32b2	; 0x32b2 <memset>
	haveMessage = false;
     c4e:	e9 81       	ldd	r30, Y+1	; 0x01
     c50:	fa 81       	ldd	r31, Y+2	; 0x02
     c52:	10 ae       	std	Z+56, r1	; 0x38
}
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <_ZN7ServiceC2Ec>:
#include "services.h"

Service::Service(char id)
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	00 d0       	rcall	.+0      	; 0xc64 <_ZN7ServiceC2Ec+0x6>
     c64:	0f 92       	push	r0
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	9a 83       	std	Y+2, r25	; 0x02
     c6c:	89 83       	std	Y+1, r24	; 0x01
     c6e:	6b 83       	std	Y+3, r22	; 0x03
     c70:	e9 81       	ldd	r30, Y+1	; 0x01
     c72:	fa 81       	ldd	r31, Y+2	; 0x02
     c74:	8a e0       	ldi	r24, 0x0A	; 10
     c76:	92 e0       	ldi	r25, 0x02	; 2
     c78:	91 83       	std	Z+1, r25	; 0x01
     c7a:	80 83       	st	Z, r24
{
    _id = id;
     c7c:	e9 81       	ldd	r30, Y+1	; 0x01
     c7e:	fa 81       	ldd	r31, Y+2	; 0x02
     c80:	8b 81       	ldd	r24, Y+3	; 0x03
     c82:	82 83       	std	Z+2, r24	; 0x02
    _prot = NULL;
     c84:	e9 81       	ldd	r30, Y+1	; 0x01
     c86:	fa 81       	ldd	r31, Y+2	; 0x02
     c88:	14 82       	std	Z+4, r1	; 0x04
     c8a:	13 82       	std	Z+3, r1	; 0x03
}
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <_ZN7ServiceC1Ec>:
#include "services.h"

Service::Service(char id)
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <_ZN7ServiceC1Ec+0x6>
     c9e:	0f 92       	push	r0
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	9a 83       	std	Y+2, r25	; 0x02
     ca6:	89 83       	std	Y+1, r24	; 0x01
     ca8:	6b 83       	std	Y+3, r22	; 0x03
     caa:	e9 81       	ldd	r30, Y+1	; 0x01
     cac:	fa 81       	ldd	r31, Y+2	; 0x02
     cae:	8a e0       	ldi	r24, 0x0A	; 10
     cb0:	92 e0       	ldi	r25, 0x02	; 2
     cb2:	91 83       	std	Z+1, r25	; 0x01
     cb4:	80 83       	st	Z, r24
{
    _id = id;
     cb6:	e9 81       	ldd	r30, Y+1	; 0x01
     cb8:	fa 81       	ldd	r31, Y+2	; 0x02
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	82 83       	std	Z+2, r24	; 0x02
    _prot = NULL;
     cbe:	e9 81       	ldd	r30, Y+1	; 0x01
     cc0:	fa 81       	ldd	r31, Y+2	; 0x02
     cc2:	14 82       	std	Z+4, r1	; 0x04
     cc4:	13 82       	std	Z+3, r1	; 0x03
}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <_ZN7Service4initEP8Protocol>:

void Service::init(Protocol *prot)
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <_ZN7Service4initEP8Protocol+0x6>
     cd8:	00 d0       	rcall	.+0      	; 0xcda <_ZN7Service4initEP8Protocol+0x8>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	9a 83       	std	Y+2, r25	; 0x02
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	7c 83       	std	Y+4, r23	; 0x04
     ce4:	6b 83       	std	Y+3, r22	; 0x03
{
    _prot = prot;
     ce6:	e9 81       	ldd	r30, Y+1	; 0x01
     ce8:	fa 81       	ldd	r31, Y+2	; 0x02
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	94 83       	std	Z+4, r25	; 0x04
     cf0:	83 83       	std	Z+3, r24	; 0x03
}
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <_ZN7Service5matchERK6Packet>:

bool Service::match(const Packet &msg)
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	00 d0       	rcall	.+0      	; 0xd06 <_ZN7Service5matchERK6Packet+0x6>
     d06:	00 d0       	rcall	.+0      	; 0xd08 <_ZN7Service5matchERK6Packet+0x8>
     d08:	0f 92       	push	r0
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	9a 83       	std	Y+2, r25	; 0x02
     d10:	89 83       	std	Y+1, r24	; 0x01
     d12:	7c 83       	std	Y+4, r23	; 0x04
     d14:	6b 83       	std	Y+3, r22	; 0x03
{
    return msg.command == _id ? true : false;    
     d16:	eb 81       	ldd	r30, Y+3	; 0x03
     d18:	fc 81       	ldd	r31, Y+4	; 0x04
     d1a:	90 81       	ld	r25, Z
     d1c:	e9 81       	ldd	r30, Y+1	; 0x01
     d1e:	fa 81       	ldd	r31, Y+2	; 0x02
     d20:	82 81       	ldd	r24, Z+2	; 0x02
     d22:	1d 82       	std	Y+5, r1	; 0x05
     d24:	98 17       	cp	r25, r24
     d26:	11 f4       	brne	.+4      	; 0xd2c <_ZN7Service5matchERK6Packet+0x2c>
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	8d 83       	std	Y+5, r24	; 0x05
     d2c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <_ZN11PingServiceC2Ev>:



PingService::PingService() : Service(PROT_PING)
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	00 d0       	rcall	.+0      	; 0xd44 <_ZN11PingServiceC2Ev+0x6>
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	9a 83       	std	Y+2, r25	; 0x02
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	62 e0       	ldi	r22, 0x02	; 2
     d52:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN7ServiceC2Ec>
     d56:	e9 81       	ldd	r30, Y+1	; 0x01
     d58:	fa 81       	ldd	r31, Y+2	; 0x02
     d5a:	84 e0       	ldi	r24, 0x04	; 4
     d5c:	92 e0       	ldi	r25, 0x02	; 2
     d5e:	91 83       	std	Z+1, r25	; 0x01
     d60:	80 83       	st	Z, r24
{
}
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <_ZN11PingServiceC1Ev>:
    return msg.command == _id ? true : false;    
}



PingService::PingService() : Service(PROT_PING)
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	00 d0       	rcall	.+0      	; 0xd72 <_ZN11PingServiceC1Ev+0x6>
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	9a 83       	std	Y+2, r25	; 0x02
     d78:	89 83       	std	Y+1, r24	; 0x01
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	62 e0       	ldi	r22, 0x02	; 2
     d80:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN7ServiceC2Ec>
     d84:	e9 81       	ldd	r30, Y+1	; 0x01
     d86:	fa 81       	ldd	r31, Y+2	; 0x02
     d88:	84 e0       	ldi	r24, 0x04	; 4
     d8a:	92 e0       	ldi	r25, 0x02	; 2
     d8c:	91 83       	std	Z+1, r25	; 0x01
     d8e:	80 83       	st	Z, r24
{
}
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <_ZN11PingService7executeER6Packet>:

bool PingService::execute(Packet &msg)
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <_ZN11PingService7executeER6Packet+0x6>
     da0:	00 d0       	rcall	.+0      	; 0xda2 <_ZN11PingService7executeER6Packet+0x8>
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	9a 83       	std	Y+2, r25	; 0x02
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	7c 83       	std	Y+4, r23	; 0x04
     dac:	6b 83       	std	Y+3, r22	; 0x03
{
    // i just forward the message
    _prot->send(msg);
     dae:	e9 81       	ldd	r30, Y+1	; 0x01
     db0:	fa 81       	ldd	r31, Y+2	; 0x02
     db2:	83 81       	ldd	r24, Z+3	; 0x03
     db4:	94 81       	ldd	r25, Z+4	; 0x04
     db6:	2b 81       	ldd	r18, Y+3	; 0x03
     db8:	3c 81       	ldd	r19, Y+4	; 0x04
     dba:	b9 01       	movw	r22, r18
     dbc:	0e 94 99 03 	call	0x732	; 0x732 <_ZN8Protocol4sendER6Packet>
    return true;
     dc0:	81 e0       	ldi	r24, 0x01	; 1
}
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <marquee_put_char>:
static MAKE_WRITER(marquee_put_char); /* Fwd Def */
MARQUEE _marquee_ = MAKE_MARQUEE(marquee_list,500000,2000000,&marquee_put_char);
// Create a Writer to write to marquee
// Do NOT call it directly instead, to write the char 'A' use:
// 	marqueeGetWriter(&marquee)('A');
static MAKE_WRITER(marquee_put_char){ /* createWriter */
     dd0:	68 2f       	mov	r22, r24
	return marqueeSendByte(&_marquee_,byte);
     dd2:	89 e5       	ldi	r24, 0x59	; 89
     dd4:	92 e0       	ldi	r25, 0x02	; 2
     dd6:	0e 94 9b 0c 	call	0x1936	; 0x1936 <marqueeSendByte>
}
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	08 95       	ret

00000dde <registerLED>:
static __inline__ void LED_off(LED* led){
	LED_set(led,FALSE);
}

static __inline__ void statusLEDregister(const IOPin* pin, boolean activeHigh){
	statusLED.pin = pin;
     dde:	8b e0       	ldi	r24, 0x0B	; 11
     de0:	93 e0       	ldi	r25, 0x03	; 3
     de2:	90 93 31 04 	sts	0x0431, r25
     de6:	80 93 30 04 	sts	0x0430, r24
	statusLED.activeHigh = activeHigh;
     dea:	80 91 32 04 	lds	r24, 0x0432
	statusLED.initialised=FALSE;
     dee:	8c 7f       	andi	r24, 0xFC	; 252
     df0:	80 93 32 04 	sts	0x0432, r24


void LED_set(LED* led,	boolean value);

static __inline__ void LED_on(LED* led){
	LED_set(led,TRUE);
     df4:	80 e3       	ldi	r24, 0x30	; 48
     df6:	94 e0       	ldi	r25, 0x04	; 4
     df8:	6f ef       	ldi	r22, 0xFF	; 255
     dfa:	0e 94 11 0c 	call	0x1822	; 0x1822 <LED_set>
	servoPWMInit(&_bank1_);
}
// ----------- Register the statusLED -----------
void registerLED(void){
	statusLEDregister(C1,false);
}
     dfe:	08 95       	ret

00000e00 <initHardware>:
	//segled_init(&_led_display_);
}

// ----------- Initialise my added devices ------
void initHardware(void){
	servoPWMInit(&_bank1_);
     e00:	82 eb       	ldi	r24, 0xB2	; 178
     e02:	92 e0       	ldi	r25, 0x02	; 2
     e04:	0e 94 8f 09 	call	0x131e	; 0x131e <servoPWMInit>
}
     e08:	08 95       	ret

00000e0a <sysInitHardware>:
static __inline__ boolean SWITCH_released(SWITCH* sw){
	return pin_is_high(sw->pin);
}

static __inline__ void SWITCH_init(SWITCH *sw){
	pin_make_input(sw->pin,TRUE);
     e0a:	80 91 46 02 	lds	r24, 0x0246
     e0e:	90 91 47 02 	lds	r25, 0x0247
     e12:	6f ef       	ldi	r22, 0xFF	; 255
     e14:	0e 94 c3 0b 	call	0x1786	; 0x1786 <pin_make_input>
// ----------- Initialise built in devices ------
void sysInitHardware(void){
	SWITCH_init(&_button_);
//	setErrorLog(&uart1SendByte);
	//rprintfInit(&uart1SendByte);
	uartInit(_C_uart1,115200);
     e18:	84 e1       	ldi	r24, 0x14	; 20
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	52 ec       	ldi	r21, 0xC2	; 194
     e20:	61 e0       	ldi	r22, 0x01	; 1
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <_uartInit>
	//segled_init(&_led_display_);
}
     e28:	08 95       	ret

00000e2a <__vector_36>:
#endif

#ifndef USART1_RX_vect
# error Uart1 Rx complete vector undefined
#else
ISR(USART1_RX_vect){
     e2a:	1f 92       	push	r1
     e2c:	0f 92       	push	r0
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	0f 92       	push	r0
     e32:	11 24       	eor	r1, r1
     e34:	2f 93       	push	r18
     e36:	3f 93       	push	r19
     e38:	4f 93       	push	r20
     e3a:	5f 93       	push	r21
     e3c:	6f 93       	push	r22
     e3e:	7f 93       	push	r23
     e40:	8f 93       	push	r24
     e42:	9f 93       	push	r25
     e44:	af 93       	push	r26
     e46:	bf 93       	push	r27
     e48:	ef 93       	push	r30
     e4a:	ff 93       	push	r31
	uartReceiveService(_C_uart1);
     e4c:	e0 91 40 02 	lds	r30, 0x0240
     e50:	f0 91 41 02 	lds	r31, 0x0241
     e54:	60 81       	ld	r22, Z
     e56:	84 e1       	ldi	r24, 0x14	; 20
     e58:	92 e0       	ldi	r25, 0x02	; 2
     e5a:	0e 94 9c 10 	call	0x2138	; 0x2138 <__uartReceiveService>
}
     e5e:	ff 91       	pop	r31
     e60:	ef 91       	pop	r30
     e62:	bf 91       	pop	r27
     e64:	af 91       	pop	r26
     e66:	9f 91       	pop	r25
     e68:	8f 91       	pop	r24
     e6a:	7f 91       	pop	r23
     e6c:	6f 91       	pop	r22
     e6e:	5f 91       	pop	r21
     e70:	4f 91       	pop	r20
     e72:	3f 91       	pop	r19
     e74:	2f 91       	pop	r18
     e76:	0f 90       	pop	r0
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	0f 90       	pop	r0
     e7c:	1f 90       	pop	r1
     e7e:	18 95       	reti

00000e80 <__vector_38>:
HW_UART __C_uart1 = MAKE_UART_BUFFERED(null,null,UCSR1A,UCSR1B,UBRR1L,UBRR1H,UDR1,null,BV(U2X1),D2,D3,&uart1GetByte,&uart1SendByte);

#ifndef USART1_TX_vect
# error Uart1 Tx complete vector undefined
#else
ISR(USART1_TX_vect){
     e80:	1f 92       	push	r1
     e82:	0f 92       	push	r0
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	0f 92       	push	r0
     e88:	11 24       	eor	r1, r1
     e8a:	2f 93       	push	r18
     e8c:	3f 93       	push	r19
     e8e:	4f 93       	push	r20
     e90:	5f 93       	push	r21
     e92:	6f 93       	push	r22
     e94:	7f 93       	push	r23
     e96:	8f 93       	push	r24
     e98:	9f 93       	push	r25
     e9a:	af 93       	push	r26
     e9c:	bf 93       	push	r27
     e9e:	ef 93       	push	r30
     ea0:	ff 93       	push	r31
	uartTransmitService(_C_uart1);
     ea2:	84 e1       	ldi	r24, 0x14	; 20
     ea4:	92 e0       	ldi	r25, 0x02	; 2
     ea6:	0e 94 47 11 	call	0x228e	; 0x228e <__uartTransmitService>
}
     eaa:	ff 91       	pop	r31
     eac:	ef 91       	pop	r30
     eae:	bf 91       	pop	r27
     eb0:	af 91       	pop	r26
     eb2:	9f 91       	pop	r25
     eb4:	8f 91       	pop	r24
     eb6:	7f 91       	pop	r23
     eb8:	6f 91       	pop	r22
     eba:	5f 91       	pop	r21
     ebc:	4f 91       	pop	r20
     ebe:	3f 91       	pop	r19
     ec0:	2f 91       	pop	r18
     ec2:	0f 90       	pop	r0
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	0f 90       	pop	r0
     ec8:	1f 90       	pop	r1
     eca:	18 95       	reti

00000ecc <uart1GetByte>:
}

// Create a routine to read a byte from uart1
// Returns -1 if there was no data
MAKE_READER( uart1GetByte){
	return uartGetByte(_C_uart1);
     ecc:	84 e1       	ldi	r24, 0x14	; 20
     ece:	92 e0       	ldi	r25, 0x02	; 2
     ed0:	0e 94 b6 10 	call	0x216c	; 0x216c <__uartGetByte>
}
     ed4:	08 95       	ret

00000ed6 <uart1SendByte>:

// ------------------- uart1 -------------------

// Create a routine to write bytes to uart1
// You can set rprintf to use it by calling rprintfInit(&uart1SendByte)
MAKE_WRITER(uart1SendByte){
     ed6:	68 2f       	mov	r22, r24
	return uartSendByte(_C_uart1,byte);
     ed8:	84 e1       	ldi	r24, 0x14	; 20
     eda:	92 e0       	ldi	r25, 0x02	; 2
     edc:	0e 94 3d 11 	call	0x227a	; 0x227a <_uartSendByte>
}
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	08 95       	ret

00000ee4 <clockGetSnapshot>:
#define STATUS_LED_DDR   DDRC		
#define STATUS_LED_PIN   PC1		
static uint8_t counter;
		

void clockGetSnapshot(TIMER_SNAPSHOT* snapshot){
     ee4:	fc 01       	movw	r30, r24
	// Clock timer uses TIMER_MODE_CTC_OCR which generate compare interrupts on channel A
	CRITICAL_SECTION{
     ee6:	6f b7       	in	r22, 0x3f	; 63
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
     ee8:	f8 94       	cli
		// get the current ticks from the timer
		uint16_t tcnt = TCNT5;
     eea:	80 91 24 01 	lds	r24, 0x0124
     eee:	90 91 25 01 	lds	r25, 0x0125
		// get the number of whole ticks
		snapshot->whole  = wholeTicks;
     ef2:	20 91 ba 03 	lds	r18, 0x03BA
     ef6:	30 91 bb 03 	lds	r19, 0x03BB
     efa:	40 91 bc 03 	lds	r20, 0x03BC
     efe:	50 91 bd 03 	lds	r21, 0x03BD
     f02:	20 83       	st	Z, r18
     f04:	31 83       	std	Z+1, r19	; 0x01
     f06:	42 83       	std	Z+2, r20	; 0x02
     f08:	53 83       	std	Z+3, r21	; 0x03
		// get the current ticks again
		snapshot->part   = TCNT5;
     f0a:	20 91 24 01 	lds	r18, 0x0124
     f0e:	30 91 25 01 	lds	r19, 0x0125
     f12:	35 83       	std	Z+5, r19	; 0x05
     f14:	24 83       	std	Z+4, r18	; 0x04
		// If the second reading of tcnt has gone down then there must have been an overflow
		// since reading the 'rtn' value. Or there may be a pending interrupt which may be
		// because interrupts are currently turned off. In either case increment the 'rtn' value
		// as if the interrupt has happened
		if(snapshot->part < tcnt || CLOCK_INT_PENDING ){
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	10 f0       	brcs	.+4      	; 0xf20 <clockGetSnapshot+0x3c>
     f1c:	d1 9b       	sbis	0x1a, 1	; 26
     f1e:	12 c0       	rjmp	.+36     	; 0xf44 <clockGetSnapshot+0x60>
			snapshot->whole += usPerTop;
     f20:	80 81       	ld	r24, Z
     f22:	91 81       	ldd	r25, Z+1	; 0x01
     f24:	a2 81       	ldd	r26, Z+2	; 0x02
     f26:	b3 81       	ldd	r27, Z+3	; 0x03
     f28:	80 50       	subi	r24, 0x00	; 0
     f2a:	93 48       	sbci	r25, 0x83	; 131
     f2c:	af 4f       	sbci	r26, 0xFF	; 255
     f2e:	bf 4f       	sbci	r27, 0xFF	; 255
     f30:	80 83       	st	Z, r24
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	a2 83       	std	Z+2, r26	; 0x02
     f36:	b3 83       	std	Z+3, r27	; 0x03
			// get the current ticks again
			snapshot->part = TCNT5;
     f38:	80 91 24 01 	lds	r24, 0x0124
     f3c:	90 91 25 01 	lds	r25, 0x0125
     f40:	95 83       	std	Z+5, r25	; 0x05
     f42:	84 83       	std	Z+4, r24	; 0x04
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
     f44:	6f bf       	out	0x3f, r22	; 63
		}
	}
}
     f46:	08 95       	ret

00000f48 <clockSnapshotToTicks>:

TICK_COUNT clockSnapshotToTicks(const TIMER_SNAPSHOT* snapshot){
     f48:	ef 92       	push	r14
     f4a:	ff 92       	push	r15
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	fc 01       	movw	r30, r24
	TICK_COUNT rtn = snapshot->whole;
     f52:	e0 80       	ld	r14, Z
     f54:	f1 80       	ldd	r15, Z+1	; 0x01
     f56:	02 81       	ldd	r16, Z+2	; 0x02
     f58:	13 81       	ldd	r17, Z+3	; 0x03

	// top = usPerTop
	// part     x
	TICK_COUNT frac  = snapshot->part;
     f5a:	64 81       	ldd	r22, Z+4	; 0x04
     f5c:	75 81       	ldd	r23, Z+5	; 0x05
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
	frac *= usPerTop;
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	3d e7       	ldi	r19, 0x7D	; 125
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	0e 94 12 1a 	call	0x3424	; 0x3424 <__mulsi3>
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	3a ef       	ldi	r19, 0xFA	; 250
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	0e 94 45 1a 	call	0x348a	; 0x348a <__udivmodsi4>
     f7a:	2e 0d       	add	r18, r14
     f7c:	3f 1d       	adc	r19, r15
     f7e:	40 1f       	adc	r20, r16
     f80:	51 1f       	adc	r21, r17
	frac /= CLOCK_TOP;

	rtn += frac;

	return rtn;
}
     f82:	b9 01       	movw	r22, r18
     f84:	ca 01       	movw	r24, r20
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	ff 90       	pop	r15
     f8c:	ef 90       	pop	r14
     f8e:	08 95       	ret

00000f90 <clockGetus>:

// Get the current clock time in uS
TICK_COUNT clockGetus(void){
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <clockGetus+0xa>
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <clockGetus+0xc>
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <clockGetus+0xe>
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
	TIMER_SNAPSHOT snapshot;
	clockGetSnapshot(&snapshot);
     fa2:	8e 01       	movw	r16, r28
     fa4:	0f 5f       	subi	r16, 0xFF	; 255
     fa6:	1f 4f       	sbci	r17, 0xFF	; 255
     fa8:	c8 01       	movw	r24, r16
     faa:	0e 94 72 07 	call	0xee4	; 0xee4 <clockGetSnapshot>

	return clockSnapshotToTicks(&snapshot);
     fae:	c8 01       	movw	r24, r16
     fb0:	0e 94 a4 07 	call	0xf48	; 0xf48 <clockSnapshotToTicks>
}
     fb4:	26 96       	adiw	r28, 0x06	; 6
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	08 95       	ret

00000fca <__clockInit>:

// Initialise the clock timer and turn it on
void __clockInit(void){
	// Set interrupt pending = false
	CLOCK_INT_CLEAR;
     fca:	d1 9a       	sbi	0x1a, 1	; 26
	
	// Enable interrupts
	CLOCK_INT_ENABLE;
     fcc:	e3 e7       	ldi	r30, 0x73	; 115
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	82 60       	ori	r24, 0x02	; 2
     fd4:	80 83       	st	Z, r24
}
     fd6:	08 95       	ret

00000fd8 <__vector_47>:

// ISR for clock overflow. Occurs every msPerTop
ISR(TIMER5_COMPA_vect) {
     fd8:	1f 92       	push	r1
     fda:	0f 92       	push	r0
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	0f 92       	push	r0
     fe0:	11 24       	eor	r1, r1
     fe2:	2f 93       	push	r18
     fe4:	8f 93       	push	r24
     fe6:	9f 93       	push	r25
     fe8:	af 93       	push	r26
     fea:	bf 93       	push	r27
	wholeTicks += usPerTop;
     fec:	80 91 ba 03 	lds	r24, 0x03BA
     ff0:	90 91 bb 03 	lds	r25, 0x03BB
     ff4:	a0 91 bc 03 	lds	r26, 0x03BC
     ff8:	b0 91 bd 03 	lds	r27, 0x03BD
     ffc:	80 50       	subi	r24, 0x00	; 0
     ffe:	93 48       	sbci	r25, 0x83	; 131
    1000:	af 4f       	sbci	r26, 0xFF	; 255
    1002:	bf 4f       	sbci	r27, 0xFF	; 255
    1004:	80 93 ba 03 	sts	0x03BA, r24
    1008:	90 93 bb 03 	sts	0x03BB, r25
    100c:	a0 93 bc 03 	sts	0x03BC, r26
    1010:	b0 93 bd 03 	sts	0x03BD, r27

	
	// Flash the status led if there is an error
	ERROR* err = &__error;
	if(err->errorCode && bit_is_set(STATUS_LED_DDR,STATUS_LED_PIN)){
    1014:	20 91 2b 04 	lds	r18, 0x042B
    1018:	22 23       	and	r18, r18
    101a:	b9 f1       	breq	.+110    	; 0x108a <__vector_47+0xb2>
    101c:	39 9b       	sbis	0x07, 1	; 7
    101e:	35 c0       	rjmp	.+106    	; 0x108a <__vector_47+0xb2>
		// There is an error and status led pin is an output

		// Decrement any counter
		if(counter){
    1020:	80 91 be 03 	lds	r24, 0x03BE
    1024:	88 23       	and	r24, r24
    1026:	19 f0       	breq	.+6      	; 0x102e <__vector_47+0x56>
			counter--;
    1028:	81 50       	subi	r24, 0x01	; 1
    102a:	80 93 be 03 	sts	0x03BE, r24
		}
		if(counter==0){
    102e:	80 91 be 03 	lds	r24, 0x03BE
    1032:	88 23       	and	r24, r24
    1034:	51 f5       	brne	.+84     	; 0x108a <__vector_47+0xb2>
			// Its time to do something
			if(err->remaining==0){
    1036:	80 91 2c 04 	lds	r24, 0x042C
    103a:	88 23       	and	r24, r24
    103c:	59 f4       	brne	.+22     	; 0x1054 <__vector_47+0x7c>
				err->remaining = ABS(err->errorCode);
    103e:	82 2f       	mov	r24, r18
    1040:	99 27       	eor	r25, r25
    1042:	87 fd       	sbrc	r24, 7
    1044:	90 95       	com	r25
    1046:	97 ff       	sbrs	r25, 7
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <__vector_47+0x78>
    104a:	90 95       	com	r25
    104c:	81 95       	neg	r24
    104e:	9f 4f       	sbci	r25, 0xFF	; 255
    1050:	80 93 2c 04 	sts	0x042C, r24
			}

			uint8_t delay = (err->errorCode < 0 ) ? 250/msPerTop : 500/msPerTop;
    1054:	27 fd       	sbrc	r18, 7
    1056:	02 c0       	rjmp	.+4      	; 0x105c <__vector_47+0x84>
    1058:	9f e0       	ldi	r25, 0x0F	; 15
    105a:	01 c0       	rjmp	.+2      	; 0x105e <__vector_47+0x86>
    105c:	97 e0       	ldi	r25, 0x07	; 7
			if(err->phase){
    105e:	20 91 2d 04 	lds	r18, 0x042D
    1062:	22 23       	and	r18, r18
    1064:	41 f0       	breq	.+16     	; 0x1076 <__vector_47+0x9e>
				// turn led off
				if(-- err->remaining == 0){
    1066:	80 91 2c 04 	lds	r24, 0x042C
    106a:	81 50       	subi	r24, 0x01	; 1
    106c:	80 93 2c 04 	sts	0x042C, r24
    1070:	88 23       	and	r24, r24
    1072:	09 f4       	brne	.+2      	; 0x1076 <__vector_47+0x9e>
    1074:	9e e3       	ldi	r25, 0x3E	; 62
					delay = 2000/msPerTop;
				}
			}else{
				// turn led on
			}
			err->phase = !err->phase;
    1076:	10 92 2d 04 	sts	0x042D, r1
    107a:	22 23       	and	r18, r18
    107c:	19 f4       	brne	.+6      	; 0x1084 <__vector_47+0xac>
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	80 93 2d 04 	sts	0x042D, r24
			counter = delay;
    1084:	90 93 be 03 	sts	0x03BE, r25
			// toggle the LED
			sbi(STATUS_LED_INPUT,STATUS_LED_PIN);
    1088:	31 9a       	sbi	0x06, 1	; 6
		}
	}
	
}
    108a:	bf 91       	pop	r27
    108c:	af 91       	pop	r26
    108e:	9f 91       	pop	r25
    1090:	8f 91       	pop	r24
    1092:	2f 91       	pop	r18
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <_ZN6Stream4_putEcP6__file>:
	// Send a block of bytes from program memory
	size_t write_P(const void *src, size_t len);

	// All stream oriented devices must support
	// the following methods
	virtual int write(uint8_t c) = 0;
    109e:	28 2f       	mov	r18, r24
	virtual int read(void) = 0;
    10a0:	61 15       	cp	r22, r1
    10a2:	71 05       	cpc	r23, r1
    10a4:	19 f4       	brne	.+6      	; 0x10ac <_ZN6Stream4_putEcP6__file+0xe>
    10a6:	a0 e0       	ldi	r26, 0x00	; 0
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <_ZN6Stream4_putEcP6__file+0x12>
    10ac:	db 01       	movw	r26, r22
    10ae:	12 97       	sbiw	r26, 0x02	; 2

    10b0:	ed 91       	ld	r30, X+
    10b2:	fc 91       	ld	r31, X
    10b4:	11 97       	sbiw	r26, 0x01	; 1
    10b6:	01 90       	ld	r0, Z+
    10b8:	f0 81       	ld	r31, Z
    10ba:	e0 2d       	mov	r30, r0
    10bc:	cd 01       	movw	r24, r26
    10be:	62 2f       	mov	r22, r18
    10c0:	09 95       	icall
private:
    10c2:	08 95       	ret

000010c4 <_ZN6Stream4_getEP6__file>:
	 * when using commands from stdio.h
	 * This is passed on to the write of our C++ object
	 */
	static int	_put(char c, STREAM *s){
		Stream* str = (Stream*)s;
		return str->write((uint8_t)c);
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	19 f4       	brne	.+6      	; 0x10ce <_ZN6Stream4_getEP6__file+0xa>
    10c8:	a0 e0       	ldi	r26, 0x00	; 0
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <_ZN6Stream4_getEP6__file+0xe>
    10ce:	dc 01       	movw	r26, r24
    10d0:	12 97       	sbiw	r26, 0x02	; 2
	}
    10d2:	ed 91       	ld	r30, X+
    10d4:	fc 91       	ld	r31, X
    10d6:	11 97       	sbiw	r26, 0x01	; 1
    10d8:	02 80       	ldd	r0, Z+2	; 0x02
    10da:	f3 81       	ldd	r31, Z+3	; 0x03
    10dc:	e0 2d       	mov	r30, r0
    10de:	cd 01       	movw	r24, r26
    10e0:	09 95       	icall

    10e2:	08 95       	ret

000010e4 <_ZN10NullStream5writeEh>:
	 * when using commands from stdio.h
	 * This is passed on to the read of our C++ object
	 */
	static int	_get(STREAM *s){
		Stream* str = (Stream*)s;
		return str->read();
    10e4:	86 2f       	mov	r24, r22
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	08 95       	ret

000010ea <_ZN10NullStream4readEv>:
	}
    10ea:	8f ef       	ldi	r24, 0xFF	; 255
    10ec:	9f ef       	ldi	r25, 0xFF	; 255
    10ee:	08 95       	ret

000010f0 <_ZN7Marquee4readEv>:
public:
	Marquee(MARQUEE* cstr) {m_cstr = cstr;}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){return marqueeSendByte(m_cstr,data);}
	virtual int read(void){return EOF;}
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	9f ef       	ldi	r25, 0xFF	; 255
    10f4:	08 95       	ret

000010f6 <_Z10_cpp_Init_v>:
UartHW uart1(_C_uart1);
#include <Stream/Stream.h>
NullStream nullStream;

void __attribute__ ((constructor)) _cpp_Init_(void){
	stdin = stdout = uart1;
    10f6:	87 ee       	ldi	r24, 0xE7	; 231
    10f8:	93 e0       	ldi	r25, 0x03	; 3
    10fa:	90 93 3a 04 	sts	0x043A, r25
    10fe:	80 93 39 04 	sts	0x0439, r24
    1102:	90 93 38 04 	sts	0x0438, r25
    1106:	80 93 37 04 	sts	0x0437, r24
	stderr = uart1;
    110a:	90 93 3c 04 	sts	0x043C, r25
    110e:	80 93 3b 04 	sts	0x043B, r24
}
    1112:	08 95       	ret

00001114 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void){
    1114:	ff cf       	rjmp	.-2      	; 0x1114 <__cxa_pure_virtual>

00001116 <_GLOBAL__I_statusLed>:
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class Led {
public:
	Led(LED * cstr){m_cstr = cstr;};
    1116:	80 e3       	ldi	r24, 0x30	; 48
    1118:	94 e0       	ldi	r25, 0x04	; 4
    111a:	90 93 c2 03 	sts	0x03C2, r25
    111e:	80 93 c1 03 	sts	0x03C1, r24
	LED* m_cstr;
};

class StatusLed : public Led {
public:
	StatusLed(LED * cstr) : Led(cstr){
    1122:	83 ec       	ldi	r24, 0xC3	; 195
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	90 93 c0 03 	sts	0x03C0, r25
    112a:	80 93 bf 03 	sts	0x03BF, r24
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class Switch {
public:
	Switch(SWITCH * cstr){m_cstr = cstr;};
    112e:	86 e4       	ldi	r24, 0x46	; 70
    1130:	92 e0       	ldi	r25, 0x02	; 2
    1132:	90 93 c4 03 	sts	0x03C4, r25
    1136:	80 93 c3 03 	sts	0x03C3, r24
#include <stdio.h>
#ifndef _STREAM_H
#define _STREAM_H


#ifdef __cplusplus
    113a:	6f e4       	ldi	r22, 0x4F	; 79
    113c:	78 e0       	ldi	r23, 0x08	; 8
    113e:	70 93 d0 03 	sts	0x03D0, r23
    1142:	60 93 cf 03 	sts	0x03CF, r22
    1146:	42 e6       	ldi	r20, 0x62	; 98
    1148:	58 e0       	ldi	r21, 0x08	; 8
    114a:	50 93 d2 03 	sts	0x03D2, r21
    114e:	40 93 d1 03 	sts	0x03D1, r20
    1152:	a3 e0       	ldi	r26, 0x03	; 3
    1154:	a0 93 ca 03 	sts	0x03CA, r26
    1158:	10 92 d4 03 	sts	0x03D4, r1
    115c:	10 92 d3 03 	sts	0x03D3, r1
};


class Marquee : public Stream {
public:
	Marquee(MARQUEE* cstr) {m_cstr = cstr;}
    1160:	8f ec       	ldi	r24, 0xCF	; 207
    1162:	92 e0       	ldi	r25, 0x02	; 2
    1164:	90 93 c6 03 	sts	0x03C6, r25
    1168:	80 93 c5 03 	sts	0x03C5, r24
    116c:	89 e5       	ldi	r24, 0x59	; 89
    116e:	92 e0       	ldi	r25, 0x02	; 2
    1170:	90 93 d6 03 	sts	0x03D6, r25
    1174:	80 93 d5 03 	sts	0x03D5, r24
#ifdef __cplusplus
}
class Actuator{
public:
	Actuator(__ACTUATOR* cstr){
		m_cstr = cstr;
    1178:	80 e7       	ldi	r24, 0x70	; 112
    117a:	92 e0       	ldi	r25, 0x02	; 2
    117c:	90 93 d8 03 	sts	0x03D8, r25
    1180:	80 93 d7 03 	sts	0x03D7, r24
#ifdef __cplusplus
}
class Servo : public Actuator{
public:
	Servo(SERVO* cstr) : Actuator(&cstr->actuator){
		m_cstr = cstr;
    1184:	90 93 da 03 	sts	0x03DA, r25
    1188:	80 93 d9 03 	sts	0x03D9, r24
    118c:	86 e8       	ldi	r24, 0x86	; 134
    118e:	92 e0       	ldi	r25, 0x02	; 2
    1190:	90 93 dc 03 	sts	0x03DC, r25
    1194:	80 93 db 03 	sts	0x03DB, r24
    1198:	90 93 de 03 	sts	0x03DE, r25
    119c:	80 93 dd 03 	sts	0x03DD, r24
    11a0:	8c e9       	ldi	r24, 0x9C	; 156
    11a2:	92 e0       	ldi	r25, 0x02	; 2
    11a4:	90 93 e0 03 	sts	0x03E0, r25
    11a8:	80 93 df 03 	sts	0x03DF, r24
    11ac:	90 93 e2 03 	sts	0x03E2, r25
    11b0:	80 93 e1 03 	sts	0x03E1, r24
};

class ServoDriver{
public:
	ServoDriver(SERVO_DRIVER* cstr){
		driver = cstr;
    11b4:	82 eb       	ldi	r24, 0xB2	; 178
    11b6:	92 e0       	ldi	r25, 0x02	; 2
    11b8:	90 93 e4 03 	sts	0x03E4, r25
    11bc:	80 93 e3 03 	sts	0x03E3, r24
    11c0:	70 93 f0 03 	sts	0x03F0, r23
    11c4:	60 93 ef 03 	sts	0x03EF, r22
    11c8:	50 93 f2 03 	sts	0x03F2, r21
    11cc:	40 93 f1 03 	sts	0x03F1, r20
    11d0:	a0 93 ea 03 	sts	0x03EA, r26
    11d4:	10 92 f4 03 	sts	0x03F4, r1
    11d8:	10 92 f3 03 	sts	0x03F3, r1
/* ===================== C++ Wrapper Code ===============================================*/
#include "Stream/Stream.h"
class Uart : public Stream {
public:
	Uart(UART * cstr): Stream(){
		m_cstr = cstr;
    11dc:	24 e1       	ldi	r18, 0x14	; 20
    11de:	32 e0       	ldi	r19, 0x02	; 2
    11e0:	30 93 f6 03 	sts	0x03F6, r19
    11e4:	20 93 f5 03 	sts	0x03F5, r18
		cstr->cpp = this;
    11e8:	e5 ee       	ldi	r30, 0xE5	; 229
    11ea:	f3 e0       	ldi	r31, 0x03	; 3
    11ec:	f0 93 2a 02 	sts	0x022A, r31
    11f0:	e0 93 29 02 	sts	0x0229, r30
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class UartHW : public Uart {
public:
	UartHW(HW_UART* uart) : Uart(&uart->_uart_){
    11f4:	8f ed       	ldi	r24, 0xDF	; 223
    11f6:	92 e0       	ldi	r25, 0x02	; 2
    11f8:	91 83       	std	Z+1, r25	; 0x01
    11fa:	80 83       	st	Z, r24
		m_hw = uart;
    11fc:	30 93 fc 03 	sts	0x03FC, r19
    1200:	20 93 fb 03 	sts	0x03FB, r18
		m_polling = FALSE;
    1204:	10 92 fd 03 	sts	0x03FD, r1
    1208:	70 93 09 04 	sts	0x0409, r23
    120c:	60 93 08 04 	sts	0x0408, r22
    1210:	50 93 0b 04 	sts	0x040B, r21
    1214:	40 93 0a 04 	sts	0x040A, r20
    1218:	a0 93 03 04 	sts	0x0403, r26
    121c:	10 92 0d 04 	sts	0x040D, r1
    1220:	10 92 0c 04 	sts	0x040C, r1
	/* function to read one char from device
	 * Called directly from the C FILE code
	 * when using commands from stdio.h
	 * This is passed on to the read of our C++ object
	 */
	static int	_get(STREAM *s){
    1224:	8f ee       	ldi	r24, 0xEF	; 239
    1226:	92 e0       	ldi	r25, 0x02	; 2
    1228:	90 93 ff 03 	sts	0x03FF, r25
    122c:	80 93 fe 03 	sts	0x03FE, r24
	while(1);
}
    1230:	08 95       	ret

00001232 <_ZNK9StatusLed3setEa>:
	}

	virtual void set(boolean value) const{
    1232:	1f 93       	push	r17
    1234:	16 2f       	mov	r17, r22
		LED_off(&statusLED);
	}
}

static __inline__ void statusLED_set(boolean value){
	if(pin_is_output(statusLED.pin)){
    1236:	80 91 30 04 	lds	r24, 0x0430
    123a:	90 91 31 04 	lds	r25, 0x0431
    123e:	0e 94 ae 0b 	call	0x175c	; 0x175c <pin_is_output>
    1242:	88 23       	and	r24, r24
    1244:	29 f0       	breq	.+10     	; 0x1250 <_ZNK9StatusLed3setEa+0x1e>
		LED_set(&statusLED, value);
    1246:	80 e3       	ldi	r24, 0x30	; 48
    1248:	94 e0       	ldi	r25, 0x04	; 4
    124a:	61 2f       	mov	r22, r17
    124c:	0e 94 11 0c 	call	0x1822	; 0x1822 <LED_set>
	StatusLed(LED * cstr) : Led(cstr){
	}

	virtual void set(boolean value) const{
		statusLED_set(value);
	}
    1250:	1f 91       	pop	r17
    1252:	08 95       	ret

00001254 <_ZNK3Led3setEa>:
	}
	void off(void) const{
		set(FALSE);
	}
	virtual void set(boolean value) const{
		LED_set(m_cstr,value);
    1254:	fc 01       	movw	r30, r24
    1256:	82 81       	ldd	r24, Z+2	; 0x02
    1258:	93 81       	ldd	r25, Z+3	; 0x03
    125a:	0e 94 11 0c 	call	0x1822	; 0x1822 <LED_set>
	}
    125e:	08 95       	ret

00001260 <_ZN7Marquee5writeEh>:

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){return marqueeSendByte(m_cstr,data);}
    1260:	fc 01       	movw	r30, r24
    1262:	80 89       	ldd	r24, Z+16	; 0x10
    1264:	91 89       	ldd	r25, Z+17	; 0x11
    1266:	0e 94 9b 0c 	call	0x1936	; 0x1936 <marqueeSendByte>
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	08 95       	ret

0000126e <_ZN6UartHW4readEv>:
	};

	virtual int read(void){
    126e:	fc 01       	movw	r30, r24
		int ch;

		if(m_polling){
    1270:	80 8d       	ldd	r24, Z+24	; 0x18
    1272:	88 23       	and	r24, r24
    1274:	29 f0       	breq	.+10     	; 0x1280 <_ZN6UartHW4readEv+0x12>
			ch = uartPollByte(m_hw);
    1276:	86 89       	ldd	r24, Z+22	; 0x16
    1278:	97 89       	ldd	r25, Z+23	; 0x17
    127a:	0e 94 7e 11 	call	0x22fc	; 0x22fc <uartPollByte>
    127e:	08 95       	ret
		}else{
			ch = __uartGetByte(m_cstr);
    1280:	80 89       	ldd	r24, Z+16	; 0x10
    1282:	91 89       	ldd	r25, Z+17	; 0x11
    1284:	0e 94 b6 10 	call	0x216c	; 0x216c <__uartGetByte>
		}

		return ch;
	}
    1288:	08 95       	ret

0000128a <_ZN4Uart4readEv>:
	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
		return _uartSendByte(m_cstr, data);
	}
	virtual int read(void){
		return __uartGetByte(m_cstr);
    128a:	fc 01       	movw	r30, r24
    128c:	80 89       	ldd	r24, Z+16	; 0x10
    128e:	91 89       	ldd	r25, Z+17	; 0x11
    1290:	0e 94 b6 10 	call	0x216c	; 0x216c <__uartGetByte>
	}
    1294:	08 95       	ret

00001296 <_ZN4Uart5writeEh>:
		return m_cstr;
	}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
		return _uartSendByte(m_cstr, data);
    1296:	fc 01       	movw	r30, r24
    1298:	80 89       	ldd	r24, Z+16	; 0x10
    129a:	91 89       	ldd	r25, Z+17	; 0x11
    129c:	0e 94 3d 11 	call	0x227a	; 0x227a <_uartSendByte>
	}
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	08 95       	ret

000012a4 <__initTimers>:
// Private methods

//int __timerPrescalerIndex(const Timer* timer, uint16_t prescaler);

static __inline__ TimerData* timerGetData(const Timer* timer){
	return (TimerData*)pgm_read_word(&timer->pgm_data);
    12a4:	24 ea       	ldi	r18, 0xA4	; 164
    12a6:	32 e0       	ldi	r19, 0x02	; 2
    12a8:	f9 01       	movw	r30, r18
    12aa:	a5 91       	lpm	r26, Z+
    12ac:	b4 91       	lpm	r27, Z+
 
// Set Timer4 to the following:-
//		Mode 	 = TIMER_MODE_PWM_FAST_ICR
//		Prescale = 8
	// Save the timer mode
	timerGetData(&pgm_Timers[4])->mode = TIMER_MODE_PWM_FAST_ICR;
    12ae:	8e e0       	ldi	r24, 0x0E	; 14
    12b0:	1a 96       	adiw	r26, 0x0a	; 10
    12b2:	8c 93       	st	X, r24
    12b4:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR4A,WGM40);
	} 
		
			
	if(14 & 2){
		sbi(TCCR4A,WGM41);
    12b6:	e0 ea       	ldi	r30, 0xA0	; 160
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	82 60       	ori	r24, 0x02	; 2
    12be:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 4){
		sbi(TCCR4B,WGM42);
    12c0:	e1 ea       	ldi	r30, 0xA1	; 161
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	88 60       	ori	r24, 0x08	; 8
    12c8:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 8){
		sbi(TCCR4B,WGM43);
    12ca:	80 81       	ld	r24, Z
    12cc:	80 61       	ori	r24, 0x10	; 16
    12ce:	80 83       	st	Z, r24
	} 
		
	// Top is stored in ICR register
	ICR4 = 40000;			
    12d0:	80 e4       	ldi	r24, 0x40	; 64
    12d2:	9c e9       	ldi	r25, 0x9C	; 156
    12d4:	90 93 a7 00 	sts	0x00A7, r25
    12d8:	80 93 a6 00 	sts	0x00A6, r24
			
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[4])->prescale_value = 8;
    12dc:	48 e0       	ldi	r20, 0x08	; 8
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	4d 93       	st	X+, r20
    12e2:	5c 93       	st	X, r21
	TCCR4B |= 2;
    12e4:	80 81       	ld	r24, Z
    12e6:	82 60       	ori	r24, 0x02	; 2
    12e8:	80 83       	st	Z, r24
    12ea:	24 5d       	subi	r18, 0xD4	; 212
    12ec:	3f 4f       	sbci	r19, 0xFF	; 255
    12ee:	f9 01       	movw	r30, r18
    12f0:	a5 91       	lpm	r26, Z+
    12f2:	b4 91       	lpm	r27, Z+
	 
// Set Timer5 to the following:-
//		Mode 	 = TIMER_MODE_CTC_OCR
//		Prescale = 8
	// Save the timer mode
	timerGetData(&pgm_Timers[5])->mode = TIMER_MODE_CTC_OCR;
    12f4:	84 e0       	ldi	r24, 0x04	; 4
    12f6:	1a 96       	adiw	r26, 0x0a	; 10
    12f8:	8c 93       	st	X, r24
    12fa:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR5A,WGM51);
	} 
		
			
	if(4 & 4){
		sbi(TCCR5B,WGM52);
    12fc:	e1 e2       	ldi	r30, 0x21	; 33
    12fe:	f1 e0       	ldi	r31, 0x01	; 1
    1300:	80 81       	ld	r24, Z
    1302:	88 60       	ori	r24, 0x08	; 8
    1304:	80 83       	st	Z, r24
	if(4 & 8){
		sbi(TCCR5B,WGM53);
	} 
		
	// Top is stored in Compare A OCR
				OCR5A = 64000;			
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	9a ef       	ldi	r25, 0xFA	; 250
    130a:	90 93 29 01 	sts	0x0129, r25
    130e:	80 93 28 01 	sts	0x0128, r24
				
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[5])->prescale_value = 8;
    1312:	4d 93       	st	X+, r20
    1314:	5c 93       	st	X, r21
	TCCR5B |= 2;
    1316:	80 81       	ld	r24, Z
    1318:	82 60       	ori	r24, 0x02	; 2
    131a:	80 83       	st	Z, r24
	}
    131c:	08 95       	ret

0000131e <servoPWMInit>:
    131e:	8f 92       	push	r8
    1320:	9f 92       	push	r9
    1322:	af 92       	push	r10
    1324:	bf 92       	push	r11
    1326:	cf 92       	push	r12
    1328:	df 92       	push	r13
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	6c 01       	movw	r12, r24
    1338:	dc 01       	movw	r26, r24
    133a:	12 96       	adiw	r26, 0x02	; 2
    133c:	8c 91       	ld	r24, X
    133e:	c8 2f       	mov	r28, r24
    1340:	d0 e0       	ldi	r29, 0x00	; 0
    1342:	21 97       	sbiw	r28, 0x01	; 1
    1344:	7e 01       	movw	r14, r28
    1346:	ee 0c       	add	r14, r14
    1348:	ff 1c       	adc	r15, r15
    134a:	9f e7       	ldi	r25, 0x7F	; 127
    134c:	89 2e       	mov	r8, r25
    134e:	93 e0       	ldi	r25, 0x03	; 3
    1350:	99 2e       	mov	r9, r25
    1352:	8c e2       	ldi	r24, 0x2C	; 44
    1354:	a8 2e       	mov	r10, r24
    1356:	47 c0       	rjmp	.+142    	; 0x13e6 <servoPWMInit+0xc8>
    1358:	d6 01       	movw	r26, r12
    135a:	ed 91       	ld	r30, X+
    135c:	fc 91       	ld	r31, X
    135e:	ee 0d       	add	r30, r14
    1360:	ff 1d       	adc	r31, r15
    1362:	05 91       	lpm	r16, Z+
    1364:	14 91       	lpm	r17, Z+
    1366:	f8 01       	movw	r30, r16
    1368:	d5 82       	std	Z+5, r13	; 0x05
    136a:	c4 82       	std	Z+4, r12	; 0x04
    136c:	86 81       	ldd	r24, Z+6	; 0x06
    136e:	97 81       	ldd	r25, Z+7	; 0x07
    1370:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <compareFromIOPin>
    1374:	fc 01       	movw	r30, r24
    1376:	d8 01       	movw	r26, r16
    1378:	55 96       	adiw	r26, 0x15	; 21
    137a:	9c 93       	st	X, r25
    137c:	8e 93       	st	-X, r24
    137e:	54 97       	sbiw	r26, 0x14	; 20
    1380:	32 96       	adiw	r30, 0x02	; 2
    1382:	b4 90       	lpm	r11, Z+
    1384:	11 96       	adiw	r26, 0x01	; 1
    1386:	9c 92       	st	X, r9
    1388:	8e 92       	st	-X, r8
    138a:	16 96       	adiw	r26, 0x06	; 6
    138c:	8d 91       	ld	r24, X+
    138e:	9c 91       	ld	r25, X
    1390:	17 97       	sbiw	r26, 0x07	; 7
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <pin_make_output>
    1398:	ba 9c       	mul	r11, r10
    139a:	c0 01       	movw	r24, r0
    139c:	11 24       	eor	r1, r1
    139e:	8d 5e       	subi	r24, 0xED	; 237
    13a0:	9d 4f       	sbci	r25, 0xFD	; 253
    13a2:	fc 01       	movw	r30, r24
    13a4:	a5 91       	lpm	r26, Z+
    13a6:	b4 91       	lpm	r27, Z+
    13a8:	8d 91       	ld	r24, X+
    13aa:	9c 91       	ld	r25, X
    13ac:	d8 01       	movw	r26, r16
    13ae:	53 96       	adiw	r26, 0x13	; 19
    13b0:	9c 93       	st	X, r25
    13b2:	8e 93       	st	-X, r24
    13b4:	52 97       	sbiw	r26, 0x12	; 18
    13b6:	18 96       	adiw	r26, 0x08	; 8
    13b8:	6d 91       	ld	r22, X+
    13ba:	7c 91       	ld	r23, X
    13bc:	19 97       	sbiw	r26, 0x09	; 9
    13be:	1a 96       	adiw	r26, 0x0a	; 10
    13c0:	4d 91       	ld	r20, X+
    13c2:	5c 91       	ld	r21, X
    13c4:	1b 97       	sbiw	r26, 0x0b	; 11
    13c6:	c8 01       	movw	r24, r16
    13c8:	0e 94 2b 0a 	call	0x1456	; 0x1456 <servoSetConfig>
    13cc:	c8 01       	movw	r24, r16
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	0e 94 c7 0a 	call	0x158e	; 0x158e <__act_setSpeed>
    13d4:	c8 01       	movw	r24, r16
    13d6:	6f ef       	ldi	r22, 0xFF	; 255
    13d8:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__act_setConnected>
    13dc:	21 97       	sbiw	r28, 0x01	; 1
    13de:	ee ef       	ldi	r30, 0xFE	; 254
    13e0:	ff ef       	ldi	r31, 0xFF	; 255
    13e2:	ee 0e       	add	r14, r30
    13e4:	ff 1e       	adc	r15, r31
    13e6:	ff ef       	ldi	r31, 0xFF	; 255
    13e8:	cf 3f       	cpi	r28, 0xFF	; 255
    13ea:	df 07       	cpc	r29, r31
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <servoPWMInit+0xd2>
    13ee:	b4 cf       	rjmp	.-152    	; 0x1358 <servoPWMInit+0x3a>
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	ff 90       	pop	r15
    13fa:	ef 90       	pop	r14
    13fc:	df 90       	pop	r13
    13fe:	cf 90       	pop	r12
    1400:	bf 90       	pop	r11
    1402:	af 90       	pop	r10
    1404:	9f 90       	pop	r9
    1406:	8f 90       	pop	r8
    1408:	08 95       	ret

0000140a <setConnected>:
    140a:	fc 01       	movw	r30, r24
    140c:	84 89       	ldd	r24, Z+20	; 0x14
    140e:	95 89       	ldd	r25, Z+21	; 0x15
    1410:	61 11       	cpse	r22, r1
    1412:	62 e0       	ldi	r22, 0x02	; 2
    1414:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <compareSetOutputMode>
    1418:	08 95       	ret

0000141a <setSpeed>:
    141a:	ef 92       	push	r14
    141c:	ff 92       	push	r15
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	fc 01       	movw	r30, r24
    1424:	e4 88       	ldd	r14, Z+20	; 0x14
    1426:	f5 88       	ldd	r15, Z+21	; 0x15
    1428:	24 85       	ldd	r18, Z+12	; 0x0c
    142a:	35 85       	ldd	r19, Z+13	; 0x0d
    142c:	06 85       	ldd	r16, Z+14	; 0x0e
    142e:	17 85       	ldd	r17, Z+15	; 0x0f
    1430:	86 2f       	mov	r24, r22
    1432:	99 27       	eor	r25, r25
    1434:	87 fd       	sbrc	r24, 7
    1436:	90 95       	com	r25
    1438:	61 e8       	ldi	r22, 0x81	; 129
    143a:	7f ef       	ldi	r23, 0xFF	; 255
    143c:	4f e7       	ldi	r20, 0x7F	; 127
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	0e 94 02 0b 	call	0x1604	; 0x1604 <interpolateU>
    1444:	bc 01       	movw	r22, r24
    1446:	c7 01       	movw	r24, r14
    1448:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <compareSetThreshold>
    144c:	1f 91       	pop	r17
    144e:	0f 91       	pop	r16
    1450:	ff 90       	pop	r15
    1452:	ef 90       	pop	r14
    1454:	08 95       	ret

00001456 <servoSetConfig>:
    1456:	9f 92       	push	r9
    1458:	af 92       	push	r10
    145a:	bf 92       	push	r11
    145c:	cf 92       	push	r12
    145e:	df 92       	push	r13
    1460:	ef 92       	push	r14
    1462:	ff 92       	push	r15
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	ec 01       	movw	r28, r24
    146e:	7b 01       	movw	r14, r22
    1470:	8a 01       	movw	r16, r20
    1472:	79 87       	std	Y+9, r23	; 0x09
    1474:	68 87       	std	Y+8, r22	; 0x08
    1476:	5b 87       	std	Y+11, r21	; 0x0b
    1478:	4a 87       	std	Y+10, r20	; 0x0a
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	9d 81       	ldd	r25, Y+5	; 0x05
    147e:	89 2b       	or	r24, r25
    1480:	09 f4       	brne	.+2      	; 0x1484 <servoSetConfig+0x2e>
    1482:	5e c0       	rjmp	.+188    	; 0x1540 <servoSetConfig+0xea>
    1484:	9f b6       	in	r9, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	8a 89       	ldd	r24, Y+18	; 0x12
    148a:	9b 89       	ldd	r25, Y+19	; 0x13
    148c:	68 ee       	ldi	r22, 0xE8	; 232
    148e:	73 e0       	ldi	r23, 0x03	; 3
    1490:	0e 94 31 1a 	call	0x3462	; 0x3462 <__udivmodhi4>
    1494:	5b 01       	movw	r10, r22
    1496:	cc 24       	eor	r12, r12
    1498:	dd 24       	eor	r13, r13
    149a:	b7 01       	movw	r22, r14
    149c:	60 1b       	sub	r22, r16
    149e:	71 0b       	sbc	r23, r17
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	a6 01       	movw	r20, r12
    14a6:	95 01       	movw	r18, r10
    14a8:	0e 94 12 1a 	call	0x3424	; 0x3424 <__mulsi3>
    14ac:	24 e1       	ldi	r18, 0x14	; 20
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e0       	ldi	r20, 0x00	; 0
    14b2:	50 e0       	ldi	r21, 0x00	; 0
    14b4:	0e 94 45 1a 	call	0x348a	; 0x348a <__udivmodsi4>
    14b8:	c9 01       	movw	r24, r18
    14ba:	da 01       	movw	r26, r20
    14bc:	9c 01       	movw	r18, r24
    14be:	ad 01       	movw	r20, r26
    14c0:	da 01       	movw	r26, r20
    14c2:	c9 01       	movw	r24, r18
    14c4:	80 70       	andi	r24, 0x00	; 0
    14c6:	90 70       	andi	r25, 0x00	; 0
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	a1 05       	cpc	r26, r1
    14cc:	b1 05       	cpc	r27, r1
    14ce:	39 f0       	breq	.+14     	; 0x14de <servoSetConfig+0x88>
    14d0:	86 ee       	ldi	r24, 0xE6	; 230
    14d2:	0e 94 4b 0b 	call	0x1696	; 0x1696 <setError>
    14d6:	2f ef       	ldi	r18, 0xFF	; 255
    14d8:	3f ef       	ldi	r19, 0xFF	; 255
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	3d 87       	std	Y+13, r19	; 0x0d
    14e0:	2c 87       	std	Y+12, r18	; 0x0c
    14e2:	0e 0d       	add	r16, r14
    14e4:	1f 1d       	adc	r17, r15
    14e6:	b8 01       	movw	r22, r16
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	a6 01       	movw	r20, r12
    14ee:	95 01       	movw	r18, r10
    14f0:	0e 94 12 1a 	call	0x3424	; 0x3424 <__mulsi3>
    14f4:	24 e1       	ldi	r18, 0x14	; 20
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	40 e0       	ldi	r20, 0x00	; 0
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	0e 94 45 1a 	call	0x348a	; 0x348a <__udivmodsi4>
    1500:	c9 01       	movw	r24, r18
    1502:	da 01       	movw	r26, r20
    1504:	9c 01       	movw	r18, r24
    1506:	ad 01       	movw	r20, r26
    1508:	da 01       	movw	r26, r20
    150a:	c9 01       	movw	r24, r18
    150c:	80 70       	andi	r24, 0x00	; 0
    150e:	90 70       	andi	r25, 0x00	; 0
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	a1 05       	cpc	r26, r1
    1514:	b1 05       	cpc	r27, r1
    1516:	39 f0       	breq	.+14     	; 0x1526 <servoSetConfig+0xd0>
    1518:	86 ee       	ldi	r24, 0xE6	; 230
    151a:	0e 94 4b 0b 	call	0x1696	; 0x1696 <setError>
    151e:	2f ef       	ldi	r18, 0xFF	; 255
    1520:	3f ef       	ldi	r19, 0xFF	; 255
    1522:	40 e0       	ldi	r20, 0x00	; 0
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	3f 87       	std	Y+15, r19	; 0x0f
    1528:	2e 87       	std	Y+14, r18	; 0x0e
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	80 ff       	sbrs	r24, 0
    152e:	07 c0       	rjmp	.+14     	; 0x153e <servoSetConfig+0xe8>
    1530:	6a 81       	ldd	r22, Y+2	; 0x02
    1532:	61 50       	subi	r22, 0x01	; 1
    1534:	6a 83       	std	Y+2, r22	; 0x02
    1536:	6f 5f       	subi	r22, 0xFF	; 255
    1538:	ce 01       	movw	r24, r28
    153a:	0e 94 c7 0a 	call	0x158e	; 0x158e <__act_setSpeed>
    153e:	9f be       	out	0x3f, r9	; 63
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	bf 90       	pop	r11
    1552:	af 90       	pop	r10
    1554:	9f 90       	pop	r9
    1556:	08 95       	ret

00001558 <_ZN6Stream5printEc>:
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	ec 01       	movw	r28, r24
    1560:	16 2f       	mov	r17, r22
    1562:	6a 30       	cpi	r22, 0x0A	; 10
    1564:	39 f4       	brne	.+14     	; 0x1574 <_ZN6Stream5printEc+0x1c>
    1566:	e8 81       	ld	r30, Y
    1568:	f9 81       	ldd	r31, Y+1	; 0x01
    156a:	01 90       	ld	r0, Z+
    156c:	f0 81       	ld	r31, Z
    156e:	e0 2d       	mov	r30, r0
    1570:	6d e0       	ldi	r22, 0x0D	; 13
    1572:	09 95       	icall
    1574:	e8 81       	ld	r30, Y
    1576:	f9 81       	ldd	r31, Y+1	; 0x01
    1578:	01 90       	ld	r0, Z+
    157a:	f0 81       	ld	r31, Z
    157c:	e0 2d       	mov	r30, r0
    157e:	ce 01       	movw	r24, r28
    1580:	61 2f       	mov	r22, r17
    1582:	09 95       	icall
    1584:	ce 01       	movw	r24, r28
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	08 95       	ret

0000158e <__act_setSpeed>:
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	ec 01       	movw	r28, r24
    1596:	16 2f       	mov	r17, r22
    1598:	61 38       	cpi	r22, 0x81	; 129
    159a:	0c f4       	brge	.+2      	; 0x159e <__act_setSpeed+0x10>
    159c:	11 e8       	ldi	r17, 0x81	; 129
    159e:	e8 81       	ld	r30, Y
    15a0:	f9 81       	ldd	r31, Y+1	; 0x01
    15a2:	30 97       	sbiw	r30, 0x00	; 0
    15a4:	79 f0       	breq	.+30     	; 0x15c4 <__act_setSpeed+0x36>
    15a6:	25 91       	lpm	r18, Z+
    15a8:	34 91       	lpm	r19, Z+
    15aa:	21 15       	cp	r18, r1
    15ac:	31 05       	cpc	r19, r1
    15ae:	51 f0       	breq	.+20     	; 0x15c4 <__act_setSpeed+0x36>
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	81 fd       	sbrc	r24, 1
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <__act_setSpeed+0x2c>
    15b6:	61 2f       	mov	r22, r17
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <__act_setSpeed+0x30>
    15ba:	61 2f       	mov	r22, r17
    15bc:	61 95       	neg	r22
    15be:	ce 01       	movw	r24, r28
    15c0:	f9 01       	movw	r30, r18
    15c2:	09 95       	icall
    15c4:	1a 83       	std	Y+2, r17	; 0x02
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	1f 91       	pop	r17
    15cc:	08 95       	ret

000015ce <__act_setConnected>:
    15ce:	dc 01       	movw	r26, r24
    15d0:	96 2f       	mov	r25, r22
    15d2:	91 70       	andi	r25, 0x01	; 1
    15d4:	13 96       	adiw	r26, 0x03	; 3
    15d6:	8c 91       	ld	r24, X
    15d8:	13 97       	sbiw	r26, 0x03	; 3
    15da:	8e 7f       	andi	r24, 0xFE	; 254
    15dc:	89 2b       	or	r24, r25
    15de:	13 96       	adiw	r26, 0x03	; 3
    15e0:	8c 93       	st	X, r24
    15e2:	13 97       	sbiw	r26, 0x03	; 3
    15e4:	8d 91       	ld	r24, X+
    15e6:	9c 91       	ld	r25, X
    15e8:	11 97       	sbiw	r26, 0x01	; 1
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	51 f0       	breq	.+20     	; 0x1602 <__act_setConnected+0x34>
    15ee:	fc 01       	movw	r30, r24
    15f0:	32 96       	adiw	r30, 0x02	; 2
    15f2:	25 91       	lpm	r18, Z+
    15f4:	34 91       	lpm	r19, Z+
    15f6:	21 15       	cp	r18, r1
    15f8:	31 05       	cpc	r19, r1
    15fa:	19 f0       	breq	.+6      	; 0x1602 <__act_setConnected+0x34>
    15fc:	cd 01       	movw	r24, r26
    15fe:	f9 01       	movw	r30, r18
    1600:	09 95       	icall
    1602:	08 95       	ret

00001604 <interpolateU>:
    1604:	4f 92       	push	r4
    1606:	5f 92       	push	r5
    1608:	6f 92       	push	r6
    160a:	7f 92       	push	r7
    160c:	8f 92       	push	r8
    160e:	9f 92       	push	r9
    1610:	af 92       	push	r10
    1612:	bf 92       	push	r11
    1614:	cf 92       	push	r12
    1616:	df 92       	push	r13
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	2b 01       	movw	r4, r22
    1622:	5a 01       	movw	r10, r20
    1624:	39 01       	movw	r6, r18
    1626:	78 01       	movw	r14, r16
    1628:	e2 1a       	sub	r14, r18
    162a:	f3 0a       	sbc	r15, r19
    162c:	00 e0       	ldi	r16, 0x00	; 0
    162e:	10 e0       	ldi	r17, 0x00	; 0
    1630:	9c 01       	movw	r18, r24
    1632:	26 1b       	sub	r18, r22
    1634:	37 0b       	sbc	r19, r23
    1636:	44 27       	eor	r20, r20
    1638:	37 fd       	sbrc	r19, 7
    163a:	40 95       	com	r20
    163c:	54 2f       	mov	r21, r20
    163e:	c8 01       	movw	r24, r16
    1640:	b7 01       	movw	r22, r14
    1642:	0e 94 12 1a 	call	0x3424	; 0x3424 <__mulsi3>
    1646:	a4 18       	sub	r10, r4
    1648:	b5 08       	sbc	r11, r5
    164a:	cc 24       	eor	r12, r12
    164c:	b7 fc       	sbrc	r11, 7
    164e:	c0 94       	com	r12
    1650:	dc 2c       	mov	r13, r12
    1652:	a6 01       	movw	r20, r12
    1654:	95 01       	movw	r18, r10
    1656:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__divmodsi4>
    165a:	88 24       	eor	r8, r8
    165c:	99 24       	eor	r9, r9
    165e:	26 0d       	add	r18, r6
    1660:	37 1d       	adc	r19, r7
    1662:	48 1d       	adc	r20, r8
    1664:	59 1d       	adc	r21, r9
    1666:	c9 01       	movw	r24, r18
    1668:	1f 91       	pop	r17
    166a:	0f 91       	pop	r16
    166c:	ff 90       	pop	r15
    166e:	ef 90       	pop	r14
    1670:	df 90       	pop	r13
    1672:	cf 90       	pop	r12
    1674:	bf 90       	pop	r11
    1676:	af 90       	pop	r10
    1678:	9f 90       	pop	r9
    167a:	8f 90       	pop	r8
    167c:	7f 90       	pop	r7
    167e:	6f 90       	pop	r6
    1680:	5f 90       	pop	r5
    1682:	4f 90       	pop	r4
    1684:	08 95       	ret

00001686 <getError>:
    1686:	80 91 2b 04 	lds	r24, 0x042B
    168a:	08 95       	ret

0000168c <setErrorLog>:
    168c:	90 93 2f 04 	sts	0x042F, r25
    1690:	80 93 2e 04 	sts	0x042E, r24
    1694:	08 95       	ret

00001696 <setError>:
    1696:	1f 93       	push	r17
    1698:	18 2f       	mov	r17, r24
    169a:	80 91 2b 04 	lds	r24, 0x042B
    169e:	88 23       	and	r24, r24
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <setError+0xe>
    16a2:	5a c0       	rjmp	.+180    	; 0x1758 <setError+0xc2>
    16a4:	10 93 2b 04 	sts	0x042B, r17
    16a8:	80 91 30 04 	lds	r24, 0x0430
    16ac:	90 91 31 04 	lds	r25, 0x0431
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	49 f0       	breq	.+18     	; 0x16c6 <setError+0x30>
    16b4:	0e 94 ae 0b 	call	0x175c	; 0x175c <pin_is_output>
    16b8:	88 23       	and	r24, r24
    16ba:	29 f0       	breq	.+10     	; 0x16c6 <setError+0x30>
    16bc:	80 e3       	ldi	r24, 0x30	; 48
    16be:	94 e0       	ldi	r25, 0x04	; 4
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	0e 94 11 0c 	call	0x1822	; 0x1822 <LED_set>
    16c6:	80 91 3b 04 	lds	r24, 0x043B
    16ca:	90 91 3c 04 	lds	r25, 0x043C
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <setError+0x3e>
    16d2:	42 c0       	rjmp	.+132    	; 0x1758 <setError+0xc2>
    16d4:	17 ff       	sbrs	r17, 7
    16d6:	12 c0       	rjmp	.+36     	; 0x16fc <setError+0x66>
    16d8:	00 d0       	rcall	.+0      	; 0x16da <setError+0x44>
    16da:	00 d0       	rcall	.+0      	; 0x16dc <setError+0x46>
    16dc:	ad b7       	in	r26, 0x3d	; 61
    16de:	be b7       	in	r27, 0x3e	; 62
    16e0:	12 96       	adiw	r26, 0x02	; 2
    16e2:	9c 93       	st	X, r25
    16e4:	8e 93       	st	-X, r24
    16e6:	11 97       	sbiw	r26, 0x01	; 1
    16e8:	84 e9       	ldi	r24, 0x94	; 148
    16ea:	93 e0       	ldi	r25, 0x03	; 3
    16ec:	14 96       	adiw	r26, 0x04	; 4
    16ee:	9c 93       	st	X, r25
    16f0:	8e 93       	st	-X, r24
    16f2:	13 97       	sbiw	r26, 0x03	; 3
    16f4:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <fprintf_P>
    16f8:	11 95       	neg	r17
    16fa:	0c c0       	rjmp	.+24     	; 0x1714 <setError+0x7e>
    16fc:	00 d0       	rcall	.+0      	; 0x16fe <setError+0x68>
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <setError+0x6a>
    1700:	ed b7       	in	r30, 0x3d	; 61
    1702:	fe b7       	in	r31, 0x3e	; 62
    1704:	92 83       	std	Z+2, r25	; 0x02
    1706:	81 83       	std	Z+1, r24	; 0x01
    1708:	8f e8       	ldi	r24, 0x8F	; 143
    170a:	93 e0       	ldi	r25, 0x03	; 3
    170c:	94 83       	std	Z+4, r25	; 0x04
    170e:	83 83       	std	Z+3, r24	; 0x03
    1710:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <fprintf_P>
    1714:	00 d0       	rcall	.+0      	; 0x1716 <setError+0x80>
    1716:	ed b7       	in	r30, 0x3d	; 61
    1718:	fe b7       	in	r31, 0x3e	; 62
    171a:	31 96       	adiw	r30, 0x01	; 1
    171c:	80 91 3b 04 	lds	r24, 0x043B
    1720:	90 91 3c 04 	lds	r25, 0x043C
    1724:	ad b7       	in	r26, 0x3d	; 61
    1726:	be b7       	in	r27, 0x3e	; 62
    1728:	12 96       	adiw	r26, 0x02	; 2
    172a:	9c 93       	st	X, r25
    172c:	8e 93       	st	-X, r24
    172e:	11 97       	sbiw	r26, 0x01	; 1
    1730:	83 e8       	ldi	r24, 0x83	; 131
    1732:	93 e0       	ldi	r25, 0x03	; 3
    1734:	93 83       	std	Z+3, r25	; 0x03
    1736:	82 83       	std	Z+2, r24	; 0x02
    1738:	81 2f       	mov	r24, r17
    173a:	99 27       	eor	r25, r25
    173c:	87 fd       	sbrc	r24, 7
    173e:	90 95       	com	r25
    1740:	95 83       	std	Z+5, r25	; 0x05
    1742:	84 83       	std	Z+4, r24	; 0x04
    1744:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <fprintf_P>
    1748:	ed b7       	in	r30, 0x3d	; 61
    174a:	fe b7       	in	r31, 0x3e	; 62
    174c:	36 96       	adiw	r30, 0x06	; 6
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	fe bf       	out	0x3e, r31	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	ed bf       	out	0x3d, r30	; 61
    1758:	1f 91       	pop	r17
    175a:	08 95       	ret

0000175c <pin_is_output>:
    175c:	9c 01       	movw	r18, r24
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	81 f0       	breq	.+32     	; 0x1782 <pin_is_output+0x26>
    1762:	fc 01       	movw	r30, r24
    1764:	85 91       	lpm	r24, Z+
    1766:	94 91       	lpm	r25, Z+
    1768:	02 96       	adiw	r24, 0x02	; 2
    176a:	fc 01       	movw	r30, r24
    176c:	a5 91       	lpm	r26, Z+
    176e:	b4 91       	lpm	r27, Z+
    1770:	2e 5f       	subi	r18, 0xFE	; 254
    1772:	3f 4f       	sbci	r19, 0xFF	; 255
    1774:	f9 01       	movw	r30, r18
    1776:	94 91       	lpm	r25, Z+
    1778:	8c 91       	ld	r24, X
    177a:	89 23       	and	r24, r25
    177c:	11 f0       	breq	.+4      	; 0x1782 <pin_is_output+0x26>
    177e:	8f ef       	ldi	r24, 0xFF	; 255
    1780:	08 95       	ret
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	08 95       	ret

00001786 <pin_make_input>:
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	9c 01       	movw	r18, r24
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	f9 f0       	breq	.+62     	; 0x17ce <pin_make_input+0x48>
    1790:	fc 01       	movw	r30, r24
    1792:	45 91       	lpm	r20, Z+
    1794:	54 91       	lpm	r21, Z+
    1796:	ca 01       	movw	r24, r20
    1798:	02 96       	adiw	r24, 0x02	; 2
    179a:	fc 01       	movw	r30, r24
    179c:	a5 91       	lpm	r26, Z+
    179e:	b4 91       	lpm	r27, Z+
    17a0:	fa 01       	movw	r30, r20
    17a2:	c5 91       	lpm	r28, Z+
    17a4:	d4 91       	lpm	r29, Z+
    17a6:	2e 5f       	subi	r18, 0xFE	; 254
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	f9 01       	movw	r30, r18
    17ac:	94 91       	lpm	r25, Z+
    17ae:	3f b7       	in	r19, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	8c 91       	ld	r24, X
    17b4:	29 2f       	mov	r18, r25
    17b6:	20 95       	com	r18
    17b8:	82 23       	and	r24, r18
    17ba:	8c 93       	st	X, r24
    17bc:	66 23       	and	r22, r22
    17be:	19 f0       	breq	.+6      	; 0x17c6 <pin_make_input+0x40>
    17c0:	88 81       	ld	r24, Y
    17c2:	89 2b       	or	r24, r25
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <pin_make_input+0x44>
    17c6:	88 81       	ld	r24, Y
    17c8:	82 23       	and	r24, r18
    17ca:	88 83       	st	Y, r24
    17cc:	3f bf       	out	0x3f, r19	; 63
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	08 95       	ret

000017d4 <pin_make_output>:
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	9c 01       	movw	r18, r24
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	f9 f0       	breq	.+62     	; 0x181c <pin_make_output+0x48>
    17de:	fc 01       	movw	r30, r24
    17e0:	45 91       	lpm	r20, Z+
    17e2:	54 91       	lpm	r21, Z+
    17e4:	ca 01       	movw	r24, r20
    17e6:	02 96       	adiw	r24, 0x02	; 2
    17e8:	fc 01       	movw	r30, r24
    17ea:	c5 91       	lpm	r28, Z+
    17ec:	d4 91       	lpm	r29, Z+
    17ee:	fa 01       	movw	r30, r20
    17f0:	a5 91       	lpm	r26, Z+
    17f2:	b4 91       	lpm	r27, Z+
    17f4:	2e 5f       	subi	r18, 0xFE	; 254
    17f6:	3f 4f       	sbci	r19, 0xFF	; 255
    17f8:	f9 01       	movw	r30, r18
    17fa:	24 91       	lpm	r18, Z+
    17fc:	3f b7       	in	r19, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	66 23       	and	r22, r22
    1802:	19 f0       	breq	.+6      	; 0x180a <pin_make_output+0x36>
    1804:	8c 91       	ld	r24, X
    1806:	82 2b       	or	r24, r18
    1808:	04 c0       	rjmp	.+8      	; 0x1812 <pin_make_output+0x3e>
    180a:	8c 91       	ld	r24, X
    180c:	92 2f       	mov	r25, r18
    180e:	90 95       	com	r25
    1810:	89 23       	and	r24, r25
    1812:	8c 93       	st	X, r24
    1814:	88 81       	ld	r24, Y
    1816:	82 2b       	or	r24, r18
    1818:	88 83       	st	Y, r24
    181a:	3f bf       	out	0x3f, r19	; 63
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	08 95       	ret

00001822 <LED_set>:
    1822:	1f 93       	push	r17
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	ec 01       	movw	r28, r24
    182a:	16 2f       	mov	r17, r22
    182c:	88 81       	ld	r24, Y
    182e:	99 81       	ldd	r25, Y+1	; 0x01
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	a9 f0       	breq	.+42     	; 0x185e <LED_set+0x3c>
    1834:	3a 81       	ldd	r19, Y+2	; 0x02
    1836:	30 fd       	sbrc	r19, 0
    1838:	05 c0       	rjmp	.+10     	; 0x1844 <LED_set+0x22>
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	66 23       	and	r22, r22
    183e:	09 f4       	brne	.+2      	; 0x1842 <LED_set+0x20>
    1840:	21 e0       	ldi	r18, 0x01	; 1
    1842:	12 2f       	mov	r17, r18
    1844:	31 fd       	sbrc	r19, 1
    1846:	06 c0       	rjmp	.+12     	; 0x1854 <LED_set+0x32>
    1848:	61 2f       	mov	r22, r17
    184a:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <pin_make_output>
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	82 60       	ori	r24, 0x02	; 2
    1852:	8a 83       	std	Y+2, r24	; 0x02
    1854:	88 81       	ld	r24, Y
    1856:	99 81       	ldd	r25, Y+1	; 0x01
    1858:	61 2f       	mov	r22, r17
    185a:	0e 94 31 12 	call	0x2462	; 0x2462 <pin_set>
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	08 95       	ret

00001866 <main>:
    1866:	0e 94 ef 06 	call	0xdde	; 0xdde <registerLED>
    186a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__initTimers>
    186e:	0e 94 e5 07 	call	0xfca	; 0xfca <__clockInit>
    1872:	78 94       	sei
    1874:	0e 94 05 07 	call	0xe0a	; 0xe0a <sysInitHardware>
    1878:	0e 94 2b 03 	call	0x656	; 0x656 <appInitHardware>
    187c:	0e 94 c8 07 	call	0xf90	; 0xf90 <clockGetus>
    1880:	60 93 12 04 	sts	0x0412, r22
    1884:	70 93 13 04 	sts	0x0413, r23
    1888:	80 93 14 04 	sts	0x0414, r24
    188c:	90 93 15 04 	sts	0x0415, r25
    1890:	0e 94 01 03 	call	0x602	; 0x602 <appInitSoftware>
    1894:	60 93 16 04 	sts	0x0416, r22
    1898:	70 93 17 04 	sts	0x0417, r23
    189c:	80 93 18 04 	sts	0x0418, r24
    18a0:	90 93 19 04 	sts	0x0419, r25
    18a4:	78 94       	sei
    18a6:	0e 94 dd 11 	call	0x23ba	; 0x23ba <breathe>
    18aa:	80 91 16 04 	lds	r24, 0x0416
    18ae:	90 91 17 04 	lds	r25, 0x0417
    18b2:	a0 91 18 04 	lds	r26, 0x0418
    18b6:	b0 91 19 04 	lds	r27, 0x0419
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	a1 05       	cpc	r26, r1
    18be:	b1 05       	cpc	r27, r1
    18c0:	19 f4       	brne	.+6      	; 0x18c8 <main+0x62>
    18c2:	16 c0       	rjmp	.+44     	; 0x18f0 <main+0x8a>
    18c4:	0e 94 dd 11 	call	0x23ba	; 0x23ba <breathe>
    18c8:	60 91 12 04 	lds	r22, 0x0412
    18cc:	70 91 13 04 	lds	r23, 0x0413
    18d0:	80 91 14 04 	lds	r24, 0x0414
    18d4:	90 91 15 04 	lds	r25, 0x0415
    18d8:	20 91 16 04 	lds	r18, 0x0416
    18dc:	30 91 17 04 	lds	r19, 0x0417
    18e0:	40 91 18 04 	lds	r20, 0x0418
    18e4:	50 91 19 04 	lds	r21, 0x0419
    18e8:	0e 94 92 11 	call	0x2324	; 0x2324 <clockHasElapsed>
    18ec:	88 23       	and	r24, r24
    18ee:	51 f3       	breq	.-44     	; 0x18c4 <main+0x5e>
    18f0:	0e 94 c8 07 	call	0xf90	; 0xf90 <clockGetus>
    18f4:	9b 01       	movw	r18, r22
    18f6:	ac 01       	movw	r20, r24
    18f8:	60 93 12 04 	sts	0x0412, r22
    18fc:	70 93 13 04 	sts	0x0413, r23
    1900:	80 93 14 04 	sts	0x0414, r24
    1904:	90 93 15 04 	sts	0x0415, r25
    1908:	60 91 0e 04 	lds	r22, 0x040E
    190c:	70 91 0f 04 	lds	r23, 0x040F
    1910:	80 91 10 04 	lds	r24, 0x0410
    1914:	90 91 11 04 	lds	r25, 0x0411
    1918:	6f 5f       	subi	r22, 0xFF	; 255
    191a:	7f 4f       	sbci	r23, 0xFF	; 255
    191c:	8f 4f       	sbci	r24, 0xFF	; 255
    191e:	9f 4f       	sbci	r25, 0xFF	; 255
    1920:	60 93 0e 04 	sts	0x040E, r22
    1924:	70 93 0f 04 	sts	0x040F, r23
    1928:	80 93 10 04 	sts	0x0410, r24
    192c:	90 93 11 04 	sts	0x0411, r25
    1930:	0e 94 c2 02 	call	0x584	; 0x584 <appControl>
    1934:	af cf       	rjmp	.-162    	; 0x1894 <main+0x2e>

00001936 <marqueeSendByte>:
    1936:	cf 92       	push	r12
    1938:	df 92       	push	r13
    193a:	ef 92       	push	r14
    193c:	ff 92       	push	r15
    193e:	0f 93       	push	r16
    1940:	1f 93       	push	r17
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	ec 01       	movw	r28, r24
    1948:	d6 2e       	mov	r13, r22
    194a:	8c 81       	ldd	r24, Y+4	; 0x04
    194c:	9d 81       	ldd	r25, Y+5	; 0x05
    194e:	89 2b       	or	r24, r25
    1950:	a9 f5       	brne	.+106    	; 0x19bc <marqueeSendByte+0x86>
    1952:	8a 85       	ldd	r24, Y+10	; 0x0a
    1954:	9b 85       	ldd	r25, Y+11	; 0x0b
    1956:	01 96       	adiw	r24, 0x01	; 1
    1958:	0e 94 6e 17 	call	0x2edc	; 0x2edc <malloc>
    195c:	9d 83       	std	Y+5, r25	; 0x05
    195e:	8c 83       	std	Y+4, r24	; 0x04
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	61 f1       	breq	.+88     	; 0x19bc <marqueeSendByte+0x86>
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	07 c0       	rjmp	.+14     	; 0x1978 <marqueeSendByte+0x42>
    196a:	ec 81       	ldd	r30, Y+4	; 0x04
    196c:	fd 81       	ldd	r31, Y+5	; 0x05
    196e:	e2 0f       	add	r30, r18
    1970:	f3 1f       	adc	r31, r19
    1972:	10 82       	st	Z, r1
    1974:	2f 5f       	subi	r18, 0xFF	; 255
    1976:	3f 4f       	sbci	r19, 0xFF	; 255
    1978:	8a 85       	ldd	r24, Y+10	; 0x0a
    197a:	9b 85       	ldd	r25, Y+11	; 0x0b
    197c:	82 17       	cp	r24, r18
    197e:	93 07       	cpc	r25, r19
    1980:	a0 f7       	brcc	.-24     	; 0x196a <marqueeSendByte+0x34>
    1982:	19 86       	std	Y+9, r1	; 0x09
    1984:	18 86       	std	Y+8, r1	; 0x08
    1986:	1f 82       	std	Y+7, r1	; 0x07
    1988:	1e 82       	std	Y+6, r1	; 0x06
    198a:	8c 89       	ldd	r24, Y+20	; 0x14
    198c:	8e 7f       	andi	r24, 0xFE	; 254
    198e:	8c 8b       	std	Y+20, r24	; 0x14
    1990:	00 e0       	ldi	r16, 0x00	; 0
    1992:	10 e0       	ldi	r17, 0x00	; 0
    1994:	0e c0       	rjmp	.+28     	; 0x19b2 <marqueeSendByte+0x7c>
    1996:	c8 01       	movw	r24, r16
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	e8 81       	ld	r30, Y
    199e:	f9 81       	ldd	r31, Y+1	; 0x01
    19a0:	e8 0f       	add	r30, r24
    19a2:	f9 1f       	adc	r31, r25
    19a4:	85 91       	lpm	r24, Z+
    19a6:	94 91       	lpm	r25, Z+
    19a8:	60 e2       	ldi	r22, 0x20	; 32
    19aa:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <segled_put_char>
    19ae:	0f 5f       	subi	r16, 0xFF	; 255
    19b0:	1f 4f       	sbci	r17, 0xFF	; 255
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	9b 81       	ldd	r25, Y+3	; 0x03
    19b6:	08 17       	cp	r16, r24
    19b8:	19 07       	cpc	r17, r25
    19ba:	68 f3       	brcs	.-38     	; 0x1996 <marqueeSendByte+0x60>
    19bc:	ec 81       	ldd	r30, Y+4	; 0x04
    19be:	fd 81       	ldd	r31, Y+5	; 0x05
    19c0:	30 97       	sbiw	r30, 0x00	; 0
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <marqueeSendByte+0x90>
    19c4:	3e c0       	rjmp	.+124    	; 0x1a42 <marqueeSendByte+0x10c>
    19c6:	8a e0       	ldi	r24, 0x0A	; 10
    19c8:	d8 16       	cp	r13, r24
    19ca:	19 f5       	brne	.+70     	; 0x1a12 <marqueeSendByte+0xdc>
    19cc:	88 85       	ldd	r24, Y+8	; 0x08
    19ce:	99 85       	ldd	r25, Y+9	; 0x09
    19d0:	e8 0f       	add	r30, r24
    19d2:	f9 1f       	adc	r31, r25
    19d4:	10 82       	st	Z, r1
    19d6:	19 86       	std	Y+9, r1	; 0x09
    19d8:	18 86       	std	Y+8, r1	; 0x08
    19da:	cf b6       	in	r12, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	8c 89       	ldd	r24, Y+20	; 0x14
    19e0:	80 fd       	sbrc	r24, 0
    19e2:	15 c0       	rjmp	.+42     	; 0x1a0e <marqueeSendByte+0xd8>
    19e4:	8c 89       	ldd	r24, Y+20	; 0x14
    19e6:	81 60       	ori	r24, 0x01	; 1
    19e8:	8c 8b       	std	Y+20, r24	; 0x14
    19ea:	8c 89       	ldd	r24, Y+20	; 0x14
    19ec:	8d 7f       	andi	r24, 0xFD	; 253
    19ee:	8c 8b       	std	Y+20, r24	; 0x14
    19f0:	1f 82       	std	Y+7, r1	; 0x07
    19f2:	1e 82       	std	Y+6, r1	; 0x06
    19f4:	0e 94 c8 07 	call	0xf90	; 0xf90 <clockGetus>
    19f8:	9b 01       	movw	r18, r22
    19fa:	ac 01       	movw	r20, r24
    19fc:	ec 84       	ldd	r14, Y+12	; 0x0c
    19fe:	fd 84       	ldd	r15, Y+13	; 0x0d
    1a00:	0e 85       	ldd	r16, Y+14	; 0x0e
    1a02:	1f 85       	ldd	r17, Y+15	; 0x0f
    1a04:	8b e2       	ldi	r24, 0x2B	; 43
    1a06:	9d e0       	ldi	r25, 0x0D	; 13
    1a08:	be 01       	movw	r22, r28
    1a0a:	0e 94 4e 13 	call	0x269c	; 0x269c <scheduleJob>
    1a0e:	cf be       	out	0x3f, r12	; 63
    1a10:	18 c0       	rjmp	.+48     	; 0x1a42 <marqueeSendByte+0x10c>
    1a12:	8d e0       	ldi	r24, 0x0D	; 13
    1a14:	d8 16       	cp	r13, r24
    1a16:	a9 f0       	breq	.+42     	; 0x1a42 <marqueeSendByte+0x10c>
    1a18:	28 85       	ldd	r18, Y+8	; 0x08
    1a1a:	39 85       	ldd	r19, Y+9	; 0x09
    1a1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a20:	28 17       	cp	r18, r24
    1a22:	39 07       	cpc	r19, r25
    1a24:	70 f4       	brcc	.+28     	; 0x1a42 <marqueeSendByte+0x10c>
    1a26:	e2 0f       	add	r30, r18
    1a28:	f3 1f       	adc	r31, r19
    1a2a:	2f b7       	in	r18, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	d0 82       	st	Z, r13
    1a30:	11 82       	std	Z+1, r1	; 0x01
    1a32:	88 85       	ldd	r24, Y+8	; 0x08
    1a34:	99 85       	ldd	r25, Y+9	; 0x09
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	99 87       	std	Y+9, r25	; 0x09
    1a3a:	88 87       	std	Y+8, r24	; 0x08
    1a3c:	1f 82       	std	Y+7, r1	; 0x07
    1a3e:	1e 82       	std	Y+6, r1	; 0x06
    1a40:	2f bf       	out	0x3f, r18	; 63
    1a42:	8d 2d       	mov	r24, r13
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	1f 91       	pop	r17
    1a4a:	0f 91       	pop	r16
    1a4c:	ff 90       	pop	r15
    1a4e:	ef 90       	pop	r14
    1a50:	df 90       	pop	r13
    1a52:	cf 90       	pop	r12
    1a54:	08 95       	ret

00001a56 <marqueeUpdate>:
    1a56:	2f 92       	push	r2
    1a58:	3f 92       	push	r3
    1a5a:	4f 92       	push	r4
    1a5c:	5f 92       	push	r5
    1a5e:	6f 92       	push	r6
    1a60:	7f 92       	push	r7
    1a62:	8f 92       	push	r8
    1a64:	9f 92       	push	r9
    1a66:	af 92       	push	r10
    1a68:	bf 92       	push	r11
    1a6a:	cf 92       	push	r12
    1a6c:	df 92       	push	r13
    1a6e:	ef 92       	push	r14
    1a70:	ff 92       	push	r15
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	38 2e       	mov	r3, r24
    1a7c:	29 2e       	mov	r2, r25
    1a7e:	2a 01       	movw	r4, r20
    1a80:	3b 01       	movw	r6, r22
    1a82:	c8 2f       	mov	r28, r24
    1a84:	d9 2f       	mov	r29, r25
    1a86:	0c 81       	ldd	r16, Y+4	; 0x04
    1a88:	1d 81       	ldd	r17, Y+5	; 0x05
    1a8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a8e:	08 0f       	add	r16, r24
    1a90:	19 1f       	adc	r17, r25
    1a92:	f8 01       	movw	r30, r16
    1a94:	80 80       	ld	r8, Z
    1a96:	8c 89       	ldd	r24, Y+20	; 0x14
    1a98:	86 95       	lsr	r24
    1a9a:	81 70       	andi	r24, 0x01	; 1
    1a9c:	88 20       	and	r8, r8
    1a9e:	29 f4       	brne	.+10     	; 0x1aaa <marqueeUpdate+0x54>
    1aa0:	a8 88       	ldd	r10, Y+16	; 0x10
    1aa2:	b9 88       	ldd	r11, Y+17	; 0x11
    1aa4:	ca 88       	ldd	r12, Y+18	; 0x12
    1aa6:	db 88       	ldd	r13, Y+19	; 0x13
    1aa8:	04 c0       	rjmp	.+8      	; 0x1ab2 <marqueeUpdate+0x5c>
    1aaa:	ac 84       	ldd	r10, Y+12	; 0x0c
    1aac:	bd 84       	ldd	r11, Y+13	; 0x0d
    1aae:	ce 84       	ldd	r12, Y+14	; 0x0e
    1ab0:	df 84       	ldd	r13, Y+15	; 0x0f
    1ab2:	88 23       	and	r24, r24
    1ab4:	d1 f4       	brne	.+52     	; 0x1aea <marqueeUpdate+0x94>
    1ab6:	88 20       	and	r8, r8
    1ab8:	c1 f0       	breq	.+48     	; 0x1aea <marqueeUpdate+0x94>
    1aba:	f8 01       	movw	r30, r16
    1abc:	32 91       	ld	r19, -Z
    1abe:	8f 01       	movw	r16, r30
    1ac0:	0f 5f       	subi	r16, 0xFF	; 255
    1ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac4:	4a 81       	ldd	r20, Y+2	; 0x02
    1ac6:	5b 81       	ldd	r21, Y+3	; 0x03
    1ac8:	f8 01       	movw	r30, r16
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	07 c0       	rjmp	.+14     	; 0x1ade <marqueeUpdate+0x88>
    1ad0:	20 81       	ld	r18, Z
    1ad2:	22 23       	and	r18, r18
    1ad4:	51 f0       	breq	.+20     	; 0x1aea <marqueeUpdate+0x94>
    1ad6:	23 17       	cp	r18, r19
    1ad8:	41 f4       	brne	.+16     	; 0x1aea <marqueeUpdate+0x94>
    1ada:	31 96       	adiw	r30, 0x01	; 1
    1adc:	01 96       	adiw	r24, 0x01	; 1
    1ade:	84 17       	cp	r24, r20
    1ae0:	95 07       	cpc	r25, r21
    1ae2:	b0 f3       	brcs	.-20     	; 0x1ad0 <marqueeUpdate+0x7a>
    1ae4:	99 24       	eor	r9, r9
    1ae6:	9a 94       	dec	r9
    1ae8:	01 c0       	rjmp	.+2      	; 0x1aec <marqueeUpdate+0x96>
    1aea:	99 24       	eor	r9, r9
    1aec:	8c 89       	ldd	r24, Y+20	; 0x14
    1aee:	86 95       	lsr	r24
    1af0:	81 70       	andi	r24, 0x01	; 1
    1af2:	29 2d       	mov	r18, r9
    1af4:	33 27       	eor	r19, r19
    1af6:	27 fd       	sbrc	r18, 7
    1af8:	30 95       	com	r19
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	28 17       	cp	r18, r24
    1afe:	39 07       	cpc	r19, r25
    1b00:	c1 f0       	breq	.+48     	; 0x1b32 <marqueeUpdate+0xdc>
    1b02:	a6 01       	movw	r20, r12
    1b04:	95 01       	movw	r18, r10
    1b06:	62 e0       	ldi	r22, 0x02	; 2
    1b08:	56 95       	lsr	r21
    1b0a:	47 95       	ror	r20
    1b0c:	37 95       	ror	r19
    1b0e:	27 95       	ror	r18
    1b10:	6a 95       	dec	r22
    1b12:	d1 f7       	brne	.-12     	; 0x1b08 <marqueeUpdate+0xb2>
    1b14:	99 2d       	mov	r25, r9
    1b16:	92 70       	andi	r25, 0x02	; 2
    1b18:	8c 89       	ldd	r24, Y+20	; 0x14
    1b1a:	8d 7f       	andi	r24, 0xFD	; 253
    1b1c:	89 2b       	or	r24, r25
    1b1e:	8c 8b       	std	Y+20, r24	; 0x14
    1b20:	99 20       	and	r9, r9
    1b22:	19 f0       	breq	.+6      	; 0x1b2a <marqueeUpdate+0xd4>
    1b24:	59 01       	movw	r10, r18
    1b26:	6a 01       	movw	r12, r20
    1b28:	04 c0       	rjmp	.+8      	; 0x1b32 <marqueeUpdate+0xdc>
    1b2a:	a2 1a       	sub	r10, r18
    1b2c:	b3 0a       	sbc	r11, r19
    1b2e:	c4 0a       	sbc	r12, r20
    1b30:	d5 0a       	sbc	r13, r21
    1b32:	ee 24       	eor	r14, r14
    1b34:	ff 24       	eor	r15, r15
    1b36:	18 c0       	rjmp	.+48     	; 0x1b68 <marqueeUpdate+0x112>
    1b38:	c7 01       	movw	r24, r14
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	e8 81       	ld	r30, Y
    1b40:	f9 81       	ldd	r31, Y+1	; 0x01
    1b42:	e8 0f       	add	r30, r24
    1b44:	f9 1f       	adc	r31, r25
    1b46:	85 91       	lpm	r24, Z+
    1b48:	94 91       	lpm	r25, Z+
    1b4a:	99 20       	and	r9, r9
    1b4c:	39 f4       	brne	.+14     	; 0x1b5c <marqueeUpdate+0x106>
    1b4e:	f8 01       	movw	r30, r16
    1b50:	60 81       	ld	r22, Z
    1b52:	66 23       	and	r22, r22
    1b54:	19 f0       	breq	.+6      	; 0x1b5c <marqueeUpdate+0x106>
    1b56:	0f 5f       	subi	r16, 0xFF	; 255
    1b58:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5a:	01 c0       	rjmp	.+2      	; 0x1b5e <marqueeUpdate+0x108>
    1b5c:	60 e2       	ldi	r22, 0x20	; 32
    1b5e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <segled_put_char>
    1b62:	08 94       	sec
    1b64:	e1 1c       	adc	r14, r1
    1b66:	f1 1c       	adc	r15, r1
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6c:	e8 16       	cp	r14, r24
    1b6e:	f9 06       	cpc	r15, r25
    1b70:	18 f3       	brcs	.-58     	; 0x1b38 <marqueeUpdate+0xe2>
    1b72:	88 20       	and	r8, r8
    1b74:	b1 f4       	brne	.+44     	; 0x1ba2 <marqueeUpdate+0x14c>
    1b76:	1f 82       	std	Y+7, r1	; 0x07
    1b78:	1e 82       	std	Y+6, r1	; 0x06
    1b7a:	88 89       	ldd	r24, Y+16	; 0x10
    1b7c:	99 89       	ldd	r25, Y+17	; 0x11
    1b7e:	aa 89       	ldd	r26, Y+18	; 0x12
    1b80:	bb 89       	ldd	r27, Y+19	; 0x13
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	a1 05       	cpc	r26, r1
    1b86:	b1 05       	cpc	r27, r1
    1b88:	29 f0       	breq	.+10     	; 0x1b94 <marqueeUpdate+0x13e>
    1b8a:	ec 81       	ldd	r30, Y+4	; 0x04
    1b8c:	fd 81       	ldd	r31, Y+5	; 0x05
    1b8e:	80 81       	ld	r24, Z
    1b90:	88 23       	and	r24, r24
    1b92:	19 f4       	brne	.+6      	; 0x1b9a <marqueeUpdate+0x144>
    1b94:	8c 89       	ldd	r24, Y+20	; 0x14
    1b96:	8e 7f       	andi	r24, 0xFE	; 254
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <marqueeUpdate+0x148>
    1b9a:	8c 89       	ldd	r24, Y+20	; 0x14
    1b9c:	8d 7f       	andi	r24, 0xFD	; 253
    1b9e:	8c 8b       	std	Y+20, r24	; 0x14
    1ba0:	07 c0       	rjmp	.+14     	; 0x1bb0 <marqueeUpdate+0x15a>
    1ba2:	99 20       	and	r9, r9
    1ba4:	29 f4       	brne	.+10     	; 0x1bb0 <marqueeUpdate+0x15a>
    1ba6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba8:	9f 81       	ldd	r25, Y+7	; 0x07
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	9f 83       	std	Y+7, r25	; 0x07
    1bae:	8e 83       	std	Y+6, r24	; 0x06
    1bb0:	8c 89       	ldd	r24, Y+20	; 0x14
    1bb2:	80 ff       	sbrs	r24, 0
    1bb4:	0a c0       	rjmp	.+20     	; 0x1bca <marqueeUpdate+0x174>
    1bb6:	8b e2       	ldi	r24, 0x2B	; 43
    1bb8:	9d e0       	ldi	r25, 0x0D	; 13
    1bba:	63 2d       	mov	r22, r3
    1bbc:	72 2d       	mov	r23, r2
    1bbe:	a3 01       	movw	r20, r6
    1bc0:	92 01       	movw	r18, r4
    1bc2:	86 01       	movw	r16, r12
    1bc4:	75 01       	movw	r14, r10
    1bc6:	0e 94 4e 13 	call	0x269c	; 0x269c <scheduleJob>
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	1f 91       	pop	r17
    1bd0:	0f 91       	pop	r16
    1bd2:	ff 90       	pop	r15
    1bd4:	ef 90       	pop	r14
    1bd6:	df 90       	pop	r13
    1bd8:	cf 90       	pop	r12
    1bda:	bf 90       	pop	r11
    1bdc:	af 90       	pop	r10
    1bde:	9f 90       	pop	r9
    1be0:	8f 90       	pop	r8
    1be2:	7f 90       	pop	r7
    1be4:	6f 90       	pop	r6
    1be6:	5f 90       	pop	r5
    1be8:	4f 90       	pop	r4
    1bea:	3f 90       	pop	r3
    1bec:	2f 90       	pop	r2
    1bee:	08 95       	ret

00001bf0 <segled_put_char>:
    1bf0:	ef 92       	push	r14
    1bf2:	ff 92       	push	r15
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	8c 01       	movw	r16, r24
    1bfe:	e6 2e       	mov	r14, r22
    1c00:	fc 01       	movw	r30, r24
    1c02:	80 89       	ldd	r24, Z+16	; 0x10
    1c04:	81 fd       	sbrc	r24, 1
    1c06:	12 c0       	rjmp	.+36     	; 0x1c2c <segled_put_char+0x3c>
    1c08:	c0 e0       	ldi	r28, 0x00	; 0
    1c0a:	d0 e0       	ldi	r29, 0x00	; 0
    1c0c:	f8 01       	movw	r30, r16
    1c0e:	ec 0f       	add	r30, r28
    1c10:	fd 1f       	adc	r31, r29
    1c12:	80 81       	ld	r24, Z
    1c14:	91 81       	ldd	r25, Z+1	; 0x01
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <pin_make_output>
    1c1c:	22 96       	adiw	r28, 0x02	; 2
    1c1e:	c0 31       	cpi	r28, 0x10	; 16
    1c20:	d1 05       	cpc	r29, r1
    1c22:	a1 f7       	brne	.-24     	; 0x1c0c <segled_put_char+0x1c>
    1c24:	f8 01       	movw	r30, r16
    1c26:	80 89       	ldd	r24, Z+16	; 0x10
    1c28:	82 60       	ori	r24, 0x02	; 2
    1c2a:	80 8b       	std	Z+16, r24	; 0x10
    1c2c:	8e 2d       	mov	r24, r14
    1c2e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <segled8_get_mask>
    1c32:	f8 2e       	mov	r15, r24
    1c34:	80 ff       	sbrs	r24, 0
    1c36:	07 c0       	rjmp	.+14     	; 0x1c46 <segled_put_char+0x56>
    1c38:	f8 01       	movw	r30, r16
    1c3a:	86 85       	ldd	r24, Z+14	; 0x0e
    1c3c:	97 85       	ldd	r25, Z+15	; 0x0f
    1c3e:	89 2b       	or	r24, r25
    1c40:	11 f4       	brne	.+4      	; 0x1c46 <segled_put_char+0x56>
    1c42:	80 e1       	ldi	r24, 0x10	; 16
    1c44:	f8 2e       	mov	r15, r24
    1c46:	f8 01       	movw	r30, r16
    1c48:	80 89       	ldd	r24, Z+16	; 0x10
    1c4a:	80 ff       	sbrs	r24, 0
    1c4c:	f0 94       	com	r15
    1c4e:	c0 e0       	ldi	r28, 0x00	; 0
    1c50:	d0 e0       	ldi	r29, 0x00	; 0
    1c52:	f8 01       	movw	r30, r16
    1c54:	ec 0f       	add	r30, r28
    1c56:	fd 1f       	adc	r31, r29
    1c58:	80 81       	ld	r24, Z
    1c5a:	91 81       	ldd	r25, Z+1	; 0x01
    1c5c:	f7 fe       	sbrs	r15, 7
    1c5e:	03 c0       	rjmp	.+6      	; 0x1c66 <segled_put_char+0x76>
    1c60:	0e 94 0d 12 	call	0x241a	; 0x241a <pin_high>
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <segled_put_char+0x7a>
    1c66:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <pin_low>
    1c6a:	22 96       	adiw	r28, 0x02	; 2
    1c6c:	c0 31       	cpi	r28, 0x10	; 16
    1c6e:	d1 05       	cpc	r29, r1
    1c70:	11 f0       	breq	.+4      	; 0x1c76 <segled_put_char+0x86>
    1c72:	ff 0c       	add	r15, r15
    1c74:	ee cf       	rjmp	.-36     	; 0x1c52 <segled_put_char+0x62>
    1c76:	8e 2d       	mov	r24, r14
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	1f 91       	pop	r17
    1c7e:	0f 91       	pop	r16
    1c80:	ff 90       	pop	r15
    1c82:	ef 90       	pop	r14
    1c84:	08 95       	ret

00001c86 <segled_set>:
    1c86:	ef 92       	push	r14
    1c88:	ff 92       	push	r15
    1c8a:	0f 93       	push	r16
    1c8c:	1f 93       	push	r17
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	8c 01       	movw	r16, r24
    1c94:	e6 2e       	mov	r14, r22
    1c96:	f4 2e       	mov	r15, r20
    1c98:	fc 01       	movw	r30, r24
    1c9a:	80 89       	ldd	r24, Z+16	; 0x10
    1c9c:	81 fd       	sbrc	r24, 1
    1c9e:	12 c0       	rjmp	.+36     	; 0x1cc4 <segled_set+0x3e>
    1ca0:	c0 e0       	ldi	r28, 0x00	; 0
    1ca2:	d0 e0       	ldi	r29, 0x00	; 0
    1ca4:	f8 01       	movw	r30, r16
    1ca6:	ec 0f       	add	r30, r28
    1ca8:	fd 1f       	adc	r31, r29
    1caa:	80 81       	ld	r24, Z
    1cac:	91 81       	ldd	r25, Z+1	; 0x01
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <pin_make_output>
    1cb4:	22 96       	adiw	r28, 0x02	; 2
    1cb6:	c0 31       	cpi	r28, 0x10	; 16
    1cb8:	d1 05       	cpc	r29, r1
    1cba:	a1 f7       	brne	.-24     	; 0x1ca4 <segled_set+0x1e>
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	80 89       	ldd	r24, Z+16	; 0x10
    1cc0:	82 60       	ori	r24, 0x02	; 2
    1cc2:	80 8b       	std	Z+16, r24	; 0x10
    1cc4:	f8 01       	movw	r30, r16
    1cc6:	80 89       	ldd	r24, Z+16	; 0x10
    1cc8:	80 fd       	sbrc	r24, 0
    1cca:	06 c0       	rjmp	.+12     	; 0x1cd8 <segled_set+0x52>
    1ccc:	ff 20       	and	r15, r15
    1cce:	19 f4       	brne	.+6      	; 0x1cd6 <segled_set+0x50>
    1cd0:	ff 24       	eor	r15, r15
    1cd2:	fa 94       	dec	r15
    1cd4:	01 c0       	rjmp	.+2      	; 0x1cd8 <segled_set+0x52>
    1cd6:	ff 24       	eor	r15, r15
    1cd8:	ee 2d       	mov	r30, r14
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	ee 0f       	add	r30, r30
    1cde:	ff 1f       	adc	r31, r31
    1ce0:	e0 0f       	add	r30, r16
    1ce2:	f1 1f       	adc	r31, r17
    1ce4:	80 81       	ld	r24, Z
    1ce6:	91 81       	ldd	r25, Z+1	; 0x01
    1ce8:	6f 2d       	mov	r22, r15
    1cea:	0e 94 31 12 	call	0x2462	; 0x2462 <pin_set>
    1cee:	df 91       	pop	r29
    1cf0:	cf 91       	pop	r28
    1cf2:	1f 91       	pop	r17
    1cf4:	0f 91       	pop	r16
    1cf6:	ff 90       	pop	r15
    1cf8:	ef 90       	pop	r14
    1cfa:	08 95       	ret

00001cfc <segled8_get_mask>:
    1cfc:	e8 2f       	mov	r30, r24
    1cfe:	81 54       	subi	r24, 0x41	; 65
    1d00:	8a 31       	cpi	r24, 0x1A	; 26
    1d02:	28 f4       	brcc	.+10     	; 0x1d0e <segled8_get_mask+0x12>
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	e3 5a       	subi	r30, 0xA3	; 163
    1d08:	fc 4f       	sbci	r31, 0xFC	; 252
    1d0a:	84 91       	lpm	r24, Z+
    1d0c:	08 95       	ret
    1d0e:	8e 2f       	mov	r24, r30
    1d10:	81 56       	subi	r24, 0x61	; 97
    1d12:	8a 31       	cpi	r24, 0x1A	; 26
    1d14:	28 f4       	brcc	.+10     	; 0x1d20 <segled8_get_mask+0x24>
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	e3 5c       	subi	r30, 0xC3	; 195
    1d1a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d1c:	84 91       	lpm	r24, Z+
    1d1e:	08 95       	ret
    1d20:	8e 2f       	mov	r24, r30
    1d22:	80 53       	subi	r24, 0x30	; 48
    1d24:	8a 30       	cpi	r24, 0x0A	; 10
    1d26:	28 f4       	brcc	.+10     	; 0x1d32 <segled8_get_mask+0x36>
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	e8 57       	subi	r30, 0x78	; 120
    1d2c:	fc 4f       	sbci	r31, 0xFC	; 252
    1d2e:	84 91       	lpm	r24, Z+
    1d30:	08 95       	ret
    1d32:	ea 30       	cpi	r30, 0x0A	; 10
    1d34:	28 f4       	brcc	.+10     	; 0x1d40 <segled8_get_mask+0x44>
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	e8 54       	subi	r30, 0x48	; 72
    1d3a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d3c:	84 91       	lpm	r24, Z+
    1d3e:	08 95       	ret
    1d40:	ed 32       	cpi	r30, 0x2D	; 45
    1d42:	11 f4       	brne	.+4      	; 0x1d48 <segled8_get_mask+0x4c>
    1d44:	82 e0       	ldi	r24, 0x02	; 2
    1d46:	08 95       	ret
    1d48:	eb 35       	cpi	r30, 0x5B	; 91
    1d4a:	79 f0       	breq	.+30     	; 0x1d6a <segled8_get_mask+0x6e>
    1d4c:	eb 37       	cpi	r30, 0x7B	; 123
    1d4e:	69 f0       	breq	.+26     	; 0x1d6a <segled8_get_mask+0x6e>
    1d50:	e8 32       	cpi	r30, 0x28	; 40
    1d52:	59 f0       	breq	.+22     	; 0x1d6a <segled8_get_mask+0x6e>
    1d54:	ed 35       	cpi	r30, 0x5D	; 93
    1d56:	59 f0       	breq	.+22     	; 0x1d6e <segled8_get_mask+0x72>
    1d58:	ed 37       	cpi	r30, 0x7D	; 125
    1d5a:	49 f0       	breq	.+18     	; 0x1d6e <segled8_get_mask+0x72>
    1d5c:	e9 32       	cpi	r30, 0x29	; 41
    1d5e:	39 f0       	breq	.+14     	; 0x1d6e <segled8_get_mask+0x72>
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	ee 32       	cpi	r30, 0x2E	; 46
    1d64:	29 f4       	brne	.+10     	; 0x1d70 <segled8_get_mask+0x74>
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	08 95       	ret
    1d6a:	8c e9       	ldi	r24, 0x9C	; 156
    1d6c:	08 95       	ret
    1d6e:	80 ef       	ldi	r24, 0xF0	; 240
    1d70:	08 95       	ret

00001d72 <compareFromIOPin>:
    1d72:	bf 92       	push	r11
    1d74:	cf 92       	push	r12
    1d76:	df 92       	push	r13
    1d78:	ef 92       	push	r14
    1d7a:	ff 92       	push	r15
    1d7c:	0f 93       	push	r16
    1d7e:	1f 93       	push	r17
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	6c 01       	movw	r12, r24
    1d86:	b0 90 be 02 	lds	r11, 0x02BE
    1d8a:	24 ef       	ldi	r18, 0xF4	; 244
    1d8c:	31 e0       	ldi	r19, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	c0 e0       	ldi	r28, 0x00	; 0
    1d92:	d0 e0       	ldi	r29, 0x00	; 0
    1d94:	2d c0       	rjmp	.+90     	; 0x1df0 <compareFromIOPin+0x7e>
    1d96:	28 5f       	subi	r18, 0xF8	; 248
    1d98:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9a:	f9 01       	movw	r30, r18
    1d9c:	e4 90       	lpm	r14, Z+
    1d9e:	28 50       	subi	r18, 0x08	; 8
    1da0:	30 40       	sbci	r19, 0x00	; 0
    1da2:	f9 01       	movw	r30, r18
    1da4:	77 96       	adiw	r30, 0x17	; 23
    1da6:	2a 5f       	subi	r18, 0xFA	; 250
    1da8:	3f 4f       	sbci	r19, 0xFF	; 255
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	a0 e0       	ldi	r26, 0x00	; 0
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	05 91       	lpm	r16, Z+
    1db2:	14 91       	lpm	r17, Z+
    1db4:	f9 01       	movw	r30, r18
    1db6:	f4 90       	lpm	r15, Z+
    1db8:	26 50       	subi	r18, 0x06	; 6
    1dba:	30 40       	sbci	r19, 0x00	; 0
    1dbc:	14 c0       	rjmp	.+40     	; 0x1de6 <compareFromIOPin+0x74>
    1dbe:	b8 01       	movw	r22, r16
    1dc0:	6a 0f       	add	r22, r26
    1dc2:	7b 1f       	adc	r23, r27
    1dc4:	fb 01       	movw	r30, r22
    1dc6:	3e 96       	adiw	r30, 0x0e	; 14
    1dc8:	45 91       	lpm	r20, Z+
    1dca:	54 91       	lpm	r21, Z+
    1dcc:	41 15       	cp	r20, r1
    1dce:	51 05       	cpc	r21, r1
    1dd0:	41 f0       	breq	.+16     	; 0x1de2 <compareFromIOPin+0x70>
    1dd2:	4c 15       	cp	r20, r12
    1dd4:	5d 05       	cpc	r21, r13
    1dd6:	29 f4       	brne	.+10     	; 0x1de2 <compareFromIOPin+0x70>
    1dd8:	ff 20       	and	r15, r15
    1dda:	11 f0       	breq	.+4      	; 0x1de0 <compareFromIOPin+0x6e>
    1ddc:	eb 01       	movw	r28, r22
    1dde:	0a c0       	rjmp	.+20     	; 0x1df4 <compareFromIOPin+0x82>
    1de0:	eb 01       	movw	r28, r22
    1de2:	8f 5f       	subi	r24, 0xFF	; 255
    1de4:	50 96       	adiw	r26, 0x10	; 16
    1de6:	8e 15       	cp	r24, r14
    1de8:	50 f3       	brcs	.-44     	; 0x1dbe <compareFromIOPin+0x4c>
    1dea:	9f 5f       	subi	r25, 0xFF	; 255
    1dec:	24 5d       	subi	r18, 0xD4	; 212
    1dee:	3f 4f       	sbci	r19, 0xFF	; 255
    1df0:	9b 15       	cp	r25, r11
    1df2:	88 f2       	brcs	.-94     	; 0x1d96 <compareFromIOPin+0x24>
    1df4:	ce 01       	movw	r24, r28
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
    1dfa:	1f 91       	pop	r17
    1dfc:	0f 91       	pop	r16
    1dfe:	ff 90       	pop	r15
    1e00:	ef 90       	pop	r14
    1e02:	df 90       	pop	r13
    1e04:	cf 90       	pop	r12
    1e06:	bf 90       	pop	r11
    1e08:	08 95       	ret

00001e0a <compareSetOutputMode>:
    1e0a:	9c 01       	movw	r18, r24
    1e0c:	0b 96       	adiw	r24, 0x0b	; 11
    1e0e:	fc 01       	movw	r30, r24
    1e10:	a5 91       	lpm	r26, Z+
    1e12:	b4 91       	lpm	r27, Z+
    1e14:	23 5f       	subi	r18, 0xF3	; 243
    1e16:	3f 4f       	sbci	r19, 0xFF	; 255
    1e18:	f9 01       	movw	r30, r18
    1e1a:	24 91       	lpm	r18, Z+
    1e1c:	70 e0       	ldi	r23, 0x00	; 0
    1e1e:	02 2e       	mov	r0, r18
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <compareSetOutputMode+0x1c>
    1e22:	66 0f       	add	r22, r22
    1e24:	77 1f       	adc	r23, r23
    1e26:	0a 94       	dec	r0
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <compareSetOutputMode+0x18>
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <compareSetOutputMode+0x2a>
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	2a 95       	dec	r18
    1e36:	e2 f7       	brpl	.-8      	; 0x1e30 <compareSetOutputMode+0x26>
    1e38:	28 2f       	mov	r18, r24
    1e3a:	22 0f       	add	r18, r18
    1e3c:	28 2b       	or	r18, r24
    1e3e:	9c 91       	ld	r25, X
    1e40:	82 2f       	mov	r24, r18
    1e42:	86 23       	and	r24, r22
    1e44:	20 95       	com	r18
    1e46:	29 23       	and	r18, r25
    1e48:	82 2b       	or	r24, r18
    1e4a:	8c 93       	st	X, r24
    1e4c:	08 95       	ret

00001e4e <compareSetThreshold>:
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	9c 01       	movw	r18, r24
    1e54:	2e 5f       	subi	r18, 0xFE	; 254
    1e56:	3f 4f       	sbci	r19, 0xFF	; 255
    1e58:	f9 01       	movw	r30, r18
    1e5a:	84 91       	lpm	r24, Z+
    1e5c:	22 50       	subi	r18, 0x02	; 2
    1e5e:	30 40       	sbci	r19, 0x00	; 0
    1e60:	9c e2       	ldi	r25, 0x2C	; 44
    1e62:	89 9f       	mul	r24, r25
    1e64:	a0 01       	movw	r20, r0
    1e66:	11 24       	eor	r1, r1
    1e68:	4c 50       	subi	r20, 0x0C	; 12
    1e6a:	5e 4f       	sbci	r21, 0xFE	; 254
    1e6c:	48 5f       	subi	r20, 0xF8	; 248
    1e6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e70:	fa 01       	movw	r30, r20
    1e72:	84 91       	lpm	r24, Z+
    1e74:	48 50       	subi	r20, 0x08	; 8
    1e76:	50 40       	sbci	r21, 0x00	; 0
    1e78:	88 23       	and	r24, r24
    1e7a:	c1 f0       	breq	.+48     	; 0x1eac <compareSetThreshold+0x5e>
    1e7c:	c9 01       	movw	r24, r18
    1e7e:	06 96       	adiw	r24, 0x06	; 6
    1e80:	fc 01       	movw	r30, r24
    1e82:	c5 91       	lpm	r28, Z+
    1e84:	d4 91       	lpm	r29, Z+
    1e86:	fa 01       	movw	r30, r20
    1e88:	36 96       	adiw	r30, 0x06	; 6
    1e8a:	e4 91       	lpm	r30, Z+
    1e8c:	ee 23       	and	r30, r30
    1e8e:	19 f0       	breq	.+6      	; 0x1e96 <compareSetThreshold+0x48>
    1e90:	79 83       	std	Y+1, r23	; 0x01
    1e92:	68 83       	st	Y, r22
    1e94:	0e c0       	rjmp	.+28     	; 0x1eb2 <compareSetThreshold+0x64>
    1e96:	6f 3f       	cpi	r22, 0xFF	; 255
    1e98:	71 05       	cpc	r23, r1
    1e9a:	31 f0       	breq	.+12     	; 0x1ea8 <compareSetThreshold+0x5a>
    1e9c:	28 f0       	brcs	.+10     	; 0x1ea8 <compareSetThreshold+0x5a>
    1e9e:	8e ef       	ldi	r24, 0xFE	; 254
    1ea0:	0e 94 4b 0b 	call	0x1696	; 0x1696 <setError>
    1ea4:	6f ef       	ldi	r22, 0xFF	; 255
    1ea6:	70 e0       	ldi	r23, 0x00	; 0
    1ea8:	68 83       	st	Y, r22
    1eaa:	03 c0       	rjmp	.+6      	; 0x1eb2 <compareSetThreshold+0x64>
    1eac:	8d ef       	ldi	r24, 0xFD	; 253
    1eae:	0e 94 4b 0b 	call	0x1696	; 0x1696 <setError>
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	08 95       	ret

00001eb8 <_uartSetBaudRate>:
    1eb8:	dc 01       	movw	r26, r24
    1eba:	19 96       	adiw	r26, 0x09	; 9
    1ebc:	8d 91       	ld	r24, X+
    1ebe:	9c 91       	ld	r25, X
    1ec0:	1a 97       	sbiw	r26, 0x0a	; 10
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	25 91       	lpm	r18, Z+
    1ec6:	34 91       	lpm	r19, Z+
    1ec8:	cd 01       	movw	r24, r26
    1eca:	f9 01       	movw	r30, r18
    1ecc:	09 95       	icall
    1ece:	08 95       	ret

00001ed0 <_uartInit>:
    1ed0:	df 92       	push	r13
    1ed2:	ef 92       	push	r14
    1ed4:	ff 92       	push	r15
    1ed6:	0f 93       	push	r16
    1ed8:	1f 93       	push	r17
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	ec 01       	movw	r28, r24
    1ee0:	7a 01       	movw	r14, r20
    1ee2:	8b 01       	movw	r16, r22
    1ee4:	df b6       	in	r13, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	2d 85       	ldd	r18, Y+13	; 0x0d
    1eea:	3e 85       	ldd	r19, Y+14	; 0x0e
    1eec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eee:	98 89       	ldd	r25, Y+16	; 0x10
    1ef0:	28 17       	cp	r18, r24
    1ef2:	39 07       	cpc	r19, r25
    1ef4:	11 f0       	breq	.+4      	; 0x1efa <_uartInit+0x2a>
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	01 c0       	rjmp	.+2      	; 0x1efc <_uartInit+0x2c>
    1efa:	8f ef       	ldi	r24, 0xFF	; 255
    1efc:	8f 8b       	std	Y+23, r24	; 0x17
    1efe:	88 23       	and	r24, r24
    1f00:	81 f0       	breq	.+32     	; 0x1f22 <_uartInit+0x52>
    1f02:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f04:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f08:	98 89       	ldd	r25, Y+16	; 0x10
    1f0a:	28 17       	cp	r18, r24
    1f0c:	39 07       	cpc	r19, r25
    1f0e:	21 f0       	breq	.+8      	; 0x1f18 <_uartInit+0x48>
    1f10:	c9 01       	movw	r24, r18
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	0e 94 c3 0b 	call	0x1786	; 0x1786 <pin_make_input>
    1f18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f1a:	98 89       	ldd	r25, Y+16	; 0x10
    1f1c:	6f ef       	ldi	r22, 0xFF	; 255
    1f1e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <pin_make_input>
    1f22:	88 85       	ldd	r24, Y+8	; 0x08
    1f24:	81 60       	ori	r24, 0x01	; 1
    1f26:	88 87       	std	Y+8, r24	; 0x08
    1f28:	88 85       	ldd	r24, Y+8	; 0x08
    1f2a:	8b 7f       	andi	r24, 0xFB	; 251
    1f2c:	88 87       	std	Y+8, r24	; 0x08
    1f2e:	88 85       	ldd	r24, Y+8	; 0x08
    1f30:	8d 7f       	andi	r24, 0xFD	; 253
    1f32:	88 87       	std	Y+8, r24	; 0x08
    1f34:	89 85       	ldd	r24, Y+9	; 0x09
    1f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f38:	04 96       	adiw	r24, 0x04	; 4
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	25 91       	lpm	r18, Z+
    1f3e:	34 91       	lpm	r19, Z+
    1f40:	ce 01       	movw	r24, r28
    1f42:	b8 01       	movw	r22, r16
    1f44:	a7 01       	movw	r20, r14
    1f46:	f9 01       	movw	r30, r18
    1f48:	09 95       	icall
    1f4a:	df be       	out	0x3f, r13	; 63
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	1f 91       	pop	r17
    1f52:	0f 91       	pop	r16
    1f54:	ff 90       	pop	r15
    1f56:	ef 90       	pop	r14
    1f58:	df 90       	pop	r13
    1f5a:	08 95       	ret

00001f5c <__uartHWSetBaudRate>:
    1f5c:	bf 92       	push	r11
    1f5e:	cf 92       	push	r12
    1f60:	df 92       	push	r13
    1f62:	ef 92       	push	r14
    1f64:	ff 92       	push	r15
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	7a 01       	movw	r14, r20
    1f70:	8b 01       	movw	r16, r22
    1f72:	ec 01       	movw	r28, r24
    1f74:	bf b6       	in	r11, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	4f 3f       	cpi	r20, 0xFF	; 255
    1f7a:	8f ef       	ldi	r24, 0xFF	; 255
    1f7c:	58 07       	cpc	r21, r24
    1f7e:	8f ef       	ldi	r24, 0xFF	; 255
    1f80:	68 07       	cpc	r22, r24
    1f82:	8f ef       	ldi	r24, 0xFF	; 255
    1f84:	78 07       	cpc	r23, r24
    1f86:	21 f4       	brne	.+8      	; 0x1f90 <__uartHWSetBaudRate+0x34>
    1f88:	a1 e0       	ldi	r26, 0x01	; 1
    1f8a:	ca 2e       	mov	r12, r26
    1f8c:	d1 2c       	mov	r13, r1
    1f8e:	24 c0       	rjmp	.+72     	; 0x1fd8 <__uartHWSetBaudRate+0x7c>
    1f90:	cb 01       	movw	r24, r22
    1f92:	ba 01       	movw	r22, r20
    1f94:	f3 e0       	ldi	r31, 0x03	; 3
    1f96:	66 0f       	add	r22, r22
    1f98:	77 1f       	adc	r23, r23
    1f9a:	88 1f       	adc	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	fa 95       	dec	r31
    1fa0:	d1 f7       	brne	.-12     	; 0x1f96 <__uartHWSetBaudRate+0x3a>
    1fa2:	20 91 0c 02 	lds	r18, 0x020C
    1fa6:	30 91 0d 02 	lds	r19, 0x020D
    1faa:	40 91 0e 02 	lds	r20, 0x020E
    1fae:	50 91 0f 02 	lds	r21, 0x020F
    1fb2:	62 0f       	add	r22, r18
    1fb4:	73 1f       	adc	r23, r19
    1fb6:	84 1f       	adc	r24, r20
    1fb8:	95 1f       	adc	r25, r21
    1fba:	a8 01       	movw	r20, r16
    1fbc:	97 01       	movw	r18, r14
    1fbe:	e4 e0       	ldi	r30, 0x04	; 4
    1fc0:	22 0f       	add	r18, r18
    1fc2:	33 1f       	adc	r19, r19
    1fc4:	44 1f       	adc	r20, r20
    1fc6:	55 1f       	adc	r21, r21
    1fc8:	ea 95       	dec	r30
    1fca:	d1 f7       	brne	.-12     	; 0x1fc0 <__uartHWSetBaudRate+0x64>
    1fcc:	0e 94 45 1a 	call	0x348a	; 0x348a <__udivmodsi4>
    1fd0:	69 01       	movw	r12, r18
    1fd2:	08 94       	sec
    1fd4:	c1 08       	sbc	r12, r1
    1fd6:	d1 08       	sbc	r13, r1
    1fd8:	98 a9       	ldd	r25, Y+48	; 0x30
    1fda:	99 23       	and	r25, r25
    1fdc:	c9 f1       	breq	.+114    	; 0x2050 <__uartHWSetBaudRate+0xf4>
    1fde:	ec a1       	ldd	r30, Y+36	; 0x24
    1fe0:	fd a1       	ldd	r31, Y+37	; 0x25
    1fe2:	80 81       	ld	r24, Z
    1fe4:	90 95       	com	r25
    1fe6:	89 23       	and	r24, r25
    1fe8:	80 83       	st	Z, r24
    1fea:	8f ef       	ldi	r24, 0xFF	; 255
    1fec:	e8 16       	cp	r14, r24
    1fee:	8f ef       	ldi	r24, 0xFF	; 255
    1ff0:	f8 06       	cpc	r15, r24
    1ff2:	8f ef       	ldi	r24, 0xFF	; 255
    1ff4:	08 07       	cpc	r16, r24
    1ff6:	8f ef       	ldi	r24, 0xFF	; 255
    1ff8:	18 07       	cpc	r17, r24
    1ffa:	19 f4       	brne	.+6      	; 0x2002 <__uartHWSetBaudRate+0xa6>
    1ffc:	21 e0       	ldi	r18, 0x01	; 1
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	1d c0       	rjmp	.+58     	; 0x203c <__uartHWSetBaudRate+0xe0>
    2002:	32 e0       	ldi	r19, 0x02	; 2
    2004:	ee 0c       	add	r14, r14
    2006:	ff 1c       	adc	r15, r15
    2008:	00 1f       	adc	r16, r16
    200a:	11 1f       	adc	r17, r17
    200c:	3a 95       	dec	r19
    200e:	d1 f7       	brne	.-12     	; 0x2004 <__uartHWSetBaudRate+0xa8>
    2010:	60 91 0c 02 	lds	r22, 0x020C
    2014:	70 91 0d 02 	lds	r23, 0x020D
    2018:	80 91 0e 02 	lds	r24, 0x020E
    201c:	90 91 0f 02 	lds	r25, 0x020F
    2020:	6e 0d       	add	r22, r14
    2022:	7f 1d       	adc	r23, r15
    2024:	80 1f       	adc	r24, r16
    2026:	91 1f       	adc	r25, r17
    2028:	ee 0c       	add	r14, r14
    202a:	ff 1c       	adc	r15, r15
    202c:	00 1f       	adc	r16, r16
    202e:	11 1f       	adc	r17, r17
    2030:	a8 01       	movw	r20, r16
    2032:	97 01       	movw	r18, r14
    2034:	0e 94 45 1a 	call	0x348a	; 0x348a <__udivmodsi4>
    2038:	21 50       	subi	r18, 0x01	; 1
    203a:	30 40       	sbci	r19, 0x00	; 0
    203c:	2c 15       	cp	r18, r12
    203e:	3d 05       	cpc	r19, r13
    2040:	38 f0       	brcs	.+14     	; 0x2050 <__uartHWSetBaudRate+0xf4>
    2042:	ec a1       	ldd	r30, Y+36	; 0x24
    2044:	fd a1       	ldd	r31, Y+37	; 0x25
    2046:	80 81       	ld	r24, Z
    2048:	98 a9       	ldd	r25, Y+48	; 0x30
    204a:	89 2b       	or	r24, r25
    204c:	80 83       	st	Z, r24
    204e:	69 01       	movw	r12, r18
    2050:	e8 a5       	ldd	r30, Y+40	; 0x28
    2052:	f9 a5       	ldd	r31, Y+41	; 0x29
    2054:	c0 82       	st	Z, r12
    2056:	ea a5       	ldd	r30, Y+42	; 0x2a
    2058:	fb a5       	ldd	r31, Y+43	; 0x2b
    205a:	d0 82       	st	Z, r13
    205c:	bf be       	out	0x3f, r11	; 63
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	ff 90       	pop	r15
    2068:	ef 90       	pop	r14
    206a:	df 90       	pop	r13
    206c:	cf 90       	pop	r12
    206e:	bf 90       	pop	r11
    2070:	08 95       	ret

00002072 <__uartHWOff>:
    2072:	dc 01       	movw	r26, r24
    2074:	96 96       	adiw	r26, 0x26	; 38
    2076:	ed 91       	ld	r30, X+
    2078:	fc 91       	ld	r31, X
    207a:	97 97       	sbiw	r26, 0x27	; 39
    207c:	80 81       	ld	r24, Z
    207e:	87 72       	andi	r24, 0x27	; 39
    2080:	80 83       	st	Z, r24
    2082:	d0 96       	adiw	r26, 0x30	; 48
    2084:	9c 91       	ld	r25, X
    2086:	d0 97       	sbiw	r26, 0x30	; 48
    2088:	99 23       	and	r25, r25
    208a:	41 f0       	breq	.+16     	; 0x209c <__uartHWOff+0x2a>
    208c:	94 96       	adiw	r26, 0x24	; 36
    208e:	ed 91       	ld	r30, X+
    2090:	fc 91       	ld	r31, X
    2092:	95 97       	sbiw	r26, 0x25	; 37
    2094:	80 81       	ld	r24, Z
    2096:	90 95       	com	r25
    2098:	89 23       	and	r24, r25
    209a:	80 83       	st	Z, r24
    209c:	08 95       	ret

0000209e <oneWireReceiveMode>:
    209e:	dc 01       	movw	r26, r24
    20a0:	57 96       	adiw	r26, 0x17	; 23
    20a2:	8c 91       	ld	r24, X
    20a4:	57 97       	sbiw	r26, 0x17	; 23
    20a6:	88 23       	and	r24, r24
    20a8:	71 f0       	breq	.+28     	; 0x20c6 <oneWireReceiveMode+0x28>
    20aa:	96 96       	adiw	r26, 0x26	; 38
    20ac:	ed 91       	ld	r30, X+
    20ae:	fc 91       	ld	r31, X
    20b0:	97 97       	sbiw	r26, 0x27	; 39
    20b2:	80 81       	ld	r24, Z
    20b4:	87 7b       	andi	r24, 0xB7	; 183
    20b6:	80 83       	st	Z, r24
    20b8:	96 96       	adiw	r26, 0x26	; 38
    20ba:	ed 91       	ld	r30, X+
    20bc:	fc 91       	ld	r31, X
    20be:	97 97       	sbiw	r26, 0x27	; 39
    20c0:	80 81       	ld	r24, Z
    20c2:	80 69       	ori	r24, 0x90	; 144
    20c4:	80 83       	st	Z, r24
    20c6:	08 95       	ret

000020c8 <__uartHWStartXmit>:
    20c8:	dc 01       	movw	r26, r24
    20ca:	9c 96       	adiw	r26, 0x2c	; 44
    20cc:	ed 91       	ld	r30, X+
    20ce:	fc 91       	ld	r31, X
    20d0:	9d 97       	sbiw	r26, 0x2d	; 45
    20d2:	60 83       	st	Z, r22
    20d4:	08 95       	ret

000020d6 <startXmitMode>:
    20d6:	dc 01       	movw	r26, r24
    20d8:	57 96       	adiw	r26, 0x17	; 23
    20da:	8c 91       	ld	r24, X
    20dc:	57 97       	sbiw	r26, 0x17	; 23
    20de:	88 23       	and	r24, r24
    20e0:	71 f0       	breq	.+28     	; 0x20fe <startXmitMode+0x28>
    20e2:	96 96       	adiw	r26, 0x26	; 38
    20e4:	ed 91       	ld	r30, X+
    20e6:	fc 91       	ld	r31, X
    20e8:	97 97       	sbiw	r26, 0x27	; 39
    20ea:	80 81       	ld	r24, Z
    20ec:	8f 76       	andi	r24, 0x6F	; 111
    20ee:	80 83       	st	Z, r24
    20f0:	96 96       	adiw	r26, 0x26	; 38
    20f2:	ed 91       	ld	r30, X+
    20f4:	fc 91       	ld	r31, X
    20f6:	97 97       	sbiw	r26, 0x27	; 39
    20f8:	80 81       	ld	r24, Z
    20fa:	88 64       	ori	r24, 0x48	; 72
    20fc:	80 83       	st	Z, r24
    20fe:	08 95       	ret

00002100 <__uartHWInit>:
    2100:	cf 93       	push	r28
    2102:	df 93       	push	r29
    2104:	ec 01       	movw	r28, r24
    2106:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <_uartSetBaudRate>
    210a:	8f 89       	ldd	r24, Y+23	; 0x17
    210c:	88 23       	and	r24, r24
    210e:	11 f0       	breq	.+4      	; 0x2114 <__uartHWInit+0x14>
    2110:	20 e9       	ldi	r18, 0x90	; 144
    2112:	0c c0       	rjmp	.+24     	; 0x212c <__uartHWInit+0x2c>
    2114:	8d 85       	ldd	r24, Y+13	; 0x0d
    2116:	9e 85       	ldd	r25, Y+14	; 0x0e
    2118:	89 2b       	or	r24, r25
    211a:	11 f0       	breq	.+4      	; 0x2120 <__uartHWInit+0x20>
    211c:	20 e9       	ldi	r18, 0x90	; 144
    211e:	01 c0       	rjmp	.+2      	; 0x2122 <__uartHWInit+0x22>
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	8f 85       	ldd	r24, Y+15	; 0x0f
    2124:	98 89       	ldd	r25, Y+16	; 0x10
    2126:	89 2b       	or	r24, r25
    2128:	09 f0       	breq	.+2      	; 0x212c <__uartHWInit+0x2c>
    212a:	28 64       	ori	r18, 0x48	; 72
    212c:	ee a1       	ldd	r30, Y+38	; 0x26
    212e:	ff a1       	ldd	r31, Y+39	; 0x27
    2130:	20 83       	st	Z, r18
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	08 95       	ret

00002138 <__uartReceiveService>:
    2138:	dc 01       	movw	r26, r24
    213a:	26 2f       	mov	r18, r22
    213c:	14 96       	adiw	r26, 0x04	; 4
    213e:	8d 91       	ld	r24, X+
    2140:	9c 91       	ld	r25, X
    2142:	15 97       	sbiw	r26, 0x05	; 5
    2144:	89 2b       	or	r24, r25
    2146:	59 f0       	breq	.+22     	; 0x215e <__uartReceiveService+0x26>
    2148:	14 96       	adiw	r26, 0x04	; 4
    214a:	ed 91       	ld	r30, X+
    214c:	fc 91       	ld	r31, X
    214e:	15 97       	sbiw	r26, 0x05	; 5
    2150:	16 96       	adiw	r26, 0x06	; 6
    2152:	6d 91       	ld	r22, X+
    2154:	7c 91       	ld	r23, X
    2156:	17 97       	sbiw	r26, 0x07	; 7
    2158:	82 2f       	mov	r24, r18
    215a:	09 95       	icall
    215c:	08 95       	ret
    215e:	90 96       	adiw	r26, 0x20	; 32
    2160:	ed 91       	ld	r30, X+
    2162:	fc 91       	ld	r31, X
    2164:	91 97       	sbiw	r26, 0x21	; 33
    2166:	cd 01       	movw	r24, r26
    2168:	09 95       	icall
    216a:	08 95       	ret

0000216c <__uartGetByte>:
    216c:	fc 01       	movw	r30, r24
    216e:	22 a1       	ldd	r18, Z+34	; 0x22
    2170:	33 a1       	ldd	r19, Z+35	; 0x23
    2172:	f9 01       	movw	r30, r18
    2174:	09 95       	icall
    2176:	08 95       	ret

00002178 <__uartGetByteUnbuffered>:
    2178:	fc 01       	movw	r30, r24
    217a:	4f b7       	in	r20, 0x3f	; 63
    217c:	f8 94       	cli
    217e:	23 85       	ldd	r18, Z+11	; 0x0b
    2180:	34 85       	ldd	r19, Z+12	; 0x0c
    2182:	8f ef       	ldi	r24, 0xFF	; 255
    2184:	9f ef       	ldi	r25, 0xFF	; 255
    2186:	94 87       	std	Z+12, r25	; 0x0c
    2188:	83 87       	std	Z+11, r24	; 0x0b
    218a:	4f bf       	out	0x3f, r20	; 63
    218c:	c9 01       	movw	r24, r18
    218e:	08 95       	ret

00002190 <__uartReceiveUnbuffered>:
    2190:	fc 01       	movw	r30, r24
    2192:	83 85       	ldd	r24, Z+11	; 0x0b
    2194:	94 85       	ldd	r25, Z+12	; 0x0c
    2196:	8f 5f       	subi	r24, 0xFF	; 255
    2198:	9f 4f       	sbci	r25, 0xFF	; 255
    219a:	29 f4       	brne	.+10     	; 0x21a6 <__uartReceiveUnbuffered+0x16>
    219c:	86 2f       	mov	r24, r22
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	94 87       	std	Z+12, r25	; 0x0c
    21a2:	83 87       	std	Z+11, r24	; 0x0b
    21a4:	08 95       	ret
    21a6:	80 85       	ldd	r24, Z+8	; 0x08
    21a8:	84 60       	ori	r24, 0x04	; 4
    21aa:	80 87       	std	Z+8, r24	; 0x08
    21ac:	85 ef       	ldi	r24, 0xF5	; 245
    21ae:	0e 94 4b 0b 	call	0x1696	; 0x1696 <setError>
    21b2:	08 95       	ret

000021b4 <_uartStartXmit>:
    21b4:	dc 01       	movw	r26, r24
    21b6:	19 96       	adiw	r26, 0x09	; 9
    21b8:	8d 91       	ld	r24, X+
    21ba:	9c 91       	ld	r25, X
    21bc:	1a 97       	sbiw	r26, 0x0a	; 10
    21be:	02 96       	adiw	r24, 0x02	; 2
    21c0:	fc 01       	movw	r30, r24
    21c2:	25 91       	lpm	r18, Z+
    21c4:	34 91       	lpm	r19, Z+
    21c6:	cd 01       	movw	r24, r26
    21c8:	f9 01       	movw	r30, r18
    21ca:	09 95       	icall
    21cc:	08 95       	ret

000021ce <_uartTransmitBlockStart>:
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	ec 01       	movw	r28, r24
    21d4:	88 85       	ldd	r24, Y+8	; 0x08
    21d6:	8e 7f       	andi	r24, 0xFE	; 254
    21d8:	88 87       	std	Y+8, r24	; 0x08
    21da:	e8 8d       	ldd	r30, Y+24	; 0x18
    21dc:	f9 8d       	ldd	r31, Y+25	; 0x19
    21de:	30 97       	sbiw	r30, 0x00	; 0
    21e0:	21 f0       	breq	.+8      	; 0x21ea <_uartTransmitBlockStart+0x1c>
    21e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21e4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21e6:	6f ef       	ldi	r22, 0xFF	; 255
    21e8:	09 95       	icall
    21ea:	e9 85       	ldd	r30, Y+9	; 0x09
    21ec:	fa 85       	ldd	r31, Y+10	; 0x0a
    21ee:	38 96       	adiw	r30, 0x08	; 8
    21f0:	25 91       	lpm	r18, Z+
    21f2:	34 91       	lpm	r19, Z+
    21f4:	21 15       	cp	r18, r1
    21f6:	31 05       	cpc	r19, r1
    21f8:	19 f0       	breq	.+6      	; 0x2200 <__stack+0x1>
    21fa:	ce 01       	movw	r24, r28
    21fc:	f9 01       	movw	r30, r18
    21fe:	09 95       	icall
    2200:	df 91       	pop	r29
    2202:	cf 91       	pop	r28
    2204:	08 95       	ret

00002206 <_uartTransmitBlockEnd>:
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	ec 01       	movw	r28, r24
    220c:	88 85       	ldd	r24, Y+8	; 0x08
    220e:	81 60       	ori	r24, 0x01	; 1
    2210:	88 87       	std	Y+8, r24	; 0x08
    2212:	e9 85       	ldd	r30, Y+9	; 0x09
    2214:	fa 85       	ldd	r31, Y+10	; 0x0a
    2216:	3a 96       	adiw	r30, 0x0a	; 10
    2218:	25 91       	lpm	r18, Z+
    221a:	34 91       	lpm	r19, Z+
    221c:	21 15       	cp	r18, r1
    221e:	31 05       	cpc	r19, r1
    2220:	19 f0       	breq	.+6      	; 0x2228 <_uartTransmitBlockEnd+0x22>
    2222:	ce 01       	movw	r24, r28
    2224:	f9 01       	movw	r30, r18
    2226:	09 95       	icall
    2228:	e8 8d       	ldd	r30, Y+24	; 0x18
    222a:	f9 8d       	ldd	r31, Y+25	; 0x19
    222c:	30 97       	sbiw	r30, 0x00	; 0
    222e:	21 f0       	breq	.+8      	; 0x2238 <_uartTransmitBlockEnd+0x32>
    2230:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2232:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	09 95       	icall
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	08 95       	ret

0000223e <_uartSendBuffer>:
    223e:	ef 92       	push	r14
    2240:	ff 92       	push	r15
    2242:	0f 93       	push	r16
    2244:	1f 93       	push	r17
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	8c 01       	movw	r16, r24
    224c:	7b 01       	movw	r14, r22
    224e:	ea 01       	movw	r28, r20
    2250:	0b c0       	rjmp	.+22     	; 0x2268 <_uartSendBuffer+0x2a>
    2252:	d7 01       	movw	r26, r14
    2254:	6d 91       	ld	r22, X+
    2256:	7d 01       	movw	r14, r26
    2258:	d8 01       	movw	r26, r16
    225a:	5c 96       	adiw	r26, 0x1c	; 28
    225c:	ed 91       	ld	r30, X+
    225e:	fc 91       	ld	r31, X
    2260:	5d 97       	sbiw	r26, 0x1d	; 29
    2262:	c8 01       	movw	r24, r16
    2264:	09 95       	icall
    2266:	21 97       	sbiw	r28, 0x01	; 1
    2268:	20 97       	sbiw	r28, 0x00	; 0
    226a:	99 f7       	brne	.-26     	; 0x2252 <_uartSendBuffer+0x14>
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	1f 91       	pop	r17
    2272:	0f 91       	pop	r16
    2274:	ff 90       	pop	r15
    2276:	ef 90       	pop	r14
    2278:	08 95       	ret

0000227a <_uartSendByte>:
    227a:	1f 93       	push	r17
    227c:	fc 01       	movw	r30, r24
    227e:	16 2f       	mov	r17, r22
    2280:	24 8d       	ldd	r18, Z+28	; 0x1c
    2282:	35 8d       	ldd	r19, Z+29	; 0x1d
    2284:	f9 01       	movw	r30, r18
    2286:	09 95       	icall
    2288:	81 2f       	mov	r24, r17
    228a:	1f 91       	pop	r17
    228c:	08 95       	ret

0000228e <__uartTransmitService>:
    228e:	fc 01       	movw	r30, r24
    2290:	26 8d       	ldd	r18, Z+30	; 0x1e
    2292:	37 8d       	ldd	r19, Z+31	; 0x1f
    2294:	f9 01       	movw	r30, r18
    2296:	09 95       	icall
    2298:	08 95       	ret

0000229a <__uartSendNextUnbuffered>:
    229a:	1f 93       	push	r17
    229c:	1f b7       	in	r17, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	0e 94 03 11 	call	0x2206	; 0x2206 <_uartTransmitBlockEnd>
    22a4:	1f bf       	out	0x3f, r17	; 63
    22a6:	1f 91       	pop	r17
    22a8:	08 95       	ret

000022aa <__uartSendUnbuffered>:
    22aa:	0f 93       	push	r16
    22ac:	1f 93       	push	r17
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	06 2f       	mov	r16, r22
    22b4:	ec 01       	movw	r28, r24
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <__uartSendUnbuffered+0x12>
    22b8:	0e 94 dd 11 	call	0x23ba	; 0x23ba <breathe>
    22bc:	88 85       	ldd	r24, Y+8	; 0x08
    22be:	80 ff       	sbrs	r24, 0
    22c0:	fb cf       	rjmp	.-10     	; 0x22b8 <__uartSendUnbuffered+0xe>
    22c2:	1f b7       	in	r17, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	ce 01       	movw	r24, r28
    22c8:	0e 94 e7 10 	call	0x21ce	; 0x21ce <_uartTransmitBlockStart>
    22cc:	ce 01       	movw	r24, r28
    22ce:	60 2f       	mov	r22, r16
    22d0:	0e 94 da 10 	call	0x21b4	; 0x21b4 <_uartStartXmit>
    22d4:	1f bf       	out	0x3f, r17	; 63
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	08 95       	ret

000022e0 <uartReceivePollingMode>:
    22e0:	dc 01       	movw	r26, r24
    22e2:	96 96       	adiw	r26, 0x26	; 38
    22e4:	ed 91       	ld	r30, X+
    22e6:	fc 91       	ld	r31, X
    22e8:	97 97       	sbiw	r26, 0x27	; 39
    22ea:	66 23       	and	r22, r22
    22ec:	19 f0       	breq	.+6      	; 0x22f4 <uartReceivePollingMode+0x14>
    22ee:	80 81       	ld	r24, Z
    22f0:	8f 77       	andi	r24, 0x7F	; 127
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <uartReceivePollingMode+0x18>
    22f4:	80 81       	ld	r24, Z
    22f6:	80 68       	ori	r24, 0x80	; 128
    22f8:	80 83       	st	Z, r24
    22fa:	08 95       	ret

000022fc <uartPollByte>:
    22fc:	dc 01       	movw	r26, r24
    22fe:	94 96       	adiw	r26, 0x24	; 36
    2300:	ed 91       	ld	r30, X+
    2302:	fc 91       	ld	r31, X
    2304:	95 97       	sbiw	r26, 0x25	; 37
    2306:	80 81       	ld	r24, Z
    2308:	87 fd       	sbrc	r24, 7
    230a:	03 c0       	rjmp	.+6      	; 0x2312 <uartPollByte+0x16>
    230c:	2f ef       	ldi	r18, 0xFF	; 255
    230e:	3f ef       	ldi	r19, 0xFF	; 255
    2310:	07 c0       	rjmp	.+14     	; 0x2320 <uartPollByte+0x24>
    2312:	9c 96       	adiw	r26, 0x2c	; 44
    2314:	ed 91       	ld	r30, X+
    2316:	fc 91       	ld	r31, X
    2318:	9d 97       	sbiw	r26, 0x2d	; 45
    231a:	80 81       	ld	r24, Z
    231c:	28 2f       	mov	r18, r24
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	c9 01       	movw	r24, r18
    2322:	08 95       	ret

00002324 <clockHasElapsed>:
    2324:	0f 93       	push	r16
    2326:	1f 93       	push	r17
    2328:	00 e0       	ldi	r16, 0x00	; 0
    232a:	10 e0       	ldi	r17, 0x00	; 0
    232c:	0e 94 9b 11 	call	0x2336	; 0x2336 <clockHasElapsedGetOverflow>
    2330:	1f 91       	pop	r17
    2332:	0f 91       	pop	r16
    2334:	08 95       	ret

00002336 <clockHasElapsedGetOverflow>:
    2336:	8f 92       	push	r8
    2338:	9f 92       	push	r9
    233a:	af 92       	push	r10
    233c:	bf 92       	push	r11
    233e:	cf 92       	push	r12
    2340:	df 92       	push	r13
    2342:	ef 92       	push	r14
    2344:	ff 92       	push	r15
    2346:	0f 93       	push	r16
    2348:	1f 93       	push	r17
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	6b 01       	movw	r12, r22
    2350:	7c 01       	movw	r14, r24
    2352:	49 01       	movw	r8, r18
    2354:	5a 01       	movw	r10, r20
    2356:	e8 01       	movw	r28, r16
    2358:	0e 94 c8 07 	call	0xf90	; 0xf90 <clockGetus>
    235c:	6c 19       	sub	r22, r12
    235e:	7d 09       	sbc	r23, r13
    2360:	8e 09       	sbc	r24, r14
    2362:	9f 09       	sbc	r25, r15
    2364:	68 15       	cp	r22, r8
    2366:	79 05       	cpc	r23, r9
    2368:	8a 05       	cpc	r24, r10
    236a:	9b 05       	cpc	r25, r11
    236c:	68 f0       	brcs	.+26     	; 0x2388 <clockHasElapsedGetOverflow+0x52>
    236e:	01 15       	cp	r16, r1
    2370:	11 05       	cpc	r17, r1
    2372:	41 f0       	breq	.+16     	; 0x2384 <clockHasElapsedGetOverflow+0x4e>
    2374:	68 19       	sub	r22, r8
    2376:	79 09       	sbc	r23, r9
    2378:	8a 09       	sbc	r24, r10
    237a:	9b 09       	sbc	r25, r11
    237c:	68 83       	st	Y, r22
    237e:	79 83       	std	Y+1, r23	; 0x01
    2380:	8a 83       	std	Y+2, r24	; 0x02
    2382:	9b 83       	std	Y+3, r25	; 0x03
    2384:	8f ef       	ldi	r24, 0xFF	; 255
    2386:	0c c0       	rjmp	.+24     	; 0x23a0 <clockHasElapsedGetOverflow+0x6a>
    2388:	01 15       	cp	r16, r1
    238a:	11 05       	cpc	r17, r1
    238c:	41 f0       	breq	.+16     	; 0x239e <clockHasElapsedGetOverflow+0x68>
    238e:	86 1a       	sub	r8, r22
    2390:	97 0a       	sbc	r9, r23
    2392:	a8 0a       	sbc	r10, r24
    2394:	b9 0a       	sbc	r11, r25
    2396:	88 82       	st	Y, r8
    2398:	99 82       	std	Y+1, r9	; 0x01
    239a:	aa 82       	std	Y+2, r10	; 0x02
    239c:	bb 82       	std	Y+3, r11	; 0x03
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	1f 91       	pop	r17
    23a6:	0f 91       	pop	r16
    23a8:	ff 90       	pop	r15
    23aa:	ef 90       	pop	r14
    23ac:	df 90       	pop	r13
    23ae:	cf 90       	pop	r12
    23b0:	bf 90       	pop	r11
    23b2:	af 90       	pop	r10
    23b4:	9f 90       	pop	r9
    23b6:	8f 90       	pop	r8
    23b8:	08 95       	ret

000023ba <breathe>:
    23ba:	8f b7       	in	r24, 0x3f	; 63
    23bc:	78 94       	sei
	...
    23ca:	00 00       	nop
    23cc:	8f bf       	out	0x3f, r24	; 63
    23ce:	08 95       	ret

000023d0 <pin_low>:
    23d0:	cf 93       	push	r28
    23d2:	df 93       	push	r29
    23d4:	9c 01       	movw	r18, r24
    23d6:	00 97       	sbiw	r24, 0x00	; 0
    23d8:	e9 f0       	breq	.+58     	; 0x2414 <pin_low+0x44>
    23da:	fc 01       	movw	r30, r24
    23dc:	85 91       	lpm	r24, Z+
    23de:	94 91       	lpm	r25, Z+
    23e0:	fc 01       	movw	r30, r24
    23e2:	a5 91       	lpm	r26, Z+
    23e4:	b4 91       	lpm	r27, Z+
    23e6:	02 96       	adiw	r24, 0x02	; 2
    23e8:	fc 01       	movw	r30, r24
    23ea:	c5 91       	lpm	r28, Z+
    23ec:	d4 91       	lpm	r29, Z+
    23ee:	2e 5f       	subi	r18, 0xFE	; 254
    23f0:	3f 4f       	sbci	r19, 0xFF	; 255
    23f2:	f9 01       	movw	r30, r18
    23f4:	24 91       	lpm	r18, Z+
    23f6:	88 81       	ld	r24, Y
    23f8:	82 23       	and	r24, r18
    23fa:	49 f0       	breq	.+18     	; 0x240e <pin_low+0x3e>
    23fc:	9f b7       	in	r25, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	8c 91       	ld	r24, X
    2402:	20 95       	com	r18
    2404:	82 23       	and	r24, r18
    2406:	8c 93       	st	X, r24
    2408:	9f bf       	out	0x3f, r25	; 63
    240a:	00 00       	nop
    240c:	03 c0       	rjmp	.+6      	; 0x2414 <pin_low+0x44>
    240e:	87 ef       	ldi	r24, 0xF7	; 247
    2410:	0e 94 4b 0b 	call	0x1696	; 0x1696 <setError>
    2414:	df 91       	pop	r29
    2416:	cf 91       	pop	r28
    2418:	08 95       	ret

0000241a <pin_high>:
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
    241e:	9c 01       	movw	r18, r24
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	e1 f0       	breq	.+56     	; 0x245c <pin_high+0x42>
    2424:	fc 01       	movw	r30, r24
    2426:	85 91       	lpm	r24, Z+
    2428:	94 91       	lpm	r25, Z+
    242a:	fc 01       	movw	r30, r24
    242c:	a5 91       	lpm	r26, Z+
    242e:	b4 91       	lpm	r27, Z+
    2430:	02 96       	adiw	r24, 0x02	; 2
    2432:	fc 01       	movw	r30, r24
    2434:	c5 91       	lpm	r28, Z+
    2436:	d4 91       	lpm	r29, Z+
    2438:	2e 5f       	subi	r18, 0xFE	; 254
    243a:	3f 4f       	sbci	r19, 0xFF	; 255
    243c:	f9 01       	movw	r30, r18
    243e:	24 91       	lpm	r18, Z+
    2440:	88 81       	ld	r24, Y
    2442:	82 23       	and	r24, r18
    2444:	41 f0       	breq	.+16     	; 0x2456 <pin_high+0x3c>
    2446:	9f b7       	in	r25, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	8c 91       	ld	r24, X
    244c:	82 2b       	or	r24, r18
    244e:	8c 93       	st	X, r24
    2450:	9f bf       	out	0x3f, r25	; 63
    2452:	00 00       	nop
    2454:	03 c0       	rjmp	.+6      	; 0x245c <pin_high+0x42>
    2456:	87 ef       	ldi	r24, 0xF7	; 247
    2458:	0e 94 4b 0b 	call	0x1696	; 0x1696 <setError>
    245c:	df 91       	pop	r29
    245e:	cf 91       	pop	r28
    2460:	08 95       	ret

00002462 <pin_set>:
    2462:	66 23       	and	r22, r22
    2464:	19 f0       	breq	.+6      	; 0x246c <pin_set+0xa>
    2466:	0e 94 0d 12 	call	0x241a	; 0x241a <pin_high>
    246a:	08 95       	ret
    246c:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <pin_low>
    2470:	08 95       	ret

00002472 <__scheduleUpdate>:
	uint16_t rtn = MIN(ticks,CLOCK_TOP);
	return rtn;
}

// called under compare interrupts when there is something in the queue
static void __scheduleUpdate(void){
    2472:	2f 92       	push	r2
    2474:	3f 92       	push	r3
    2476:	4f 92       	push	r4
    2478:	5f 92       	push	r5
    247a:	6f 92       	push	r6
    247c:	7f 92       	push	r7
    247e:	8f 92       	push	r8
    2480:	9f 92       	push	r9
    2482:	af 92       	push	r10
    2484:	bf 92       	push	r11
    2486:	cf 92       	push	r12
    2488:	df 92       	push	r13
    248a:	ef 92       	push	r14
    248c:	ff 92       	push	r15
    248e:	0f 93       	push	r16
    2490:	1f 93       	push	r17
    2492:	df 93       	push	r29
    2494:	cf 93       	push	r28
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	27 97       	sbiw	r28, 0x07	; 7
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	f8 94       	cli
    24a0:	de bf       	out	0x3e, r29	; 62
    24a2:	0f be       	out	0x3f, r0	; 63
    24a4:	cd bf       	out	0x3d, r28	; 61
	// Dont call me again - turn off compare interrupts
	SCHEDULER_INT_DISABLE;
    24a6:	80 91 73 00 	lds	r24, 0x0073
    24aa:	8b 7f       	andi	r24, 0xFB	; 251
    24ac:	80 93 73 00 	sts	0x0073, r24

	// Turn interrupts back on
	INTERRUPTABLE_SECTION{
    24b0:	2f b7       	in	r18, 0x3f	; 63
    24b2:	2f 83       	std	Y+7, r18	; 0x07
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
    24b4:	78 94       	sei
		__running = TRUE;
    24b6:	8f ef       	ldi	r24, 0xFF	; 255
    24b8:	80 93 27 04 	sts	0x0427, r24
		TICK_COUNT lowest;
		do{
			int slot;
			__recheck = FALSE;
    24bc:	10 92 28 04 	sts	0x0428, r1
			JOB* job;
			lowest=0;
			for(slot=maxJobs-1, job=&__queue[slot]; slot>=0; slot--, job--){
    24c0:	80 91 f3 02 	lds	r24, 0x02F3
    24c4:	a8 2f       	mov	r26, r24
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	11 97       	sbiw	r26, 0x01	; 1
    24ca:	be 83       	std	Y+6, r27	; 0x06
    24cc:	ad 83       	std	Y+5, r26	; 0x05
    24ce:	ed e0       	ldi	r30, 0x0D	; 13
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	ae 9f       	mul	r26, r30
    24d4:	50 01       	movw	r10, r0
    24d6:	af 9f       	mul	r26, r31
    24d8:	b0 0c       	add	r11, r0
    24da:	be 9f       	mul	r27, r30
    24dc:	b0 0c       	add	r11, r0
    24de:	11 24       	eor	r1, r1
    24e0:	2a e1       	ldi	r18, 0x1A	; 26
    24e2:	34 e0       	ldi	r19, 0x04	; 4
    24e4:	a2 0e       	add	r10, r18
    24e6:	b3 1e       	adc	r11, r19
    24e8:	66 24       	eor	r6, r6
    24ea:	77 24       	eor	r7, r7
    24ec:	43 01       	movw	r8, r6
    24ee:	5a c0       	rjmp	.+180    	; 0x25a4 <__scheduleUpdate+0x132>
				if(job->used){
    24f0:	d5 01       	movw	r26, r10
    24f2:	8c 91       	ld	r24, X
    24f4:	88 23       	and	r24, r24
    24f6:	09 f4       	brne	.+2      	; 0x24fa <__scheduleUpdate+0x88>
    24f8:	4c c0       	rjmp	.+152    	; 0x2592 <__scheduleUpdate+0x120>
					// check if time has elapsed
					TICK_COUNT overflow;	// how many us the timer has overshot when it should have happened
					TICK_COUNT start=job->start;
    24fa:	19 96       	adiw	r26, 0x09	; 9
    24fc:	2d 90       	ld	r2, X+
    24fe:	3d 90       	ld	r3, X+
    2500:	4d 90       	ld	r4, X+
    2502:	5c 90       	ld	r5, X
    2504:	1c 97       	sbiw	r26, 0x0c	; 12
					TICK_COUNT delay=job->delay;
    2506:	15 96       	adiw	r26, 0x05	; 5
    2508:	cd 90       	ld	r12, X+
    250a:	dd 90       	ld	r13, X+
    250c:	ed 90       	ld	r14, X+
    250e:	fc 90       	ld	r15, X
    2510:	18 97       	sbiw	r26, 0x08	; 8
					if(clockHasElapsedGetOverflow(start, delay, &overflow)){
    2512:	c2 01       	movw	r24, r4
    2514:	b1 01       	movw	r22, r2
    2516:	a7 01       	movw	r20, r14
    2518:	96 01       	movw	r18, r12
    251a:	8e 01       	movw	r16, r28
    251c:	0f 5f       	subi	r16, 0xFF	; 255
    251e:	1f 4f       	sbci	r17, 0xFF	; 255
    2520:	0e 94 9b 11 	call	0x2336	; 0x2336 <clockHasElapsedGetOverflow>
    2524:	88 23       	and	r24, r24
    2526:	19 f1       	breq	.+70     	; 0x256e <__scheduleUpdate+0xfc>
						SchedulerCallback callback = job->callback;
    2528:	d5 01       	movw	r26, r10
    252a:	11 96       	adiw	r26, 0x01	; 1
    252c:	ed 91       	ld	r30, X+
    252e:	fc 91       	ld	r31, X
    2530:	12 97       	sbiw	r26, 0x02	; 2
						SchedulerData data = job->data;
    2532:	13 96       	adiw	r26, 0x03	; 3
    2534:	8d 91       	ld	r24, X+
    2536:	9c 91       	ld	r25, X
    2538:	14 97       	sbiw	r26, 0x04	; 4

						// Mark this job as unused. No more references shoud be made to job->xxxx
						job->used = FALSE;
    253a:	1c 92       	st	X, r1
						--__numJobs;
    253c:	20 91 29 04 	lds	r18, 0x0429
    2540:	30 91 2a 04 	lds	r19, 0x042A
    2544:	21 50       	subi	r18, 0x01	; 1
    2546:	30 40       	sbci	r19, 0x00	; 0
    2548:	30 93 2a 04 	sts	0x042A, r19
    254c:	20 93 29 04 	sts	0x0429, r18

						// Run the job with interrupts enabled
						callback(data,start+delay,overflow);
    2550:	c2 0c       	add	r12, r2
    2552:	d3 1c       	adc	r13, r3
    2554:	e4 1c       	adc	r14, r4
    2556:	f5 1c       	adc	r15, r5
    2558:	09 81       	ldd	r16, Y+1	; 0x01
    255a:	1a 81       	ldd	r17, Y+2	; 0x02
    255c:	2b 81       	ldd	r18, Y+3	; 0x03
    255e:	3c 81       	ldd	r19, Y+4	; 0x04
    2560:	b7 01       	movw	r22, r14
    2562:	a6 01       	movw	r20, r12
    2564:	09 95       	icall


						// Force another loop as the time taken may mean
						// something else can now run
						__recheck = TRUE;
    2566:	bf ef       	ldi	r27, 0xFF	; 255
    2568:	b0 93 28 04 	sts	0x0428, r27
    256c:	12 c0       	rjmp	.+36     	; 0x2592 <__scheduleUpdate+0x120>
					}else{
					   // overflow has the remaining number of microseconds to wait
					   if(lowest==0 || overflow < lowest){
    256e:	61 14       	cp	r6, r1
    2570:	71 04       	cpc	r7, r1
    2572:	81 04       	cpc	r8, r1
    2574:	91 04       	cpc	r9, r1
    2576:	49 f0       	breq	.+18     	; 0x258a <__scheduleUpdate+0x118>
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	9a 81       	ldd	r25, Y+2	; 0x02
    257c:	ab 81       	ldd	r26, Y+3	; 0x03
    257e:	bc 81       	ldd	r27, Y+4	; 0x04
    2580:	86 15       	cp	r24, r6
    2582:	97 05       	cpc	r25, r7
    2584:	a8 05       	cpc	r26, r8
    2586:	b9 05       	cpc	r27, r9
    2588:	20 f4       	brcc	.+8      	; 0x2592 <__scheduleUpdate+0x120>
						   lowest = overflow;
    258a:	69 80       	ldd	r6, Y+1	; 0x01
    258c:	7a 80       	ldd	r7, Y+2	; 0x02
    258e:	8b 80       	ldd	r8, Y+3	; 0x03
    2590:	9c 80       	ldd	r9, Y+4	; 0x04
		do{
			int slot;
			__recheck = FALSE;
			JOB* job;
			lowest=0;
			for(slot=maxJobs-1, job=&__queue[slot]; slot>=0; slot--, job--){
    2592:	ed 81       	ldd	r30, Y+5	; 0x05
    2594:	fe 81       	ldd	r31, Y+6	; 0x06
    2596:	31 97       	sbiw	r30, 0x01	; 1
    2598:	fe 83       	std	Y+6, r31	; 0x06
    259a:	ed 83       	std	Y+5, r30	; 0x05
    259c:	23 ef       	ldi	r18, 0xF3	; 243
    259e:	3f ef       	ldi	r19, 0xFF	; 255
    25a0:	a2 0e       	add	r10, r18
    25a2:	b3 1e       	adc	r11, r19
    25a4:	8d 81       	ldd	r24, Y+5	; 0x05
    25a6:	9e 81       	ldd	r25, Y+6	; 0x06
    25a8:	8f 5f       	subi	r24, 0xFF	; 255
    25aa:	9f 4f       	sbci	r25, 0xFF	; 255
    25ac:	09 f0       	breq	.+2      	; 0x25b0 <__scheduleUpdate+0x13e>
    25ae:	a0 cf       	rjmp	.-192    	; 0x24f0 <__scheduleUpdate+0x7e>
						   lowest = overflow;
					   }
					}
				}
			}
		}while( __recheck);
    25b0:	80 91 28 04 	lds	r24, 0x0428
    25b4:	88 23       	and	r24, r24
    25b6:	09 f0       	breq	.+2      	; 0x25ba <__scheduleUpdate+0x148>
    25b8:	81 cf       	rjmp	.-254    	; 0x24bc <__scheduleUpdate+0x4a>
		__running=FALSE;
    25ba:	10 92 27 04 	sts	0x0427, r1

		if(__numJobs > 0){
    25be:	80 91 29 04 	lds	r24, 0x0429
    25c2:	90 91 2a 04 	lds	r25, 0x042A
    25c6:	18 16       	cp	r1, r24
    25c8:	19 06       	cpc	r1, r25
    25ca:	4c f5       	brge	.+82     	; 0x261e <__scheduleUpdate+0x1ac>
			// Decide when we need to interrupt again
			uint16_t compare = calcTicks(lowest) + CLOCK_COUNTER;
    25cc:	20 91 24 01 	lds	r18, 0x0124
    25d0:	30 91 25 01 	lds	r19, 0x0125
    25d4:	d4 01       	movw	r26, r8
    25d6:	c3 01       	movw	r24, r6
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	aa 1f       	adc	r26, r26
    25de:	bb 1f       	adc	r27, r27
    25e0:	81 30       	cpi	r24, 0x01	; 1
    25e2:	ea ef       	ldi	r30, 0xFA	; 250
    25e4:	9e 07       	cpc	r25, r30
    25e6:	e0 e0       	ldi	r30, 0x00	; 0
    25e8:	ae 07       	cpc	r26, r30
    25ea:	e0 e0       	ldi	r30, 0x00	; 0
    25ec:	be 07       	cpc	r27, r30
    25ee:	20 f0       	brcs	.+8      	; 0x25f8 <__scheduleUpdate+0x186>
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	9a ef       	ldi	r25, 0xFA	; 250
    25f4:	a0 e0       	ldi	r26, 0x00	; 0
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	82 0f       	add	r24, r18
    25fa:	93 1f       	adc	r25, r19
    25fc:	02 c0       	rjmp	.+4      	; 0x2602 <__scheduleUpdate+0x190>
			while(compare >= CLOCK_TOP){
				compare -= CLOCK_TOP;
    25fe:	80 50       	subi	r24, 0x00	; 0
    2600:	9a 4f       	sbci	r25, 0xFA	; 250
		__running=FALSE;

		if(__numJobs > 0){
			// Decide when we need to interrupt again
			uint16_t compare = calcTicks(lowest) + CLOCK_COUNTER;
			while(compare >= CLOCK_TOP){
    2602:	fa ef       	ldi	r31, 0xFA	; 250
    2604:	80 30       	cpi	r24, 0x00	; 0
    2606:	9f 07       	cpc	r25, r31
    2608:	d0 f7       	brcc	.-12     	; 0x25fe <__scheduleUpdate+0x18c>
				compare -= CLOCK_TOP;
			}
			// Set when next interrupt should occur
			SCHEDULER_THRESHOLD = compare;
    260a:	90 93 2b 01 	sts	0x012B, r25
    260e:	80 93 2a 01 	sts	0x012A, r24
			// Clear any pending interrupt
			SCHEDULER_INT_CLEAR;
    2612:	d2 9a       	sbi	0x1a, 2	; 26
			// Look for new interrupts
			SCHEDULER_INT_ENABLE;
    2614:	80 91 73 00 	lds	r24, 0x0073
    2618:	84 60       	ori	r24, 0x04	; 4
    261a:	80 93 73 00 	sts	0x0073, r24
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    261e:	2f 81       	ldd	r18, Y+7	; 0x07
    2620:	2f bf       	out	0x3f, r18	; 63
		}

	} // Restore previous interrupt enable
}
    2622:	27 96       	adiw	r28, 0x07	; 7
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	1f 91       	pop	r17
    2634:	0f 91       	pop	r16
    2636:	ff 90       	pop	r15
    2638:	ef 90       	pop	r14
    263a:	df 90       	pop	r13
    263c:	cf 90       	pop	r12
    263e:	bf 90       	pop	r11
    2640:	af 90       	pop	r10
    2642:	9f 90       	pop	r9
    2644:	8f 90       	pop	r8
    2646:	7f 90       	pop	r7
    2648:	6f 90       	pop	r6
    264a:	5f 90       	pop	r5
    264c:	4f 90       	pop	r4
    264e:	3f 90       	pop	r3
    2650:	2f 90       	pop	r2
    2652:	08 95       	ret

00002654 <__vector_48>:
}



// ISR for scheduler match - check if another job needs to run
ISR(TIMER5_COMPB_vect) {
    2654:	1f 92       	push	r1
    2656:	0f 92       	push	r0
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	0f 92       	push	r0
    265c:	11 24       	eor	r1, r1
    265e:	2f 93       	push	r18
    2660:	3f 93       	push	r19
    2662:	4f 93       	push	r20
    2664:	5f 93       	push	r21
    2666:	6f 93       	push	r22
    2668:	7f 93       	push	r23
    266a:	8f 93       	push	r24
    266c:	9f 93       	push	r25
    266e:	af 93       	push	r26
    2670:	bf 93       	push	r27
    2672:	ef 93       	push	r30
    2674:	ff 93       	push	r31
	__scheduleUpdate();
    2676:	0e 94 39 12 	call	0x2472	; 0x2472 <__scheduleUpdate>
}
    267a:	ff 91       	pop	r31
    267c:	ef 91       	pop	r30
    267e:	bf 91       	pop	r27
    2680:	af 91       	pop	r26
    2682:	9f 91       	pop	r25
    2684:	8f 91       	pop	r24
    2686:	7f 91       	pop	r23
    2688:	6f 91       	pop	r22
    268a:	5f 91       	pop	r21
    268c:	4f 91       	pop	r20
    268e:	3f 91       	pop	r19
    2690:	2f 91       	pop	r18
    2692:	0f 90       	pop	r0
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	0f 90       	pop	r0
    2698:	1f 90       	pop	r1
    269a:	18 95       	reti

0000269c <scheduleJob>:
// schedule a new job
// callback Is the function to be run at a later date
// data is a block of data to be passed into the callback
// start (in us) Is the start time of the delay
// delay (in us) Is the amount to delay by
void scheduleJob(SchedulerCallback callback, SchedulerData data, TICK_COUNT start, TICK_COUNT delay){
    269c:	2f 92       	push	r2
    269e:	3f 92       	push	r3
    26a0:	4f 92       	push	r4
    26a2:	5f 92       	push	r5
    26a4:	6f 92       	push	r6
    26a6:	7f 92       	push	r7
    26a8:	8f 92       	push	r8
    26aa:	9f 92       	push	r9
    26ac:	af 92       	push	r10
    26ae:	bf 92       	push	r11
    26b0:	cf 92       	push	r12
    26b2:	df 92       	push	r13
    26b4:	ef 92       	push	r14
    26b6:	ff 92       	push	r15
    26b8:	0f 93       	push	r16
    26ba:	1f 93       	push	r17
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <scheduleJob+0x26>
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <scheduleJob+0x28>
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	1c 01       	movw	r2, r24
    26ca:	2b 01       	movw	r4, r22
    26cc:	49 01       	movw	r8, r18
    26ce:	5a 01       	movw	r10, r20
    26d0:	67 01       	movw	r12, r14
    26d2:	78 01       	movw	r14, r16
	boolean doItNow = FALSE;

 	if(delay < 1000U){
    26d4:	88 ee       	ldi	r24, 0xE8	; 232
    26d6:	c8 16       	cp	r12, r24
    26d8:	83 e0       	ldi	r24, 0x03	; 3
    26da:	d8 06       	cpc	r13, r24
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	e8 06       	cpc	r14, r24
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	f8 06       	cpc	r15, r24
    26e4:	38 f4       	brcc	.+14     	; 0x26f4 <scheduleJob+0x58>
		// it needs to happen now as the delay is less than the heartbeat timer interrupt of 1ms
		if(__running){
    26e6:	80 91 27 04 	lds	r24, 0x0427
    26ea:	88 23       	and	r24, r24
    26ec:	c1 f1       	breq	.+112    	; 0x275e <scheduleJob+0xc2>
			// make sure we do another loop of __scheduleUpdate to find it
			__recheck=TRUE;
    26ee:	8f ef       	ldi	r24, 0xFF	; 255
    26f0:	80 93 28 04 	sts	0x0428, r24

	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
    26f4:	6f b7       	in	r22, 0x3f	; 63
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
    26f6:	f8 94       	cli
			for(slot=0; slot < maxJobs; slot++){
    26f8:	80 91 f3 02 	lds	r24, 0x02F3
    26fc:	48 2f       	mov	r20, r24
    26fe:	50 e0       	ldi	r21, 0x00	; 0
    2700:	aa e1       	ldi	r26, 0x1A	; 26
    2702:	b4 e0       	ldi	r27, 0x04	; 4
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	20 c0       	rjmp	.+64     	; 0x274a <scheduleJob+0xae>

	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
    270a:	fd 01       	movw	r30, r26
			for(slot=0; slot < maxJobs; slot++){
				JOB* job = &__queue[slot];
				if(!job->used){
    270c:	8c 91       	ld	r24, X
    270e:	1d 96       	adiw	r26, 0x0d	; 13
    2710:	88 23       	and	r24, r24
    2712:	c9 f4       	brne	.+50     	; 0x2746 <scheduleJob+0xaa>
					job->used = TRUE;
    2714:	8f ef       	ldi	r24, 0xFF	; 255
    2716:	80 83       	st	Z, r24
					job->callback = callback;
    2718:	32 82       	std	Z+2, r3	; 0x02
    271a:	21 82       	std	Z+1, r2	; 0x01
					job->data = data;
    271c:	54 82       	std	Z+4, r5	; 0x04
    271e:	43 82       	std	Z+3, r4	; 0x03
					job->start=start;
    2720:	81 86       	std	Z+9, r8	; 0x09
    2722:	92 86       	std	Z+10, r9	; 0x0a
    2724:	a3 86       	std	Z+11, r10	; 0x0b
    2726:	b4 86       	std	Z+12, r11	; 0x0c
					job->delay=delay;
    2728:	c5 82       	std	Z+5, r12	; 0x05
    272a:	d6 82       	std	Z+6, r13	; 0x06
    272c:	e7 82       	std	Z+7, r14	; 0x07
    272e:	f0 86       	std	Z+8, r15	; 0x08
					found=TRUE;
					__numJobs++;
    2730:	80 91 29 04 	lds	r24, 0x0429
    2734:	90 91 2a 04 	lds	r25, 0x042A
    2738:	01 96       	adiw	r24, 0x01	; 1
    273a:	90 93 2a 04 	sts	0x042A, r25
    273e:	80 93 29 04 	sts	0x0429, r24
    2742:	8f ef       	ldi	r24, 0xFF	; 255
    2744:	06 c0       	rjmp	.+12     	; 0x2752 <scheduleJob+0xb6>
	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
			for(slot=0; slot < maxJobs; slot++){
    2746:	2f 5f       	subi	r18, 0xFF	; 255
    2748:	3f 4f       	sbci	r19, 0xFF	; 255
    274a:	24 17       	cp	r18, r20
    274c:	35 07       	cpc	r19, r21
    274e:	ec f2       	brlt	.-70     	; 0x270a <scheduleJob+0x6e>
    2750:	80 e0       	ldi	r24, 0x00	; 0
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    2752:	6f bf       	out	0x3f, r22	; 63
					break;
				}
			}
		}

		if(!found){
    2754:	88 23       	and	r24, r24
    2756:	f1 f4       	brne	.+60     	; 0x2794 <scheduleJob+0xf8>
			// the queue is exhausted
			setError(SCHEDULER_EXHAUSTED);
    2758:	8f ef       	ldi	r24, 0xFF	; 255
    275a:	0e 94 4b 0b 	call	0x1696	; 0x1696 <setError>
	if(doItNow){
		// we need to do it now
		TICK_COUNT overflow;

		// wait for expiry
		while(!clockHasElapsedGetOverflow(start, delay, &overflow));
    275e:	3e 01       	movw	r6, r28
    2760:	08 94       	sec
    2762:	61 1c       	adc	r6, r1
    2764:	71 1c       	adc	r7, r1
    2766:	c5 01       	movw	r24, r10
    2768:	b4 01       	movw	r22, r8
    276a:	a7 01       	movw	r20, r14
    276c:	96 01       	movw	r18, r12
    276e:	83 01       	movw	r16, r6
    2770:	0e 94 9b 11 	call	0x2336	; 0x2336 <clockHasElapsedGetOverflow>
    2774:	88 23       	and	r24, r24
    2776:	b9 f3       	breq	.-18     	; 0x2766 <scheduleJob+0xca>

		// call the queued routine
		callback(data,start+delay,overflow);
    2778:	c8 0c       	add	r12, r8
    277a:	d9 1c       	adc	r13, r9
    277c:	ea 1c       	adc	r14, r10
    277e:	fb 1c       	adc	r15, r11
    2780:	09 81       	ldd	r16, Y+1	; 0x01
    2782:	1a 81       	ldd	r17, Y+2	; 0x02
    2784:	2b 81       	ldd	r18, Y+3	; 0x03
    2786:	3c 81       	ldd	r19, Y+4	; 0x04
    2788:	c2 01       	movw	r24, r4
    278a:	b7 01       	movw	r22, r14
    278c:	a6 01       	movw	r20, r12
    278e:	f1 01       	movw	r30, r2
    2790:	09 95       	icall
    2792:	06 c0       	rjmp	.+12     	; 0x27a0 <scheduleJob+0x104>
	}else{
		if(!__running){
    2794:	80 91 27 04 	lds	r24, 0x0427
    2798:	88 23       	and	r24, r24
    279a:	11 f4       	brne	.+4      	; 0x27a0 <scheduleJob+0x104>
			__scheduleUpdate();
    279c:	0e 94 39 12 	call	0x2472	; 0x2472 <__scheduleUpdate>
		}
	}
}
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	cf 91       	pop	r28
    27aa:	df 91       	pop	r29
    27ac:	1f 91       	pop	r17
    27ae:	0f 91       	pop	r16
    27b0:	ff 90       	pop	r15
    27b2:	ef 90       	pop	r14
    27b4:	df 90       	pop	r13
    27b6:	cf 90       	pop	r12
    27b8:	bf 90       	pop	r11
    27ba:	af 90       	pop	r10
    27bc:	9f 90       	pop	r9
    27be:	8f 90       	pop	r8
    27c0:	7f 90       	pop	r7
    27c2:	6f 90       	pop	r6
    27c4:	5f 90       	pop	r5
    27c6:	4f 90       	pop	r4
    27c8:	3f 90       	pop	r3
    27ca:	2f 90       	pop	r2
    27cc:	08 95       	ret

000027ce <vfprintf>:
    27ce:	a1 e1       	ldi	r26, 0x11	; 17
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	ed ee       	ldi	r30, 0xED	; 237
    27d4:	f3 e1       	ldi	r31, 0x13	; 19
    27d6:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__prologue_saves__>
    27da:	3c 01       	movw	r6, r24
    27dc:	7f 87       	std	Y+15, r23	; 0x0f
    27de:	6e 87       	std	Y+14, r22	; 0x0e
    27e0:	6a 01       	movw	r12, r20
    27e2:	fc 01       	movw	r30, r24
    27e4:	17 82       	std	Z+7, r1	; 0x07
    27e6:	16 82       	std	Z+6, r1	; 0x06
    27e8:	83 81       	ldd	r24, Z+3	; 0x03
    27ea:	81 fd       	sbrc	r24, 1
    27ec:	03 c0       	rjmp	.+6      	; 0x27f4 <vfprintf+0x26>
    27ee:	6f ef       	ldi	r22, 0xFF	; 255
    27f0:	7f ef       	ldi	r23, 0xFF	; 255
    27f2:	6f c3       	rjmp	.+1758   	; 0x2ed2 <vfprintf+0x704>
    27f4:	9e 01       	movw	r18, r28
    27f6:	2f 5f       	subi	r18, 0xFF	; 255
    27f8:	3f 4f       	sbci	r19, 0xFF	; 255
    27fa:	39 8b       	std	Y+17, r19	; 0x11
    27fc:	28 8b       	std	Y+16, r18	; 0x10
    27fe:	f3 01       	movw	r30, r6
    2800:	23 81       	ldd	r18, Z+3	; 0x03
    2802:	ee 85       	ldd	r30, Y+14	; 0x0e
    2804:	ff 85       	ldd	r31, Y+15	; 0x0f
    2806:	23 fd       	sbrc	r18, 3
    2808:	85 91       	lpm	r24, Z+
    280a:	23 ff       	sbrs	r18, 3
    280c:	81 91       	ld	r24, Z+
    280e:	ff 87       	std	Y+15, r31	; 0x0f
    2810:	ee 87       	std	Y+14, r30	; 0x0e
    2812:	88 23       	and	r24, r24
    2814:	09 f4       	brne	.+2      	; 0x2818 <vfprintf+0x4a>
    2816:	5a c3       	rjmp	.+1716   	; 0x2ecc <vfprintf+0x6fe>
    2818:	85 32       	cpi	r24, 0x25	; 37
    281a:	51 f4       	brne	.+20     	; 0x2830 <vfprintf+0x62>
    281c:	ee 85       	ldd	r30, Y+14	; 0x0e
    281e:	ff 85       	ldd	r31, Y+15	; 0x0f
    2820:	23 fd       	sbrc	r18, 3
    2822:	85 91       	lpm	r24, Z+
    2824:	23 ff       	sbrs	r18, 3
    2826:	81 91       	ld	r24, Z+
    2828:	ff 87       	std	Y+15, r31	; 0x0f
    282a:	ee 87       	std	Y+14, r30	; 0x0e
    282c:	85 32       	cpi	r24, 0x25	; 37
    282e:	29 f4       	brne	.+10     	; 0x283a <vfprintf+0x6c>
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	b3 01       	movw	r22, r6
    2834:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2838:	e2 cf       	rjmp	.-60     	; 0x27fe <vfprintf+0x30>
    283a:	98 2f       	mov	r25, r24
    283c:	10 e0       	ldi	r17, 0x00	; 0
    283e:	88 24       	eor	r8, r8
    2840:	99 24       	eor	r9, r9
    2842:	10 32       	cpi	r17, 0x20	; 32
    2844:	b0 f4       	brcc	.+44     	; 0x2872 <vfprintf+0xa4>
    2846:	9b 32       	cpi	r25, 0x2B	; 43
    2848:	69 f0       	breq	.+26     	; 0x2864 <vfprintf+0x96>
    284a:	9c 32       	cpi	r25, 0x2C	; 44
    284c:	28 f4       	brcc	.+10     	; 0x2858 <vfprintf+0x8a>
    284e:	90 32       	cpi	r25, 0x20	; 32
    2850:	51 f0       	breq	.+20     	; 0x2866 <vfprintf+0x98>
    2852:	93 32       	cpi	r25, 0x23	; 35
    2854:	71 f4       	brne	.+28     	; 0x2872 <vfprintf+0xa4>
    2856:	0b c0       	rjmp	.+22     	; 0x286e <vfprintf+0xa0>
    2858:	9d 32       	cpi	r25, 0x2D	; 45
    285a:	39 f0       	breq	.+14     	; 0x286a <vfprintf+0x9c>
    285c:	90 33       	cpi	r25, 0x30	; 48
    285e:	49 f4       	brne	.+18     	; 0x2872 <vfprintf+0xa4>
    2860:	11 60       	ori	r17, 0x01	; 1
    2862:	28 c0       	rjmp	.+80     	; 0x28b4 <vfprintf+0xe6>
    2864:	12 60       	ori	r17, 0x02	; 2
    2866:	14 60       	ori	r17, 0x04	; 4
    2868:	25 c0       	rjmp	.+74     	; 0x28b4 <vfprintf+0xe6>
    286a:	18 60       	ori	r17, 0x08	; 8
    286c:	23 c0       	rjmp	.+70     	; 0x28b4 <vfprintf+0xe6>
    286e:	10 61       	ori	r17, 0x10	; 16
    2870:	21 c0       	rjmp	.+66     	; 0x28b4 <vfprintf+0xe6>
    2872:	17 fd       	sbrc	r17, 7
    2874:	2a c0       	rjmp	.+84     	; 0x28ca <vfprintf+0xfc>
    2876:	89 2f       	mov	r24, r25
    2878:	80 53       	subi	r24, 0x30	; 48
    287a:	8a 30       	cpi	r24, 0x0A	; 10
    287c:	78 f4       	brcc	.+30     	; 0x289c <vfprintf+0xce>
    287e:	16 ff       	sbrs	r17, 6
    2880:	06 c0       	rjmp	.+12     	; 0x288e <vfprintf+0xc0>
    2882:	fa e0       	ldi	r31, 0x0A	; 10
    2884:	9f 9e       	mul	r9, r31
    2886:	90 2c       	mov	r9, r0
    2888:	11 24       	eor	r1, r1
    288a:	98 0e       	add	r9, r24
    288c:	13 c0       	rjmp	.+38     	; 0x28b4 <vfprintf+0xe6>
    288e:	3a e0       	ldi	r19, 0x0A	; 10
    2890:	83 9e       	mul	r8, r19
    2892:	80 2c       	mov	r8, r0
    2894:	11 24       	eor	r1, r1
    2896:	88 0e       	add	r8, r24
    2898:	10 62       	ori	r17, 0x20	; 32
    289a:	0c c0       	rjmp	.+24     	; 0x28b4 <vfprintf+0xe6>
    289c:	9e 32       	cpi	r25, 0x2E	; 46
    289e:	21 f4       	brne	.+8      	; 0x28a8 <vfprintf+0xda>
    28a0:	16 fd       	sbrc	r17, 6
    28a2:	14 c3       	rjmp	.+1576   	; 0x2ecc <vfprintf+0x6fe>
    28a4:	10 64       	ori	r17, 0x40	; 64
    28a6:	06 c0       	rjmp	.+12     	; 0x28b4 <vfprintf+0xe6>
    28a8:	9c 36       	cpi	r25, 0x6C	; 108
    28aa:	11 f4       	brne	.+4      	; 0x28b0 <vfprintf+0xe2>
    28ac:	10 68       	ori	r17, 0x80	; 128
    28ae:	02 c0       	rjmp	.+4      	; 0x28b4 <vfprintf+0xe6>
    28b0:	98 36       	cpi	r25, 0x68	; 104
    28b2:	59 f4       	brne	.+22     	; 0x28ca <vfprintf+0xfc>
    28b4:	ee 85       	ldd	r30, Y+14	; 0x0e
    28b6:	ff 85       	ldd	r31, Y+15	; 0x0f
    28b8:	23 fd       	sbrc	r18, 3
    28ba:	95 91       	lpm	r25, Z+
    28bc:	23 ff       	sbrs	r18, 3
    28be:	91 91       	ld	r25, Z+
    28c0:	ff 87       	std	Y+15, r31	; 0x0f
    28c2:	ee 87       	std	Y+14, r30	; 0x0e
    28c4:	99 23       	and	r25, r25
    28c6:	09 f0       	breq	.+2      	; 0x28ca <vfprintf+0xfc>
    28c8:	bc cf       	rjmp	.-136    	; 0x2842 <vfprintf+0x74>
    28ca:	89 2f       	mov	r24, r25
    28cc:	85 54       	subi	r24, 0x45	; 69
    28ce:	83 30       	cpi	r24, 0x03	; 3
    28d0:	20 f4       	brcc	.+8      	; 0x28da <vfprintf+0x10c>
    28d2:	81 2f       	mov	r24, r17
    28d4:	80 61       	ori	r24, 0x10	; 16
    28d6:	90 5e       	subi	r25, 0xE0	; 224
    28d8:	07 c0       	rjmp	.+14     	; 0x28e8 <vfprintf+0x11a>
    28da:	89 2f       	mov	r24, r25
    28dc:	85 56       	subi	r24, 0x65	; 101
    28de:	83 30       	cpi	r24, 0x03	; 3
    28e0:	08 f0       	brcs	.+2      	; 0x28e4 <vfprintf+0x116>
    28e2:	9f c1       	rjmp	.+830    	; 0x2c22 <vfprintf+0x454>
    28e4:	81 2f       	mov	r24, r17
    28e6:	8f 7e       	andi	r24, 0xEF	; 239
    28e8:	86 fd       	sbrc	r24, 6
    28ea:	02 c0       	rjmp	.+4      	; 0x28f0 <vfprintf+0x122>
    28ec:	76 e0       	ldi	r23, 0x06	; 6
    28ee:	97 2e       	mov	r9, r23
    28f0:	6f e3       	ldi	r22, 0x3F	; 63
    28f2:	f6 2e       	mov	r15, r22
    28f4:	f8 22       	and	r15, r24
    28f6:	95 36       	cpi	r25, 0x65	; 101
    28f8:	19 f4       	brne	.+6      	; 0x2900 <vfprintf+0x132>
    28fa:	f0 e4       	ldi	r31, 0x40	; 64
    28fc:	ff 2a       	or	r15, r31
    28fe:	07 c0       	rjmp	.+14     	; 0x290e <vfprintf+0x140>
    2900:	96 36       	cpi	r25, 0x66	; 102
    2902:	19 f4       	brne	.+6      	; 0x290a <vfprintf+0x13c>
    2904:	20 e8       	ldi	r18, 0x80	; 128
    2906:	f2 2a       	or	r15, r18
    2908:	02 c0       	rjmp	.+4      	; 0x290e <vfprintf+0x140>
    290a:	91 10       	cpse	r9, r1
    290c:	9a 94       	dec	r9
    290e:	f7 fe       	sbrs	r15, 7
    2910:	0a c0       	rjmp	.+20     	; 0x2926 <vfprintf+0x158>
    2912:	3b e3       	ldi	r19, 0x3B	; 59
    2914:	39 15       	cp	r19, r9
    2916:	18 f4       	brcc	.+6      	; 0x291e <vfprintf+0x150>
    2918:	5c e3       	ldi	r21, 0x3C	; 60
    291a:	b5 2e       	mov	r11, r21
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <vfprintf+0x154>
    291e:	b9 2c       	mov	r11, r9
    2920:	b3 94       	inc	r11
    2922:	27 e0       	ldi	r18, 0x07	; 7
    2924:	09 c0       	rjmp	.+18     	; 0x2938 <vfprintf+0x16a>
    2926:	47 e0       	ldi	r20, 0x07	; 7
    2928:	49 15       	cp	r20, r9
    292a:	20 f4       	brcc	.+8      	; 0x2934 <vfprintf+0x166>
    292c:	bb 24       	eor	r11, r11
    292e:	47 e0       	ldi	r20, 0x07	; 7
    2930:	94 2e       	mov	r9, r20
    2932:	f7 cf       	rjmp	.-18     	; 0x2922 <vfprintf+0x154>
    2934:	29 2d       	mov	r18, r9
    2936:	bb 24       	eor	r11, r11
    2938:	c6 01       	movw	r24, r12
    293a:	04 96       	adiw	r24, 0x04	; 4
    293c:	9d 87       	std	Y+13, r25	; 0x0d
    293e:	8c 87       	std	Y+12, r24	; 0x0c
    2940:	f6 01       	movw	r30, r12
    2942:	60 81       	ld	r22, Z
    2944:	71 81       	ldd	r23, Z+1	; 0x01
    2946:	82 81       	ldd	r24, Z+2	; 0x02
    2948:	93 81       	ldd	r25, Z+3	; 0x03
    294a:	ae 01       	movw	r20, r28
    294c:	4f 5f       	subi	r20, 0xFF	; 255
    294e:	5f 4f       	sbci	r21, 0xFF	; 255
    2950:	0b 2d       	mov	r16, r11
    2952:	0e 94 76 18 	call	0x30ec	; 0x30ec <__ftoa_engine>
    2956:	6c 01       	movw	r12, r24
    2958:	09 81       	ldd	r16, Y+1	; 0x01
    295a:	20 2e       	mov	r2, r16
    295c:	33 24       	eor	r3, r3
    295e:	00 ff       	sbrs	r16, 0
    2960:	04 c0       	rjmp	.+8      	; 0x296a <vfprintf+0x19c>
    2962:	03 fd       	sbrc	r16, 3
    2964:	02 c0       	rjmp	.+4      	; 0x296a <vfprintf+0x19c>
    2966:	1d e2       	ldi	r17, 0x2D	; 45
    2968:	09 c0       	rjmp	.+18     	; 0x297c <vfprintf+0x1ae>
    296a:	f1 fe       	sbrs	r15, 1
    296c:	02 c0       	rjmp	.+4      	; 0x2972 <vfprintf+0x1a4>
    296e:	1b e2       	ldi	r17, 0x2B	; 43
    2970:	05 c0       	rjmp	.+10     	; 0x297c <vfprintf+0x1ae>
    2972:	f2 fc       	sbrc	r15, 2
    2974:	02 c0       	rjmp	.+4      	; 0x297a <vfprintf+0x1ac>
    2976:	10 e0       	ldi	r17, 0x00	; 0
    2978:	01 c0       	rjmp	.+2      	; 0x297c <vfprintf+0x1ae>
    297a:	10 e2       	ldi	r17, 0x20	; 32
    297c:	c1 01       	movw	r24, r2
    297e:	8c 70       	andi	r24, 0x0C	; 12
    2980:	90 70       	andi	r25, 0x00	; 0
    2982:	89 2b       	or	r24, r25
    2984:	b9 f1       	breq	.+110    	; 0x29f4 <vfprintf+0x226>
    2986:	11 23       	and	r17, r17
    2988:	11 f4       	brne	.+4      	; 0x298e <vfprintf+0x1c0>
    298a:	83 e0       	ldi	r24, 0x03	; 3
    298c:	01 c0       	rjmp	.+2      	; 0x2990 <vfprintf+0x1c2>
    298e:	84 e0       	ldi	r24, 0x04	; 4
    2990:	88 15       	cp	r24, r8
    2992:	10 f0       	brcs	.+4      	; 0x2998 <vfprintf+0x1ca>
    2994:	88 24       	eor	r8, r8
    2996:	0a c0       	rjmp	.+20     	; 0x29ac <vfprintf+0x1de>
    2998:	88 1a       	sub	r8, r24
    299a:	f3 fc       	sbrc	r15, 3
    299c:	07 c0       	rjmp	.+14     	; 0x29ac <vfprintf+0x1de>
    299e:	80 e2       	ldi	r24, 0x20	; 32
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	b3 01       	movw	r22, r6
    29a4:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    29a8:	8a 94       	dec	r8
    29aa:	c9 f7       	brne	.-14     	; 0x299e <vfprintf+0x1d0>
    29ac:	11 23       	and	r17, r17
    29ae:	29 f0       	breq	.+10     	; 0x29ba <vfprintf+0x1ec>
    29b0:	81 2f       	mov	r24, r17
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	b3 01       	movw	r22, r6
    29b6:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    29ba:	23 fe       	sbrs	r2, 3
    29bc:	03 c0       	rjmp	.+6      	; 0x29c4 <vfprintf+0x1f6>
    29be:	04 ee       	ldi	r16, 0xE4	; 228
    29c0:	10 e0       	ldi	r17, 0x00	; 0
    29c2:	0e c0       	rjmp	.+28     	; 0x29e0 <vfprintf+0x212>
    29c4:	08 ee       	ldi	r16, 0xE8	; 232
    29c6:	10 e0       	ldi	r17, 0x00	; 0
    29c8:	0b c0       	rjmp	.+22     	; 0x29e0 <vfprintf+0x212>
    29ca:	e1 14       	cp	r14, r1
    29cc:	f1 04       	cpc	r15, r1
    29ce:	09 f0       	breq	.+2      	; 0x29d2 <vfprintf+0x204>
    29d0:	80 52       	subi	r24, 0x20	; 32
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	b3 01       	movw	r22, r6
    29d6:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    29da:	0f 5f       	subi	r16, 0xFF	; 255
    29dc:	1f 4f       	sbci	r17, 0xFF	; 255
    29de:	05 c0       	rjmp	.+10     	; 0x29ea <vfprintf+0x21c>
    29e0:	ef 2c       	mov	r14, r15
    29e2:	ff 24       	eor	r15, r15
    29e4:	f0 e1       	ldi	r31, 0x10	; 16
    29e6:	ef 22       	and	r14, r31
    29e8:	ff 24       	eor	r15, r15
    29ea:	f8 01       	movw	r30, r16
    29ec:	84 91       	lpm	r24, Z+
    29ee:	88 23       	and	r24, r24
    29f0:	61 f7       	brne	.-40     	; 0x29ca <vfprintf+0x1fc>
    29f2:	14 c1       	rjmp	.+552    	; 0x2c1c <vfprintf+0x44e>
    29f4:	f7 fe       	sbrs	r15, 7
    29f6:	12 c0       	rjmp	.+36     	; 0x2a1c <vfprintf+0x24e>
    29f8:	bc 0c       	add	r11, r12
    29fa:	24 fe       	sbrs	r2, 4
    29fc:	04 c0       	rjmp	.+8      	; 0x2a06 <vfprintf+0x238>
    29fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2a00:	81 33       	cpi	r24, 0x31	; 49
    2a02:	09 f4       	brne	.+2      	; 0x2a06 <vfprintf+0x238>
    2a04:	ba 94       	dec	r11
    2a06:	1b 14       	cp	r1, r11
    2a08:	1c f0       	brlt	.+6      	; 0x2a10 <vfprintf+0x242>
    2a0a:	bb 24       	eor	r11, r11
    2a0c:	b3 94       	inc	r11
    2a0e:	2d c0       	rjmp	.+90     	; 0x2a6a <vfprintf+0x29c>
    2a10:	f8 e0       	ldi	r31, 0x08	; 8
    2a12:	fb 15       	cp	r31, r11
    2a14:	50 f5       	brcc	.+84     	; 0x2a6a <vfprintf+0x29c>
    2a16:	38 e0       	ldi	r19, 0x08	; 8
    2a18:	b3 2e       	mov	r11, r19
    2a1a:	27 c0       	rjmp	.+78     	; 0x2a6a <vfprintf+0x29c>
    2a1c:	f6 fc       	sbrc	r15, 6
    2a1e:	25 c0       	rjmp	.+74     	; 0x2a6a <vfprintf+0x29c>
    2a20:	89 2d       	mov	r24, r9
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	8c 15       	cp	r24, r12
    2a26:	9d 05       	cpc	r25, r13
    2a28:	4c f0       	brlt	.+18     	; 0x2a3c <vfprintf+0x26e>
    2a2a:	2c ef       	ldi	r18, 0xFC	; 252
    2a2c:	c2 16       	cp	r12, r18
    2a2e:	2f ef       	ldi	r18, 0xFF	; 255
    2a30:	d2 06       	cpc	r13, r18
    2a32:	24 f0       	brlt	.+8      	; 0x2a3c <vfprintf+0x26e>
    2a34:	30 e8       	ldi	r19, 0x80	; 128
    2a36:	f3 2a       	or	r15, r19
    2a38:	01 c0       	rjmp	.+2      	; 0x2a3c <vfprintf+0x26e>
    2a3a:	9a 94       	dec	r9
    2a3c:	99 20       	and	r9, r9
    2a3e:	49 f0       	breq	.+18     	; 0x2a52 <vfprintf+0x284>
    2a40:	e2 e0       	ldi	r30, 0x02	; 2
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	ec 0f       	add	r30, r28
    2a46:	fd 1f       	adc	r31, r29
    2a48:	e9 0d       	add	r30, r9
    2a4a:	f1 1d       	adc	r31, r1
    2a4c:	80 81       	ld	r24, Z
    2a4e:	80 33       	cpi	r24, 0x30	; 48
    2a50:	a1 f3       	breq	.-24     	; 0x2a3a <vfprintf+0x26c>
    2a52:	f7 fe       	sbrs	r15, 7
    2a54:	0a c0       	rjmp	.+20     	; 0x2a6a <vfprintf+0x29c>
    2a56:	b9 2c       	mov	r11, r9
    2a58:	b3 94       	inc	r11
    2a5a:	89 2d       	mov	r24, r9
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	c8 16       	cp	r12, r24
    2a60:	d9 06       	cpc	r13, r25
    2a62:	14 f0       	brlt	.+4      	; 0x2a68 <vfprintf+0x29a>
    2a64:	99 24       	eor	r9, r9
    2a66:	01 c0       	rjmp	.+2      	; 0x2a6a <vfprintf+0x29c>
    2a68:	9c 18       	sub	r9, r12
    2a6a:	f7 fc       	sbrc	r15, 7
    2a6c:	03 c0       	rjmp	.+6      	; 0x2a74 <vfprintf+0x2a6>
    2a6e:	25 e0       	ldi	r18, 0x05	; 5
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	09 c0       	rjmp	.+18     	; 0x2a86 <vfprintf+0x2b8>
    2a74:	1c 14       	cp	r1, r12
    2a76:	1d 04       	cpc	r1, r13
    2a78:	1c f0       	brlt	.+6      	; 0x2a80 <vfprintf+0x2b2>
    2a7a:	21 e0       	ldi	r18, 0x01	; 1
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	03 c0       	rjmp	.+6      	; 0x2a86 <vfprintf+0x2b8>
    2a80:	96 01       	movw	r18, r12
    2a82:	2f 5f       	subi	r18, 0xFF	; 255
    2a84:	3f 4f       	sbci	r19, 0xFF	; 255
    2a86:	11 23       	and	r17, r17
    2a88:	11 f0       	breq	.+4      	; 0x2a8e <vfprintf+0x2c0>
    2a8a:	2f 5f       	subi	r18, 0xFF	; 255
    2a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8e:	99 20       	and	r9, r9
    2a90:	29 f0       	breq	.+10     	; 0x2a9c <vfprintf+0x2ce>
    2a92:	89 2d       	mov	r24, r9
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	01 96       	adiw	r24, 0x01	; 1
    2a98:	28 0f       	add	r18, r24
    2a9a:	39 1f       	adc	r19, r25
    2a9c:	88 2d       	mov	r24, r8
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	28 17       	cp	r18, r24
    2aa2:	39 07       	cpc	r19, r25
    2aa4:	14 f0       	brlt	.+4      	; 0x2aaa <vfprintf+0x2dc>
    2aa6:	88 24       	eor	r8, r8
    2aa8:	01 c0       	rjmp	.+2      	; 0x2aac <vfprintf+0x2de>
    2aaa:	82 1a       	sub	r8, r18
    2aac:	4f 2c       	mov	r4, r15
    2aae:	55 24       	eor	r5, r5
    2ab0:	c2 01       	movw	r24, r4
    2ab2:	89 70       	andi	r24, 0x09	; 9
    2ab4:	90 70       	andi	r25, 0x00	; 0
    2ab6:	89 2b       	or	r24, r25
    2ab8:	39 f0       	breq	.+14     	; 0x2ac8 <vfprintf+0x2fa>
    2aba:	08 c0       	rjmp	.+16     	; 0x2acc <vfprintf+0x2fe>
    2abc:	80 e2       	ldi	r24, 0x20	; 32
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	b3 01       	movw	r22, r6
    2ac2:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2ac6:	8a 94       	dec	r8
    2ac8:	88 20       	and	r8, r8
    2aca:	c1 f7       	brne	.-16     	; 0x2abc <vfprintf+0x2ee>
    2acc:	11 23       	and	r17, r17
    2ace:	29 f0       	breq	.+10     	; 0x2ada <vfprintf+0x30c>
    2ad0:	81 2f       	mov	r24, r17
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	b3 01       	movw	r22, r6
    2ad6:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2ada:	43 fe       	sbrs	r4, 3
    2adc:	07 c0       	rjmp	.+14     	; 0x2aec <vfprintf+0x31e>
    2ade:	08 c0       	rjmp	.+16     	; 0x2af0 <vfprintf+0x322>
    2ae0:	80 e3       	ldi	r24, 0x30	; 48
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	b3 01       	movw	r22, r6
    2ae6:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2aea:	8a 94       	dec	r8
    2aec:	88 20       	and	r8, r8
    2aee:	c1 f7       	brne	.-16     	; 0x2ae0 <vfprintf+0x312>
    2af0:	f7 fe       	sbrs	r15, 7
    2af2:	46 c0       	rjmp	.+140    	; 0x2b80 <vfprintf+0x3b2>
    2af4:	86 01       	movw	r16, r12
    2af6:	d7 fe       	sbrs	r13, 7
    2af8:	02 c0       	rjmp	.+4      	; 0x2afe <vfprintf+0x330>
    2afa:	00 e0       	ldi	r16, 0x00	; 0
    2afc:	10 e0       	ldi	r17, 0x00	; 0
    2afe:	76 01       	movw	r14, r12
    2b00:	08 94       	sec
    2b02:	e1 1c       	adc	r14, r1
    2b04:	f1 1c       	adc	r15, r1
    2b06:	e0 1a       	sub	r14, r16
    2b08:	f1 0a       	sbc	r15, r17
    2b0a:	41 e0       	ldi	r20, 0x01	; 1
    2b0c:	50 e0       	ldi	r21, 0x00	; 0
    2b0e:	4c 0f       	add	r20, r28
    2b10:	5d 1f       	adc	r21, r29
    2b12:	e4 0e       	add	r14, r20
    2b14:	f5 1e       	adc	r15, r21
    2b16:	26 01       	movw	r4, r12
    2b18:	4b 18       	sub	r4, r11
    2b1a:	51 08       	sbc	r5, r1
    2b1c:	89 2d       	mov	r24, r9
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	aa 24       	eor	r10, r10
    2b22:	bb 24       	eor	r11, r11
    2b24:	a8 1a       	sub	r10, r24
    2b26:	b9 0a       	sbc	r11, r25
    2b28:	5f ef       	ldi	r21, 0xFF	; 255
    2b2a:	0f 3f       	cpi	r16, 0xFF	; 255
    2b2c:	15 07       	cpc	r17, r21
    2b2e:	29 f4       	brne	.+10     	; 0x2b3a <vfprintf+0x36c>
    2b30:	8e e2       	ldi	r24, 0x2E	; 46
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	b3 01       	movw	r22, r6
    2b36:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2b3a:	c0 16       	cp	r12, r16
    2b3c:	d1 06       	cpc	r13, r17
    2b3e:	34 f0       	brlt	.+12     	; 0x2b4c <vfprintf+0x37e>
    2b40:	40 16       	cp	r4, r16
    2b42:	51 06       	cpc	r5, r17
    2b44:	1c f4       	brge	.+6      	; 0x2b4c <vfprintf+0x37e>
    2b46:	f7 01       	movw	r30, r14
    2b48:	80 81       	ld	r24, Z
    2b4a:	01 c0       	rjmp	.+2      	; 0x2b4e <vfprintf+0x380>
    2b4c:	80 e3       	ldi	r24, 0x30	; 48
    2b4e:	01 50       	subi	r16, 0x01	; 1
    2b50:	10 40       	sbci	r17, 0x00	; 0
    2b52:	08 94       	sec
    2b54:	e1 1c       	adc	r14, r1
    2b56:	f1 1c       	adc	r15, r1
    2b58:	0a 15       	cp	r16, r10
    2b5a:	1b 05       	cpc	r17, r11
    2b5c:	2c f0       	brlt	.+10     	; 0x2b68 <vfprintf+0x39a>
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	b3 01       	movw	r22, r6
    2b62:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2b66:	e0 cf       	rjmp	.-64     	; 0x2b28 <vfprintf+0x35a>
    2b68:	0c 15       	cp	r16, r12
    2b6a:	1d 05       	cpc	r17, r13
    2b6c:	39 f4       	brne	.+14     	; 0x2b7c <vfprintf+0x3ae>
    2b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b70:	96 33       	cpi	r25, 0x36	; 54
    2b72:	18 f4       	brcc	.+6      	; 0x2b7a <vfprintf+0x3ac>
    2b74:	95 33       	cpi	r25, 0x35	; 53
    2b76:	11 f4       	brne	.+4      	; 0x2b7c <vfprintf+0x3ae>
    2b78:	24 fe       	sbrs	r2, 4
    2b7a:	81 e3       	ldi	r24, 0x31	; 49
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	4b c0       	rjmp	.+150    	; 0x2c16 <vfprintf+0x448>
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	81 33       	cpi	r24, 0x31	; 49
    2b84:	09 f0       	breq	.+2      	; 0x2b88 <vfprintf+0x3ba>
    2b86:	0f 7e       	andi	r16, 0xEF	; 239
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	b3 01       	movw	r22, r6
    2b8c:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2b90:	99 20       	and	r9, r9
    2b92:	a1 f0       	breq	.+40     	; 0x2bbc <vfprintf+0x3ee>
    2b94:	8e e2       	ldi	r24, 0x2E	; 46
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	b3 01       	movw	r22, r6
    2b9a:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2b9e:	12 e0       	ldi	r17, 0x02	; 2
    2ba0:	e1 e0       	ldi	r30, 0x01	; 1
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	ec 0f       	add	r30, r28
    2ba6:	fd 1f       	adc	r31, r29
    2ba8:	e1 0f       	add	r30, r17
    2baa:	f1 1d       	adc	r31, r1
    2bac:	1f 5f       	subi	r17, 0xFF	; 255
    2bae:	80 81       	ld	r24, Z
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	b3 01       	movw	r22, r6
    2bb4:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2bb8:	9a 94       	dec	r9
    2bba:	91 f7       	brne	.-28     	; 0x2ba0 <vfprintf+0x3d2>
    2bbc:	44 fc       	sbrc	r4, 4
    2bbe:	03 c0       	rjmp	.+6      	; 0x2bc6 <vfprintf+0x3f8>
    2bc0:	85 e6       	ldi	r24, 0x65	; 101
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	02 c0       	rjmp	.+4      	; 0x2bca <vfprintf+0x3fc>
    2bc6:	85 e4       	ldi	r24, 0x45	; 69
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	b3 01       	movw	r22, r6
    2bcc:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2bd0:	d7 fc       	sbrc	r13, 7
    2bd2:	05 c0       	rjmp	.+10     	; 0x2bde <vfprintf+0x410>
    2bd4:	c1 14       	cp	r12, r1
    2bd6:	d1 04       	cpc	r13, r1
    2bd8:	41 f4       	brne	.+16     	; 0x2bea <vfprintf+0x41c>
    2bda:	04 ff       	sbrs	r16, 4
    2bdc:	06 c0       	rjmp	.+12     	; 0x2bea <vfprintf+0x41c>
    2bde:	d0 94       	com	r13
    2be0:	c1 94       	neg	r12
    2be2:	d1 08       	sbc	r13, r1
    2be4:	d3 94       	inc	r13
    2be6:	8d e2       	ldi	r24, 0x2D	; 45
    2be8:	01 c0       	rjmp	.+2      	; 0x2bec <vfprintf+0x41e>
    2bea:	8b e2       	ldi	r24, 0x2B	; 43
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	b3 01       	movw	r22, r6
    2bf0:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2bf4:	80 e3       	ldi	r24, 0x30	; 48
    2bf6:	05 c0       	rjmp	.+10     	; 0x2c02 <vfprintf+0x434>
    2bf8:	8f 5f       	subi	r24, 0xFF	; 255
    2bfa:	26 ef       	ldi	r18, 0xF6	; 246
    2bfc:	3f ef       	ldi	r19, 0xFF	; 255
    2bfe:	c2 0e       	add	r12, r18
    2c00:	d3 1e       	adc	r13, r19
    2c02:	3a e0       	ldi	r19, 0x0A	; 10
    2c04:	c3 16       	cp	r12, r19
    2c06:	d1 04       	cpc	r13, r1
    2c08:	bc f7       	brge	.-18     	; 0x2bf8 <vfprintf+0x42a>
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	b3 01       	movw	r22, r6
    2c0e:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2c12:	c6 01       	movw	r24, r12
    2c14:	c0 96       	adiw	r24, 0x30	; 48
    2c16:	b3 01       	movw	r22, r6
    2c18:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2c1c:	cc 84       	ldd	r12, Y+12	; 0x0c
    2c1e:	dd 84       	ldd	r13, Y+13	; 0x0d
    2c20:	52 c1       	rjmp	.+676    	; 0x2ec6 <vfprintf+0x6f8>
    2c22:	93 36       	cpi	r25, 0x63	; 99
    2c24:	31 f0       	breq	.+12     	; 0x2c32 <vfprintf+0x464>
    2c26:	93 37       	cpi	r25, 0x73	; 115
    2c28:	99 f0       	breq	.+38     	; 0x2c50 <vfprintf+0x482>
    2c2a:	93 35       	cpi	r25, 0x53	; 83
    2c2c:	09 f0       	breq	.+2      	; 0x2c30 <vfprintf+0x462>
    2c2e:	59 c0       	rjmp	.+178    	; 0x2ce2 <vfprintf+0x514>
    2c30:	23 c0       	rjmp	.+70     	; 0x2c78 <vfprintf+0x4aa>
    2c32:	f6 01       	movw	r30, r12
    2c34:	80 81       	ld	r24, Z
    2c36:	89 83       	std	Y+1, r24	; 0x01
    2c38:	5e 01       	movw	r10, r28
    2c3a:	08 94       	sec
    2c3c:	a1 1c       	adc	r10, r1
    2c3e:	b1 1c       	adc	r11, r1
    2c40:	22 e0       	ldi	r18, 0x02	; 2
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	c2 0e       	add	r12, r18
    2c46:	d3 1e       	adc	r13, r19
    2c48:	21 e0       	ldi	r18, 0x01	; 1
    2c4a:	e2 2e       	mov	r14, r18
    2c4c:	f1 2c       	mov	r15, r1
    2c4e:	12 c0       	rjmp	.+36     	; 0x2c74 <vfprintf+0x4a6>
    2c50:	f6 01       	movw	r30, r12
    2c52:	a0 80       	ld	r10, Z
    2c54:	b1 80       	ldd	r11, Z+1	; 0x01
    2c56:	16 fd       	sbrc	r17, 6
    2c58:	03 c0       	rjmp	.+6      	; 0x2c60 <vfprintf+0x492>
    2c5a:	6f ef       	ldi	r22, 0xFF	; 255
    2c5c:	7f ef       	ldi	r23, 0xFF	; 255
    2c5e:	02 c0       	rjmp	.+4      	; 0x2c64 <vfprintf+0x496>
    2c60:	69 2d       	mov	r22, r9
    2c62:	70 e0       	ldi	r23, 0x00	; 0
    2c64:	22 e0       	ldi	r18, 0x02	; 2
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	c2 0e       	add	r12, r18
    2c6a:	d3 1e       	adc	r13, r19
    2c6c:	c5 01       	movw	r24, r10
    2c6e:	0e 94 60 19 	call	0x32c0	; 0x32c0 <strnlen>
    2c72:	7c 01       	movw	r14, r24
    2c74:	1f 77       	andi	r17, 0x7F	; 127
    2c76:	13 c0       	rjmp	.+38     	; 0x2c9e <vfprintf+0x4d0>
    2c78:	f6 01       	movw	r30, r12
    2c7a:	a0 80       	ld	r10, Z
    2c7c:	b1 80       	ldd	r11, Z+1	; 0x01
    2c7e:	16 fd       	sbrc	r17, 6
    2c80:	03 c0       	rjmp	.+6      	; 0x2c88 <vfprintf+0x4ba>
    2c82:	6f ef       	ldi	r22, 0xFF	; 255
    2c84:	7f ef       	ldi	r23, 0xFF	; 255
    2c86:	02 c0       	rjmp	.+4      	; 0x2c8c <vfprintf+0x4be>
    2c88:	69 2d       	mov	r22, r9
    2c8a:	70 e0       	ldi	r23, 0x00	; 0
    2c8c:	22 e0       	ldi	r18, 0x02	; 2
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	c2 0e       	add	r12, r18
    2c92:	d3 1e       	adc	r13, r19
    2c94:	c5 01       	movw	r24, r10
    2c96:	0e 94 4e 19 	call	0x329c	; 0x329c <strnlen_P>
    2c9a:	7c 01       	movw	r14, r24
    2c9c:	10 68       	ori	r17, 0x80	; 128
    2c9e:	13 ff       	sbrs	r17, 3
    2ca0:	07 c0       	rjmp	.+14     	; 0x2cb0 <vfprintf+0x4e2>
    2ca2:	1b c0       	rjmp	.+54     	; 0x2cda <vfprintf+0x50c>
    2ca4:	80 e2       	ldi	r24, 0x20	; 32
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	b3 01       	movw	r22, r6
    2caa:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2cae:	8a 94       	dec	r8
    2cb0:	88 2d       	mov	r24, r8
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	e8 16       	cp	r14, r24
    2cb6:	f9 06       	cpc	r15, r25
    2cb8:	a8 f3       	brcs	.-22     	; 0x2ca4 <vfprintf+0x4d6>
    2cba:	0f c0       	rjmp	.+30     	; 0x2cda <vfprintf+0x50c>
    2cbc:	f5 01       	movw	r30, r10
    2cbe:	17 fd       	sbrc	r17, 7
    2cc0:	85 91       	lpm	r24, Z+
    2cc2:	17 ff       	sbrs	r17, 7
    2cc4:	81 91       	ld	r24, Z+
    2cc6:	5f 01       	movw	r10, r30
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	b3 01       	movw	r22, r6
    2ccc:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2cd0:	81 10       	cpse	r8, r1
    2cd2:	8a 94       	dec	r8
    2cd4:	08 94       	sec
    2cd6:	e1 08       	sbc	r14, r1
    2cd8:	f1 08       	sbc	r15, r1
    2cda:	e1 14       	cp	r14, r1
    2cdc:	f1 04       	cpc	r15, r1
    2cde:	71 f7       	brne	.-36     	; 0x2cbc <vfprintf+0x4ee>
    2ce0:	f2 c0       	rjmp	.+484    	; 0x2ec6 <vfprintf+0x6f8>
    2ce2:	94 36       	cpi	r25, 0x64	; 100
    2ce4:	11 f0       	breq	.+4      	; 0x2cea <vfprintf+0x51c>
    2ce6:	99 36       	cpi	r25, 0x69	; 105
    2ce8:	89 f5       	brne	.+98     	; 0x2d4c <vfprintf+0x57e>
    2cea:	17 ff       	sbrs	r17, 7
    2cec:	08 c0       	rjmp	.+16     	; 0x2cfe <vfprintf+0x530>
    2cee:	f6 01       	movw	r30, r12
    2cf0:	20 81       	ld	r18, Z
    2cf2:	31 81       	ldd	r19, Z+1	; 0x01
    2cf4:	42 81       	ldd	r20, Z+2	; 0x02
    2cf6:	53 81       	ldd	r21, Z+3	; 0x03
    2cf8:	84 e0       	ldi	r24, 0x04	; 4
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	0a c0       	rjmp	.+20     	; 0x2d12 <vfprintf+0x544>
    2cfe:	f6 01       	movw	r30, r12
    2d00:	80 81       	ld	r24, Z
    2d02:	91 81       	ldd	r25, Z+1	; 0x01
    2d04:	9c 01       	movw	r18, r24
    2d06:	44 27       	eor	r20, r20
    2d08:	37 fd       	sbrc	r19, 7
    2d0a:	40 95       	com	r20
    2d0c:	54 2f       	mov	r21, r20
    2d0e:	82 e0       	ldi	r24, 0x02	; 2
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	c8 0e       	add	r12, r24
    2d14:	d9 1e       	adc	r13, r25
    2d16:	9f e6       	ldi	r25, 0x6F	; 111
    2d18:	f9 2e       	mov	r15, r25
    2d1a:	f1 22       	and	r15, r17
    2d1c:	57 ff       	sbrs	r21, 7
    2d1e:	09 c0       	rjmp	.+18     	; 0x2d32 <vfprintf+0x564>
    2d20:	50 95       	com	r21
    2d22:	40 95       	com	r20
    2d24:	30 95       	com	r19
    2d26:	21 95       	neg	r18
    2d28:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2a:	4f 4f       	sbci	r20, 0xFF	; 255
    2d2c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d2e:	90 e8       	ldi	r25, 0x80	; 128
    2d30:	f9 2a       	or	r15, r25
    2d32:	ca 01       	movw	r24, r20
    2d34:	b9 01       	movw	r22, r18
    2d36:	ae 01       	movw	r20, r28
    2d38:	4f 5f       	subi	r20, 0xFF	; 255
    2d3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d3c:	2a e0       	ldi	r18, 0x0A	; 10
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	0e 94 b4 19 	call	0x3368	; 0x3368 <__ultoa_invert>
    2d44:	e8 2e       	mov	r14, r24
    2d46:	e8 89       	ldd	r30, Y+16	; 0x10
    2d48:	ee 1a       	sub	r14, r30
    2d4a:	41 c0       	rjmp	.+130    	; 0x2dce <vfprintf+0x600>
    2d4c:	95 37       	cpi	r25, 0x75	; 117
    2d4e:	21 f4       	brne	.+8      	; 0x2d58 <vfprintf+0x58a>
    2d50:	1f 7e       	andi	r17, 0xEF	; 239
    2d52:	2a e0       	ldi	r18, 0x0A	; 10
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	1c c0       	rjmp	.+56     	; 0x2d90 <vfprintf+0x5c2>
    2d58:	19 7f       	andi	r17, 0xF9	; 249
    2d5a:	9f 36       	cpi	r25, 0x6F	; 111
    2d5c:	61 f0       	breq	.+24     	; 0x2d76 <vfprintf+0x5a8>
    2d5e:	90 37       	cpi	r25, 0x70	; 112
    2d60:	20 f4       	brcc	.+8      	; 0x2d6a <vfprintf+0x59c>
    2d62:	98 35       	cpi	r25, 0x58	; 88
    2d64:	09 f0       	breq	.+2      	; 0x2d68 <vfprintf+0x59a>
    2d66:	b2 c0       	rjmp	.+356    	; 0x2ecc <vfprintf+0x6fe>
    2d68:	0f c0       	rjmp	.+30     	; 0x2d88 <vfprintf+0x5ba>
    2d6a:	90 37       	cpi	r25, 0x70	; 112
    2d6c:	39 f0       	breq	.+14     	; 0x2d7c <vfprintf+0x5ae>
    2d6e:	98 37       	cpi	r25, 0x78	; 120
    2d70:	09 f0       	breq	.+2      	; 0x2d74 <vfprintf+0x5a6>
    2d72:	ac c0       	rjmp	.+344    	; 0x2ecc <vfprintf+0x6fe>
    2d74:	04 c0       	rjmp	.+8      	; 0x2d7e <vfprintf+0x5b0>
    2d76:	28 e0       	ldi	r18, 0x08	; 8
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	0a c0       	rjmp	.+20     	; 0x2d90 <vfprintf+0x5c2>
    2d7c:	10 61       	ori	r17, 0x10	; 16
    2d7e:	14 fd       	sbrc	r17, 4
    2d80:	14 60       	ori	r17, 0x04	; 4
    2d82:	20 e1       	ldi	r18, 0x10	; 16
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	04 c0       	rjmp	.+8      	; 0x2d90 <vfprintf+0x5c2>
    2d88:	14 fd       	sbrc	r17, 4
    2d8a:	16 60       	ori	r17, 0x06	; 6
    2d8c:	20 e1       	ldi	r18, 0x10	; 16
    2d8e:	32 e0       	ldi	r19, 0x02	; 2
    2d90:	17 ff       	sbrs	r17, 7
    2d92:	08 c0       	rjmp	.+16     	; 0x2da4 <vfprintf+0x5d6>
    2d94:	f6 01       	movw	r30, r12
    2d96:	60 81       	ld	r22, Z
    2d98:	71 81       	ldd	r23, Z+1	; 0x01
    2d9a:	82 81       	ldd	r24, Z+2	; 0x02
    2d9c:	93 81       	ldd	r25, Z+3	; 0x03
    2d9e:	44 e0       	ldi	r20, 0x04	; 4
    2da0:	50 e0       	ldi	r21, 0x00	; 0
    2da2:	08 c0       	rjmp	.+16     	; 0x2db4 <vfprintf+0x5e6>
    2da4:	f6 01       	movw	r30, r12
    2da6:	80 81       	ld	r24, Z
    2da8:	91 81       	ldd	r25, Z+1	; 0x01
    2daa:	bc 01       	movw	r22, r24
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	42 e0       	ldi	r20, 0x02	; 2
    2db2:	50 e0       	ldi	r21, 0x00	; 0
    2db4:	c4 0e       	add	r12, r20
    2db6:	d5 1e       	adc	r13, r21
    2db8:	ae 01       	movw	r20, r28
    2dba:	4f 5f       	subi	r20, 0xFF	; 255
    2dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    2dbe:	0e 94 b4 19 	call	0x3368	; 0x3368 <__ultoa_invert>
    2dc2:	e8 2e       	mov	r14, r24
    2dc4:	58 89       	ldd	r21, Y+16	; 0x10
    2dc6:	e5 1a       	sub	r14, r21
    2dc8:	8f e7       	ldi	r24, 0x7F	; 127
    2dca:	f8 2e       	mov	r15, r24
    2dcc:	f1 22       	and	r15, r17
    2dce:	f6 fe       	sbrs	r15, 6
    2dd0:	0b c0       	rjmp	.+22     	; 0x2de8 <vfprintf+0x61a>
    2dd2:	8e ef       	ldi	r24, 0xFE	; 254
    2dd4:	f8 22       	and	r15, r24
    2dd6:	e9 14       	cp	r14, r9
    2dd8:	38 f4       	brcc	.+14     	; 0x2de8 <vfprintf+0x61a>
    2dda:	f4 fe       	sbrs	r15, 4
    2ddc:	07 c0       	rjmp	.+14     	; 0x2dec <vfprintf+0x61e>
    2dde:	f2 fc       	sbrc	r15, 2
    2de0:	05 c0       	rjmp	.+10     	; 0x2dec <vfprintf+0x61e>
    2de2:	9f ee       	ldi	r25, 0xEF	; 239
    2de4:	f9 22       	and	r15, r25
    2de6:	02 c0       	rjmp	.+4      	; 0x2dec <vfprintf+0x61e>
    2de8:	1e 2d       	mov	r17, r14
    2dea:	01 c0       	rjmp	.+2      	; 0x2dee <vfprintf+0x620>
    2dec:	19 2d       	mov	r17, r9
    2dee:	f4 fe       	sbrs	r15, 4
    2df0:	0d c0       	rjmp	.+26     	; 0x2e0c <vfprintf+0x63e>
    2df2:	fe 01       	movw	r30, r28
    2df4:	ee 0d       	add	r30, r14
    2df6:	f1 1d       	adc	r31, r1
    2df8:	80 81       	ld	r24, Z
    2dfa:	80 33       	cpi	r24, 0x30	; 48
    2dfc:	19 f4       	brne	.+6      	; 0x2e04 <vfprintf+0x636>
    2dfe:	e9 ee       	ldi	r30, 0xE9	; 233
    2e00:	fe 22       	and	r15, r30
    2e02:	08 c0       	rjmp	.+16     	; 0x2e14 <vfprintf+0x646>
    2e04:	1f 5f       	subi	r17, 0xFF	; 255
    2e06:	f2 fe       	sbrs	r15, 2
    2e08:	05 c0       	rjmp	.+10     	; 0x2e14 <vfprintf+0x646>
    2e0a:	03 c0       	rjmp	.+6      	; 0x2e12 <vfprintf+0x644>
    2e0c:	8f 2d       	mov	r24, r15
    2e0e:	86 78       	andi	r24, 0x86	; 134
    2e10:	09 f0       	breq	.+2      	; 0x2e14 <vfprintf+0x646>
    2e12:	1f 5f       	subi	r17, 0xFF	; 255
    2e14:	0f 2d       	mov	r16, r15
    2e16:	f3 fc       	sbrc	r15, 3
    2e18:	14 c0       	rjmp	.+40     	; 0x2e42 <vfprintf+0x674>
    2e1a:	f0 fe       	sbrs	r15, 0
    2e1c:	0f c0       	rjmp	.+30     	; 0x2e3c <vfprintf+0x66e>
    2e1e:	18 15       	cp	r17, r8
    2e20:	10 f0       	brcs	.+4      	; 0x2e26 <vfprintf+0x658>
    2e22:	9e 2c       	mov	r9, r14
    2e24:	0b c0       	rjmp	.+22     	; 0x2e3c <vfprintf+0x66e>
    2e26:	9e 2c       	mov	r9, r14
    2e28:	98 0c       	add	r9, r8
    2e2a:	91 1a       	sub	r9, r17
    2e2c:	18 2d       	mov	r17, r8
    2e2e:	06 c0       	rjmp	.+12     	; 0x2e3c <vfprintf+0x66e>
    2e30:	80 e2       	ldi	r24, 0x20	; 32
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	b3 01       	movw	r22, r6
    2e36:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2e3a:	1f 5f       	subi	r17, 0xFF	; 255
    2e3c:	18 15       	cp	r17, r8
    2e3e:	c0 f3       	brcs	.-16     	; 0x2e30 <vfprintf+0x662>
    2e40:	04 c0       	rjmp	.+8      	; 0x2e4a <vfprintf+0x67c>
    2e42:	18 15       	cp	r17, r8
    2e44:	10 f4       	brcc	.+4      	; 0x2e4a <vfprintf+0x67c>
    2e46:	81 1a       	sub	r8, r17
    2e48:	01 c0       	rjmp	.+2      	; 0x2e4c <vfprintf+0x67e>
    2e4a:	88 24       	eor	r8, r8
    2e4c:	04 ff       	sbrs	r16, 4
    2e4e:	0f c0       	rjmp	.+30     	; 0x2e6e <vfprintf+0x6a0>
    2e50:	80 e3       	ldi	r24, 0x30	; 48
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	b3 01       	movw	r22, r6
    2e56:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2e5a:	02 ff       	sbrs	r16, 2
    2e5c:	1d c0       	rjmp	.+58     	; 0x2e98 <vfprintf+0x6ca>
    2e5e:	01 fd       	sbrc	r16, 1
    2e60:	03 c0       	rjmp	.+6      	; 0x2e68 <vfprintf+0x69a>
    2e62:	88 e7       	ldi	r24, 0x78	; 120
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	0e c0       	rjmp	.+28     	; 0x2e84 <vfprintf+0x6b6>
    2e68:	88 e5       	ldi	r24, 0x58	; 88
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	0b c0       	rjmp	.+22     	; 0x2e84 <vfprintf+0x6b6>
    2e6e:	80 2f       	mov	r24, r16
    2e70:	86 78       	andi	r24, 0x86	; 134
    2e72:	91 f0       	breq	.+36     	; 0x2e98 <vfprintf+0x6ca>
    2e74:	01 ff       	sbrs	r16, 1
    2e76:	02 c0       	rjmp	.+4      	; 0x2e7c <vfprintf+0x6ae>
    2e78:	8b e2       	ldi	r24, 0x2B	; 43
    2e7a:	01 c0       	rjmp	.+2      	; 0x2e7e <vfprintf+0x6b0>
    2e7c:	80 e2       	ldi	r24, 0x20	; 32
    2e7e:	f7 fc       	sbrc	r15, 7
    2e80:	8d e2       	ldi	r24, 0x2D	; 45
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	b3 01       	movw	r22, r6
    2e86:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2e8a:	06 c0       	rjmp	.+12     	; 0x2e98 <vfprintf+0x6ca>
    2e8c:	80 e3       	ldi	r24, 0x30	; 48
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	b3 01       	movw	r22, r6
    2e92:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2e96:	9a 94       	dec	r9
    2e98:	e9 14       	cp	r14, r9
    2e9a:	c0 f3       	brcs	.-16     	; 0x2e8c <vfprintf+0x6be>
    2e9c:	ea 94       	dec	r14
    2e9e:	e1 e0       	ldi	r30, 0x01	; 1
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	ec 0f       	add	r30, r28
    2ea4:	fd 1f       	adc	r31, r29
    2ea6:	ee 0d       	add	r30, r14
    2ea8:	f1 1d       	adc	r31, r1
    2eaa:	80 81       	ld	r24, Z
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	b3 01       	movw	r22, r6
    2eb0:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2eb4:	ee 20       	and	r14, r14
    2eb6:	91 f7       	brne	.-28     	; 0x2e9c <vfprintf+0x6ce>
    2eb8:	06 c0       	rjmp	.+12     	; 0x2ec6 <vfprintf+0x6f8>
    2eba:	80 e2       	ldi	r24, 0x20	; 32
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	b3 01       	movw	r22, r6
    2ec0:	0e 94 88 19 	call	0x3310	; 0x3310 <fputc>
    2ec4:	8a 94       	dec	r8
    2ec6:	88 20       	and	r8, r8
    2ec8:	c1 f7       	brne	.-16     	; 0x2eba <vfprintf+0x6ec>
    2eca:	99 cc       	rjmp	.-1742   	; 0x27fe <vfprintf+0x30>
    2ecc:	f3 01       	movw	r30, r6
    2ece:	66 81       	ldd	r22, Z+6	; 0x06
    2ed0:	77 81       	ldd	r23, Z+7	; 0x07
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	61 96       	adiw	r28, 0x11	; 17
    2ed6:	e2 e1       	ldi	r30, 0x12	; 18
    2ed8:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__epilogue_restores__>

00002edc <malloc>:
    2edc:	cf 93       	push	r28
    2ede:	df 93       	push	r29
    2ee0:	bc 01       	movw	r22, r24
    2ee2:	82 30       	cpi	r24, 0x02	; 2
    2ee4:	91 05       	cpc	r25, r1
    2ee6:	10 f4       	brcc	.+4      	; 0x2eec <malloc+0x10>
    2ee8:	62 e0       	ldi	r22, 0x02	; 2
    2eea:	70 e0       	ldi	r23, 0x00	; 0
    2eec:	a0 91 35 04 	lds	r26, 0x0435
    2ef0:	b0 91 36 04 	lds	r27, 0x0436
    2ef4:	ed 01       	movw	r28, r26
    2ef6:	e0 e0       	ldi	r30, 0x00	; 0
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	40 e0       	ldi	r20, 0x00	; 0
    2efc:	50 e0       	ldi	r21, 0x00	; 0
    2efe:	21 c0       	rjmp	.+66     	; 0x2f42 <malloc+0x66>
    2f00:	88 81       	ld	r24, Y
    2f02:	99 81       	ldd	r25, Y+1	; 0x01
    2f04:	86 17       	cp	r24, r22
    2f06:	97 07       	cpc	r25, r23
    2f08:	69 f4       	brne	.+26     	; 0x2f24 <malloc+0x48>
    2f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f0e:	30 97       	sbiw	r30, 0x00	; 0
    2f10:	19 f0       	breq	.+6      	; 0x2f18 <malloc+0x3c>
    2f12:	93 83       	std	Z+3, r25	; 0x03
    2f14:	82 83       	std	Z+2, r24	; 0x02
    2f16:	04 c0       	rjmp	.+8      	; 0x2f20 <malloc+0x44>
    2f18:	90 93 36 04 	sts	0x0436, r25
    2f1c:	80 93 35 04 	sts	0x0435, r24
    2f20:	fe 01       	movw	r30, r28
    2f22:	34 c0       	rjmp	.+104    	; 0x2f8c <malloc+0xb0>
    2f24:	68 17       	cp	r22, r24
    2f26:	79 07       	cpc	r23, r25
    2f28:	38 f4       	brcc	.+14     	; 0x2f38 <malloc+0x5c>
    2f2a:	41 15       	cp	r20, r1
    2f2c:	51 05       	cpc	r21, r1
    2f2e:	19 f0       	breq	.+6      	; 0x2f36 <malloc+0x5a>
    2f30:	84 17       	cp	r24, r20
    2f32:	95 07       	cpc	r25, r21
    2f34:	08 f4       	brcc	.+2      	; 0x2f38 <malloc+0x5c>
    2f36:	ac 01       	movw	r20, r24
    2f38:	fe 01       	movw	r30, r28
    2f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f3e:	9c 01       	movw	r18, r24
    2f40:	e9 01       	movw	r28, r18
    2f42:	20 97       	sbiw	r28, 0x00	; 0
    2f44:	e9 f6       	brne	.-70     	; 0x2f00 <malloc+0x24>
    2f46:	41 15       	cp	r20, r1
    2f48:	51 05       	cpc	r21, r1
    2f4a:	a9 f1       	breq	.+106    	; 0x2fb6 <malloc+0xda>
    2f4c:	ca 01       	movw	r24, r20
    2f4e:	86 1b       	sub	r24, r22
    2f50:	97 0b       	sbc	r25, r23
    2f52:	04 97       	sbiw	r24, 0x04	; 4
    2f54:	08 f4       	brcc	.+2      	; 0x2f58 <malloc+0x7c>
    2f56:	ba 01       	movw	r22, r20
    2f58:	e0 e0       	ldi	r30, 0x00	; 0
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	2a c0       	rjmp	.+84     	; 0x2fb2 <malloc+0xd6>
    2f5e:	8d 91       	ld	r24, X+
    2f60:	9c 91       	ld	r25, X
    2f62:	11 97       	sbiw	r26, 0x01	; 1
    2f64:	84 17       	cp	r24, r20
    2f66:	95 07       	cpc	r25, r21
    2f68:	f9 f4       	brne	.+62     	; 0x2fa8 <malloc+0xcc>
    2f6a:	64 17       	cp	r22, r20
    2f6c:	75 07       	cpc	r23, r21
    2f6e:	81 f4       	brne	.+32     	; 0x2f90 <malloc+0xb4>
    2f70:	12 96       	adiw	r26, 0x02	; 2
    2f72:	8d 91       	ld	r24, X+
    2f74:	9c 91       	ld	r25, X
    2f76:	13 97       	sbiw	r26, 0x03	; 3
    2f78:	30 97       	sbiw	r30, 0x00	; 0
    2f7a:	19 f0       	breq	.+6      	; 0x2f82 <malloc+0xa6>
    2f7c:	93 83       	std	Z+3, r25	; 0x03
    2f7e:	82 83       	std	Z+2, r24	; 0x02
    2f80:	04 c0       	rjmp	.+8      	; 0x2f8a <malloc+0xae>
    2f82:	90 93 36 04 	sts	0x0436, r25
    2f86:	80 93 35 04 	sts	0x0435, r24
    2f8a:	fd 01       	movw	r30, r26
    2f8c:	32 96       	adiw	r30, 0x02	; 2
    2f8e:	4f c0       	rjmp	.+158    	; 0x302e <malloc+0x152>
    2f90:	ca 01       	movw	r24, r20
    2f92:	86 1b       	sub	r24, r22
    2f94:	97 0b       	sbc	r25, r23
    2f96:	fd 01       	movw	r30, r26
    2f98:	e8 0f       	add	r30, r24
    2f9a:	f9 1f       	adc	r31, r25
    2f9c:	61 93       	st	Z+, r22
    2f9e:	71 93       	st	Z+, r23
    2fa0:	02 97       	sbiw	r24, 0x02	; 2
    2fa2:	8d 93       	st	X+, r24
    2fa4:	9c 93       	st	X, r25
    2fa6:	43 c0       	rjmp	.+134    	; 0x302e <malloc+0x152>
    2fa8:	fd 01       	movw	r30, r26
    2faa:	82 81       	ldd	r24, Z+2	; 0x02
    2fac:	93 81       	ldd	r25, Z+3	; 0x03
    2fae:	9c 01       	movw	r18, r24
    2fb0:	d9 01       	movw	r26, r18
    2fb2:	10 97       	sbiw	r26, 0x00	; 0
    2fb4:	a1 f6       	brne	.-88     	; 0x2f5e <malloc+0x82>
    2fb6:	80 91 33 04 	lds	r24, 0x0433
    2fba:	90 91 34 04 	lds	r25, 0x0434
    2fbe:	89 2b       	or	r24, r25
    2fc0:	41 f4       	brne	.+16     	; 0x2fd2 <malloc+0xf6>
    2fc2:	80 91 f6 02 	lds	r24, 0x02F6
    2fc6:	90 91 f7 02 	lds	r25, 0x02F7
    2fca:	90 93 34 04 	sts	0x0434, r25
    2fce:	80 93 33 04 	sts	0x0433, r24
    2fd2:	40 91 f8 02 	lds	r20, 0x02F8
    2fd6:	50 91 f9 02 	lds	r21, 0x02F9
    2fda:	41 15       	cp	r20, r1
    2fdc:	51 05       	cpc	r21, r1
    2fde:	41 f4       	brne	.+16     	; 0x2ff0 <malloc+0x114>
    2fe0:	4d b7       	in	r20, 0x3d	; 61
    2fe2:	5e b7       	in	r21, 0x3e	; 62
    2fe4:	80 91 f4 02 	lds	r24, 0x02F4
    2fe8:	90 91 f5 02 	lds	r25, 0x02F5
    2fec:	48 1b       	sub	r20, r24
    2fee:	59 0b       	sbc	r21, r25
    2ff0:	20 91 33 04 	lds	r18, 0x0433
    2ff4:	30 91 34 04 	lds	r19, 0x0434
    2ff8:	24 17       	cp	r18, r20
    2ffa:	35 07       	cpc	r19, r21
    2ffc:	b0 f4       	brcc	.+44     	; 0x302a <malloc+0x14e>
    2ffe:	ca 01       	movw	r24, r20
    3000:	82 1b       	sub	r24, r18
    3002:	93 0b       	sbc	r25, r19
    3004:	86 17       	cp	r24, r22
    3006:	97 07       	cpc	r25, r23
    3008:	80 f0       	brcs	.+32     	; 0x302a <malloc+0x14e>
    300a:	ab 01       	movw	r20, r22
    300c:	4e 5f       	subi	r20, 0xFE	; 254
    300e:	5f 4f       	sbci	r21, 0xFF	; 255
    3010:	84 17       	cp	r24, r20
    3012:	95 07       	cpc	r25, r21
    3014:	50 f0       	brcs	.+20     	; 0x302a <malloc+0x14e>
    3016:	42 0f       	add	r20, r18
    3018:	53 1f       	adc	r21, r19
    301a:	50 93 34 04 	sts	0x0434, r21
    301e:	40 93 33 04 	sts	0x0433, r20
    3022:	f9 01       	movw	r30, r18
    3024:	61 93       	st	Z+, r22
    3026:	71 93       	st	Z+, r23
    3028:	02 c0       	rjmp	.+4      	; 0x302e <malloc+0x152>
    302a:	e0 e0       	ldi	r30, 0x00	; 0
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	cf 01       	movw	r24, r30
    3030:	df 91       	pop	r29
    3032:	cf 91       	pop	r28
    3034:	08 95       	ret

00003036 <free>:
    3036:	cf 93       	push	r28
    3038:	df 93       	push	r29
    303a:	00 97       	sbiw	r24, 0x00	; 0
    303c:	09 f4       	brne	.+2      	; 0x3040 <free+0xa>
    303e:	50 c0       	rjmp	.+160    	; 0x30e0 <free+0xaa>
    3040:	ec 01       	movw	r28, r24
    3042:	22 97       	sbiw	r28, 0x02	; 2
    3044:	1b 82       	std	Y+3, r1	; 0x03
    3046:	1a 82       	std	Y+2, r1	; 0x02
    3048:	a0 91 35 04 	lds	r26, 0x0435
    304c:	b0 91 36 04 	lds	r27, 0x0436
    3050:	10 97       	sbiw	r26, 0x00	; 0
    3052:	09 f1       	breq	.+66     	; 0x3096 <free+0x60>
    3054:	40 e0       	ldi	r20, 0x00	; 0
    3056:	50 e0       	ldi	r21, 0x00	; 0
    3058:	ac 17       	cp	r26, r28
    305a:	bd 07       	cpc	r27, r29
    305c:	08 f1       	brcs	.+66     	; 0x30a0 <free+0x6a>
    305e:	bb 83       	std	Y+3, r27	; 0x03
    3060:	aa 83       	std	Y+2, r26	; 0x02
    3062:	fe 01       	movw	r30, r28
    3064:	21 91       	ld	r18, Z+
    3066:	31 91       	ld	r19, Z+
    3068:	e2 0f       	add	r30, r18
    306a:	f3 1f       	adc	r31, r19
    306c:	ae 17       	cp	r26, r30
    306e:	bf 07       	cpc	r27, r31
    3070:	79 f4       	brne	.+30     	; 0x3090 <free+0x5a>
    3072:	8d 91       	ld	r24, X+
    3074:	9c 91       	ld	r25, X
    3076:	11 97       	sbiw	r26, 0x01	; 1
    3078:	28 0f       	add	r18, r24
    307a:	39 1f       	adc	r19, r25
    307c:	2e 5f       	subi	r18, 0xFE	; 254
    307e:	3f 4f       	sbci	r19, 0xFF	; 255
    3080:	39 83       	std	Y+1, r19	; 0x01
    3082:	28 83       	st	Y, r18
    3084:	12 96       	adiw	r26, 0x02	; 2
    3086:	8d 91       	ld	r24, X+
    3088:	9c 91       	ld	r25, X
    308a:	13 97       	sbiw	r26, 0x03	; 3
    308c:	9b 83       	std	Y+3, r25	; 0x03
    308e:	8a 83       	std	Y+2, r24	; 0x02
    3090:	41 15       	cp	r20, r1
    3092:	51 05       	cpc	r21, r1
    3094:	71 f4       	brne	.+28     	; 0x30b2 <free+0x7c>
    3096:	d0 93 36 04 	sts	0x0436, r29
    309a:	c0 93 35 04 	sts	0x0435, r28
    309e:	20 c0       	rjmp	.+64     	; 0x30e0 <free+0xaa>
    30a0:	12 96       	adiw	r26, 0x02	; 2
    30a2:	8d 91       	ld	r24, X+
    30a4:	9c 91       	ld	r25, X
    30a6:	13 97       	sbiw	r26, 0x03	; 3
    30a8:	ad 01       	movw	r20, r26
    30aa:	00 97       	sbiw	r24, 0x00	; 0
    30ac:	11 f0       	breq	.+4      	; 0x30b2 <free+0x7c>
    30ae:	dc 01       	movw	r26, r24
    30b0:	d3 cf       	rjmp	.-90     	; 0x3058 <free+0x22>
    30b2:	fa 01       	movw	r30, r20
    30b4:	d3 83       	std	Z+3, r29	; 0x03
    30b6:	c2 83       	std	Z+2, r28	; 0x02
    30b8:	21 91       	ld	r18, Z+
    30ba:	31 91       	ld	r19, Z+
    30bc:	e2 0f       	add	r30, r18
    30be:	f3 1f       	adc	r31, r19
    30c0:	ce 17       	cp	r28, r30
    30c2:	df 07       	cpc	r29, r31
    30c4:	69 f4       	brne	.+26     	; 0x30e0 <free+0xaa>
    30c6:	88 81       	ld	r24, Y
    30c8:	99 81       	ldd	r25, Y+1	; 0x01
    30ca:	28 0f       	add	r18, r24
    30cc:	39 1f       	adc	r19, r25
    30ce:	2e 5f       	subi	r18, 0xFE	; 254
    30d0:	3f 4f       	sbci	r19, 0xFF	; 255
    30d2:	fa 01       	movw	r30, r20
    30d4:	31 83       	std	Z+1, r19	; 0x01
    30d6:	20 83       	st	Z, r18
    30d8:	8a 81       	ldd	r24, Y+2	; 0x02
    30da:	9b 81       	ldd	r25, Y+3	; 0x03
    30dc:	93 83       	std	Z+3, r25	; 0x03
    30de:	82 83       	std	Z+2, r24	; 0x02
    30e0:	df 91       	pop	r29
    30e2:	cf 91       	pop	r28
    30e4:	08 95       	ret

000030e6 <exit>:
    30e6:	f8 94       	cli
    30e8:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <_exit>

000030ec <__ftoa_engine>:
    30ec:	28 30       	cpi	r18, 0x08	; 8
    30ee:	08 f0       	brcs	.+2      	; 0x30f2 <__ftoa_engine+0x6>
    30f0:	27 e0       	ldi	r18, 0x07	; 7
    30f2:	33 27       	eor	r19, r19
    30f4:	da 01       	movw	r26, r20
    30f6:	99 0f       	add	r25, r25
    30f8:	31 1d       	adc	r19, r1
    30fa:	87 fd       	sbrc	r24, 7
    30fc:	91 60       	ori	r25, 0x01	; 1
    30fe:	00 96       	adiw	r24, 0x00	; 0
    3100:	61 05       	cpc	r22, r1
    3102:	71 05       	cpc	r23, r1
    3104:	39 f4       	brne	.+14     	; 0x3114 <__ftoa_engine+0x28>
    3106:	32 60       	ori	r19, 0x02	; 2
    3108:	2e 5f       	subi	r18, 0xFE	; 254
    310a:	3d 93       	st	X+, r19
    310c:	30 e3       	ldi	r19, 0x30	; 48
    310e:	2a 95       	dec	r18
    3110:	e1 f7       	brne	.-8      	; 0x310a <__ftoa_engine+0x1e>
    3112:	08 95       	ret
    3114:	9f 3f       	cpi	r25, 0xFF	; 255
    3116:	30 f0       	brcs	.+12     	; 0x3124 <__ftoa_engine+0x38>
    3118:	80 38       	cpi	r24, 0x80	; 128
    311a:	71 05       	cpc	r23, r1
    311c:	61 05       	cpc	r22, r1
    311e:	09 f0       	breq	.+2      	; 0x3122 <__ftoa_engine+0x36>
    3120:	3c 5f       	subi	r19, 0xFC	; 252
    3122:	3c 5f       	subi	r19, 0xFC	; 252
    3124:	3d 93       	st	X+, r19
    3126:	91 30       	cpi	r25, 0x01	; 1
    3128:	08 f0       	brcs	.+2      	; 0x312c <__ftoa_engine+0x40>
    312a:	80 68       	ori	r24, 0x80	; 128
    312c:	91 1d       	adc	r25, r1
    312e:	df 93       	push	r29
    3130:	cf 93       	push	r28
    3132:	1f 93       	push	r17
    3134:	0f 93       	push	r16
    3136:	ff 92       	push	r15
    3138:	ef 92       	push	r14
    313a:	19 2f       	mov	r17, r25
    313c:	98 7f       	andi	r25, 0xF8	; 248
    313e:	96 95       	lsr	r25
    3140:	e9 2f       	mov	r30, r25
    3142:	96 95       	lsr	r25
    3144:	96 95       	lsr	r25
    3146:	e9 0f       	add	r30, r25
    3148:	ff 27       	eor	r31, r31
    314a:	e8 5d       	subi	r30, 0xD8	; 216
    314c:	fb 4f       	sbci	r31, 0xFB	; 251
    314e:	99 27       	eor	r25, r25
    3150:	33 27       	eor	r19, r19
    3152:	ee 24       	eor	r14, r14
    3154:	ff 24       	eor	r15, r15
    3156:	a7 01       	movw	r20, r14
    3158:	e7 01       	movw	r28, r14
    315a:	05 90       	lpm	r0, Z+
    315c:	08 94       	sec
    315e:	07 94       	ror	r0
    3160:	28 f4       	brcc	.+10     	; 0x316c <__ftoa_engine+0x80>
    3162:	36 0f       	add	r19, r22
    3164:	e7 1e       	adc	r14, r23
    3166:	f8 1e       	adc	r15, r24
    3168:	49 1f       	adc	r20, r25
    316a:	51 1d       	adc	r21, r1
    316c:	66 0f       	add	r22, r22
    316e:	77 1f       	adc	r23, r23
    3170:	88 1f       	adc	r24, r24
    3172:	99 1f       	adc	r25, r25
    3174:	06 94       	lsr	r0
    3176:	a1 f7       	brne	.-24     	; 0x3160 <__ftoa_engine+0x74>
    3178:	05 90       	lpm	r0, Z+
    317a:	07 94       	ror	r0
    317c:	28 f4       	brcc	.+10     	; 0x3188 <__ftoa_engine+0x9c>
    317e:	e7 0e       	add	r14, r23
    3180:	f8 1e       	adc	r15, r24
    3182:	49 1f       	adc	r20, r25
    3184:	56 1f       	adc	r21, r22
    3186:	c1 1d       	adc	r28, r1
    3188:	77 0f       	add	r23, r23
    318a:	88 1f       	adc	r24, r24
    318c:	99 1f       	adc	r25, r25
    318e:	66 1f       	adc	r22, r22
    3190:	06 94       	lsr	r0
    3192:	a1 f7       	brne	.-24     	; 0x317c <__ftoa_engine+0x90>
    3194:	05 90       	lpm	r0, Z+
    3196:	07 94       	ror	r0
    3198:	28 f4       	brcc	.+10     	; 0x31a4 <__ftoa_engine+0xb8>
    319a:	f8 0e       	add	r15, r24
    319c:	49 1f       	adc	r20, r25
    319e:	56 1f       	adc	r21, r22
    31a0:	c7 1f       	adc	r28, r23
    31a2:	d1 1d       	adc	r29, r1
    31a4:	88 0f       	add	r24, r24
    31a6:	99 1f       	adc	r25, r25
    31a8:	66 1f       	adc	r22, r22
    31aa:	77 1f       	adc	r23, r23
    31ac:	06 94       	lsr	r0
    31ae:	a1 f7       	brne	.-24     	; 0x3198 <__ftoa_engine+0xac>
    31b0:	05 90       	lpm	r0, Z+
    31b2:	07 94       	ror	r0
    31b4:	20 f4       	brcc	.+8      	; 0x31be <__ftoa_engine+0xd2>
    31b6:	49 0f       	add	r20, r25
    31b8:	56 1f       	adc	r21, r22
    31ba:	c7 1f       	adc	r28, r23
    31bc:	d8 1f       	adc	r29, r24
    31be:	99 0f       	add	r25, r25
    31c0:	66 1f       	adc	r22, r22
    31c2:	77 1f       	adc	r23, r23
    31c4:	88 1f       	adc	r24, r24
    31c6:	06 94       	lsr	r0
    31c8:	a9 f7       	brne	.-22     	; 0x31b4 <__ftoa_engine+0xc8>
    31ca:	84 91       	lpm	r24, Z+
    31cc:	10 95       	com	r17
    31ce:	17 70       	andi	r17, 0x07	; 7
    31d0:	41 f0       	breq	.+16     	; 0x31e2 <__ftoa_engine+0xf6>
    31d2:	d6 95       	lsr	r29
    31d4:	c7 95       	ror	r28
    31d6:	57 95       	ror	r21
    31d8:	47 95       	ror	r20
    31da:	f7 94       	ror	r15
    31dc:	e7 94       	ror	r14
    31de:	1a 95       	dec	r17
    31e0:	c1 f7       	brne	.-16     	; 0x31d2 <__ftoa_engine+0xe6>
    31e2:	ee ec       	ldi	r30, 0xCE	; 206
    31e4:	f3 e0       	ldi	r31, 0x03	; 3
    31e6:	68 94       	set
    31e8:	15 90       	lpm	r1, Z+
    31ea:	15 91       	lpm	r17, Z+
    31ec:	35 91       	lpm	r19, Z+
    31ee:	65 91       	lpm	r22, Z+
    31f0:	95 91       	lpm	r25, Z+
    31f2:	05 90       	lpm	r0, Z+
    31f4:	7f e2       	ldi	r23, 0x2F	; 47
    31f6:	73 95       	inc	r23
    31f8:	e1 18       	sub	r14, r1
    31fa:	f1 0a       	sbc	r15, r17
    31fc:	43 0b       	sbc	r20, r19
    31fe:	56 0b       	sbc	r21, r22
    3200:	c9 0b       	sbc	r28, r25
    3202:	d0 09       	sbc	r29, r0
    3204:	c0 f7       	brcc	.-16     	; 0x31f6 <__ftoa_engine+0x10a>
    3206:	e1 0c       	add	r14, r1
    3208:	f1 1e       	adc	r15, r17
    320a:	43 1f       	adc	r20, r19
    320c:	56 1f       	adc	r21, r22
    320e:	c9 1f       	adc	r28, r25
    3210:	d0 1d       	adc	r29, r0
    3212:	7e f4       	brtc	.+30     	; 0x3232 <__ftoa_engine+0x146>
    3214:	70 33       	cpi	r23, 0x30	; 48
    3216:	11 f4       	brne	.+4      	; 0x321c <__ftoa_engine+0x130>
    3218:	8a 95       	dec	r24
    321a:	e6 cf       	rjmp	.-52     	; 0x31e8 <__ftoa_engine+0xfc>
    321c:	e8 94       	clt
    321e:	01 50       	subi	r16, 0x01	; 1
    3220:	30 f0       	brcs	.+12     	; 0x322e <__ftoa_engine+0x142>
    3222:	08 0f       	add	r16, r24
    3224:	0a f4       	brpl	.+2      	; 0x3228 <__ftoa_engine+0x13c>
    3226:	00 27       	eor	r16, r16
    3228:	02 17       	cp	r16, r18
    322a:	08 f4       	brcc	.+2      	; 0x322e <__ftoa_engine+0x142>
    322c:	20 2f       	mov	r18, r16
    322e:	23 95       	inc	r18
    3230:	02 2f       	mov	r16, r18
    3232:	7a 33       	cpi	r23, 0x3A	; 58
    3234:	28 f0       	brcs	.+10     	; 0x3240 <__ftoa_engine+0x154>
    3236:	79 e3       	ldi	r23, 0x39	; 57
    3238:	7d 93       	st	X+, r23
    323a:	2a 95       	dec	r18
    323c:	e9 f7       	brne	.-6      	; 0x3238 <__ftoa_engine+0x14c>
    323e:	10 c0       	rjmp	.+32     	; 0x3260 <__ftoa_engine+0x174>
    3240:	7d 93       	st	X+, r23
    3242:	2a 95       	dec	r18
    3244:	89 f6       	brne	.-94     	; 0x31e8 <__ftoa_engine+0xfc>
    3246:	06 94       	lsr	r0
    3248:	97 95       	ror	r25
    324a:	67 95       	ror	r22
    324c:	37 95       	ror	r19
    324e:	17 95       	ror	r17
    3250:	17 94       	ror	r1
    3252:	e1 18       	sub	r14, r1
    3254:	f1 0a       	sbc	r15, r17
    3256:	43 0b       	sbc	r20, r19
    3258:	56 0b       	sbc	r21, r22
    325a:	c9 0b       	sbc	r28, r25
    325c:	d0 09       	sbc	r29, r0
    325e:	98 f0       	brcs	.+38     	; 0x3286 <__ftoa_engine+0x19a>
    3260:	23 95       	inc	r18
    3262:	7e 91       	ld	r23, -X
    3264:	73 95       	inc	r23
    3266:	7a 33       	cpi	r23, 0x3A	; 58
    3268:	08 f0       	brcs	.+2      	; 0x326c <__ftoa_engine+0x180>
    326a:	70 e3       	ldi	r23, 0x30	; 48
    326c:	7c 93       	st	X, r23
    326e:	20 13       	cpse	r18, r16
    3270:	b8 f7       	brcc	.-18     	; 0x3260 <__ftoa_engine+0x174>
    3272:	7e 91       	ld	r23, -X
    3274:	70 61       	ori	r23, 0x10	; 16
    3276:	7d 93       	st	X+, r23
    3278:	30 f0       	brcs	.+12     	; 0x3286 <__ftoa_engine+0x19a>
    327a:	83 95       	inc	r24
    327c:	71 e3       	ldi	r23, 0x31	; 49
    327e:	7d 93       	st	X+, r23
    3280:	70 e3       	ldi	r23, 0x30	; 48
    3282:	2a 95       	dec	r18
    3284:	e1 f7       	brne	.-8      	; 0x327e <__ftoa_engine+0x192>
    3286:	11 24       	eor	r1, r1
    3288:	ef 90       	pop	r14
    328a:	ff 90       	pop	r15
    328c:	0f 91       	pop	r16
    328e:	1f 91       	pop	r17
    3290:	cf 91       	pop	r28
    3292:	df 91       	pop	r29
    3294:	99 27       	eor	r25, r25
    3296:	87 fd       	sbrc	r24, 7
    3298:	90 95       	com	r25
    329a:	08 95       	ret

0000329c <strnlen_P>:
    329c:	fc 01       	movw	r30, r24
    329e:	05 90       	lpm	r0, Z+
    32a0:	61 50       	subi	r22, 0x01	; 1
    32a2:	70 40       	sbci	r23, 0x00	; 0
    32a4:	01 10       	cpse	r0, r1
    32a6:	d8 f7       	brcc	.-10     	; 0x329e <strnlen_P+0x2>
    32a8:	80 95       	com	r24
    32aa:	90 95       	com	r25
    32ac:	8e 0f       	add	r24, r30
    32ae:	9f 1f       	adc	r25, r31
    32b0:	08 95       	ret

000032b2 <memset>:
    32b2:	dc 01       	movw	r26, r24
    32b4:	01 c0       	rjmp	.+2      	; 0x32b8 <memset+0x6>
    32b6:	6d 93       	st	X+, r22
    32b8:	41 50       	subi	r20, 0x01	; 1
    32ba:	50 40       	sbci	r21, 0x00	; 0
    32bc:	e0 f7       	brcc	.-8      	; 0x32b6 <memset+0x4>
    32be:	08 95       	ret

000032c0 <strnlen>:
    32c0:	fc 01       	movw	r30, r24
    32c2:	61 50       	subi	r22, 0x01	; 1
    32c4:	70 40       	sbci	r23, 0x00	; 0
    32c6:	01 90       	ld	r0, Z+
    32c8:	01 10       	cpse	r0, r1
    32ca:	d8 f7       	brcc	.-10     	; 0x32c2 <strnlen+0x2>
    32cc:	80 95       	com	r24
    32ce:	90 95       	com	r25
    32d0:	8e 0f       	add	r24, r30
    32d2:	9f 1f       	adc	r25, r31
    32d4:	08 95       	ret

000032d6 <fprintf_P>:
    32d6:	a0 e0       	ldi	r26, 0x00	; 0
    32d8:	b0 e0       	ldi	r27, 0x00	; 0
    32da:	e1 e7       	ldi	r30, 0x71	; 113
    32dc:	f9 e1       	ldi	r31, 0x19	; 25
    32de:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <__prologue_saves__+0x1c>
    32e2:	0f 81       	ldd	r16, Y+7	; 0x07
    32e4:	18 85       	ldd	r17, Y+8	; 0x08
    32e6:	9e 01       	movw	r18, r28
    32e8:	25 5f       	subi	r18, 0xF5	; 245
    32ea:	3f 4f       	sbci	r19, 0xFF	; 255
    32ec:	f8 01       	movw	r30, r16
    32ee:	83 81       	ldd	r24, Z+3	; 0x03
    32f0:	88 60       	ori	r24, 0x08	; 8
    32f2:	83 83       	std	Z+3, r24	; 0x03
    32f4:	c8 01       	movw	r24, r16
    32f6:	69 85       	ldd	r22, Y+9	; 0x09
    32f8:	7a 85       	ldd	r23, Y+10	; 0x0a
    32fa:	a9 01       	movw	r20, r18
    32fc:	0e 94 e7 13 	call	0x27ce	; 0x27ce <vfprintf>
    3300:	f8 01       	movw	r30, r16
    3302:	23 81       	ldd	r18, Z+3	; 0x03
    3304:	27 7f       	andi	r18, 0xF7	; 247
    3306:	23 83       	std	Z+3, r18	; 0x03
    3308:	20 96       	adiw	r28, 0x00	; 0
    330a:	e4 e0       	ldi	r30, 0x04	; 4
    330c:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <__epilogue_restores__+0x1c>

00003310 <fputc>:
    3310:	0f 93       	push	r16
    3312:	1f 93       	push	r17
    3314:	cf 93       	push	r28
    3316:	df 93       	push	r29
    3318:	8c 01       	movw	r16, r24
    331a:	eb 01       	movw	r28, r22
    331c:	8b 81       	ldd	r24, Y+3	; 0x03
    331e:	81 ff       	sbrs	r24, 1
    3320:	1b c0       	rjmp	.+54     	; 0x3358 <fputc+0x48>
    3322:	82 ff       	sbrs	r24, 2
    3324:	0d c0       	rjmp	.+26     	; 0x3340 <fputc+0x30>
    3326:	2e 81       	ldd	r18, Y+6	; 0x06
    3328:	3f 81       	ldd	r19, Y+7	; 0x07
    332a:	8c 81       	ldd	r24, Y+4	; 0x04
    332c:	9d 81       	ldd	r25, Y+5	; 0x05
    332e:	28 17       	cp	r18, r24
    3330:	39 07       	cpc	r19, r25
    3332:	64 f4       	brge	.+24     	; 0x334c <fputc+0x3c>
    3334:	e8 81       	ld	r30, Y
    3336:	f9 81       	ldd	r31, Y+1	; 0x01
    3338:	01 93       	st	Z+, r16
    333a:	f9 83       	std	Y+1, r31	; 0x01
    333c:	e8 83       	st	Y, r30
    333e:	06 c0       	rjmp	.+12     	; 0x334c <fputc+0x3c>
    3340:	e8 85       	ldd	r30, Y+8	; 0x08
    3342:	f9 85       	ldd	r31, Y+9	; 0x09
    3344:	80 2f       	mov	r24, r16
    3346:	09 95       	icall
    3348:	89 2b       	or	r24, r25
    334a:	31 f4       	brne	.+12     	; 0x3358 <fputc+0x48>
    334c:	8e 81       	ldd	r24, Y+6	; 0x06
    334e:	9f 81       	ldd	r25, Y+7	; 0x07
    3350:	01 96       	adiw	r24, 0x01	; 1
    3352:	9f 83       	std	Y+7, r25	; 0x07
    3354:	8e 83       	std	Y+6, r24	; 0x06
    3356:	02 c0       	rjmp	.+4      	; 0x335c <fputc+0x4c>
    3358:	0f ef       	ldi	r16, 0xFF	; 255
    335a:	1f ef       	ldi	r17, 0xFF	; 255
    335c:	c8 01       	movw	r24, r16
    335e:	df 91       	pop	r29
    3360:	cf 91       	pop	r28
    3362:	1f 91       	pop	r17
    3364:	0f 91       	pop	r16
    3366:	08 95       	ret

00003368 <__ultoa_invert>:
    3368:	fa 01       	movw	r30, r20
    336a:	aa 27       	eor	r26, r26
    336c:	28 30       	cpi	r18, 0x08	; 8
    336e:	51 f1       	breq	.+84     	; 0x33c4 <__ultoa_invert+0x5c>
    3370:	20 31       	cpi	r18, 0x10	; 16
    3372:	81 f1       	breq	.+96     	; 0x33d4 <__ultoa_invert+0x6c>
    3374:	e8 94       	clt
    3376:	6f 93       	push	r22
    3378:	6e 7f       	andi	r22, 0xFE	; 254
    337a:	6e 5f       	subi	r22, 0xFE	; 254
    337c:	7f 4f       	sbci	r23, 0xFF	; 255
    337e:	8f 4f       	sbci	r24, 0xFF	; 255
    3380:	9f 4f       	sbci	r25, 0xFF	; 255
    3382:	af 4f       	sbci	r26, 0xFF	; 255
    3384:	b1 e0       	ldi	r27, 0x01	; 1
    3386:	3e d0       	rcall	.+124    	; 0x3404 <__ultoa_invert+0x9c>
    3388:	b4 e0       	ldi	r27, 0x04	; 4
    338a:	3c d0       	rcall	.+120    	; 0x3404 <__ultoa_invert+0x9c>
    338c:	67 0f       	add	r22, r23
    338e:	78 1f       	adc	r23, r24
    3390:	89 1f       	adc	r24, r25
    3392:	9a 1f       	adc	r25, r26
    3394:	a1 1d       	adc	r26, r1
    3396:	68 0f       	add	r22, r24
    3398:	79 1f       	adc	r23, r25
    339a:	8a 1f       	adc	r24, r26
    339c:	91 1d       	adc	r25, r1
    339e:	a1 1d       	adc	r26, r1
    33a0:	6a 0f       	add	r22, r26
    33a2:	71 1d       	adc	r23, r1
    33a4:	81 1d       	adc	r24, r1
    33a6:	91 1d       	adc	r25, r1
    33a8:	a1 1d       	adc	r26, r1
    33aa:	20 d0       	rcall	.+64     	; 0x33ec <__ultoa_invert+0x84>
    33ac:	09 f4       	brne	.+2      	; 0x33b0 <__ultoa_invert+0x48>
    33ae:	68 94       	set
    33b0:	3f 91       	pop	r19
    33b2:	2a e0       	ldi	r18, 0x0A	; 10
    33b4:	26 9f       	mul	r18, r22
    33b6:	11 24       	eor	r1, r1
    33b8:	30 19       	sub	r19, r0
    33ba:	30 5d       	subi	r19, 0xD0	; 208
    33bc:	31 93       	st	Z+, r19
    33be:	de f6       	brtc	.-74     	; 0x3376 <__ultoa_invert+0xe>
    33c0:	cf 01       	movw	r24, r30
    33c2:	08 95       	ret
    33c4:	46 2f       	mov	r20, r22
    33c6:	47 70       	andi	r20, 0x07	; 7
    33c8:	40 5d       	subi	r20, 0xD0	; 208
    33ca:	41 93       	st	Z+, r20
    33cc:	b3 e0       	ldi	r27, 0x03	; 3
    33ce:	0f d0       	rcall	.+30     	; 0x33ee <__ultoa_invert+0x86>
    33d0:	c9 f7       	brne	.-14     	; 0x33c4 <__ultoa_invert+0x5c>
    33d2:	f6 cf       	rjmp	.-20     	; 0x33c0 <__ultoa_invert+0x58>
    33d4:	46 2f       	mov	r20, r22
    33d6:	4f 70       	andi	r20, 0x0F	; 15
    33d8:	40 5d       	subi	r20, 0xD0	; 208
    33da:	4a 33       	cpi	r20, 0x3A	; 58
    33dc:	18 f0       	brcs	.+6      	; 0x33e4 <__ultoa_invert+0x7c>
    33de:	49 5d       	subi	r20, 0xD9	; 217
    33e0:	31 fd       	sbrc	r19, 1
    33e2:	40 52       	subi	r20, 0x20	; 32
    33e4:	41 93       	st	Z+, r20
    33e6:	02 d0       	rcall	.+4      	; 0x33ec <__ultoa_invert+0x84>
    33e8:	a9 f7       	brne	.-22     	; 0x33d4 <__ultoa_invert+0x6c>
    33ea:	ea cf       	rjmp	.-44     	; 0x33c0 <__ultoa_invert+0x58>
    33ec:	b4 e0       	ldi	r27, 0x04	; 4
    33ee:	a6 95       	lsr	r26
    33f0:	97 95       	ror	r25
    33f2:	87 95       	ror	r24
    33f4:	77 95       	ror	r23
    33f6:	67 95       	ror	r22
    33f8:	ba 95       	dec	r27
    33fa:	c9 f7       	brne	.-14     	; 0x33ee <__ultoa_invert+0x86>
    33fc:	00 97       	sbiw	r24, 0x00	; 0
    33fe:	61 05       	cpc	r22, r1
    3400:	71 05       	cpc	r23, r1
    3402:	08 95       	ret
    3404:	9b 01       	movw	r18, r22
    3406:	ac 01       	movw	r20, r24
    3408:	0a 2e       	mov	r0, r26
    340a:	06 94       	lsr	r0
    340c:	57 95       	ror	r21
    340e:	47 95       	ror	r20
    3410:	37 95       	ror	r19
    3412:	27 95       	ror	r18
    3414:	ba 95       	dec	r27
    3416:	c9 f7       	brne	.-14     	; 0x340a <__ultoa_invert+0xa2>
    3418:	62 0f       	add	r22, r18
    341a:	73 1f       	adc	r23, r19
    341c:	84 1f       	adc	r24, r20
    341e:	95 1f       	adc	r25, r21
    3420:	a0 1d       	adc	r26, r0
    3422:	08 95       	ret

00003424 <__mulsi3>:
    3424:	62 9f       	mul	r22, r18
    3426:	d0 01       	movw	r26, r0
    3428:	73 9f       	mul	r23, r19
    342a:	f0 01       	movw	r30, r0
    342c:	82 9f       	mul	r24, r18
    342e:	e0 0d       	add	r30, r0
    3430:	f1 1d       	adc	r31, r1
    3432:	64 9f       	mul	r22, r20
    3434:	e0 0d       	add	r30, r0
    3436:	f1 1d       	adc	r31, r1
    3438:	92 9f       	mul	r25, r18
    343a:	f0 0d       	add	r31, r0
    343c:	83 9f       	mul	r24, r19
    343e:	f0 0d       	add	r31, r0
    3440:	74 9f       	mul	r23, r20
    3442:	f0 0d       	add	r31, r0
    3444:	65 9f       	mul	r22, r21
    3446:	f0 0d       	add	r31, r0
    3448:	99 27       	eor	r25, r25
    344a:	72 9f       	mul	r23, r18
    344c:	b0 0d       	add	r27, r0
    344e:	e1 1d       	adc	r30, r1
    3450:	f9 1f       	adc	r31, r25
    3452:	63 9f       	mul	r22, r19
    3454:	b0 0d       	add	r27, r0
    3456:	e1 1d       	adc	r30, r1
    3458:	f9 1f       	adc	r31, r25
    345a:	bd 01       	movw	r22, r26
    345c:	cf 01       	movw	r24, r30
    345e:	11 24       	eor	r1, r1
    3460:	08 95       	ret

00003462 <__udivmodhi4>:
    3462:	aa 1b       	sub	r26, r26
    3464:	bb 1b       	sub	r27, r27
    3466:	51 e1       	ldi	r21, 0x11	; 17
    3468:	07 c0       	rjmp	.+14     	; 0x3478 <__udivmodhi4_ep>

0000346a <__udivmodhi4_loop>:
    346a:	aa 1f       	adc	r26, r26
    346c:	bb 1f       	adc	r27, r27
    346e:	a6 17       	cp	r26, r22
    3470:	b7 07       	cpc	r27, r23
    3472:	10 f0       	brcs	.+4      	; 0x3478 <__udivmodhi4_ep>
    3474:	a6 1b       	sub	r26, r22
    3476:	b7 0b       	sbc	r27, r23

00003478 <__udivmodhi4_ep>:
    3478:	88 1f       	adc	r24, r24
    347a:	99 1f       	adc	r25, r25
    347c:	5a 95       	dec	r21
    347e:	a9 f7       	brne	.-22     	; 0x346a <__udivmodhi4_loop>
    3480:	80 95       	com	r24
    3482:	90 95       	com	r25
    3484:	bc 01       	movw	r22, r24
    3486:	cd 01       	movw	r24, r26
    3488:	08 95       	ret

0000348a <__udivmodsi4>:
    348a:	a1 e2       	ldi	r26, 0x21	; 33
    348c:	1a 2e       	mov	r1, r26
    348e:	aa 1b       	sub	r26, r26
    3490:	bb 1b       	sub	r27, r27
    3492:	fd 01       	movw	r30, r26
    3494:	0d c0       	rjmp	.+26     	; 0x34b0 <__udivmodsi4_ep>

00003496 <__udivmodsi4_loop>:
    3496:	aa 1f       	adc	r26, r26
    3498:	bb 1f       	adc	r27, r27
    349a:	ee 1f       	adc	r30, r30
    349c:	ff 1f       	adc	r31, r31
    349e:	a2 17       	cp	r26, r18
    34a0:	b3 07       	cpc	r27, r19
    34a2:	e4 07       	cpc	r30, r20
    34a4:	f5 07       	cpc	r31, r21
    34a6:	20 f0       	brcs	.+8      	; 0x34b0 <__udivmodsi4_ep>
    34a8:	a2 1b       	sub	r26, r18
    34aa:	b3 0b       	sbc	r27, r19
    34ac:	e4 0b       	sbc	r30, r20
    34ae:	f5 0b       	sbc	r31, r21

000034b0 <__udivmodsi4_ep>:
    34b0:	66 1f       	adc	r22, r22
    34b2:	77 1f       	adc	r23, r23
    34b4:	88 1f       	adc	r24, r24
    34b6:	99 1f       	adc	r25, r25
    34b8:	1a 94       	dec	r1
    34ba:	69 f7       	brne	.-38     	; 0x3496 <__udivmodsi4_loop>
    34bc:	60 95       	com	r22
    34be:	70 95       	com	r23
    34c0:	80 95       	com	r24
    34c2:	90 95       	com	r25
    34c4:	9b 01       	movw	r18, r22
    34c6:	ac 01       	movw	r20, r24
    34c8:	bd 01       	movw	r22, r26
    34ca:	cf 01       	movw	r24, r30
    34cc:	08 95       	ret

000034ce <__divmodsi4>:
    34ce:	97 fb       	bst	r25, 7
    34d0:	09 2e       	mov	r0, r25
    34d2:	05 26       	eor	r0, r21
    34d4:	0e d0       	rcall	.+28     	; 0x34f2 <__divmodsi4_neg1>
    34d6:	57 fd       	sbrc	r21, 7
    34d8:	04 d0       	rcall	.+8      	; 0x34e2 <__divmodsi4_neg2>
    34da:	d7 df       	rcall	.-82     	; 0x348a <__udivmodsi4>
    34dc:	0a d0       	rcall	.+20     	; 0x34f2 <__divmodsi4_neg1>
    34de:	00 1c       	adc	r0, r0
    34e0:	38 f4       	brcc	.+14     	; 0x34f0 <__divmodsi4_exit>

000034e2 <__divmodsi4_neg2>:
    34e2:	50 95       	com	r21
    34e4:	40 95       	com	r20
    34e6:	30 95       	com	r19
    34e8:	21 95       	neg	r18
    34ea:	3f 4f       	sbci	r19, 0xFF	; 255
    34ec:	4f 4f       	sbci	r20, 0xFF	; 255
    34ee:	5f 4f       	sbci	r21, 0xFF	; 255

000034f0 <__divmodsi4_exit>:
    34f0:	08 95       	ret

000034f2 <__divmodsi4_neg1>:
    34f2:	f6 f7       	brtc	.-4      	; 0x34f0 <__divmodsi4_exit>
    34f4:	90 95       	com	r25
    34f6:	80 95       	com	r24
    34f8:	70 95       	com	r23
    34fa:	61 95       	neg	r22
    34fc:	7f 4f       	sbci	r23, 0xFF	; 255
    34fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3500:	9f 4f       	sbci	r25, 0xFF	; 255
    3502:	08 95       	ret

00003504 <__prologue_saves__>:
    3504:	2f 92       	push	r2
    3506:	3f 92       	push	r3
    3508:	4f 92       	push	r4
    350a:	5f 92       	push	r5
    350c:	6f 92       	push	r6
    350e:	7f 92       	push	r7
    3510:	8f 92       	push	r8
    3512:	9f 92       	push	r9
    3514:	af 92       	push	r10
    3516:	bf 92       	push	r11
    3518:	cf 92       	push	r12
    351a:	df 92       	push	r13
    351c:	ef 92       	push	r14
    351e:	ff 92       	push	r15
    3520:	0f 93       	push	r16
    3522:	1f 93       	push	r17
    3524:	cf 93       	push	r28
    3526:	df 93       	push	r29
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
    352c:	ca 1b       	sub	r28, r26
    352e:	db 0b       	sbc	r29, r27
    3530:	0f b6       	in	r0, 0x3f	; 63
    3532:	f8 94       	cli
    3534:	de bf       	out	0x3e, r29	; 62
    3536:	0f be       	out	0x3f, r0	; 63
    3538:	cd bf       	out	0x3d, r28	; 61
    353a:	09 94       	ijmp

0000353c <__epilogue_restores__>:
    353c:	2a 88       	ldd	r2, Y+18	; 0x12
    353e:	39 88       	ldd	r3, Y+17	; 0x11
    3540:	48 88       	ldd	r4, Y+16	; 0x10
    3542:	5f 84       	ldd	r5, Y+15	; 0x0f
    3544:	6e 84       	ldd	r6, Y+14	; 0x0e
    3546:	7d 84       	ldd	r7, Y+13	; 0x0d
    3548:	8c 84       	ldd	r8, Y+12	; 0x0c
    354a:	9b 84       	ldd	r9, Y+11	; 0x0b
    354c:	aa 84       	ldd	r10, Y+10	; 0x0a
    354e:	b9 84       	ldd	r11, Y+9	; 0x09
    3550:	c8 84       	ldd	r12, Y+8	; 0x08
    3552:	df 80       	ldd	r13, Y+7	; 0x07
    3554:	ee 80       	ldd	r14, Y+6	; 0x06
    3556:	fd 80       	ldd	r15, Y+5	; 0x05
    3558:	0c 81       	ldd	r16, Y+4	; 0x04
    355a:	1b 81       	ldd	r17, Y+3	; 0x03
    355c:	aa 81       	ldd	r26, Y+2	; 0x02
    355e:	b9 81       	ldd	r27, Y+1	; 0x01
    3560:	ce 0f       	add	r28, r30
    3562:	d1 1d       	adc	r29, r1
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	f8 94       	cli
    3568:	de bf       	out	0x3e, r29	; 62
    356a:	0f be       	out	0x3f, r0	; 63
    356c:	cd bf       	out	0x3d, r28	; 61
    356e:	ed 01       	movw	r28, r26
    3570:	08 95       	ret

00003572 <__tablejump2__>:
    3572:	ee 0f       	add	r30, r30
    3574:	ff 1f       	adc	r31, r31

00003576 <__tablejump__>:
    3576:	05 90       	lpm	r0, Z+
    3578:	f4 91       	lpm	r31, Z+
    357a:	e0 2d       	mov	r30, r0
    357c:	09 94       	ijmp

0000357e <_exit>:
    357e:	f8 94       	cli

00003580 <__stop_program>:
    3580:	ff cf       	rjmp	.-2      	; 0x3580 <__stop_program>
