
beta.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800200  00003586  0000361a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003586  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000143  00800300  00800300  0000371a  2**0
                  ALLOC
  3 .debug_aranges 000004a0  00000000  00000000  0000371a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000d29  00000000  00000000  00003bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00011234  00000000  00000000  000048e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000044ab  00000000  00000000  00015b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000040e0  00000000  00000000  00019fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000930  00000000  00000000  0001e0a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000022d5  00000000  00000000  0001e9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000020ed  00000000  00000000  00020ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00022d96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__ctors_end>
       4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
       8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
       c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      10:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      14:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      18:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      1c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      20:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      24:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      28:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      2c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      30:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      34:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      38:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      3c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      40:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      44:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      48:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      4c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      50:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      54:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      58:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      5c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      60:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      64:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      68:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      6c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      70:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      74:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      78:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      7c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      80:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      84:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      88:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      8c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      90:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_36>
      94:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      98:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__vector_38>
      9c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      a0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      a4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      a8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      ac:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      b0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      b4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      b8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      bc:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__vector_47>
      c0:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__vector_48>
      c4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      c8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      cc:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      d0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      d4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      d8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      dc:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      e0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>

000000e4 <__c.1790>:
      e4:	6e 61 6e 00                                         nan.

000000e8 <__c.1788>:
      e8:	69 6e 66 00                                         inf.

000000ec <marquee_list>:
      ec:	4e 02                                               N.

000000ee <bank1_list>:
      ee:	76 02 8c 02 a2 02                                   v.....

000000f4 <__timer0Compare>:
      f4:	3e 03 00 6e 00 02 47 00 35 00 02 44 00 06 05 03     >..n..G.5..D....
     104:	42 03 00 6e 00 04 48 00 35 00 04 44 00 04 35 03     B..n..H.5..D..5.

00000114 <__timer1Compare>:
     114:	46 03 01 6f 00 02 88 00 36 00 02 80 00 06 ff 02     F..o....6.......
     124:	4a 03 01 6f 00 04 8a 00 36 00 04 80 00 04 02 03     J..o....6.......
     134:	4e 03 01 6f 00 08 8c 00 36 00 08 80 00 02 05 03     N..o....6.......

00000144 <__timer2Compare>:
     144:	52 03 02 70 00 02 b3 00 37 00 02 b0 00 06 fc 02     R..p....7.......
     154:	56 03 02 70 00 04 b4 00 37 00 04 b0 00 04 41 03     V..p....7.....A.

00000164 <__timer3Compare>:
     164:	5a 03 03 71 00 02 98 00 38 00 02 90 00 06 29 03     Z..q....8.....).
     174:	5e 03 03 71 00 04 9a 00 38 00 04 90 00 04 2c 03     ^..q....8.....,.
     184:	62 03 03 71 00 08 9c 00 38 00 08 90 00 02 2f 03     b..q....8...../.

00000194 <__timer4Compare>:
     194:	66 03 04 72 00 02 a8 00 39 00 02 a0 00 06 38 03     f..r....9.....8.
     1a4:	6a 03 04 72 00 04 aa 00 39 00 04 a0 00 04 3b 03     j..r....9.....;.
     1b4:	6e 03 04 72 00 08 ac 00 39 00 08 a0 00 02 3e 03     n..r....9.....>.

000001c4 <__timer5Compare>:
     1c4:	72 03 05 73 00 02 28 01 3a 00 02 20 01 06 4a 03     r..s..(.:.. ..J.
     1d4:	76 03 05 73 00 04 2a 01 3a 00 04 20 01 04 4d 03     v..s..*.:.. ..M.
     1e4:	7a 03 05 73 00 08 2c 01 3a 00 08 20 01 02 50 03     z..s..,.:.. ..P.

000001f4 <pgm_Timers>:
     1f4:	7e 03 46 00 45 00 00 00 02 33 88 44 00 01 44 00     ~.F.E....3.D..D.
     204:	02 45 00 08 00 00 01 f4 00 6e 00 01 35 00 01 00     .E.......n..5...
     214:	00 00 00 01 00 00 01 00 00 01 00 00 89 03 84 00     ................
     224:	81 00 ff 00 03 ff df 80 00 01 80 00 02 81 00 08     ................
     234:	81 00 10 14 01 6f 00 01 36 00 01 86 00 6f 00 20     .....o..6....o. 
     244:	36 00 20 81 00 40 00 00 94 03 b2 00 b1 00 00 ff     6. ..@..........
     254:	02 33 88 b0 00 01 b0 00 02 b1 00 08 00 00 01 44     .3.............D
     264:	01 70 00 01 37 00 01 00 00 00 00 01 00 00 01 00     .p..7...........
     274:	00 01 00 00 9f 03 94 00 91 00 ff 00 03 ff df 90     ................
     284:	00 01 90 00 02 91 00 08 91 00 10 64 01 71 00 01     ...........d.q..
     294:	38 00 01 96 00 71 00 20 38 00 20 91 00 40 32 03     8....q. 8. ..@2.
     2a4:	aa 03 a4 00 a1 00 ff 00 03 ff df a0 00 01 a0 00     ................
     2b4:	02 a1 00 08 a1 00 10 94 01 72 00 01 39 00 01 a6     .........r..9...
     2c4:	00 72 00 20 39 00 20 a1 00 40 44 03 b5 03 24 01     .r. 9. ..@D...$.
     2d4:	21 01 ff 00 03 ff df 20 01 01 20 01 02 21 01 08     !...... .. ..!..
     2e4:	21 01 10 c4 01 73 00 01 3a 00 01 26 01 73 00 20     !....s..:..&.s. 
     2f4:	3a 00 20 21 01 40 47 03                             :. !.@G.

000002fc <_B4>:
     2fc:	55 03 10                                            U..

000002ff <_B5>:
     2ff:	55 03 20                                            U. 

00000302 <_B6>:
     302:	55 03 40                                            U.@

00000305 <_B7>:
     305:	55 03 80                                            U..

00000308 <_C0>:
     308:	5b 03 01                                            [..

0000030b <_C1>:
     30b:	5b 03 02                                            [..

0000030e <_C2>:
     30e:	5b 03 04                                            [..

00000311 <_C3>:
     311:	5b 03 08                                            [..

00000314 <_C4>:
     314:	5b 03 10                                            [..

00000317 <_C5>:
     317:	5b 03 20                                            [. 

0000031a <_D2>:
     31a:	61 03 04                                            a..

0000031d <_D3>:
     31d:	61 03 08                                            a..

00000320 <_D5>:
     320:	61 03 20                                            a. 

00000323 <_D6>:
     323:	61 03 40                                            a.@

00000326 <_D7>:
     326:	61 03 80                                            a..

00000329 <_E3>:
     329:	67 03 08                                            g..

0000032c <_E4>:
     32c:	67 03 10                                            g..

0000032f <_E5>:
     32f:	67 03 20                                            g. 

00000332 <_E7>:
     332:	67 03 80                                            g..

00000335 <_G5>:
     335:	6d 03 20                                            m. 

00000338 <_H3>:
     338:	73 03 08                                            s..

0000033b <_H4>:
     33b:	73 03 10                                            s..

0000033e <_H5>:
     33e:	73 03 20                                            s. 

00000341 <_H6>:
     341:	73 03 40                                            s.@

00000344 <_L0>:
     344:	79 03 01                                            y..

00000347 <_L1>:
     347:	79 03 02                                            y..

0000034a <_L3>:
     34a:	79 03 08                                            y..

0000034d <_L4>:
     34d:	79 03 10                                            y..

00000350 <_L5>:
     350:	79 03 20                                            y. 

00000353 <AVcc_MV>:
     353:	88 13                                               ..

00000355 <_PORTB>:
     355:	25 00 24 00 23 00                                   %.$.#.

0000035b <_PORTC>:
     35b:	28 00 27 00 26 00                                   (.'.&.

00000361 <_PORTD>:
     361:	2b 00 2a 00 29 00                                   +.*.).

00000367 <_PORTE>:
     367:	2e 00 2d 00 2c 00                                   ..-.,.

0000036d <_PORTG>:
     36d:	34 00 33 00 32 00                                   4.3.2.

00000373 <_PORTH>:
     373:	02 01 01 01 00 01                                   ......

00000379 <_PORTL>:
     379:	0b 01 0a 01 09 01                                   ......

0000037f <c_servoPWM>:
     37f:	0f 0a 07 0a                                         ....

00000383 <__c.1911>:
     383:	20 45 72 72 6f 72 3a 25 64 0d 0a 00                  Error:%d...

0000038f <__c.1909>:
     38f:	55 73 65 72 00                                      User.

00000394 <__c.1907>:
     394:	57 65 62 62 6f 74 4c 69 62 00                       WebbotLib.

0000039e <atoz>:
     39e:	ee 3e 9c 7a 9e 8e f6 2e 0c 78 ae 1c aa 2a 3a ce     .>.z.....x...*:.
     3ae:	e6 0a b6 1e 38 7c b8 6e 76 da                       ....8|.nv.

000003b8 <digits>:
     3b8:	fc 60 da f2 66 b6 3e e0 fe e6                       .`..f.>...

000003c2 <c_hw_uart>:
     3c2:	b0 0f 66 10 82 10 3b 10 6d 10 51 10 00 40 7a 10     ..f...;.m.Q..@z.
     3d2:	f3 5a 00 a0 72 4e 18 09 00 10 a5 d4 e8 00 00 e8     .Z..rN..........
     3e2:	76 48 17 00 00 e4 0b 54 02 00 00 ca 9a 3b 00 00     vH.....T.....;..
     3f2:	00 e1 f5 05 00 00 80 96 98 00 00 00 40 42 0f 00     ............@B..
     402:	00 00 a0 86 01 00 00 00 10 27 00 00 00 00 e8 03     .........'......
     412:	00 00 00 00 64 00 00 00 00 00 0a 00 00 00 00 00     ....d...........
     422:	01 00 00 00 00 00 2c 76 d8 88 dc 67 4f 08 23 df     ......,v...gO.#.
     432:	c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51     ...Y.......S.:.Q
     442:	99 76 96 e8 e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c     .v.....&....b.@|
     452:	6f fc ef bc 9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a     o.....@...o....Z
     462:	2a f7 5c 93 6b 6c f9 67 6d c1 1b fc e0 e4 0d 47     *.\.kl.gm......G
     472:	fe f5 20 e6 b5 00 d0 ed 90 2e 03 00 94 35 77 05     .. ..........5w.
     482:	00 80 84 1e 08 00 00 20 4e 0a 00 00 00 c8 0c 33     ....... N......3
     492:	33 33 33 0f 98 6e 12 83 11 41 ef 8d 21 14 89 3b     333..n...A..!..;
     4a2:	e6 55 16 cf fe e6 db 18 d1 84 4b 38 1b f7 7c 1d     .U........K8..|.
     4b2:	90 1d a4 bb e4 24 20 32 84 72 5e 22 81 00 c9 f1     .....$ 2.r^"....
     4c2:	24 ec a1 e5 3d 27                                   $...='

000004c8 <__ctors_start>:
     4c8:	b5 02       	muls	r27, r21
     4ca:	7d 08       	sbc	r7, r13
     4cc:	8d 08       	sbc	r8, r13

000004ce <__ctors_end>:
     4ce:	11 24       	eor	r1, r1
     4d0:	1f be       	out	0x3f, r1	; 63
     4d2:	cf ef       	ldi	r28, 0xFF	; 255
     4d4:	d1 e2       	ldi	r29, 0x21	; 33
     4d6:	de bf       	out	0x3e, r29	; 62
     4d8:	cd bf       	out	0x3d, r28	; 61

000004da <__do_copy_data>:
     4da:	13 e0       	ldi	r17, 0x03	; 3
     4dc:	a0 e0       	ldi	r26, 0x00	; 0
     4de:	b2 e0       	ldi	r27, 0x02	; 2
     4e0:	e6 e8       	ldi	r30, 0x86	; 134
     4e2:	f5 e3       	ldi	r31, 0x35	; 53
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <.do_copy_data_start>

000004e6 <.do_copy_data_loop>:
     4e6:	05 90       	lpm	r0, Z+
     4e8:	0d 92       	st	X+, r0

000004ea <.do_copy_data_start>:
     4ea:	a0 30       	cpi	r26, 0x00	; 0
     4ec:	b1 07       	cpc	r27, r17
     4ee:	d9 f7       	brne	.-10     	; 0x4e6 <.do_copy_data_loop>

000004f0 <__do_clear_bss>:
     4f0:	14 e0       	ldi	r17, 0x04	; 4
     4f2:	a0 e0       	ldi	r26, 0x00	; 0
     4f4:	b3 e0       	ldi	r27, 0x03	; 3
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <.do_clear_bss_start>

000004f8 <.do_clear_bss_loop>:
     4f8:	1d 92       	st	X+, r1

000004fa <.do_clear_bss_start>:
     4fa:	a3 34       	cpi	r26, 0x43	; 67
     4fc:	b1 07       	cpc	r27, r17
     4fe:	e1 f7       	brne	.-8      	; 0x4f8 <.do_clear_bss_loop>

00000500 <__do_global_ctors>:
     500:	14 e0       	ldi	r17, 0x04	; 4
     502:	ce ec       	ldi	r28, 0xCE	; 206
     504:	d4 e0       	ldi	r29, 0x04	; 4
     506:	04 c0       	rjmp	.+8      	; 0x510 <.do_global_ctors_start>

00000508 <.do_global_ctors_loop>:
     508:	22 97       	sbiw	r28, 0x02	; 2
     50a:	fe 01       	movw	r30, r28
     50c:	0e 94 bd 1a 	call	0x357a	; 0x357a <__tablejump__>

00000510 <.do_global_ctors_start>:
     510:	c8 3c       	cpi	r28, 0xC8	; 200
     512:	d1 07       	cpc	r29, r17
     514:	c9 f7       	brne	.-14     	; 0x508 <.do_global_ctors_loop>
     516:	0e 94 35 0c 	call	0x186a	; 0x186a <main>
     51a:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <exit>

0000051e <__bad_interrupt>:
     51e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000522 <_Z41__static_initialization_and_destruction_0ii>:
	servo2.setSpeed(speed);
	servo3.setSpeed(speed);
	// -------- End   Actuators -------
*/
	return 0;
}
     522:	df 93       	push	r29
     524:	cf 93       	push	r28
     526:	00 d0       	rcall	.+0      	; 0x528 <_Z41__static_initialization_and_destruction_0ii+0x6>
     528:	00 d0       	rcall	.+0      	; 0x52a <_Z41__static_initialization_and_destruction_0ii+0x8>
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	9a 83       	std	Y+2, r25	; 0x02
     530:	89 83       	std	Y+1, r24	; 0x01
     532:	7c 83       	std	Y+4, r23	; 0x04
     534:	6b 83       	std	Y+3, r22	; 0x03
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	9a 81       	ldd	r25, Y+2	; 0x02
     53a:	81 30       	cpi	r24, 0x01	; 1
     53c:	91 05       	cpc	r25, r1
     53e:	71 f4       	brne	.+28     	; 0x55c <_Z41__static_initialization_and_destruction_0ii+0x3a>
     540:	8b 81       	ldd	r24, Y+3	; 0x03
     542:	9c 81       	ldd	r25, Y+4	; 0x04
     544:	2f ef       	ldi	r18, 0xFF	; 255
     546:	8f 3f       	cpi	r24, 0xFF	; 255
     548:	92 07       	cpc	r25, r18
     54a:	41 f4       	brne	.+16     	; 0x55c <_Z41__static_initialization_and_destruction_0ii+0x3a>
#include "hardware.h"
#include "protocol.h"
#include "services.h"

Protocol test;
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	93 e0       	ldi	r25, 0x03	; 3
     550:	0e 94 d3 05 	call	0xba6	; 0xba6 <_ZN8ProtocolC1Ev>
PingService ping;
     554:	89 e3       	ldi	r24, 0x39	; 57
     556:	93 e0       	ldi	r25, 0x03	; 3
     558:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN11PingServiceC1Ev>
	servo2.setSpeed(speed);
	servo3.setSpeed(speed);
	// -------- End   Actuators -------
*/
	return 0;
}
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	cf 91       	pop	r28
     566:	df 91       	pop	r29
     568:	08 95       	ret

0000056a <_GLOBAL__I_test>:
     56a:	df 93       	push	r29
     56c:	cf 93       	push	r28
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	6f ef       	ldi	r22, 0xFF	; 255
     578:	7f ef       	ldi	r23, 0xFF	; 255
     57a:	0e 94 91 02 	call	0x522	; 0x522 <_Z41__static_initialization_and_destruction_0ii>
     57e:	cf 91       	pop	r28
     580:	df 91       	pop	r29
     582:	08 95       	ret

00000584 <appControl>:
	return 0;
}


// This is the main loop
TICK_COUNT appControl(LOOP_COUNT loopCount, TICK_COUNT loopStart) {
     584:	df 93       	push	r29
     586:	cf 93       	push	r28
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
     58c:	28 97       	sbiw	r28, 0x08	; 8
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
     598:	69 83       	std	Y+1, r22	; 0x01
     59a:	7a 83       	std	Y+2, r23	; 0x02
     59c:	8b 83       	std	Y+3, r24	; 0x03
     59e:	9c 83       	std	Y+4, r25	; 0x04
     5a0:	2d 83       	std	Y+5, r18	; 0x05
     5a2:	3e 83       	std	Y+6, r19	; 0x06
     5a4:	4f 83       	std	Y+7, r20	; 0x07
     5a6:	58 87       	std	Y+8, r21	; 0x08

    
	// treat input/output for the protocol
	test.treatIO();
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	93 e0       	ldi	r25, 0x03	; 3
     5ac:	0e 94 9a 05 	call	0xb34	; 0xb34 <_ZN8Protocol7treatIOEv>
	test.receive();
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	93 e0       	ldi	r25, 0x03	; 3
     5b4:	0e 94 90 03 	call	0x720	; 0x720 <_ZN8Protocol7receiveEv>
	servo1.setSpeed(speed);
	servo2.setSpeed(speed);
	servo3.setSpeed(speed);
	// -------- End   Actuators -------
*/
	return 0;
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	a0 e0       	ldi	r26, 0x00	; 0
     5be:	b0 e0       	ldi	r27, 0x00	; 0
}
     5c0:	bc 01       	movw	r22, r24
     5c2:	cd 01       	movw	r24, r26
     5c4:	28 96       	adiw	r28, 0x08	; 8
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
     5d0:	cf 91       	pop	r28
     5d2:	df 91       	pop	r29
     5d4:	08 95       	ret

000005d6 <_ZN6UartHW14setPollingModeEa>:

		return ch;
	}

	// Put the receiver in polling mode (TRUE) or interrupt mode (FALSE)
	void setPollingMode(boolean polling){
     5d6:	df 93       	push	r29
     5d8:	cf 93       	push	r28
     5da:	00 d0       	rcall	.+0      	; 0x5dc <_ZN6UartHW14setPollingModeEa+0x6>
     5dc:	0f 92       	push	r0
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	9a 83       	std	Y+2, r25	; 0x02
     5e4:	89 83       	std	Y+1, r24	; 0x01
     5e6:	6b 83       	std	Y+3, r22	; 0x03
		uartReceivePollingMode(m_hw, polling);
     5e8:	e9 81       	ldd	r30, Y+1	; 0x01
     5ea:	fa 81       	ldd	r31, Y+2	; 0x02
     5ec:	86 89       	ldd	r24, Z+22	; 0x16
     5ee:	97 89       	ldd	r25, Z+23	; 0x17
     5f0:	6b 81       	ldd	r22, Y+3	; 0x03
     5f2:	0e 94 72 11 	call	0x22e4	; 0x22e4 <uartReceivePollingMode>
		m_polling = polling;
     5f6:	e9 81       	ldd	r30, Y+1	; 0x01
     5f8:	fa 81       	ldd	r31, Y+2	; 0x02
     5fa:	8b 81       	ldd	r24, Y+3	; 0x03
     5fc:	80 8f       	std	Z+24, r24	; 0x18
	}
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	cf 91       	pop	r28
     606:	df 91       	pop	r29
     608:	08 95       	ret

0000060a <appInitSoftware>:
	initHardware();
}


// Initialise the software
TICK_COUNT appInitSoftware(TICK_COUNT loopStart){
     60a:	df 93       	push	r29
     60c:	cf 93       	push	r28
     60e:	00 d0       	rcall	.+0      	; 0x610 <appInitSoftware+0x6>
     610:	00 d0       	rcall	.+0      	; 0x612 <appInitSoftware+0x8>
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	69 83       	std	Y+1, r22	; 0x01
     618:	7a 83       	std	Y+2, r23	; 0x02
     61a:	8b 83       	std	Y+3, r24	; 0x03
     61c:	9c 83       	std	Y+4, r25	; 0x04
	uart1.setPollingMode(false);
     61e:	8b ee       	ldi	r24, 0xEB	; 235
     620:	93 e0       	ldi	r25, 0x03	; 3
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <_ZN6UartHW14setPollingModeEa>
	test.init(&uart1);
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	93 e0       	ldi	r25, 0x03	; 3
     62c:	2b ee       	ldi	r18, 0xEB	; 235
     62e:	33 e0       	ldi	r19, 0x03	; 3
     630:	b9 01       	movw	r22, r18
     632:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_ZN8Protocol4initEP6UartHW>
    ping.init(&test);
     636:	89 e3       	ldi	r24, 0x39	; 57
     638:	93 e0       	ldi	r25, 0x03	; 3
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	33 e0       	ldi	r19, 0x03	; 3
     63e:	b9 01       	movw	r22, r18
     640:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN7Service4initEP8Protocol>
	return 0;
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	a0 e0       	ldi	r26, 0x00	; 0
     64a:	b0 e0       	ldi	r27, 0x00	; 0
}
     64c:	bc 01       	movw	r22, r24
     64e:	cd 01       	movw	r24, r26
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	cf 91       	pop	r28
     65a:	df 91       	pop	r29
     65c:	08 95       	ret

0000065e <appInitHardware>:

Protocol test;
PingService ping;

// Initialise the hardware
void appInitHardware(void) {
     65e:	df 93       	push	r29
     660:	cf 93       	push	r28
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
	initHardware();
     666:	0e 94 02 07 	call	0xe04	; 0xe04 <initHardware>
}
     66a:	cf 91       	pop	r28
     66c:	df 91       	pop	r29
     66e:	08 95       	ret

00000670 <__iCliRetVal>:
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
     670:	df 93       	push	r29
     672:	cf 93       	push	r28
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	f8 94       	cli
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	cf 91       	pop	r28
     67e:	df 91       	pop	r29
     680:	08 95       	ret

00000682 <__iRestore>:
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
     682:	df 93       	push	r29
     684:	cf 93       	push	r28
     686:	00 d0       	rcall	.+0      	; 0x688 <__iRestore+0x6>
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	9a 83       	std	Y+2, r25	; 0x02
     68e:	89 83       	std	Y+1, r24	; 0x01
     690:	ef e5       	ldi	r30, 0x5F	; 95
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	a9 81       	ldd	r26, Y+1	; 0x01
     696:	ba 81       	ldd	r27, Y+2	; 0x02
     698:	8c 91       	ld	r24, X
     69a:	80 83       	st	Z, r24
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	cf 91       	pop	r28
     6a2:	df 91       	pop	r29
     6a4:	08 95       	ret

000006a6 <_ZN6PacketC2Ev>:
#include <stdio.h>
#include <string.h>
#include "protocol.h"

Packet::Packet()
     6a6:	df 93       	push	r29
     6a8:	cf 93       	push	r28
     6aa:	00 d0       	rcall	.+0      	; 0x6ac <_ZN6PacketC2Ev+0x6>
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	9a 83       	std	Y+2, r25	; 0x02
     6b2:	89 83       	std	Y+1, r24	; 0x01
{
	command = PROT_ERROR;
     6b4:	e9 81       	ldd	r30, Y+1	; 0x01
     6b6:	fa 81       	ldd	r31, Y+2	; 0x02
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	80 83       	st	Z, r24
	len = 0;
     6bc:	e9 81       	ldd	r30, Y+1	; 0x01
     6be:	fa 81       	ldd	r31, Y+2	; 0x02
     6c0:	11 82       	std	Z+1, r1	; 0x01
}
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	cf 91       	pop	r28
     6c8:	df 91       	pop	r29
     6ca:	08 95       	ret

000006cc <_ZN6PacketC1Ev>:
#include <stdio.h>
#include <string.h>
#include "protocol.h"

Packet::Packet()
     6cc:	df 93       	push	r29
     6ce:	cf 93       	push	r28
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <_ZN6PacketC1Ev+0x6>
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	9a 83       	std	Y+2, r25	; 0x02
     6d8:	89 83       	std	Y+1, r24	; 0x01
{
	command = PROT_ERROR;
     6da:	e9 81       	ldd	r30, Y+1	; 0x01
     6dc:	fa 81       	ldd	r31, Y+2	; 0x02
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	80 83       	st	Z, r24
	len = 0;
     6e2:	e9 81       	ldd	r30, Y+1	; 0x01
     6e4:	fa 81       	ldd	r31, Y+2	; 0x02
     6e6:	11 82       	std	Z+1, r1	; 0x01
}
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	cf 91       	pop	r28
     6ee:	df 91       	pop	r29
     6f0:	08 95       	ret

000006f2 <_ZN8Protocol4initEP6UartHW>:
	memset(in, 0, Protocol::BUFFER_SIZE);
	memset(out, 0, Protocol::BUFFER_SIZE);
	haveMessage = false;
}

void Protocol::init(UartHW *uart)
     6f2:	df 93       	push	r29
     6f4:	cf 93       	push	r28
     6f6:	00 d0       	rcall	.+0      	; 0x6f8 <_ZN8Protocol4initEP6UartHW+0x6>
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <_ZN8Protocol4initEP6UartHW+0x8>
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
     6fe:	9a 83       	std	Y+2, r25	; 0x02
     700:	89 83       	std	Y+1, r24	; 0x01
     702:	7c 83       	std	Y+4, r23	; 0x04
     704:	6b 83       	std	Y+3, r22	; 0x03
{
	_uart = uart;
     706:	e9 81       	ldd	r30, Y+1	; 0x01
     708:	fa 81       	ldd	r31, Y+2	; 0x02
     70a:	8b 81       	ldd	r24, Y+3	; 0x03
     70c:	9c 81       	ldd	r25, Y+4	; 0x04
     70e:	95 87       	std	Z+13, r25	; 0x0d
     710:	84 87       	std	Z+12, r24	; 0x0c
}
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	cf 91       	pop	r28
     71c:	df 91       	pop	r29
     71e:	08 95       	ret

00000720 <_ZN8Protocol7receiveEv>:
	DUMP(c, 0x01);

	*_uart<<'\n';
}

bool Protocol::receive()
     720:	df 93       	push	r29
     722:	cf 93       	push	r28
     724:	00 d0       	rcall	.+0      	; 0x726 <_ZN8Protocol7receiveEv+0x6>
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	9a 83       	std	Y+2, r25	; 0x02
     72c:	89 83       	std	Y+1, r24	; 0x01
        	in_offset = 0;
			_write("true", 4);
        	return true;
		}
    }*/
	return false;
     72e:	80 e0       	ldi	r24, 0x00	; 0
}
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	cf 91       	pop	r28
     736:	df 91       	pop	r29
     738:	08 95       	ret

0000073a <_ZN8Protocol4sendER6Packet>:

void Protocol::send(Packet &msg)
     73a:	df 93       	push	r29
     73c:	cf 93       	push	r28
     73e:	00 d0       	rcall	.+0      	; 0x740 <_ZN8Protocol4sendER6Packet+0x6>
     740:	00 d0       	rcall	.+0      	; 0x742 <_ZN8Protocol4sendER6Packet+0x8>
     742:	00 d0       	rcall	.+0      	; 0x744 <_ZN8Protocol4sendER6Packet+0xa>
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	9c 83       	std	Y+4, r25	; 0x04
     74a:	8b 83       	std	Y+3, r24	; 0x03
     74c:	7e 83       	std	Y+6, r23	; 0x06
     74e:	6d 83       	std	Y+5, r22	; 0x05
{
    if((out_offset + msg.len + 2) < Protocol::BUFFER_SIZE)
     750:	eb 81       	ldd	r30, Y+3	; 0x03
     752:	fc 81       	ldd	r31, Y+4	; 0x04
     754:	87 a9       	ldd	r24, Z+55	; 0x37
     756:	28 2f       	mov	r18, r24
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	ed 81       	ldd	r30, Y+5	; 0x05
     75c:	fe 81       	ldd	r31, Y+6	; 0x06
     75e:	81 81       	ldd	r24, Z+1	; 0x01
     760:	88 2f       	mov	r24, r24
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	82 0f       	add	r24, r18
     766:	93 1f       	adc	r25, r19
     768:	02 96       	adiw	r24, 0x02	; 2
     76a:	84 31       	cpi	r24, 0x14	; 20
     76c:	91 05       	cpc	r25, r1
     76e:	0c f0       	brlt	.+2      	; 0x772 <_ZN8Protocol4sendER6Packet+0x38>
     770:	54 c0       	rjmp	.+168    	; 0x81a <_ZN8Protocol4sendER6Packet+0xe0>
    {
        out[out_offset++] = msg.command;
     772:	eb 81       	ldd	r30, Y+3	; 0x03
     774:	fc 81       	ldd	r31, Y+4	; 0x04
     776:	57 a9       	ldd	r21, Z+55	; 0x37
     778:	25 2f       	mov	r18, r21
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	ed 81       	ldd	r30, Y+5	; 0x05
     77e:	fe 81       	ldd	r31, Y+6	; 0x06
     780:	40 81       	ld	r20, Z
     782:	8b 81       	ldd	r24, Y+3	; 0x03
     784:	9c 81       	ldd	r25, Y+4	; 0x04
     786:	82 0f       	add	r24, r18
     788:	93 1f       	adc	r25, r19
     78a:	fc 01       	movw	r30, r24
     78c:	b2 96       	adiw	r30, 0x22	; 34
     78e:	40 83       	st	Z, r20
     790:	85 2f       	mov	r24, r21
     792:	8f 5f       	subi	r24, 0xFF	; 255
     794:	eb 81       	ldd	r30, Y+3	; 0x03
     796:	fc 81       	ldd	r31, Y+4	; 0x04
     798:	87 ab       	std	Z+55, r24	; 0x37
        out[out_offset++] = msg.len;
     79a:	eb 81       	ldd	r30, Y+3	; 0x03
     79c:	fc 81       	ldd	r31, Y+4	; 0x04
     79e:	57 a9       	ldd	r21, Z+55	; 0x37
     7a0:	25 2f       	mov	r18, r21
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	ed 81       	ldd	r30, Y+5	; 0x05
     7a6:	fe 81       	ldd	r31, Y+6	; 0x06
     7a8:	41 81       	ldd	r20, Z+1	; 0x01
     7aa:	8b 81       	ldd	r24, Y+3	; 0x03
     7ac:	9c 81       	ldd	r25, Y+4	; 0x04
     7ae:	82 0f       	add	r24, r18
     7b0:	93 1f       	adc	r25, r19
     7b2:	fc 01       	movw	r30, r24
     7b4:	b2 96       	adiw	r30, 0x22	; 34
     7b6:	40 83       	st	Z, r20
     7b8:	85 2f       	mov	r24, r21
     7ba:	8f 5f       	subi	r24, 0xFF	; 255
     7bc:	eb 81       	ldd	r30, Y+3	; 0x03
     7be:	fc 81       	ldd	r31, Y+4	; 0x04
     7c0:	87 ab       	std	Z+55, r24	; 0x37
        for(int i=0;i<msg.len;i++)
     7c2:	1a 82       	std	Y+2, r1	; 0x02
     7c4:	19 82       	std	Y+1, r1	; 0x01
     7c6:	1f c0       	rjmp	.+62     	; 0x806 <_ZN8Protocol4sendER6Packet+0xcc>
            out[out_offset++] = msg.data[i];
     7c8:	eb 81       	ldd	r30, Y+3	; 0x03
     7ca:	fc 81       	ldd	r31, Y+4	; 0x04
     7cc:	67 a9       	ldd	r22, Z+55	; 0x37
     7ce:	46 2f       	mov	r20, r22
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	29 81       	ldd	r18, Y+1	; 0x01
     7d4:	3a 81       	ldd	r19, Y+2	; 0x02
     7d6:	8d 81       	ldd	r24, Y+5	; 0x05
     7d8:	9e 81       	ldd	r25, Y+6	; 0x06
     7da:	82 0f       	add	r24, r18
     7dc:	93 1f       	adc	r25, r19
     7de:	fc 01       	movw	r30, r24
     7e0:	32 96       	adiw	r30, 0x02	; 2
     7e2:	20 81       	ld	r18, Z
     7e4:	8b 81       	ldd	r24, Y+3	; 0x03
     7e6:	9c 81       	ldd	r25, Y+4	; 0x04
     7e8:	84 0f       	add	r24, r20
     7ea:	95 1f       	adc	r25, r21
     7ec:	fc 01       	movw	r30, r24
     7ee:	b2 96       	adiw	r30, 0x22	; 34
     7f0:	20 83       	st	Z, r18
     7f2:	86 2f       	mov	r24, r22
     7f4:	8f 5f       	subi	r24, 0xFF	; 255
     7f6:	eb 81       	ldd	r30, Y+3	; 0x03
     7f8:	fc 81       	ldd	r31, Y+4	; 0x04
     7fa:	87 ab       	std	Z+55, r24	; 0x37
{
    if((out_offset + msg.len + 2) < Protocol::BUFFER_SIZE)
    {
        out[out_offset++] = msg.command;
        out[out_offset++] = msg.len;
        for(int i=0;i<msg.len;i++)
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
     7fe:	9a 81       	ldd	r25, Y+2	; 0x02
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	9a 83       	std	Y+2, r25	; 0x02
     804:	89 83       	std	Y+1, r24	; 0x01
     806:	ed 81       	ldd	r30, Y+5	; 0x05
     808:	fe 81       	ldd	r31, Y+6	; 0x06
     80a:	81 81       	ldd	r24, Z+1	; 0x01
     80c:	28 2f       	mov	r18, r24
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	89 81       	ldd	r24, Y+1	; 0x01
     812:	9a 81       	ldd	r25, Y+2	; 0x02
     814:	82 17       	cp	r24, r18
     816:	93 07       	cpc	r25, r19
     818:	bc f2       	brlt	.-82     	; 0x7c8 <_ZN8Protocol4sendER6Packet+0x8e>
            out[out_offset++] = msg.data[i];
    }
}
     81a:	26 96       	adiw	r28, 0x06	; 6
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
     826:	cf 91       	pop	r28
     828:	df 91       	pop	r29
     82a:	08 95       	ret

0000082c <_ZN8Protocol6_writeEPhi>:

//////////////////////////////////////////
//
// PRIVATE
//////////////////////////////////////////////
void Protocol::_write(uint8_t *data, int size)
     82c:	df 93       	push	r29
     82e:	cf 93       	push	r28
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	28 97       	sbiw	r28, 0x08	; 8
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	9c 83       	std	Y+4, r25	; 0x04
     842:	8b 83       	std	Y+3, r24	; 0x03
     844:	7e 83       	std	Y+6, r23	; 0x06
     846:	6d 83       	std	Y+5, r22	; 0x05
     848:	58 87       	std	Y+8, r21	; 0x08
     84a:	4f 83       	std	Y+7, r20	; 0x07
{
	uint8_t *p = data;
     84c:	8d 81       	ldd	r24, Y+5	; 0x05
     84e:	9e 81       	ldd	r25, Y+6	; 0x06
     850:	9a 83       	std	Y+2, r25	; 0x02
     852:	89 83       	std	Y+1, r24	; 0x01
     854:	19 c0       	rjmp	.+50     	; 0x888 <_ZN8Protocol6_writeEPhi+0x5c>
	while(p-data < size)
	{
		_uart->write(*p);
     856:	eb 81       	ldd	r30, Y+3	; 0x03
     858:	fc 81       	ldd	r31, Y+4	; 0x04
     85a:	04 84       	ldd	r0, Z+12	; 0x0c
     85c:	f5 85       	ldd	r31, Z+13	; 0x0d
     85e:	e0 2d       	mov	r30, r0
     860:	01 90       	ld	r0, Z+
     862:	f0 81       	ld	r31, Z
     864:	e0 2d       	mov	r30, r0
     866:	40 81       	ld	r20, Z
     868:	51 81       	ldd	r21, Z+1	; 0x01
     86a:	eb 81       	ldd	r30, Y+3	; 0x03
     86c:	fc 81       	ldd	r31, Y+4	; 0x04
     86e:	84 85       	ldd	r24, Z+12	; 0x0c
     870:	95 85       	ldd	r25, Z+13	; 0x0d
     872:	e9 81       	ldd	r30, Y+1	; 0x01
     874:	fa 81       	ldd	r31, Y+2	; 0x02
     876:	20 81       	ld	r18, Z
     878:	62 2f       	mov	r22, r18
     87a:	fa 01       	movw	r30, r20
     87c:	09 95       	icall
		p++;
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	9a 81       	ldd	r25, Y+2	; 0x02
     882:	01 96       	adiw	r24, 0x01	; 1
     884:	9a 83       	std	Y+2, r25	; 0x02
     886:	89 83       	std	Y+1, r24	; 0x01
// PRIVATE
//////////////////////////////////////////////
void Protocol::_write(uint8_t *data, int size)
{
	uint8_t *p = data;
	while(p-data < size)
     888:	29 81       	ldd	r18, Y+1	; 0x01
     88a:	3a 81       	ldd	r19, Y+2	; 0x02
     88c:	8d 81       	ldd	r24, Y+5	; 0x05
     88e:	9e 81       	ldd	r25, Y+6	; 0x06
     890:	28 1b       	sub	r18, r24
     892:	39 0b       	sbc	r19, r25
     894:	8f 81       	ldd	r24, Y+7	; 0x07
     896:	98 85       	ldd	r25, Y+8	; 0x08
     898:	28 17       	cp	r18, r24
     89a:	39 07       	cpc	r19, r25
     89c:	e4 f2       	brlt	.-72     	; 0x856 <_ZN8Protocol6_writeEPhi+0x2a>
	{
		_uart->write(*p);
		p++;
	}
}
     89e:	28 96       	adiw	r28, 0x08	; 8
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	cf 91       	pop	r28
     8ac:	df 91       	pop	r29
     8ae:	08 95       	ret

000008b0 <_ZN8Protocol5_readEv>:

uint8_t Protocol::_read()
     8b0:	df 93       	push	r29
     8b2:	cf 93       	push	r28
     8b4:	00 d0       	rcall	.+0      	; 0x8b6 <_ZN8Protocol5_readEv+0x6>
     8b6:	00 d0       	rcall	.+0      	; 0x8b8 <_ZN8Protocol5_readEv+0x8>
     8b8:	00 d0       	rcall	.+0      	; 0x8ba <_ZN8Protocol5_readEv+0xa>
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	9e 83       	std	Y+6, r25	; 0x06
     8c0:	8d 83       	std	Y+5, r24	; 0x05
{
	int c = -1;
     8c2:	8f ef       	ldi	r24, 0xFF	; 255
     8c4:	9f ef       	ldi	r25, 0xFF	; 255
     8c6:	9b 83       	std	Y+3, r25	; 0x03
     8c8:	8a 83       	std	Y+2, r24	; 0x02
	CRITICAL_SECTION{
     8ca:	ef e5       	ldi	r30, 0x5F	; 95
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	8c 83       	std	Y+4, r24	; 0x04
     8d2:	0e 94 38 03 	call	0x670	; 0x670 <__iCliRetVal>
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	3f c0       	rjmp	.+126    	; 0x958 <_ZN8Protocol5_readEv+0xa8>
	while(in_offset < Protocol::BUFFER_SIZE )
	{
		c = _uart->read();
     8da:	ed 81       	ldd	r30, Y+5	; 0x05
     8dc:	fe 81       	ldd	r31, Y+6	; 0x06
     8de:	04 84       	ldd	r0, Z+12	; 0x0c
     8e0:	f5 85       	ldd	r31, Z+13	; 0x0d
     8e2:	e0 2d       	mov	r30, r0
     8e4:	80 81       	ld	r24, Z
     8e6:	91 81       	ldd	r25, Z+1	; 0x01
     8e8:	fc 01       	movw	r30, r24
     8ea:	32 96       	adiw	r30, 0x02	; 2
     8ec:	20 81       	ld	r18, Z
     8ee:	31 81       	ldd	r19, Z+1	; 0x01
     8f0:	ed 81       	ldd	r30, Y+5	; 0x05
     8f2:	fe 81       	ldd	r31, Y+6	; 0x06
     8f4:	84 85       	ldd	r24, Z+12	; 0x0c
     8f6:	95 85       	ldd	r25, Z+13	; 0x0d
     8f8:	f9 01       	movw	r30, r18
     8fa:	09 95       	icall
     8fc:	9b 83       	std	Y+3, r25	; 0x03
     8fe:	8a 83       	std	Y+2, r24	; 0x02
		if(c == -1)
     900:	8a 81       	ldd	r24, Y+2	; 0x02
     902:	9b 81       	ldd	r25, Y+3	; 0x03
     904:	2f ef       	ldi	r18, 0xFF	; 255
     906:	8f 3f       	cpi	r24, 0xFF	; 255
     908:	92 07       	cpc	r25, r18
     90a:	29 f1       	breq	.+74     	; 0x956 <_ZN8Protocol5_readEv+0xa6>
			break;
		in[in_offset] = 0;
     90c:	ed 81       	ldd	r30, Y+5	; 0x05
     90e:	fe 81       	ldd	r31, Y+6	; 0x06
     910:	86 a9       	ldd	r24, Z+54	; 0x36
     912:	28 2f       	mov	r18, r24
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	8d 81       	ldd	r24, Y+5	; 0x05
     918:	9e 81       	ldd	r25, Y+6	; 0x06
     91a:	82 0f       	add	r24, r18
     91c:	93 1f       	adc	r25, r19
     91e:	fc 01       	movw	r30, r24
     920:	3e 96       	adiw	r30, 0x0e	; 14
     922:	10 82       	st	Z, r1
		in[in_offset] = (uint8_t)(c & 0xFF);
     924:	ed 81       	ldd	r30, Y+5	; 0x05
     926:	fe 81       	ldd	r31, Y+6	; 0x06
     928:	86 a9       	ldd	r24, Z+54	; 0x36
     92a:	28 2f       	mov	r18, r24
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	4a 81       	ldd	r20, Y+2	; 0x02
     930:	8d 81       	ldd	r24, Y+5	; 0x05
     932:	9e 81       	ldd	r25, Y+6	; 0x06
     934:	82 0f       	add	r24, r18
     936:	93 1f       	adc	r25, r19
     938:	fc 01       	movw	r30, r24
     93a:	3e 96       	adiw	r30, 0x0e	; 14
     93c:	40 83       	st	Z, r20
		in_offset++;
     93e:	ed 81       	ldd	r30, Y+5	; 0x05
     940:	fe 81       	ldd	r31, Y+6	; 0x06
     942:	86 a9       	ldd	r24, Z+54	; 0x36
     944:	8f 5f       	subi	r24, 0xFF	; 255
     946:	ed 81       	ldd	r30, Y+5	; 0x05
     948:	fe 81       	ldd	r31, Y+6	; 0x06
     94a:	86 ab       	std	Z+54, r24	; 0x36

uint8_t Protocol::_read()
{
	int c = -1;
	CRITICAL_SECTION{
	while(in_offset < Protocol::BUFFER_SIZE )
     94c:	ed 81       	ldd	r30, Y+5	; 0x05
     94e:	fe 81       	ldd	r31, Y+6	; 0x06
     950:	86 a9       	ldd	r24, Z+54	; 0x36
     952:	84 31       	cpi	r24, 0x14	; 20
     954:	10 f2       	brcs	.-124    	; 0x8da <_ZN8Protocol5_readEv+0x2a>
}

uint8_t Protocol::_read()
{
	int c = -1;
	CRITICAL_SECTION{
     956:	19 82       	std	Y+1, r1	; 0x01
     958:	89 81       	ldd	r24, Y+1	; 0x01
     95a:	88 23       	and	r24, r24
     95c:	b9 f7       	brne	.-18     	; 0x94c <_ZN8Protocol5_readEv+0x9c>
			break;
		in[in_offset] = 0;
		in[in_offset] = (uint8_t)(c & 0xFF);
		in_offset++;
	}
	}
     95e:	ce 01       	movw	r24, r28
     960:	04 96       	adiw	r24, 0x04	; 4
     962:	0e 94 41 03 	call	0x682	; 0x682 <__iRestore>
	return 0;
     966:	80 e0       	ldi	r24, 0x00	; 0
}
     968:	26 96       	adiw	r28, 0x06	; 6
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	de bf       	out	0x3e, r29	; 62
     970:	0f be       	out	0x3f, r0	; 63
     972:	cd bf       	out	0x3d, r28	; 61
     974:	cf 91       	pop	r28
     976:	df 91       	pop	r29
     978:	08 95       	ret

0000097a <_ZN6StreamlsEc>:
	}

	Stream& operator<< (const char str[] ){
		return print(str);
	}
	Stream& operator<< (char c ){
     97a:	df 93       	push	r29
     97c:	cf 93       	push	r28
     97e:	00 d0       	rcall	.+0      	; 0x980 <_ZN6StreamlsEc+0x6>
     980:	0f 92       	push	r0
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
     986:	9a 83       	std	Y+2, r25	; 0x02
     988:	89 83       	std	Y+1, r24	; 0x01
     98a:	6b 83       	std	Y+3, r22	; 0x03
		return print(c);
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	9a 81       	ldd	r25, Y+2	; 0x02
     990:	6b 81       	ldd	r22, Y+3	; 0x03
     992:	0e 94 ae 0a 	call	0x155c	; 0x155c <_ZN6Stream5printEc>
	}
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	cf 91       	pop	r28
     99e:	df 91       	pop	r29
     9a0:	08 95       	ret

000009a2 <_ZN8Protocol4dumpEh>:
#define DUMP(X, Y) 	if(X & Y) \
		*_uart<<'1';\
	else\
		*_uart<<'0';

void Protocol::dump(uint8_t c)
     9a2:	df 93       	push	r29
     9a4:	cf 93       	push	r28
     9a6:	00 d0       	rcall	.+0      	; 0x9a8 <_ZN8Protocol4dumpEh+0x6>
     9a8:	0f 92       	push	r0
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
     9ae:	9a 83       	std	Y+2, r25	; 0x02
     9b0:	89 83       	std	Y+1, r24	; 0x01
     9b2:	6b 83       	std	Y+3, r22	; 0x03
{
	DUMP(c, 0x80);
     9b4:	8b 81       	ldd	r24, Y+3	; 0x03
     9b6:	88 23       	and	r24, r24
     9b8:	44 f4       	brge	.+16     	; 0x9ca <_ZN8Protocol4dumpEh+0x28>
     9ba:	e9 81       	ldd	r30, Y+1	; 0x01
     9bc:	fa 81       	ldd	r31, Y+2	; 0x02
     9be:	84 85       	ldd	r24, Z+12	; 0x0c
     9c0:	95 85       	ldd	r25, Z+13	; 0x0d
     9c2:	61 e3       	ldi	r22, 0x31	; 49
     9c4:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN6StreamlsEc>
     9c8:	07 c0       	rjmp	.+14     	; 0x9d8 <_ZN8Protocol4dumpEh+0x36>
     9ca:	e9 81       	ldd	r30, Y+1	; 0x01
     9cc:	fa 81       	ldd	r31, Y+2	; 0x02
     9ce:	84 85       	ldd	r24, Z+12	; 0x0c
     9d0:	95 85       	ldd	r25, Z+13	; 0x0d
     9d2:	60 e3       	ldi	r22, 0x30	; 48
     9d4:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN6StreamlsEc>
	DUMP(c, 0x40);
     9d8:	8b 81       	ldd	r24, Y+3	; 0x03
     9da:	88 2f       	mov	r24, r24
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	80 74       	andi	r24, 0x40	; 64
     9e0:	90 70       	andi	r25, 0x00	; 0
     9e2:	00 97       	sbiw	r24, 0x00	; 0
     9e4:	41 f0       	breq	.+16     	; 0x9f6 <_ZN8Protocol4dumpEh+0x54>
     9e6:	e9 81       	ldd	r30, Y+1	; 0x01
     9e8:	fa 81       	ldd	r31, Y+2	; 0x02
     9ea:	84 85       	ldd	r24, Z+12	; 0x0c
     9ec:	95 85       	ldd	r25, Z+13	; 0x0d
     9ee:	61 e3       	ldi	r22, 0x31	; 49
     9f0:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN6StreamlsEc>
     9f4:	07 c0       	rjmp	.+14     	; 0xa04 <_ZN8Protocol4dumpEh+0x62>
     9f6:	e9 81       	ldd	r30, Y+1	; 0x01
     9f8:	fa 81       	ldd	r31, Y+2	; 0x02
     9fa:	84 85       	ldd	r24, Z+12	; 0x0c
     9fc:	95 85       	ldd	r25, Z+13	; 0x0d
     9fe:	60 e3       	ldi	r22, 0x30	; 48
     a00:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN6StreamlsEc>
	DUMP(c, 0x20);
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	88 2f       	mov	r24, r24
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	80 72       	andi	r24, 0x20	; 32
     a0c:	90 70       	andi	r25, 0x00	; 0
     a0e:	00 97       	sbiw	r24, 0x00	; 0
     a10:	41 f0       	breq	.+16     	; 0xa22 <_ZN8Protocol4dumpEh+0x80>
     a12:	e9 81       	ldd	r30, Y+1	; 0x01
     a14:	fa 81       	ldd	r31, Y+2	; 0x02
     a16:	84 85       	ldd	r24, Z+12	; 0x0c
     a18:	95 85       	ldd	r25, Z+13	; 0x0d
     a1a:	61 e3       	ldi	r22, 0x31	; 49
     a1c:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN6StreamlsEc>
     a20:	07 c0       	rjmp	.+14     	; 0xa30 <_ZN8Protocol4dumpEh+0x8e>
     a22:	e9 81       	ldd	r30, Y+1	; 0x01
     a24:	fa 81       	ldd	r31, Y+2	; 0x02
     a26:	84 85       	ldd	r24, Z+12	; 0x0c
     a28:	95 85       	ldd	r25, Z+13	; 0x0d
     a2a:	60 e3       	ldi	r22, 0x30	; 48
     a2c:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN6StreamlsEc>
	DUMP(c, 0x10);
     a30:	8b 81       	ldd	r24, Y+3	; 0x03
     a32:	88 2f       	mov	r24, r24
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	80 71       	andi	r24, 0x10	; 16
     a38:	90 70       	andi	r25, 0x00	; 0
     a3a:	00 97       	sbiw	r24, 0x00	; 0
     a3c:	41 f0       	breq	.+16     	; 0xa4e <_ZN8Protocol4dumpEh+0xac>
     a3e:	e9 81       	ldd	r30, Y+1	; 0x01
     a40:	fa 81       	ldd	r31, Y+2	; 0x02
     a42:	84 85       	ldd	r24, Z+12	; 0x0c
     a44:	95 85       	ldd	r25, Z+13	; 0x0d
     a46:	61 e3       	ldi	r22, 0x31	; 49
     a48:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN6StreamlsEc>
     a4c:	07 c0       	rjmp	.+14     	; 0xa5c <_ZN8Protocol4dumpEh+0xba>
     a4e:	e9 81       	ldd	r30, Y+1	; 0x01
     a50:	fa 81       	ldd	r31, Y+2	; 0x02
     a52:	84 85       	ldd	r24, Z+12	; 0x0c
     a54:	95 85       	ldd	r25, Z+13	; 0x0d
     a56:	60 e3       	ldi	r22, 0x30	; 48
     a58:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN6StreamlsEc>

	*_uart<<' ';
     a5c:	e9 81       	ldd	r30, Y+1	; 0x01
     a5e:	fa 81       	ldd	r31, Y+2	; 0x02
     a60:	84 85       	ldd	r24, Z+12	; 0x0c
     a62:	95 85       	ldd	r25, Z+13	; 0x0d
     a64:	60 e2       	ldi	r22, 0x20	; 32
     a66:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN6StreamlsEc>

	DUMP(c, 0x08);
     a6a:	8b 81       	ldd	r24, Y+3	; 0x03
     a6c:	88 2f       	mov	r24, r24
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	88 70       	andi	r24, 0x08	; 8
     a72:	90 70       	andi	r25, 0x00	; 0
     a74:	00 97       	sbiw	r24, 0x00	; 0
     a76:	41 f0       	breq	.+16     	; 0xa88 <_ZN8Protocol4dumpEh+0xe6>
     a78:	e9 81       	ldd	r30, Y+1	; 0x01
     a7a:	fa 81       	ldd	r31, Y+2	; 0x02
     a7c:	84 85       	ldd	r24, Z+12	; 0x0c
     a7e:	95 85       	ldd	r25, Z+13	; 0x0d
     a80:	61 e3       	ldi	r22, 0x31	; 49
     a82:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN6StreamlsEc>
     a86:	07 c0       	rjmp	.+14     	; 0xa96 <_ZN8Protocol4dumpEh+0xf4>
     a88:	e9 81       	ldd	r30, Y+1	; 0x01
     a8a:	fa 81       	ldd	r31, Y+2	; 0x02
     a8c:	84 85       	ldd	r24, Z+12	; 0x0c
     a8e:	95 85       	ldd	r25, Z+13	; 0x0d
     a90:	60 e3       	ldi	r22, 0x30	; 48
     a92:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN6StreamlsEc>
	DUMP(c, 0x04);
     a96:	8b 81       	ldd	r24, Y+3	; 0x03
     a98:	88 2f       	mov	r24, r24
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	84 70       	andi	r24, 0x04	; 4
     a9e:	90 70       	andi	r25, 0x00	; 0
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	41 f0       	breq	.+16     	; 0xab4 <_ZN8Protocol4dumpEh+0x112>
     aa4:	e9 81       	ldd	r30, Y+1	; 0x01
     aa6:	fa 81       	ldd	r31, Y+2	; 0x02
     aa8:	84 85       	ldd	r24, Z+12	; 0x0c
     aaa:	95 85       	ldd	r25, Z+13	; 0x0d
     aac:	61 e3       	ldi	r22, 0x31	; 49
     aae:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN6StreamlsEc>
     ab2:	07 c0       	rjmp	.+14     	; 0xac2 <_ZN8Protocol4dumpEh+0x120>
     ab4:	e9 81       	ldd	r30, Y+1	; 0x01
     ab6:	fa 81       	ldd	r31, Y+2	; 0x02
     ab8:	84 85       	ldd	r24, Z+12	; 0x0c
     aba:	95 85       	ldd	r25, Z+13	; 0x0d
     abc:	60 e3       	ldi	r22, 0x30	; 48
     abe:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN6StreamlsEc>
	DUMP(c, 0x02);
     ac2:	8b 81       	ldd	r24, Y+3	; 0x03
     ac4:	88 2f       	mov	r24, r24
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	82 70       	andi	r24, 0x02	; 2
     aca:	90 70       	andi	r25, 0x00	; 0
     acc:	00 97       	sbiw	r24, 0x00	; 0
     ace:	41 f0       	breq	.+16     	; 0xae0 <_ZN8Protocol4dumpEh+0x13e>
     ad0:	e9 81       	ldd	r30, Y+1	; 0x01
     ad2:	fa 81       	ldd	r31, Y+2	; 0x02
     ad4:	84 85       	ldd	r24, Z+12	; 0x0c
     ad6:	95 85       	ldd	r25, Z+13	; 0x0d
     ad8:	61 e3       	ldi	r22, 0x31	; 49
     ada:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN6StreamlsEc>
     ade:	07 c0       	rjmp	.+14     	; 0xaee <_ZN8Protocol4dumpEh+0x14c>
     ae0:	e9 81       	ldd	r30, Y+1	; 0x01
     ae2:	fa 81       	ldd	r31, Y+2	; 0x02
     ae4:	84 85       	ldd	r24, Z+12	; 0x0c
     ae6:	95 85       	ldd	r25, Z+13	; 0x0d
     ae8:	60 e3       	ldi	r22, 0x30	; 48
     aea:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN6StreamlsEc>
	DUMP(c, 0x01);
     aee:	8b 81       	ldd	r24, Y+3	; 0x03
     af0:	88 2f       	mov	r24, r24
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	81 70       	andi	r24, 0x01	; 1
     af6:	90 70       	andi	r25, 0x00	; 0
     af8:	88 23       	and	r24, r24
     afa:	41 f0       	breq	.+16     	; 0xb0c <_ZN8Protocol4dumpEh+0x16a>
     afc:	e9 81       	ldd	r30, Y+1	; 0x01
     afe:	fa 81       	ldd	r31, Y+2	; 0x02
     b00:	84 85       	ldd	r24, Z+12	; 0x0c
     b02:	95 85       	ldd	r25, Z+13	; 0x0d
     b04:	61 e3       	ldi	r22, 0x31	; 49
     b06:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN6StreamlsEc>
     b0a:	07 c0       	rjmp	.+14     	; 0xb1a <_ZN8Protocol4dumpEh+0x178>
     b0c:	e9 81       	ldd	r30, Y+1	; 0x01
     b0e:	fa 81       	ldd	r31, Y+2	; 0x02
     b10:	84 85       	ldd	r24, Z+12	; 0x0c
     b12:	95 85       	ldd	r25, Z+13	; 0x0d
     b14:	60 e3       	ldi	r22, 0x30	; 48
     b16:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN6StreamlsEc>

	*_uart<<'\n';
     b1a:	e9 81       	ldd	r30, Y+1	; 0x01
     b1c:	fa 81       	ldd	r31, Y+2	; 0x02
     b1e:	84 85       	ldd	r24, Z+12	; 0x0c
     b20:	95 85       	ldd	r25, Z+13	; 0x0d
     b22:	6a e0       	ldi	r22, 0x0A	; 10
     b24:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN6StreamlsEc>
}
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	cf 91       	pop	r28
     b30:	df 91       	pop	r29
     b32:	08 95       	ret

00000b34 <_ZN8Protocol7treatIOEv>:
void Protocol::init(UartHW *uart)
{
	_uart = uart;
}

void Protocol::treatIO()
     b34:	df 93       	push	r29
     b36:	cf 93       	push	r28
     b38:	00 d0       	rcall	.+0      	; 0xb3a <_ZN8Protocol7treatIOEv+0x6>
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	9a 83       	std	Y+2, r25	; 0x02
     b40:	89 83       	std	Y+1, r24	; 0x01
{
	_read();
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	9a 81       	ldd	r25, Y+2	; 0x02
     b46:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_ZN8Protocol5_readEv>
	if(in_offset >0 )
     b4a:	e9 81       	ldd	r30, Y+1	; 0x01
     b4c:	fa 81       	ldd	r31, Y+2	; 0x02
     b4e:	86 a9       	ldd	r24, Z+54	; 0x36
     b50:	88 23       	and	r24, r24
     b52:	21 f1       	breq	.+72     	; 0xb9c <_ZN8Protocol7treatIOEv+0x68>
{
_write((uint8_t*)"test\n", 5);
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	32 e0       	ldi	r19, 0x02	; 2
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	9a 81       	ldd	r25, Y+2	; 0x02
     b5c:	b9 01       	movw	r22, r18
     b5e:	45 e0       	ldi	r20, 0x05	; 5
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	0e 94 16 04 	call	0x82c	; 0x82c <_ZN8Protocol6_writeEPhi>
dump(in[0]);
     b66:	e9 81       	ldd	r30, Y+1	; 0x01
     b68:	fa 81       	ldd	r31, Y+2	; 0x02
     b6a:	26 85       	ldd	r18, Z+14	; 0x0e
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	9a 81       	ldd	r25, Y+2	; 0x02
     b70:	62 2f       	mov	r22, r18
     b72:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN8Protocol4dumpEh>
_write(in, in_offset);
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	9a 81       	ldd	r25, Y+2	; 0x02
     b7a:	ac 01       	movw	r20, r24
     b7c:	42 5f       	subi	r20, 0xF2	; 242
     b7e:	5f 4f       	sbci	r21, 0xFF	; 255
     b80:	e9 81       	ldd	r30, Y+1	; 0x01
     b82:	fa 81       	ldd	r31, Y+2	; 0x02
     b84:	86 a9       	ldd	r24, Z+54	; 0x36
     b86:	28 2f       	mov	r18, r24
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	9a 81       	ldd	r25, Y+2	; 0x02
     b8e:	ba 01       	movw	r22, r20
     b90:	a9 01       	movw	r20, r18
     b92:	0e 94 16 04 	call	0x82c	; 0x82c <_ZN8Protocol6_writeEPhi>
        	in_offset = 0;
     b96:	e9 81       	ldd	r30, Y+1	; 0x01
     b98:	fa 81       	ldd	r31, Y+2	; 0x02
     b9a:	16 aa       	std	Z+54, r1	; 0x36
    if(out_offset > 0)
    {
        _write(out, out_offset);
        out_offset = 0;
    }*/
}
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <_ZN8ProtocolC1Ev>:
{
	command = PROT_ERROR;
	len = 0;
}

Protocol::Protocol()
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	00 d0       	rcall	.+0      	; 0xbac <_ZN8ProtocolC1Ev+0x6>
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	9a 83       	std	Y+2, r25	; 0x02
     bb2:	89 83       	std	Y+1, r24	; 0x01
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	9a 81       	ldd	r25, Y+2	; 0x02
     bb8:	0e 94 66 03 	call	0x6cc	; 0x6cc <_ZN6PacketC1Ev>
{
	_uart = NULL;
     bbc:	e9 81       	ldd	r30, Y+1	; 0x01
     bbe:	fa 81       	ldd	r31, Y+2	; 0x02
     bc0:	15 86       	std	Z+13, r1	; 0x0d
     bc2:	14 86       	std	Z+12, r1	; 0x0c
	in_offset = 0;
     bc4:	e9 81       	ldd	r30, Y+1	; 0x01
     bc6:	fa 81       	ldd	r31, Y+2	; 0x02
     bc8:	16 aa       	std	Z+54, r1	; 0x36
	out_offset = 0;
     bca:	e9 81       	ldd	r30, Y+1	; 0x01
     bcc:	fa 81       	ldd	r31, Y+2	; 0x02
     bce:	17 aa       	std	Z+55, r1	; 0x37
	memset(in, 0, Protocol::BUFFER_SIZE);
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	9a 81       	ldd	r25, Y+2	; 0x02
     bd4:	0e 96       	adiw	r24, 0x0e	; 14
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	44 e1       	ldi	r20, 0x14	; 20
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memset>
	memset(out, 0, Protocol::BUFFER_SIZE);
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	9a 81       	ldd	r25, Y+2	; 0x02
     be6:	82 96       	adiw	r24, 0x22	; 34
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	44 e1       	ldi	r20, 0x14	; 20
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memset>
	haveMessage = false;
     bf4:	e9 81       	ldd	r30, Y+1	; 0x01
     bf6:	fa 81       	ldd	r31, Y+2	; 0x02
     bf8:	10 ae       	std	Z+56, r1	; 0x38
}
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	08 95       	ret

00000c04 <_ZN8ProtocolC2Ev>:
{
	command = PROT_ERROR;
	len = 0;
}

Protocol::Protocol()
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	00 d0       	rcall	.+0      	; 0xc0a <_ZN8ProtocolC2Ev+0x6>
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	9a 83       	std	Y+2, r25	; 0x02
     c10:	89 83       	std	Y+1, r24	; 0x01
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	0e 94 66 03 	call	0x6cc	; 0x6cc <_ZN6PacketC1Ev>
{
	_uart = NULL;
     c1a:	e9 81       	ldd	r30, Y+1	; 0x01
     c1c:	fa 81       	ldd	r31, Y+2	; 0x02
     c1e:	15 86       	std	Z+13, r1	; 0x0d
     c20:	14 86       	std	Z+12, r1	; 0x0c
	in_offset = 0;
     c22:	e9 81       	ldd	r30, Y+1	; 0x01
     c24:	fa 81       	ldd	r31, Y+2	; 0x02
     c26:	16 aa       	std	Z+54, r1	; 0x36
	out_offset = 0;
     c28:	e9 81       	ldd	r30, Y+1	; 0x01
     c2a:	fa 81       	ldd	r31, Y+2	; 0x02
     c2c:	17 aa       	std	Z+55, r1	; 0x37
	memset(in, 0, Protocol::BUFFER_SIZE);
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	9a 81       	ldd	r25, Y+2	; 0x02
     c32:	0e 96       	adiw	r24, 0x0e	; 14
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	44 e1       	ldi	r20, 0x14	; 20
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memset>
	memset(out, 0, Protocol::BUFFER_SIZE);
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	82 96       	adiw	r24, 0x22	; 34
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	44 e1       	ldi	r20, 0x14	; 20
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memset>
	haveMessage = false;
     c52:	e9 81       	ldd	r30, Y+1	; 0x01
     c54:	fa 81       	ldd	r31, Y+2	; 0x02
     c56:	10 ae       	std	Z+56, r1	; 0x38
}
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	08 95       	ret

00000c62 <_ZN7ServiceC2Ec>:
#include "services.h"

Service::Service(char id)
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	00 d0       	rcall	.+0      	; 0xc68 <_ZN7ServiceC2Ec+0x6>
     c68:	0f 92       	push	r0
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	9a 83       	std	Y+2, r25	; 0x02
     c70:	89 83       	std	Y+1, r24	; 0x01
     c72:	6b 83       	std	Y+3, r22	; 0x03
     c74:	e9 81       	ldd	r30, Y+1	; 0x01
     c76:	fa 81       	ldd	r31, Y+2	; 0x02
     c78:	80 e1       	ldi	r24, 0x10	; 16
     c7a:	92 e0       	ldi	r25, 0x02	; 2
     c7c:	91 83       	std	Z+1, r25	; 0x01
     c7e:	80 83       	st	Z, r24
{
    _id = id;
     c80:	e9 81       	ldd	r30, Y+1	; 0x01
     c82:	fa 81       	ldd	r31, Y+2	; 0x02
     c84:	8b 81       	ldd	r24, Y+3	; 0x03
     c86:	82 83       	std	Z+2, r24	; 0x02
    _prot = NULL;
     c88:	e9 81       	ldd	r30, Y+1	; 0x01
     c8a:	fa 81       	ldd	r31, Y+2	; 0x02
     c8c:	14 82       	std	Z+4, r1	; 0x04
     c8e:	13 82       	std	Z+3, r1	; 0x03
}
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <_ZN7ServiceC1Ec>:
#include "services.h"

Service::Service(char id)
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <_ZN7ServiceC1Ec+0x6>
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	6b 83       	std	Y+3, r22	; 0x03
     cae:	e9 81       	ldd	r30, Y+1	; 0x01
     cb0:	fa 81       	ldd	r31, Y+2	; 0x02
     cb2:	80 e1       	ldi	r24, 0x10	; 16
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	91 83       	std	Z+1, r25	; 0x01
     cb8:	80 83       	st	Z, r24
{
    _id = id;
     cba:	e9 81       	ldd	r30, Y+1	; 0x01
     cbc:	fa 81       	ldd	r31, Y+2	; 0x02
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	82 83       	std	Z+2, r24	; 0x02
    _prot = NULL;
     cc2:	e9 81       	ldd	r30, Y+1	; 0x01
     cc4:	fa 81       	ldd	r31, Y+2	; 0x02
     cc6:	14 82       	std	Z+4, r1	; 0x04
     cc8:	13 82       	std	Z+3, r1	; 0x03
}
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <_ZN7Service4initEP8Protocol>:

void Service::init(Protocol *prot)
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <_ZN7Service4initEP8Protocol+0x6>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <_ZN7Service4initEP8Protocol+0x8>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	9a 83       	std	Y+2, r25	; 0x02
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	7c 83       	std	Y+4, r23	; 0x04
     ce8:	6b 83       	std	Y+3, r22	; 0x03
{
    _prot = prot;
     cea:	e9 81       	ldd	r30, Y+1	; 0x01
     cec:	fa 81       	ldd	r31, Y+2	; 0x02
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	9c 81       	ldd	r25, Y+4	; 0x04
     cf2:	94 83       	std	Z+4, r25	; 0x04
     cf4:	83 83       	std	Z+3, r24	; 0x03
}
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <_ZN7Service5matchERK6Packet>:

bool Service::match(const Packet &msg)
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	00 d0       	rcall	.+0      	; 0xd0a <_ZN7Service5matchERK6Packet+0x6>
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <_ZN7Service5matchERK6Packet+0x8>
     d0c:	0f 92       	push	r0
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	9a 83       	std	Y+2, r25	; 0x02
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	7c 83       	std	Y+4, r23	; 0x04
     d18:	6b 83       	std	Y+3, r22	; 0x03
{
    return msg.command == _id ? true : false;    
     d1a:	eb 81       	ldd	r30, Y+3	; 0x03
     d1c:	fc 81       	ldd	r31, Y+4	; 0x04
     d1e:	90 81       	ld	r25, Z
     d20:	e9 81       	ldd	r30, Y+1	; 0x01
     d22:	fa 81       	ldd	r31, Y+2	; 0x02
     d24:	82 81       	ldd	r24, Z+2	; 0x02
     d26:	1d 82       	std	Y+5, r1	; 0x05
     d28:	98 17       	cp	r25, r24
     d2a:	11 f4       	brne	.+4      	; 0xd30 <_ZN7Service5matchERK6Packet+0x2c>
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	8d 83       	std	Y+5, r24	; 0x05
     d30:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <_ZN11PingServiceC2Ev>:



PingService::PingService() : Service(PROT_PING)
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	00 d0       	rcall	.+0      	; 0xd48 <_ZN11PingServiceC2Ev+0x6>
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	9a 83       	std	Y+2, r25	; 0x02
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	9a 81       	ldd	r25, Y+2	; 0x02
     d54:	62 e0       	ldi	r22, 0x02	; 2
     d56:	0e 94 31 06 	call	0xc62	; 0xc62 <_ZN7ServiceC2Ec>
     d5a:	e9 81       	ldd	r30, Y+1	; 0x01
     d5c:	fa 81       	ldd	r31, Y+2	; 0x02
     d5e:	8a e0       	ldi	r24, 0x0A	; 10
     d60:	92 e0       	ldi	r25, 0x02	; 2
     d62:	91 83       	std	Z+1, r25	; 0x01
     d64:	80 83       	st	Z, r24
{
}
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <_ZN11PingServiceC1Ev>:
    return msg.command == _id ? true : false;    
}



PingService::PingService() : Service(PROT_PING)
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	00 d0       	rcall	.+0      	; 0xd76 <_ZN11PingServiceC1Ev+0x6>
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	9a 83       	std	Y+2, r25	; 0x02
     d7c:	89 83       	std	Y+1, r24	; 0x01
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	9a 81       	ldd	r25, Y+2	; 0x02
     d82:	62 e0       	ldi	r22, 0x02	; 2
     d84:	0e 94 31 06 	call	0xc62	; 0xc62 <_ZN7ServiceC2Ec>
     d88:	e9 81       	ldd	r30, Y+1	; 0x01
     d8a:	fa 81       	ldd	r31, Y+2	; 0x02
     d8c:	8a e0       	ldi	r24, 0x0A	; 10
     d8e:	92 e0       	ldi	r25, 0x02	; 2
     d90:	91 83       	std	Z+1, r25	; 0x01
     d92:	80 83       	st	Z, r24
{
}
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <_ZN11PingService7executeER6Packet>:

bool PingService::execute(Packet &msg)
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	00 d0       	rcall	.+0      	; 0xda4 <_ZN11PingService7executeER6Packet+0x6>
     da4:	00 d0       	rcall	.+0      	; 0xda6 <_ZN11PingService7executeER6Packet+0x8>
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	9a 83       	std	Y+2, r25	; 0x02
     dac:	89 83       	std	Y+1, r24	; 0x01
     dae:	7c 83       	std	Y+4, r23	; 0x04
     db0:	6b 83       	std	Y+3, r22	; 0x03
{
    // i just forward the message
    _prot->send(msg);
     db2:	e9 81       	ldd	r30, Y+1	; 0x01
     db4:	fa 81       	ldd	r31, Y+2	; 0x02
     db6:	83 81       	ldd	r24, Z+3	; 0x03
     db8:	94 81       	ldd	r25, Z+4	; 0x04
     dba:	2b 81       	ldd	r18, Y+3	; 0x03
     dbc:	3c 81       	ldd	r19, Y+4	; 0x04
     dbe:	b9 01       	movw	r22, r18
     dc0:	0e 94 9d 03 	call	0x73a	; 0x73a <_ZN8Protocol4sendER6Packet>
    return true;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
}
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	cf 91       	pop	r28
     dd0:	df 91       	pop	r29
     dd2:	08 95       	ret

00000dd4 <marquee_put_char>:
static MAKE_WRITER(marquee_put_char); /* Fwd Def */
MARQUEE _marquee_ = MAKE_MARQUEE(marquee_list,500000,2000000,&marquee_put_char);
// Create a Writer to write to marquee
// Do NOT call it directly instead, to write the char 'A' use:
// 	marqueeGetWriter(&marquee)('A');
static MAKE_WRITER(marquee_put_char){ /* createWriter */
     dd4:	68 2f       	mov	r22, r24
	return marqueeSendByte(&_marquee_,byte);
     dd6:	8f e5       	ldi	r24, 0x5F	; 95
     dd8:	92 e0       	ldi	r25, 0x02	; 2
     dda:	0e 94 9d 0c 	call	0x193a	; 0x193a <marqueeSendByte>
}
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	08 95       	ret

00000de2 <registerLED>:
static __inline__ void LED_off(LED* led){
	LED_set(led,FALSE);
}

static __inline__ void statusLEDregister(const IOPin* pin, boolean activeHigh){
	statusLED.pin = pin;
     de2:	8b e0       	ldi	r24, 0x0B	; 11
     de4:	93 e0       	ldi	r25, 0x03	; 3
     de6:	90 93 37 04 	sts	0x0437, r25
     dea:	80 93 36 04 	sts	0x0436, r24
	statusLED.activeHigh = activeHigh;
     dee:	80 91 38 04 	lds	r24, 0x0438
	statusLED.initialised=FALSE;
     df2:	8c 7f       	andi	r24, 0xFC	; 252
     df4:	80 93 38 04 	sts	0x0438, r24


void LED_set(LED* led,	boolean value);

static __inline__ void LED_on(LED* led){
	LED_set(led,TRUE);
     df8:	86 e3       	ldi	r24, 0x36	; 54
     dfa:	94 e0       	ldi	r25, 0x04	; 4
     dfc:	6f ef       	ldi	r22, 0xFF	; 255
     dfe:	0e 94 13 0c 	call	0x1826	; 0x1826 <LED_set>
	servoPWMInit(&_bank1_);
}
// ----------- Register the statusLED -----------
void registerLED(void){
	statusLEDregister(C1,false);
}
     e02:	08 95       	ret

00000e04 <initHardware>:
	//segled_init(&_led_display_);
}

// ----------- Initialise my added devices ------
void initHardware(void){
	servoPWMInit(&_bank1_);
     e04:	88 eb       	ldi	r24, 0xB8	; 184
     e06:	92 e0       	ldi	r25, 0x02	; 2
     e08:	0e 94 91 09 	call	0x1322	; 0x1322 <servoPWMInit>
}
     e0c:	08 95       	ret

00000e0e <sysInitHardware>:
static __inline__ boolean SWITCH_released(SWITCH* sw){
	return pin_is_high(sw->pin);
}

static __inline__ void SWITCH_init(SWITCH *sw){
	pin_make_input(sw->pin,TRUE);
     e0e:	80 91 4c 02 	lds	r24, 0x024C
     e12:	90 91 4d 02 	lds	r25, 0x024D
     e16:	6f ef       	ldi	r22, 0xFF	; 255
     e18:	0e 94 c5 0b 	call	0x178a	; 0x178a <pin_make_input>
// ----------- Initialise built in devices ------
void sysInitHardware(void){
	SWITCH_init(&_button_);
//	setErrorLog(&uart1SendByte);
	//rprintfInit(&uart1SendByte);
	uartInit(_C_uart1,115200);
     e1c:	8a e1       	ldi	r24, 0x1A	; 26
     e1e:	92 e0       	ldi	r25, 0x02	; 2
     e20:	40 e0       	ldi	r20, 0x00	; 0
     e22:	52 ec       	ldi	r21, 0xC2	; 194
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_uartInit>
	//segled_init(&_led_display_);
}
     e2c:	08 95       	ret

00000e2e <__vector_36>:
#endif

#ifndef USART1_RX_vect
# error Uart1 Rx complete vector undefined
#else
ISR(USART1_RX_vect){
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
	uartReceiveService(_C_uart1);
     e50:	e0 91 46 02 	lds	r30, 0x0246
     e54:	f0 91 47 02 	lds	r31, 0x0247
     e58:	60 81       	ld	r22, Z
     e5a:	8a e1       	ldi	r24, 0x1A	; 26
     e5c:	92 e0       	ldi	r25, 0x02	; 2
     e5e:	0e 94 9e 10 	call	0x213c	; 0x213c <__uartReceiveService>
}
     e62:	ff 91       	pop	r31
     e64:	ef 91       	pop	r30
     e66:	bf 91       	pop	r27
     e68:	af 91       	pop	r26
     e6a:	9f 91       	pop	r25
     e6c:	8f 91       	pop	r24
     e6e:	7f 91       	pop	r23
     e70:	6f 91       	pop	r22
     e72:	5f 91       	pop	r21
     e74:	4f 91       	pop	r20
     e76:	3f 91       	pop	r19
     e78:	2f 91       	pop	r18
     e7a:	0f 90       	pop	r0
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	0f 90       	pop	r0
     e80:	1f 90       	pop	r1
     e82:	18 95       	reti

00000e84 <__vector_38>:
HW_UART __C_uart1 = MAKE_UART_BUFFERED(null,null,UCSR1A,UCSR1B,UBRR1L,UBRR1H,UDR1,null,BV(U2X1),D2,D3,&uart1GetByte,&uart1SendByte);

#ifndef USART1_TX_vect
# error Uart1 Tx complete vector undefined
#else
ISR(USART1_TX_vect){
     e84:	1f 92       	push	r1
     e86:	0f 92       	push	r0
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	0f 92       	push	r0
     e8c:	11 24       	eor	r1, r1
     e8e:	2f 93       	push	r18
     e90:	3f 93       	push	r19
     e92:	4f 93       	push	r20
     e94:	5f 93       	push	r21
     e96:	6f 93       	push	r22
     e98:	7f 93       	push	r23
     e9a:	8f 93       	push	r24
     e9c:	9f 93       	push	r25
     e9e:	af 93       	push	r26
     ea0:	bf 93       	push	r27
     ea2:	ef 93       	push	r30
     ea4:	ff 93       	push	r31
	uartTransmitService(_C_uart1);
     ea6:	8a e1       	ldi	r24, 0x1A	; 26
     ea8:	92 e0       	ldi	r25, 0x02	; 2
     eaa:	0e 94 49 11 	call	0x2292	; 0x2292 <__uartTransmitService>
}
     eae:	ff 91       	pop	r31
     eb0:	ef 91       	pop	r30
     eb2:	bf 91       	pop	r27
     eb4:	af 91       	pop	r26
     eb6:	9f 91       	pop	r25
     eb8:	8f 91       	pop	r24
     eba:	7f 91       	pop	r23
     ebc:	6f 91       	pop	r22
     ebe:	5f 91       	pop	r21
     ec0:	4f 91       	pop	r20
     ec2:	3f 91       	pop	r19
     ec4:	2f 91       	pop	r18
     ec6:	0f 90       	pop	r0
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	0f 90       	pop	r0
     ecc:	1f 90       	pop	r1
     ece:	18 95       	reti

00000ed0 <uart1GetByte>:
}

// Create a routine to read a byte from uart1
// Returns -1 if there was no data
MAKE_READER( uart1GetByte){
	return uartGetByte(_C_uart1);
     ed0:	8a e1       	ldi	r24, 0x1A	; 26
     ed2:	92 e0       	ldi	r25, 0x02	; 2
     ed4:	0e 94 b8 10 	call	0x2170	; 0x2170 <__uartGetByte>
}
     ed8:	08 95       	ret

00000eda <uart1SendByte>:

// ------------------- uart1 -------------------

// Create a routine to write bytes to uart1
// You can set rprintf to use it by calling rprintfInit(&uart1SendByte)
MAKE_WRITER(uart1SendByte){
     eda:	68 2f       	mov	r22, r24
	return uartSendByte(_C_uart1,byte);
     edc:	8a e1       	ldi	r24, 0x1A	; 26
     ede:	92 e0       	ldi	r25, 0x02	; 2
     ee0:	0e 94 3f 11 	call	0x227e	; 0x227e <_uartSendByte>
}
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	08 95       	ret

00000ee8 <clockGetSnapshot>:
#define STATUS_LED_DDR   DDRC		
#define STATUS_LED_PIN   PC1		
static uint8_t counter;
		

void clockGetSnapshot(TIMER_SNAPSHOT* snapshot){
     ee8:	fc 01       	movw	r30, r24
	// Clock timer uses TIMER_MODE_CTC_OCR which generate compare interrupts on channel A
	CRITICAL_SECTION{
     eea:	6f b7       	in	r22, 0x3f	; 63
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
     eec:	f8 94       	cli
		// get the current ticks from the timer
		uint16_t tcnt = TCNT5;
     eee:	80 91 24 01 	lds	r24, 0x0124
     ef2:	90 91 25 01 	lds	r25, 0x0125
		// get the number of whole ticks
		snapshot->whole  = wholeTicks;
     ef6:	20 91 c0 03 	lds	r18, 0x03C0
     efa:	30 91 c1 03 	lds	r19, 0x03C1
     efe:	40 91 c2 03 	lds	r20, 0x03C2
     f02:	50 91 c3 03 	lds	r21, 0x03C3
     f06:	20 83       	st	Z, r18
     f08:	31 83       	std	Z+1, r19	; 0x01
     f0a:	42 83       	std	Z+2, r20	; 0x02
     f0c:	53 83       	std	Z+3, r21	; 0x03
		// get the current ticks again
		snapshot->part   = TCNT5;
     f0e:	20 91 24 01 	lds	r18, 0x0124
     f12:	30 91 25 01 	lds	r19, 0x0125
     f16:	35 83       	std	Z+5, r19	; 0x05
     f18:	24 83       	std	Z+4, r18	; 0x04
		// If the second reading of tcnt has gone down then there must have been an overflow
		// since reading the 'rtn' value. Or there may be a pending interrupt which may be
		// because interrupts are currently turned off. In either case increment the 'rtn' value
		// as if the interrupt has happened
		if(snapshot->part < tcnt || CLOCK_INT_PENDING ){
     f1a:	28 17       	cp	r18, r24
     f1c:	39 07       	cpc	r19, r25
     f1e:	10 f0       	brcs	.+4      	; 0xf24 <clockGetSnapshot+0x3c>
     f20:	d1 9b       	sbis	0x1a, 1	; 26
     f22:	12 c0       	rjmp	.+36     	; 0xf48 <clockGetSnapshot+0x60>
			snapshot->whole += usPerTop;
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	a2 81       	ldd	r26, Z+2	; 0x02
     f2a:	b3 81       	ldd	r27, Z+3	; 0x03
     f2c:	80 50       	subi	r24, 0x00	; 0
     f2e:	93 48       	sbci	r25, 0x83	; 131
     f30:	af 4f       	sbci	r26, 0xFF	; 255
     f32:	bf 4f       	sbci	r27, 0xFF	; 255
     f34:	80 83       	st	Z, r24
     f36:	91 83       	std	Z+1, r25	; 0x01
     f38:	a2 83       	std	Z+2, r26	; 0x02
     f3a:	b3 83       	std	Z+3, r27	; 0x03
			// get the current ticks again
			snapshot->part = TCNT5;
     f3c:	80 91 24 01 	lds	r24, 0x0124
     f40:	90 91 25 01 	lds	r25, 0x0125
     f44:	95 83       	std	Z+5, r25	; 0x05
     f46:	84 83       	std	Z+4, r24	; 0x04
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
     f48:	6f bf       	out	0x3f, r22	; 63
		}
	}
}
     f4a:	08 95       	ret

00000f4c <clockSnapshotToTicks>:

TICK_COUNT clockSnapshotToTicks(const TIMER_SNAPSHOT* snapshot){
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	fc 01       	movw	r30, r24
	TICK_COUNT rtn = snapshot->whole;
     f56:	e0 80       	ld	r14, Z
     f58:	f1 80       	ldd	r15, Z+1	; 0x01
     f5a:	02 81       	ldd	r16, Z+2	; 0x02
     f5c:	13 81       	ldd	r17, Z+3	; 0x03

	// top = usPerTop
	// part     x
	TICK_COUNT frac  = snapshot->part;
     f5e:	64 81       	ldd	r22, Z+4	; 0x04
     f60:	75 81       	ldd	r23, Z+5	; 0x05
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
	frac *= usPerTop;
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	3d e7       	ldi	r19, 0x7D	; 125
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	0e 94 14 1a 	call	0x3428	; 0x3428 <__mulsi3>
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	3a ef       	ldi	r19, 0xFA	; 250
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	50 e0       	ldi	r21, 0x00	; 0
     f7a:	0e 94 47 1a 	call	0x348e	; 0x348e <__udivmodsi4>
     f7e:	2e 0d       	add	r18, r14
     f80:	3f 1d       	adc	r19, r15
     f82:	40 1f       	adc	r20, r16
     f84:	51 1f       	adc	r21, r17
	frac /= CLOCK_TOP;

	rtn += frac;

	return rtn;
}
     f86:	b9 01       	movw	r22, r18
     f88:	ca 01       	movw	r24, r20
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	08 95       	ret

00000f94 <clockGetus>:

// Get the current clock time in uS
TICK_COUNT clockGetus(void){
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <clockGetus+0xa>
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <clockGetus+0xc>
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <clockGetus+0xe>
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	TIMER_SNAPSHOT snapshot;
	clockGetSnapshot(&snapshot);
     fa6:	8e 01       	movw	r16, r28
     fa8:	0f 5f       	subi	r16, 0xFF	; 255
     faa:	1f 4f       	sbci	r17, 0xFF	; 255
     fac:	c8 01       	movw	r24, r16
     fae:	0e 94 74 07 	call	0xee8	; 0xee8 <clockGetSnapshot>

	return clockSnapshotToTicks(&snapshot);
     fb2:	c8 01       	movw	r24, r16
     fb4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <clockSnapshotToTicks>
}
     fb8:	26 96       	adiw	r28, 0x06	; 6
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	08 95       	ret

00000fce <__clockInit>:

// Initialise the clock timer and turn it on
void __clockInit(void){
	// Set interrupt pending = false
	CLOCK_INT_CLEAR;
     fce:	d1 9a       	sbi	0x1a, 1	; 26
	
	// Enable interrupts
	CLOCK_INT_ENABLE;
     fd0:	e3 e7       	ldi	r30, 0x73	; 115
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	82 60       	ori	r24, 0x02	; 2
     fd8:	80 83       	st	Z, r24
}
     fda:	08 95       	ret

00000fdc <__vector_47>:

// ISR for clock overflow. Occurs every msPerTop
ISR(TIMER5_COMPA_vect) {
     fdc:	1f 92       	push	r1
     fde:	0f 92       	push	r0
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	0f 92       	push	r0
     fe4:	11 24       	eor	r1, r1
     fe6:	2f 93       	push	r18
     fe8:	8f 93       	push	r24
     fea:	9f 93       	push	r25
     fec:	af 93       	push	r26
     fee:	bf 93       	push	r27
	wholeTicks += usPerTop;
     ff0:	80 91 c0 03 	lds	r24, 0x03C0
     ff4:	90 91 c1 03 	lds	r25, 0x03C1
     ff8:	a0 91 c2 03 	lds	r26, 0x03C2
     ffc:	b0 91 c3 03 	lds	r27, 0x03C3
    1000:	80 50       	subi	r24, 0x00	; 0
    1002:	93 48       	sbci	r25, 0x83	; 131
    1004:	af 4f       	sbci	r26, 0xFF	; 255
    1006:	bf 4f       	sbci	r27, 0xFF	; 255
    1008:	80 93 c0 03 	sts	0x03C0, r24
    100c:	90 93 c1 03 	sts	0x03C1, r25
    1010:	a0 93 c2 03 	sts	0x03C2, r26
    1014:	b0 93 c3 03 	sts	0x03C3, r27

	
	// Flash the status led if there is an error
	ERROR* err = &__error;
	if(err->errorCode && bit_is_set(STATUS_LED_DDR,STATUS_LED_PIN)){
    1018:	20 91 31 04 	lds	r18, 0x0431
    101c:	22 23       	and	r18, r18
    101e:	b9 f1       	breq	.+110    	; 0x108e <__vector_47+0xb2>
    1020:	39 9b       	sbis	0x07, 1	; 7
    1022:	35 c0       	rjmp	.+106    	; 0x108e <__vector_47+0xb2>
		// There is an error and status led pin is an output

		// Decrement any counter
		if(counter){
    1024:	80 91 c4 03 	lds	r24, 0x03C4
    1028:	88 23       	and	r24, r24
    102a:	19 f0       	breq	.+6      	; 0x1032 <__vector_47+0x56>
			counter--;
    102c:	81 50       	subi	r24, 0x01	; 1
    102e:	80 93 c4 03 	sts	0x03C4, r24
		}
		if(counter==0){
    1032:	80 91 c4 03 	lds	r24, 0x03C4
    1036:	88 23       	and	r24, r24
    1038:	51 f5       	brne	.+84     	; 0x108e <__vector_47+0xb2>
			// Its time to do something
			if(err->remaining==0){
    103a:	80 91 32 04 	lds	r24, 0x0432
    103e:	88 23       	and	r24, r24
    1040:	59 f4       	brne	.+22     	; 0x1058 <__vector_47+0x7c>
				err->remaining = ABS(err->errorCode);
    1042:	82 2f       	mov	r24, r18
    1044:	99 27       	eor	r25, r25
    1046:	87 fd       	sbrc	r24, 7
    1048:	90 95       	com	r25
    104a:	97 ff       	sbrs	r25, 7
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <__vector_47+0x78>
    104e:	90 95       	com	r25
    1050:	81 95       	neg	r24
    1052:	9f 4f       	sbci	r25, 0xFF	; 255
    1054:	80 93 32 04 	sts	0x0432, r24
			}

			uint8_t delay = (err->errorCode < 0 ) ? 250/msPerTop : 500/msPerTop;
    1058:	27 fd       	sbrc	r18, 7
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <__vector_47+0x84>
    105c:	9f e0       	ldi	r25, 0x0F	; 15
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <__vector_47+0x86>
    1060:	97 e0       	ldi	r25, 0x07	; 7
			if(err->phase){
    1062:	20 91 33 04 	lds	r18, 0x0433
    1066:	22 23       	and	r18, r18
    1068:	41 f0       	breq	.+16     	; 0x107a <__vector_47+0x9e>
				// turn led off
				if(-- err->remaining == 0){
    106a:	80 91 32 04 	lds	r24, 0x0432
    106e:	81 50       	subi	r24, 0x01	; 1
    1070:	80 93 32 04 	sts	0x0432, r24
    1074:	88 23       	and	r24, r24
    1076:	09 f4       	brne	.+2      	; 0x107a <__vector_47+0x9e>
    1078:	9e e3       	ldi	r25, 0x3E	; 62
					delay = 2000/msPerTop;
				}
			}else{
				// turn led on
			}
			err->phase = !err->phase;
    107a:	10 92 33 04 	sts	0x0433, r1
    107e:	22 23       	and	r18, r18
    1080:	19 f4       	brne	.+6      	; 0x1088 <__vector_47+0xac>
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	80 93 33 04 	sts	0x0433, r24
			counter = delay;
    1088:	90 93 c4 03 	sts	0x03C4, r25
			// toggle the LED
			sbi(STATUS_LED_INPUT,STATUS_LED_PIN);
    108c:	31 9a       	sbi	0x06, 1	; 6
		}
	}
	
}
    108e:	bf 91       	pop	r27
    1090:	af 91       	pop	r26
    1092:	9f 91       	pop	r25
    1094:	8f 91       	pop	r24
    1096:	2f 91       	pop	r18
    1098:	0f 90       	pop	r0
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	0f 90       	pop	r0
    109e:	1f 90       	pop	r1
    10a0:	18 95       	reti

000010a2 <_ZN6Stream4_putEcP6__file>:
	/* function to write one char to device
	 * Called directly from the C FILE code
	 * when using commands from stdio.h
	 * This is passed on to the write of our C++ object
	 */
	static int	_put(char c, STREAM *s){
    10a2:	28 2f       	mov	r18, r24
		Stream* str = (Stream*)s;
    10a4:	61 15       	cp	r22, r1
    10a6:	71 05       	cpc	r23, r1
    10a8:	19 f4       	brne	.+6      	; 0x10b0 <_ZN6Stream4_putEcP6__file+0xe>
    10aa:	a0 e0       	ldi	r26, 0x00	; 0
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <_ZN6Stream4_putEcP6__file+0x12>
    10b0:	db 01       	movw	r26, r22
    10b2:	12 97       	sbiw	r26, 0x02	; 2
		return str->write((uint8_t)c);
    10b4:	ed 91       	ld	r30, X+
    10b6:	fc 91       	ld	r31, X
    10b8:	11 97       	sbiw	r26, 0x01	; 1
    10ba:	01 90       	ld	r0, Z+
    10bc:	f0 81       	ld	r31, Z
    10be:	e0 2d       	mov	r30, r0
    10c0:	cd 01       	movw	r24, r26
    10c2:	62 2f       	mov	r22, r18
    10c4:	09 95       	icall
	}
    10c6:	08 95       	ret

000010c8 <_ZN6Stream4_getEP6__file>:
	 * Called directly from the C FILE code
	 * when using commands from stdio.h
	 * This is passed on to the read of our C++ object
	 */
	static int	_get(STREAM *s){
		Stream* str = (Stream*)s;
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	19 f4       	brne	.+6      	; 0x10d2 <_ZN6Stream4_getEP6__file+0xa>
    10cc:	a0 e0       	ldi	r26, 0x00	; 0
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <_ZN6Stream4_getEP6__file+0xe>
    10d2:	dc 01       	movw	r26, r24
    10d4:	12 97       	sbiw	r26, 0x02	; 2
		return str->read();
    10d6:	ed 91       	ld	r30, X+
    10d8:	fc 91       	ld	r31, X
    10da:	11 97       	sbiw	r26, 0x01	; 1
    10dc:	02 80       	ldd	r0, Z+2	; 0x02
    10de:	f3 81       	ldd	r31, Z+3	; 0x03
    10e0:	e0 2d       	mov	r30, r0
    10e2:	cd 01       	movw	r24, r26
    10e4:	09 95       	icall
	}
    10e6:	08 95       	ret

000010e8 <_ZN10NullStream5writeEh>:
// A type of stream that just throws away output and returns EOF for input
class NullStream : public Stream{
public:
	NullStream(void) : Stream(){};
protected:
	virtual int write(uint8_t c) { return c;};
    10e8:	86 2f       	mov	r24, r22
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	08 95       	ret

000010ee <_ZN10NullStream4readEv>:
	virtual int read(void) {return EOF;};
    10ee:	8f ef       	ldi	r24, 0xFF	; 255
    10f0:	9f ef       	ldi	r25, 0xFF	; 255
    10f2:	08 95       	ret

000010f4 <_ZN7Marquee4readEv>:
public:
	Marquee(MARQUEE* cstr) {m_cstr = cstr;}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){return marqueeSendByte(m_cstr,data);}
	virtual int read(void){return EOF;}
    10f4:	8f ef       	ldi	r24, 0xFF	; 255
    10f6:	9f ef       	ldi	r25, 0xFF	; 255
    10f8:	08 95       	ret

000010fa <_Z10_cpp_Init_v>:
UartHW uart1(_C_uart1);
#include <Stream/Stream.h>
NullStream nullStream;

void __attribute__ ((constructor)) _cpp_Init_(void){
	stdin = stdout = uart1;
    10fa:	8d ee       	ldi	r24, 0xED	; 237
    10fc:	93 e0       	ldi	r25, 0x03	; 3
    10fe:	90 93 40 04 	sts	0x0440, r25
    1102:	80 93 3f 04 	sts	0x043F, r24
    1106:	90 93 3e 04 	sts	0x043E, r25
    110a:	80 93 3d 04 	sts	0x043D, r24
	stderr = uart1;
    110e:	90 93 42 04 	sts	0x0442, r25
    1112:	80 93 41 04 	sts	0x0441, r24
}
    1116:	08 95       	ret

00001118 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void){
    1118:	ff cf       	rjmp	.-2      	; 0x1118 <__cxa_pure_virtual>

0000111a <_GLOBAL__I_statusLed>:
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class Led {
public:
	Led(LED * cstr){m_cstr = cstr;};
    111a:	86 e3       	ldi	r24, 0x36	; 54
    111c:	94 e0       	ldi	r25, 0x04	; 4
    111e:	90 93 c8 03 	sts	0x03C8, r25
    1122:	80 93 c7 03 	sts	0x03C7, r24
	LED* m_cstr;
};

class StatusLed : public Led {
public:
	StatusLed(LED * cstr) : Led(cstr){
    1126:	89 ec       	ldi	r24, 0xC9	; 201
    1128:	92 e0       	ldi	r25, 0x02	; 2
    112a:	90 93 c6 03 	sts	0x03C6, r25
    112e:	80 93 c5 03 	sts	0x03C5, r24
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class Switch {
public:
	Switch(SWITCH * cstr){m_cstr = cstr;};
    1132:	8c e4       	ldi	r24, 0x4C	; 76
    1134:	92 e0       	ldi	r25, 0x02	; 2
    1136:	90 93 ca 03 	sts	0x03CA, r25
    113a:	80 93 c9 03 	sts	0x03C9, r24

class Stream : STREAM{

public:
	Stream(void){
		fdev_setup_stream(this, &_put, &_get, _FDEV_SETUP_RW);
    113e:	61 e5       	ldi	r22, 0x51	; 81
    1140:	78 e0       	ldi	r23, 0x08	; 8
    1142:	70 93 d6 03 	sts	0x03D6, r23
    1146:	60 93 d5 03 	sts	0x03D5, r22
    114a:	44 e6       	ldi	r20, 0x64	; 100
    114c:	58 e0       	ldi	r21, 0x08	; 8
    114e:	50 93 d8 03 	sts	0x03D8, r21
    1152:	40 93 d7 03 	sts	0x03D7, r20
    1156:	a3 e0       	ldi	r26, 0x03	; 3
    1158:	a0 93 d0 03 	sts	0x03D0, r26
    115c:	10 92 da 03 	sts	0x03DA, r1
    1160:	10 92 d9 03 	sts	0x03D9, r1
};


class Marquee : public Stream {
public:
	Marquee(MARQUEE* cstr) {m_cstr = cstr;}
    1164:	85 ed       	ldi	r24, 0xD5	; 213
    1166:	92 e0       	ldi	r25, 0x02	; 2
    1168:	90 93 cc 03 	sts	0x03CC, r25
    116c:	80 93 cb 03 	sts	0x03CB, r24
    1170:	8f e5       	ldi	r24, 0x5F	; 95
    1172:	92 e0       	ldi	r25, 0x02	; 2
    1174:	90 93 dc 03 	sts	0x03DC, r25
    1178:	80 93 db 03 	sts	0x03DB, r24
#ifdef __cplusplus
}
class Actuator{
public:
	Actuator(__ACTUATOR* cstr){
		m_cstr = cstr;
    117c:	86 e7       	ldi	r24, 0x76	; 118
    117e:	92 e0       	ldi	r25, 0x02	; 2
    1180:	90 93 de 03 	sts	0x03DE, r25
    1184:	80 93 dd 03 	sts	0x03DD, r24
#ifdef __cplusplus
}
class Servo : public Actuator{
public:
	Servo(SERVO* cstr) : Actuator(&cstr->actuator){
		m_cstr = cstr;
    1188:	90 93 e0 03 	sts	0x03E0, r25
    118c:	80 93 df 03 	sts	0x03DF, r24
    1190:	8c e8       	ldi	r24, 0x8C	; 140
    1192:	92 e0       	ldi	r25, 0x02	; 2
    1194:	90 93 e2 03 	sts	0x03E2, r25
    1198:	80 93 e1 03 	sts	0x03E1, r24
    119c:	90 93 e4 03 	sts	0x03E4, r25
    11a0:	80 93 e3 03 	sts	0x03E3, r24
    11a4:	82 ea       	ldi	r24, 0xA2	; 162
    11a6:	92 e0       	ldi	r25, 0x02	; 2
    11a8:	90 93 e6 03 	sts	0x03E6, r25
    11ac:	80 93 e5 03 	sts	0x03E5, r24
    11b0:	90 93 e8 03 	sts	0x03E8, r25
    11b4:	80 93 e7 03 	sts	0x03E7, r24
};

class ServoDriver{
public:
	ServoDriver(SERVO_DRIVER* cstr){
		driver = cstr;
    11b8:	88 eb       	ldi	r24, 0xB8	; 184
    11ba:	92 e0       	ldi	r25, 0x02	; 2
    11bc:	90 93 ea 03 	sts	0x03EA, r25
    11c0:	80 93 e9 03 	sts	0x03E9, r24
    11c4:	70 93 f6 03 	sts	0x03F6, r23
    11c8:	60 93 f5 03 	sts	0x03F5, r22
    11cc:	50 93 f8 03 	sts	0x03F8, r21
    11d0:	40 93 f7 03 	sts	0x03F7, r20
    11d4:	a0 93 f0 03 	sts	0x03F0, r26
    11d8:	10 92 fa 03 	sts	0x03FA, r1
    11dc:	10 92 f9 03 	sts	0x03F9, r1
/* ===================== C++ Wrapper Code ===============================================*/
#include "Stream/Stream.h"
class Uart : public Stream {
public:
	Uart(UART * cstr): Stream(){
		m_cstr = cstr;
    11e0:	2a e1       	ldi	r18, 0x1A	; 26
    11e2:	32 e0       	ldi	r19, 0x02	; 2
    11e4:	30 93 fc 03 	sts	0x03FC, r19
    11e8:	20 93 fb 03 	sts	0x03FB, r18
		cstr->cpp = this;
    11ec:	eb ee       	ldi	r30, 0xEB	; 235
    11ee:	f3 e0       	ldi	r31, 0x03	; 3
    11f0:	f0 93 30 02 	sts	0x0230, r31
    11f4:	e0 93 2f 02 	sts	0x022F, r30
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class UartHW : public Uart {
public:
	UartHW(HW_UART* uart) : Uart(&uart->_uart_){
    11f8:	85 ee       	ldi	r24, 0xE5	; 229
    11fa:	92 e0       	ldi	r25, 0x02	; 2
    11fc:	91 83       	std	Z+1, r25	; 0x01
    11fe:	80 83       	st	Z, r24
		m_hw = uart;
    1200:	30 93 02 04 	sts	0x0402, r19
    1204:	20 93 01 04 	sts	0x0401, r18
		m_polling = FALSE;
    1208:	10 92 03 04 	sts	0x0403, r1
    120c:	70 93 0f 04 	sts	0x040F, r23
    1210:	60 93 0e 04 	sts	0x040E, r22
    1214:	50 93 11 04 	sts	0x0411, r21
    1218:	40 93 10 04 	sts	0x0410, r20
    121c:	a0 93 09 04 	sts	0x0409, r26
    1220:	10 92 13 04 	sts	0x0413, r1
    1224:	10 92 12 04 	sts	0x0412, r1
};

// A type of stream that just throws away output and returns EOF for input
class NullStream : public Stream{
public:
	NullStream(void) : Stream(){};
    1228:	85 ef       	ldi	r24, 0xF5	; 245
    122a:	92 e0       	ldi	r25, 0x02	; 2
    122c:	90 93 05 04 	sts	0x0405, r25
    1230:	80 93 04 04 	sts	0x0404, r24
	while(1);
}
    1234:	08 95       	ret

00001236 <_ZNK9StatusLed3setEa>:
	}

	virtual void set(boolean value) const{
    1236:	1f 93       	push	r17
    1238:	16 2f       	mov	r17, r22
		LED_off(&statusLED);
	}
}

static __inline__ void statusLED_set(boolean value){
	if(pin_is_output(statusLED.pin)){
    123a:	80 91 36 04 	lds	r24, 0x0436
    123e:	90 91 37 04 	lds	r25, 0x0437
    1242:	0e 94 b0 0b 	call	0x1760	; 0x1760 <pin_is_output>
    1246:	88 23       	and	r24, r24
    1248:	29 f0       	breq	.+10     	; 0x1254 <_ZNK9StatusLed3setEa+0x1e>
		LED_set(&statusLED, value);
    124a:	86 e3       	ldi	r24, 0x36	; 54
    124c:	94 e0       	ldi	r25, 0x04	; 4
    124e:	61 2f       	mov	r22, r17
    1250:	0e 94 13 0c 	call	0x1826	; 0x1826 <LED_set>
	StatusLed(LED * cstr) : Led(cstr){
	}

	virtual void set(boolean value) const{
		statusLED_set(value);
	}
    1254:	1f 91       	pop	r17
    1256:	08 95       	ret

00001258 <_ZNK3Led3setEa>:
	}
	void off(void) const{
		set(FALSE);
	}
	virtual void set(boolean value) const{
		LED_set(m_cstr,value);
    1258:	fc 01       	movw	r30, r24
    125a:	82 81       	ldd	r24, Z+2	; 0x02
    125c:	93 81       	ldd	r25, Z+3	; 0x03
    125e:	0e 94 13 0c 	call	0x1826	; 0x1826 <LED_set>
	}
    1262:	08 95       	ret

00001264 <_ZN7Marquee5writeEh>:

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){return marqueeSendByte(m_cstr,data);}
    1264:	fc 01       	movw	r30, r24
    1266:	80 89       	ldd	r24, Z+16	; 0x10
    1268:	91 89       	ldd	r25, Z+17	; 0x11
    126a:	0e 94 9d 0c 	call	0x193a	; 0x193a <marqueeSendByte>
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	08 95       	ret

00001272 <_ZN6UartHW4readEv>:
	};

	virtual int read(void){
    1272:	fc 01       	movw	r30, r24
		int ch;

		if(m_polling){
    1274:	80 8d       	ldd	r24, Z+24	; 0x18
    1276:	88 23       	and	r24, r24
    1278:	29 f0       	breq	.+10     	; 0x1284 <_ZN6UartHW4readEv+0x12>
			ch = uartPollByte(m_hw);
    127a:	86 89       	ldd	r24, Z+22	; 0x16
    127c:	97 89       	ldd	r25, Z+23	; 0x17
    127e:	0e 94 80 11 	call	0x2300	; 0x2300 <uartPollByte>
    1282:	08 95       	ret
		}else{
			ch = __uartGetByte(m_cstr);
    1284:	80 89       	ldd	r24, Z+16	; 0x10
    1286:	91 89       	ldd	r25, Z+17	; 0x11
    1288:	0e 94 b8 10 	call	0x2170	; 0x2170 <__uartGetByte>
		}

		return ch;
	}
    128c:	08 95       	ret

0000128e <_ZN4Uart4readEv>:
	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
		return _uartSendByte(m_cstr, data);
	}
	virtual int read(void){
		return __uartGetByte(m_cstr);
    128e:	fc 01       	movw	r30, r24
    1290:	80 89       	ldd	r24, Z+16	; 0x10
    1292:	91 89       	ldd	r25, Z+17	; 0x11
    1294:	0e 94 b8 10 	call	0x2170	; 0x2170 <__uartGetByte>
	}
    1298:	08 95       	ret

0000129a <_ZN4Uart5writeEh>:
		return m_cstr;
	}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
		return _uartSendByte(m_cstr, data);
    129a:	fc 01       	movw	r30, r24
    129c:	80 89       	ldd	r24, Z+16	; 0x10
    129e:	91 89       	ldd	r25, Z+17	; 0x11
    12a0:	0e 94 3f 11 	call	0x227e	; 0x227e <_uartSendByte>
	}
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	08 95       	ret

000012a8 <__initTimers>:
// Private methods

//int __timerPrescalerIndex(const Timer* timer, uint16_t prescaler);

static __inline__ TimerData* timerGetData(const Timer* timer){
	return (TimerData*)pgm_read_word(&timer->pgm_data);
    12a8:	24 ea       	ldi	r18, 0xA4	; 164
    12aa:	32 e0       	ldi	r19, 0x02	; 2
    12ac:	f9 01       	movw	r30, r18
    12ae:	a5 91       	lpm	r26, Z+
    12b0:	b4 91       	lpm	r27, Z+
 
// Set Timer4 to the following:-
//		Mode 	 = TIMER_MODE_PWM_FAST_ICR
//		Prescale = 8
	// Save the timer mode
	timerGetData(&pgm_Timers[4])->mode = TIMER_MODE_PWM_FAST_ICR;
    12b2:	8e e0       	ldi	r24, 0x0E	; 14
    12b4:	1a 96       	adiw	r26, 0x0a	; 10
    12b6:	8c 93       	st	X, r24
    12b8:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR4A,WGM40);
	} 
		
			
	if(14 & 2){
		sbi(TCCR4A,WGM41);
    12ba:	e0 ea       	ldi	r30, 0xA0	; 160
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	82 60       	ori	r24, 0x02	; 2
    12c2:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 4){
		sbi(TCCR4B,WGM42);
    12c4:	e1 ea       	ldi	r30, 0xA1	; 161
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	88 60       	ori	r24, 0x08	; 8
    12cc:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 8){
		sbi(TCCR4B,WGM43);
    12ce:	80 81       	ld	r24, Z
    12d0:	80 61       	ori	r24, 0x10	; 16
    12d2:	80 83       	st	Z, r24
	} 
		
	// Top is stored in ICR register
	ICR4 = 40000;			
    12d4:	80 e4       	ldi	r24, 0x40	; 64
    12d6:	9c e9       	ldi	r25, 0x9C	; 156
    12d8:	90 93 a7 00 	sts	0x00A7, r25
    12dc:	80 93 a6 00 	sts	0x00A6, r24
			
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[4])->prescale_value = 8;
    12e0:	48 e0       	ldi	r20, 0x08	; 8
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	4d 93       	st	X+, r20
    12e6:	5c 93       	st	X, r21
	TCCR4B |= 2;
    12e8:	80 81       	ld	r24, Z
    12ea:	82 60       	ori	r24, 0x02	; 2
    12ec:	80 83       	st	Z, r24
    12ee:	24 5d       	subi	r18, 0xD4	; 212
    12f0:	3f 4f       	sbci	r19, 0xFF	; 255
    12f2:	f9 01       	movw	r30, r18
    12f4:	a5 91       	lpm	r26, Z+
    12f6:	b4 91       	lpm	r27, Z+
	 
// Set Timer5 to the following:-
//		Mode 	 = TIMER_MODE_CTC_OCR
//		Prescale = 8
	// Save the timer mode
	timerGetData(&pgm_Timers[5])->mode = TIMER_MODE_CTC_OCR;
    12f8:	84 e0       	ldi	r24, 0x04	; 4
    12fa:	1a 96       	adiw	r26, 0x0a	; 10
    12fc:	8c 93       	st	X, r24
    12fe:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR5A,WGM51);
	} 
		
			
	if(4 & 4){
		sbi(TCCR5B,WGM52);
    1300:	e1 e2       	ldi	r30, 0x21	; 33
    1302:	f1 e0       	ldi	r31, 0x01	; 1
    1304:	80 81       	ld	r24, Z
    1306:	88 60       	ori	r24, 0x08	; 8
    1308:	80 83       	st	Z, r24
	if(4 & 8){
		sbi(TCCR5B,WGM53);
	} 
		
	// Top is stored in Compare A OCR
				OCR5A = 64000;			
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	9a ef       	ldi	r25, 0xFA	; 250
    130e:	90 93 29 01 	sts	0x0129, r25
    1312:	80 93 28 01 	sts	0x0128, r24
				
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[5])->prescale_value = 8;
    1316:	4d 93       	st	X+, r20
    1318:	5c 93       	st	X, r21
	TCCR5B |= 2;
    131a:	80 81       	ld	r24, Z
    131c:	82 60       	ori	r24, 0x02	; 2
    131e:	80 83       	st	Z, r24
	}
    1320:	08 95       	ret

00001322 <servoPWMInit>:
    1322:	8f 92       	push	r8
    1324:	9f 92       	push	r9
    1326:	af 92       	push	r10
    1328:	bf 92       	push	r11
    132a:	cf 92       	push	r12
    132c:	df 92       	push	r13
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	6c 01       	movw	r12, r24
    133c:	dc 01       	movw	r26, r24
    133e:	12 96       	adiw	r26, 0x02	; 2
    1340:	8c 91       	ld	r24, X
    1342:	c8 2f       	mov	r28, r24
    1344:	d0 e0       	ldi	r29, 0x00	; 0
    1346:	21 97       	sbiw	r28, 0x01	; 1
    1348:	7e 01       	movw	r14, r28
    134a:	ee 0c       	add	r14, r14
    134c:	ff 1c       	adc	r15, r15
    134e:	9f e7       	ldi	r25, 0x7F	; 127
    1350:	89 2e       	mov	r8, r25
    1352:	93 e0       	ldi	r25, 0x03	; 3
    1354:	99 2e       	mov	r9, r25
    1356:	8c e2       	ldi	r24, 0x2C	; 44
    1358:	a8 2e       	mov	r10, r24
    135a:	47 c0       	rjmp	.+142    	; 0x13ea <servoPWMInit+0xc8>
    135c:	d6 01       	movw	r26, r12
    135e:	ed 91       	ld	r30, X+
    1360:	fc 91       	ld	r31, X
    1362:	ee 0d       	add	r30, r14
    1364:	ff 1d       	adc	r31, r15
    1366:	05 91       	lpm	r16, Z+
    1368:	14 91       	lpm	r17, Z+
    136a:	f8 01       	movw	r30, r16
    136c:	d5 82       	std	Z+5, r13	; 0x05
    136e:	c4 82       	std	Z+4, r12	; 0x04
    1370:	86 81       	ldd	r24, Z+6	; 0x06
    1372:	97 81       	ldd	r25, Z+7	; 0x07
    1374:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <compareFromIOPin>
    1378:	fc 01       	movw	r30, r24
    137a:	d8 01       	movw	r26, r16
    137c:	55 96       	adiw	r26, 0x15	; 21
    137e:	9c 93       	st	X, r25
    1380:	8e 93       	st	-X, r24
    1382:	54 97       	sbiw	r26, 0x14	; 20
    1384:	32 96       	adiw	r30, 0x02	; 2
    1386:	b4 90       	lpm	r11, Z+
    1388:	11 96       	adiw	r26, 0x01	; 1
    138a:	9c 92       	st	X, r9
    138c:	8e 92       	st	-X, r8
    138e:	16 96       	adiw	r26, 0x06	; 6
    1390:	8d 91       	ld	r24, X+
    1392:	9c 91       	ld	r25, X
    1394:	17 97       	sbiw	r26, 0x07	; 7
    1396:	60 e0       	ldi	r22, 0x00	; 0
    1398:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <pin_make_output>
    139c:	ba 9c       	mul	r11, r10
    139e:	c0 01       	movw	r24, r0
    13a0:	11 24       	eor	r1, r1
    13a2:	8d 5e       	subi	r24, 0xED	; 237
    13a4:	9d 4f       	sbci	r25, 0xFD	; 253
    13a6:	fc 01       	movw	r30, r24
    13a8:	a5 91       	lpm	r26, Z+
    13aa:	b4 91       	lpm	r27, Z+
    13ac:	8d 91       	ld	r24, X+
    13ae:	9c 91       	ld	r25, X
    13b0:	d8 01       	movw	r26, r16
    13b2:	53 96       	adiw	r26, 0x13	; 19
    13b4:	9c 93       	st	X, r25
    13b6:	8e 93       	st	-X, r24
    13b8:	52 97       	sbiw	r26, 0x12	; 18
    13ba:	18 96       	adiw	r26, 0x08	; 8
    13bc:	6d 91       	ld	r22, X+
    13be:	7c 91       	ld	r23, X
    13c0:	19 97       	sbiw	r26, 0x09	; 9
    13c2:	1a 96       	adiw	r26, 0x0a	; 10
    13c4:	4d 91       	ld	r20, X+
    13c6:	5c 91       	ld	r21, X
    13c8:	1b 97       	sbiw	r26, 0x0b	; 11
    13ca:	c8 01       	movw	r24, r16
    13cc:	0e 94 2d 0a 	call	0x145a	; 0x145a <servoSetConfig>
    13d0:	c8 01       	movw	r24, r16
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__act_setSpeed>
    13d8:	c8 01       	movw	r24, r16
    13da:	6f ef       	ldi	r22, 0xFF	; 255
    13dc:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__act_setConnected>
    13e0:	21 97       	sbiw	r28, 0x01	; 1
    13e2:	ee ef       	ldi	r30, 0xFE	; 254
    13e4:	ff ef       	ldi	r31, 0xFF	; 255
    13e6:	ee 0e       	add	r14, r30
    13e8:	ff 1e       	adc	r15, r31
    13ea:	ff ef       	ldi	r31, 0xFF	; 255
    13ec:	cf 3f       	cpi	r28, 0xFF	; 255
    13ee:	df 07       	cpc	r29, r31
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <servoPWMInit+0xd2>
    13f2:	b4 cf       	rjmp	.-152    	; 0x135c <servoPWMInit+0x3a>
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	df 90       	pop	r13
    1402:	cf 90       	pop	r12
    1404:	bf 90       	pop	r11
    1406:	af 90       	pop	r10
    1408:	9f 90       	pop	r9
    140a:	8f 90       	pop	r8
    140c:	08 95       	ret

0000140e <setConnected>:
    140e:	fc 01       	movw	r30, r24
    1410:	84 89       	ldd	r24, Z+20	; 0x14
    1412:	95 89       	ldd	r25, Z+21	; 0x15
    1414:	61 11       	cpse	r22, r1
    1416:	62 e0       	ldi	r22, 0x02	; 2
    1418:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <compareSetOutputMode>
    141c:	08 95       	ret

0000141e <setSpeed>:
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	fc 01       	movw	r30, r24
    1428:	e4 88       	ldd	r14, Z+20	; 0x14
    142a:	f5 88       	ldd	r15, Z+21	; 0x15
    142c:	24 85       	ldd	r18, Z+12	; 0x0c
    142e:	35 85       	ldd	r19, Z+13	; 0x0d
    1430:	06 85       	ldd	r16, Z+14	; 0x0e
    1432:	17 85       	ldd	r17, Z+15	; 0x0f
    1434:	86 2f       	mov	r24, r22
    1436:	99 27       	eor	r25, r25
    1438:	87 fd       	sbrc	r24, 7
    143a:	90 95       	com	r25
    143c:	61 e8       	ldi	r22, 0x81	; 129
    143e:	7f ef       	ldi	r23, 0xFF	; 255
    1440:	4f e7       	ldi	r20, 0x7F	; 127
    1442:	50 e0       	ldi	r21, 0x00	; 0
    1444:	0e 94 04 0b 	call	0x1608	; 0x1608 <interpolateU>
    1448:	bc 01       	movw	r22, r24
    144a:	c7 01       	movw	r24, r14
    144c:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <compareSetThreshold>
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	08 95       	ret

0000145a <servoSetConfig>:
    145a:	9f 92       	push	r9
    145c:	af 92       	push	r10
    145e:	bf 92       	push	r11
    1460:	cf 92       	push	r12
    1462:	df 92       	push	r13
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	ec 01       	movw	r28, r24
    1472:	7b 01       	movw	r14, r22
    1474:	8a 01       	movw	r16, r20
    1476:	79 87       	std	Y+9, r23	; 0x09
    1478:	68 87       	std	Y+8, r22	; 0x08
    147a:	5b 87       	std	Y+11, r21	; 0x0b
    147c:	4a 87       	std	Y+10, r20	; 0x0a
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	9d 81       	ldd	r25, Y+5	; 0x05
    1482:	89 2b       	or	r24, r25
    1484:	09 f4       	brne	.+2      	; 0x1488 <servoSetConfig+0x2e>
    1486:	5e c0       	rjmp	.+188    	; 0x1544 <servoSetConfig+0xea>
    1488:	9f b6       	in	r9, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	8a 89       	ldd	r24, Y+18	; 0x12
    148e:	9b 89       	ldd	r25, Y+19	; 0x13
    1490:	68 ee       	ldi	r22, 0xE8	; 232
    1492:	73 e0       	ldi	r23, 0x03	; 3
    1494:	0e 94 33 1a 	call	0x3466	; 0x3466 <__udivmodhi4>
    1498:	5b 01       	movw	r10, r22
    149a:	cc 24       	eor	r12, r12
    149c:	dd 24       	eor	r13, r13
    149e:	b7 01       	movw	r22, r14
    14a0:	60 1b       	sub	r22, r16
    14a2:	71 0b       	sbc	r23, r17
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a6 01       	movw	r20, r12
    14aa:	95 01       	movw	r18, r10
    14ac:	0e 94 14 1a 	call	0x3428	; 0x3428 <__mulsi3>
    14b0:	24 e1       	ldi	r18, 0x14	; 20
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	0e 94 47 1a 	call	0x348e	; 0x348e <__udivmodsi4>
    14bc:	c9 01       	movw	r24, r18
    14be:	da 01       	movw	r26, r20
    14c0:	9c 01       	movw	r18, r24
    14c2:	ad 01       	movw	r20, r26
    14c4:	da 01       	movw	r26, r20
    14c6:	c9 01       	movw	r24, r18
    14c8:	80 70       	andi	r24, 0x00	; 0
    14ca:	90 70       	andi	r25, 0x00	; 0
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	a1 05       	cpc	r26, r1
    14d0:	b1 05       	cpc	r27, r1
    14d2:	39 f0       	breq	.+14     	; 0x14e2 <servoSetConfig+0x88>
    14d4:	86 ee       	ldi	r24, 0xE6	; 230
    14d6:	0e 94 4d 0b 	call	0x169a	; 0x169a <setError>
    14da:	2f ef       	ldi	r18, 0xFF	; 255
    14dc:	3f ef       	ldi	r19, 0xFF	; 255
    14de:	40 e0       	ldi	r20, 0x00	; 0
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	3d 87       	std	Y+13, r19	; 0x0d
    14e4:	2c 87       	std	Y+12, r18	; 0x0c
    14e6:	0e 0d       	add	r16, r14
    14e8:	1f 1d       	adc	r17, r15
    14ea:	b8 01       	movw	r22, r16
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	a6 01       	movw	r20, r12
    14f2:	95 01       	movw	r18, r10
    14f4:	0e 94 14 1a 	call	0x3428	; 0x3428 <__mulsi3>
    14f8:	24 e1       	ldi	r18, 0x14	; 20
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e0       	ldi	r20, 0x00	; 0
    14fe:	50 e0       	ldi	r21, 0x00	; 0
    1500:	0e 94 47 1a 	call	0x348e	; 0x348e <__udivmodsi4>
    1504:	c9 01       	movw	r24, r18
    1506:	da 01       	movw	r26, r20
    1508:	9c 01       	movw	r18, r24
    150a:	ad 01       	movw	r20, r26
    150c:	da 01       	movw	r26, r20
    150e:	c9 01       	movw	r24, r18
    1510:	80 70       	andi	r24, 0x00	; 0
    1512:	90 70       	andi	r25, 0x00	; 0
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	a1 05       	cpc	r26, r1
    1518:	b1 05       	cpc	r27, r1
    151a:	39 f0       	breq	.+14     	; 0x152a <servoSetConfig+0xd0>
    151c:	86 ee       	ldi	r24, 0xE6	; 230
    151e:	0e 94 4d 0b 	call	0x169a	; 0x169a <setError>
    1522:	2f ef       	ldi	r18, 0xFF	; 255
    1524:	3f ef       	ldi	r19, 0xFF	; 255
    1526:	40 e0       	ldi	r20, 0x00	; 0
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	3f 87       	std	Y+15, r19	; 0x0f
    152c:	2e 87       	std	Y+14, r18	; 0x0e
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	80 ff       	sbrs	r24, 0
    1532:	07 c0       	rjmp	.+14     	; 0x1542 <servoSetConfig+0xe8>
    1534:	6a 81       	ldd	r22, Y+2	; 0x02
    1536:	61 50       	subi	r22, 0x01	; 1
    1538:	6a 83       	std	Y+2, r22	; 0x02
    153a:	6f 5f       	subi	r22, 0xFF	; 255
    153c:	ce 01       	movw	r24, r28
    153e:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__act_setSpeed>
    1542:	9f be       	out	0x3f, r9	; 63
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	df 90       	pop	r13
    1552:	cf 90       	pop	r12
    1554:	bf 90       	pop	r11
    1556:	af 90       	pop	r10
    1558:	9f 90       	pop	r9
    155a:	08 95       	ret

0000155c <_ZN6Stream5printEc>:
    155c:	1f 93       	push	r17
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	ec 01       	movw	r28, r24
    1564:	16 2f       	mov	r17, r22
    1566:	6a 30       	cpi	r22, 0x0A	; 10
    1568:	39 f4       	brne	.+14     	; 0x1578 <_ZN6Stream5printEc+0x1c>
    156a:	e8 81       	ld	r30, Y
    156c:	f9 81       	ldd	r31, Y+1	; 0x01
    156e:	01 90       	ld	r0, Z+
    1570:	f0 81       	ld	r31, Z
    1572:	e0 2d       	mov	r30, r0
    1574:	6d e0       	ldi	r22, 0x0D	; 13
    1576:	09 95       	icall
    1578:	e8 81       	ld	r30, Y
    157a:	f9 81       	ldd	r31, Y+1	; 0x01
    157c:	01 90       	ld	r0, Z+
    157e:	f0 81       	ld	r31, Z
    1580:	e0 2d       	mov	r30, r0
    1582:	ce 01       	movw	r24, r28
    1584:	61 2f       	mov	r22, r17
    1586:	09 95       	icall
    1588:	ce 01       	movw	r24, r28
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	1f 91       	pop	r17
    1590:	08 95       	ret

00001592 <__act_setSpeed>:
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	ec 01       	movw	r28, r24
    159a:	16 2f       	mov	r17, r22
    159c:	61 38       	cpi	r22, 0x81	; 129
    159e:	0c f4       	brge	.+2      	; 0x15a2 <__act_setSpeed+0x10>
    15a0:	11 e8       	ldi	r17, 0x81	; 129
    15a2:	e8 81       	ld	r30, Y
    15a4:	f9 81       	ldd	r31, Y+1	; 0x01
    15a6:	30 97       	sbiw	r30, 0x00	; 0
    15a8:	79 f0       	breq	.+30     	; 0x15c8 <__act_setSpeed+0x36>
    15aa:	25 91       	lpm	r18, Z+
    15ac:	34 91       	lpm	r19, Z+
    15ae:	21 15       	cp	r18, r1
    15b0:	31 05       	cpc	r19, r1
    15b2:	51 f0       	breq	.+20     	; 0x15c8 <__act_setSpeed+0x36>
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	81 fd       	sbrc	r24, 1
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <__act_setSpeed+0x2c>
    15ba:	61 2f       	mov	r22, r17
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <__act_setSpeed+0x30>
    15be:	61 2f       	mov	r22, r17
    15c0:	61 95       	neg	r22
    15c2:	ce 01       	movw	r24, r28
    15c4:	f9 01       	movw	r30, r18
    15c6:	09 95       	icall
    15c8:	1a 83       	std	Y+2, r17	; 0x02
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	08 95       	ret

000015d2 <__act_setConnected>:
    15d2:	dc 01       	movw	r26, r24
    15d4:	96 2f       	mov	r25, r22
    15d6:	91 70       	andi	r25, 0x01	; 1
    15d8:	13 96       	adiw	r26, 0x03	; 3
    15da:	8c 91       	ld	r24, X
    15dc:	13 97       	sbiw	r26, 0x03	; 3
    15de:	8e 7f       	andi	r24, 0xFE	; 254
    15e0:	89 2b       	or	r24, r25
    15e2:	13 96       	adiw	r26, 0x03	; 3
    15e4:	8c 93       	st	X, r24
    15e6:	13 97       	sbiw	r26, 0x03	; 3
    15e8:	8d 91       	ld	r24, X+
    15ea:	9c 91       	ld	r25, X
    15ec:	11 97       	sbiw	r26, 0x01	; 1
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	51 f0       	breq	.+20     	; 0x1606 <__act_setConnected+0x34>
    15f2:	fc 01       	movw	r30, r24
    15f4:	32 96       	adiw	r30, 0x02	; 2
    15f6:	25 91       	lpm	r18, Z+
    15f8:	34 91       	lpm	r19, Z+
    15fa:	21 15       	cp	r18, r1
    15fc:	31 05       	cpc	r19, r1
    15fe:	19 f0       	breq	.+6      	; 0x1606 <__act_setConnected+0x34>
    1600:	cd 01       	movw	r24, r26
    1602:	f9 01       	movw	r30, r18
    1604:	09 95       	icall
    1606:	08 95       	ret

00001608 <interpolateU>:
    1608:	4f 92       	push	r4
    160a:	5f 92       	push	r5
    160c:	6f 92       	push	r6
    160e:	7f 92       	push	r7
    1610:	8f 92       	push	r8
    1612:	9f 92       	push	r9
    1614:	af 92       	push	r10
    1616:	bf 92       	push	r11
    1618:	cf 92       	push	r12
    161a:	df 92       	push	r13
    161c:	ef 92       	push	r14
    161e:	ff 92       	push	r15
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	2b 01       	movw	r4, r22
    1626:	5a 01       	movw	r10, r20
    1628:	39 01       	movw	r6, r18
    162a:	78 01       	movw	r14, r16
    162c:	e2 1a       	sub	r14, r18
    162e:	f3 0a       	sbc	r15, r19
    1630:	00 e0       	ldi	r16, 0x00	; 0
    1632:	10 e0       	ldi	r17, 0x00	; 0
    1634:	9c 01       	movw	r18, r24
    1636:	26 1b       	sub	r18, r22
    1638:	37 0b       	sbc	r19, r23
    163a:	44 27       	eor	r20, r20
    163c:	37 fd       	sbrc	r19, 7
    163e:	40 95       	com	r20
    1640:	54 2f       	mov	r21, r20
    1642:	c8 01       	movw	r24, r16
    1644:	b7 01       	movw	r22, r14
    1646:	0e 94 14 1a 	call	0x3428	; 0x3428 <__mulsi3>
    164a:	a4 18       	sub	r10, r4
    164c:	b5 08       	sbc	r11, r5
    164e:	cc 24       	eor	r12, r12
    1650:	b7 fc       	sbrc	r11, 7
    1652:	c0 94       	com	r12
    1654:	dc 2c       	mov	r13, r12
    1656:	a6 01       	movw	r20, r12
    1658:	95 01       	movw	r18, r10
    165a:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__divmodsi4>
    165e:	88 24       	eor	r8, r8
    1660:	99 24       	eor	r9, r9
    1662:	26 0d       	add	r18, r6
    1664:	37 1d       	adc	r19, r7
    1666:	48 1d       	adc	r20, r8
    1668:	59 1d       	adc	r21, r9
    166a:	c9 01       	movw	r24, r18
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	df 90       	pop	r13
    1676:	cf 90       	pop	r12
    1678:	bf 90       	pop	r11
    167a:	af 90       	pop	r10
    167c:	9f 90       	pop	r9
    167e:	8f 90       	pop	r8
    1680:	7f 90       	pop	r7
    1682:	6f 90       	pop	r6
    1684:	5f 90       	pop	r5
    1686:	4f 90       	pop	r4
    1688:	08 95       	ret

0000168a <getError>:
    168a:	80 91 31 04 	lds	r24, 0x0431
    168e:	08 95       	ret

00001690 <setErrorLog>:
    1690:	90 93 35 04 	sts	0x0435, r25
    1694:	80 93 34 04 	sts	0x0434, r24
    1698:	08 95       	ret

0000169a <setError>:
    169a:	1f 93       	push	r17
    169c:	18 2f       	mov	r17, r24
    169e:	80 91 31 04 	lds	r24, 0x0431
    16a2:	88 23       	and	r24, r24
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <setError+0xe>
    16a6:	5a c0       	rjmp	.+180    	; 0x175c <setError+0xc2>
    16a8:	10 93 31 04 	sts	0x0431, r17
    16ac:	80 91 36 04 	lds	r24, 0x0436
    16b0:	90 91 37 04 	lds	r25, 0x0437
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	49 f0       	breq	.+18     	; 0x16ca <setError+0x30>
    16b8:	0e 94 b0 0b 	call	0x1760	; 0x1760 <pin_is_output>
    16bc:	88 23       	and	r24, r24
    16be:	29 f0       	breq	.+10     	; 0x16ca <setError+0x30>
    16c0:	86 e3       	ldi	r24, 0x36	; 54
    16c2:	94 e0       	ldi	r25, 0x04	; 4
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	0e 94 13 0c 	call	0x1826	; 0x1826 <LED_set>
    16ca:	80 91 41 04 	lds	r24, 0x0441
    16ce:	90 91 42 04 	lds	r25, 0x0442
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <setError+0x3e>
    16d6:	42 c0       	rjmp	.+132    	; 0x175c <setError+0xc2>
    16d8:	17 ff       	sbrs	r17, 7
    16da:	12 c0       	rjmp	.+36     	; 0x1700 <setError+0x66>
    16dc:	00 d0       	rcall	.+0      	; 0x16de <setError+0x44>
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <setError+0x46>
    16e0:	ad b7       	in	r26, 0x3d	; 61
    16e2:	be b7       	in	r27, 0x3e	; 62
    16e4:	12 96       	adiw	r26, 0x02	; 2
    16e6:	9c 93       	st	X, r25
    16e8:	8e 93       	st	-X, r24
    16ea:	11 97       	sbiw	r26, 0x01	; 1
    16ec:	84 e9       	ldi	r24, 0x94	; 148
    16ee:	93 e0       	ldi	r25, 0x03	; 3
    16f0:	14 96       	adiw	r26, 0x04	; 4
    16f2:	9c 93       	st	X, r25
    16f4:	8e 93       	st	-X, r24
    16f6:	13 97       	sbiw	r26, 0x03	; 3
    16f8:	0e 94 6d 19 	call	0x32da	; 0x32da <fprintf_P>
    16fc:	11 95       	neg	r17
    16fe:	0c c0       	rjmp	.+24     	; 0x1718 <setError+0x7e>
    1700:	00 d0       	rcall	.+0      	; 0x1702 <setError+0x68>
    1702:	00 d0       	rcall	.+0      	; 0x1704 <setError+0x6a>
    1704:	ed b7       	in	r30, 0x3d	; 61
    1706:	fe b7       	in	r31, 0x3e	; 62
    1708:	92 83       	std	Z+2, r25	; 0x02
    170a:	81 83       	std	Z+1, r24	; 0x01
    170c:	8f e8       	ldi	r24, 0x8F	; 143
    170e:	93 e0       	ldi	r25, 0x03	; 3
    1710:	94 83       	std	Z+4, r25	; 0x04
    1712:	83 83       	std	Z+3, r24	; 0x03
    1714:	0e 94 6d 19 	call	0x32da	; 0x32da <fprintf_P>
    1718:	00 d0       	rcall	.+0      	; 0x171a <setError+0x80>
    171a:	ed b7       	in	r30, 0x3d	; 61
    171c:	fe b7       	in	r31, 0x3e	; 62
    171e:	31 96       	adiw	r30, 0x01	; 1
    1720:	80 91 41 04 	lds	r24, 0x0441
    1724:	90 91 42 04 	lds	r25, 0x0442
    1728:	ad b7       	in	r26, 0x3d	; 61
    172a:	be b7       	in	r27, 0x3e	; 62
    172c:	12 96       	adiw	r26, 0x02	; 2
    172e:	9c 93       	st	X, r25
    1730:	8e 93       	st	-X, r24
    1732:	11 97       	sbiw	r26, 0x01	; 1
    1734:	83 e8       	ldi	r24, 0x83	; 131
    1736:	93 e0       	ldi	r25, 0x03	; 3
    1738:	93 83       	std	Z+3, r25	; 0x03
    173a:	82 83       	std	Z+2, r24	; 0x02
    173c:	81 2f       	mov	r24, r17
    173e:	99 27       	eor	r25, r25
    1740:	87 fd       	sbrc	r24, 7
    1742:	90 95       	com	r25
    1744:	95 83       	std	Z+5, r25	; 0x05
    1746:	84 83       	std	Z+4, r24	; 0x04
    1748:	0e 94 6d 19 	call	0x32da	; 0x32da <fprintf_P>
    174c:	ed b7       	in	r30, 0x3d	; 61
    174e:	fe b7       	in	r31, 0x3e	; 62
    1750:	36 96       	adiw	r30, 0x06	; 6
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	fe bf       	out	0x3e, r31	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	ed bf       	out	0x3d, r30	; 61
    175c:	1f 91       	pop	r17
    175e:	08 95       	ret

00001760 <pin_is_output>:
    1760:	9c 01       	movw	r18, r24
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	81 f0       	breq	.+32     	; 0x1786 <pin_is_output+0x26>
    1766:	fc 01       	movw	r30, r24
    1768:	85 91       	lpm	r24, Z+
    176a:	94 91       	lpm	r25, Z+
    176c:	02 96       	adiw	r24, 0x02	; 2
    176e:	fc 01       	movw	r30, r24
    1770:	a5 91       	lpm	r26, Z+
    1772:	b4 91       	lpm	r27, Z+
    1774:	2e 5f       	subi	r18, 0xFE	; 254
    1776:	3f 4f       	sbci	r19, 0xFF	; 255
    1778:	f9 01       	movw	r30, r18
    177a:	94 91       	lpm	r25, Z+
    177c:	8c 91       	ld	r24, X
    177e:	89 23       	and	r24, r25
    1780:	11 f0       	breq	.+4      	; 0x1786 <pin_is_output+0x26>
    1782:	8f ef       	ldi	r24, 0xFF	; 255
    1784:	08 95       	ret
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	08 95       	ret

0000178a <pin_make_input>:
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	9c 01       	movw	r18, r24
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	f9 f0       	breq	.+62     	; 0x17d2 <pin_make_input+0x48>
    1794:	fc 01       	movw	r30, r24
    1796:	45 91       	lpm	r20, Z+
    1798:	54 91       	lpm	r21, Z+
    179a:	ca 01       	movw	r24, r20
    179c:	02 96       	adiw	r24, 0x02	; 2
    179e:	fc 01       	movw	r30, r24
    17a0:	a5 91       	lpm	r26, Z+
    17a2:	b4 91       	lpm	r27, Z+
    17a4:	fa 01       	movw	r30, r20
    17a6:	c5 91       	lpm	r28, Z+
    17a8:	d4 91       	lpm	r29, Z+
    17aa:	2e 5f       	subi	r18, 0xFE	; 254
    17ac:	3f 4f       	sbci	r19, 0xFF	; 255
    17ae:	f9 01       	movw	r30, r18
    17b0:	94 91       	lpm	r25, Z+
    17b2:	3f b7       	in	r19, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	8c 91       	ld	r24, X
    17b8:	29 2f       	mov	r18, r25
    17ba:	20 95       	com	r18
    17bc:	82 23       	and	r24, r18
    17be:	8c 93       	st	X, r24
    17c0:	66 23       	and	r22, r22
    17c2:	19 f0       	breq	.+6      	; 0x17ca <pin_make_input+0x40>
    17c4:	88 81       	ld	r24, Y
    17c6:	89 2b       	or	r24, r25
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <pin_make_input+0x44>
    17ca:	88 81       	ld	r24, Y
    17cc:	82 23       	and	r24, r18
    17ce:	88 83       	st	Y, r24
    17d0:	3f bf       	out	0x3f, r19	; 63
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	08 95       	ret

000017d8 <pin_make_output>:
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	9c 01       	movw	r18, r24
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	f9 f0       	breq	.+62     	; 0x1820 <pin_make_output+0x48>
    17e2:	fc 01       	movw	r30, r24
    17e4:	45 91       	lpm	r20, Z+
    17e6:	54 91       	lpm	r21, Z+
    17e8:	ca 01       	movw	r24, r20
    17ea:	02 96       	adiw	r24, 0x02	; 2
    17ec:	fc 01       	movw	r30, r24
    17ee:	c5 91       	lpm	r28, Z+
    17f0:	d4 91       	lpm	r29, Z+
    17f2:	fa 01       	movw	r30, r20
    17f4:	a5 91       	lpm	r26, Z+
    17f6:	b4 91       	lpm	r27, Z+
    17f8:	2e 5f       	subi	r18, 0xFE	; 254
    17fa:	3f 4f       	sbci	r19, 0xFF	; 255
    17fc:	f9 01       	movw	r30, r18
    17fe:	24 91       	lpm	r18, Z+
    1800:	3f b7       	in	r19, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	66 23       	and	r22, r22
    1806:	19 f0       	breq	.+6      	; 0x180e <pin_make_output+0x36>
    1808:	8c 91       	ld	r24, X
    180a:	82 2b       	or	r24, r18
    180c:	04 c0       	rjmp	.+8      	; 0x1816 <pin_make_output+0x3e>
    180e:	8c 91       	ld	r24, X
    1810:	92 2f       	mov	r25, r18
    1812:	90 95       	com	r25
    1814:	89 23       	and	r24, r25
    1816:	8c 93       	st	X, r24
    1818:	88 81       	ld	r24, Y
    181a:	82 2b       	or	r24, r18
    181c:	88 83       	st	Y, r24
    181e:	3f bf       	out	0x3f, r19	; 63
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	08 95       	ret

00001826 <LED_set>:
    1826:	1f 93       	push	r17
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	ec 01       	movw	r28, r24
    182e:	16 2f       	mov	r17, r22
    1830:	88 81       	ld	r24, Y
    1832:	99 81       	ldd	r25, Y+1	; 0x01
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	a9 f0       	breq	.+42     	; 0x1862 <LED_set+0x3c>
    1838:	3a 81       	ldd	r19, Y+2	; 0x02
    183a:	30 fd       	sbrc	r19, 0
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <LED_set+0x22>
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	66 23       	and	r22, r22
    1842:	09 f4       	brne	.+2      	; 0x1846 <LED_set+0x20>
    1844:	21 e0       	ldi	r18, 0x01	; 1
    1846:	12 2f       	mov	r17, r18
    1848:	31 fd       	sbrc	r19, 1
    184a:	06 c0       	rjmp	.+12     	; 0x1858 <LED_set+0x32>
    184c:	61 2f       	mov	r22, r17
    184e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <pin_make_output>
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	82 60       	ori	r24, 0x02	; 2
    1856:	8a 83       	std	Y+2, r24	; 0x02
    1858:	88 81       	ld	r24, Y
    185a:	99 81       	ldd	r25, Y+1	; 0x01
    185c:	61 2f       	mov	r22, r17
    185e:	0e 94 33 12 	call	0x2466	; 0x2466 <pin_set>
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	1f 91       	pop	r17
    1868:	08 95       	ret

0000186a <main>:
    186a:	0e 94 f1 06 	call	0xde2	; 0xde2 <registerLED>
    186e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__initTimers>
    1872:	0e 94 e7 07 	call	0xfce	; 0xfce <__clockInit>
    1876:	78 94       	sei
    1878:	0e 94 07 07 	call	0xe0e	; 0xe0e <sysInitHardware>
    187c:	0e 94 2f 03 	call	0x65e	; 0x65e <appInitHardware>
    1880:	0e 94 ca 07 	call	0xf94	; 0xf94 <clockGetus>
    1884:	60 93 18 04 	sts	0x0418, r22
    1888:	70 93 19 04 	sts	0x0419, r23
    188c:	80 93 1a 04 	sts	0x041A, r24
    1890:	90 93 1b 04 	sts	0x041B, r25
    1894:	0e 94 05 03 	call	0x60a	; 0x60a <appInitSoftware>
    1898:	60 93 1c 04 	sts	0x041C, r22
    189c:	70 93 1d 04 	sts	0x041D, r23
    18a0:	80 93 1e 04 	sts	0x041E, r24
    18a4:	90 93 1f 04 	sts	0x041F, r25
    18a8:	78 94       	sei
    18aa:	0e 94 df 11 	call	0x23be	; 0x23be <breathe>
    18ae:	80 91 1c 04 	lds	r24, 0x041C
    18b2:	90 91 1d 04 	lds	r25, 0x041D
    18b6:	a0 91 1e 04 	lds	r26, 0x041E
    18ba:	b0 91 1f 04 	lds	r27, 0x041F
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	a1 05       	cpc	r26, r1
    18c2:	b1 05       	cpc	r27, r1
    18c4:	19 f4       	brne	.+6      	; 0x18cc <main+0x62>
    18c6:	16 c0       	rjmp	.+44     	; 0x18f4 <main+0x8a>
    18c8:	0e 94 df 11 	call	0x23be	; 0x23be <breathe>
    18cc:	60 91 18 04 	lds	r22, 0x0418
    18d0:	70 91 19 04 	lds	r23, 0x0419
    18d4:	80 91 1a 04 	lds	r24, 0x041A
    18d8:	90 91 1b 04 	lds	r25, 0x041B
    18dc:	20 91 1c 04 	lds	r18, 0x041C
    18e0:	30 91 1d 04 	lds	r19, 0x041D
    18e4:	40 91 1e 04 	lds	r20, 0x041E
    18e8:	50 91 1f 04 	lds	r21, 0x041F
    18ec:	0e 94 94 11 	call	0x2328	; 0x2328 <clockHasElapsed>
    18f0:	88 23       	and	r24, r24
    18f2:	51 f3       	breq	.-44     	; 0x18c8 <main+0x5e>
    18f4:	0e 94 ca 07 	call	0xf94	; 0xf94 <clockGetus>
    18f8:	9b 01       	movw	r18, r22
    18fa:	ac 01       	movw	r20, r24
    18fc:	60 93 18 04 	sts	0x0418, r22
    1900:	70 93 19 04 	sts	0x0419, r23
    1904:	80 93 1a 04 	sts	0x041A, r24
    1908:	90 93 1b 04 	sts	0x041B, r25
    190c:	60 91 14 04 	lds	r22, 0x0414
    1910:	70 91 15 04 	lds	r23, 0x0415
    1914:	80 91 16 04 	lds	r24, 0x0416
    1918:	90 91 17 04 	lds	r25, 0x0417
    191c:	6f 5f       	subi	r22, 0xFF	; 255
    191e:	7f 4f       	sbci	r23, 0xFF	; 255
    1920:	8f 4f       	sbci	r24, 0xFF	; 255
    1922:	9f 4f       	sbci	r25, 0xFF	; 255
    1924:	60 93 14 04 	sts	0x0414, r22
    1928:	70 93 15 04 	sts	0x0415, r23
    192c:	80 93 16 04 	sts	0x0416, r24
    1930:	90 93 17 04 	sts	0x0417, r25
    1934:	0e 94 c2 02 	call	0x584	; 0x584 <appControl>
    1938:	af cf       	rjmp	.-162    	; 0x1898 <main+0x2e>

0000193a <marqueeSendByte>:
    193a:	cf 92       	push	r12
    193c:	df 92       	push	r13
    193e:	ef 92       	push	r14
    1940:	ff 92       	push	r15
    1942:	0f 93       	push	r16
    1944:	1f 93       	push	r17
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	ec 01       	movw	r28, r24
    194c:	d6 2e       	mov	r13, r22
    194e:	8c 81       	ldd	r24, Y+4	; 0x04
    1950:	9d 81       	ldd	r25, Y+5	; 0x05
    1952:	89 2b       	or	r24, r25
    1954:	a9 f5       	brne	.+106    	; 0x19c0 <marqueeSendByte+0x86>
    1956:	8a 85       	ldd	r24, Y+10	; 0x0a
    1958:	9b 85       	ldd	r25, Y+11	; 0x0b
    195a:	01 96       	adiw	r24, 0x01	; 1
    195c:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <malloc>
    1960:	9d 83       	std	Y+5, r25	; 0x05
    1962:	8c 83       	std	Y+4, r24	; 0x04
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	61 f1       	breq	.+88     	; 0x19c0 <marqueeSendByte+0x86>
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	07 c0       	rjmp	.+14     	; 0x197c <marqueeSendByte+0x42>
    196e:	ec 81       	ldd	r30, Y+4	; 0x04
    1970:	fd 81       	ldd	r31, Y+5	; 0x05
    1972:	e2 0f       	add	r30, r18
    1974:	f3 1f       	adc	r31, r19
    1976:	10 82       	st	Z, r1
    1978:	2f 5f       	subi	r18, 0xFF	; 255
    197a:	3f 4f       	sbci	r19, 0xFF	; 255
    197c:	8a 85       	ldd	r24, Y+10	; 0x0a
    197e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1980:	82 17       	cp	r24, r18
    1982:	93 07       	cpc	r25, r19
    1984:	a0 f7       	brcc	.-24     	; 0x196e <marqueeSendByte+0x34>
    1986:	19 86       	std	Y+9, r1	; 0x09
    1988:	18 86       	std	Y+8, r1	; 0x08
    198a:	1f 82       	std	Y+7, r1	; 0x07
    198c:	1e 82       	std	Y+6, r1	; 0x06
    198e:	8c 89       	ldd	r24, Y+20	; 0x14
    1990:	8e 7f       	andi	r24, 0xFE	; 254
    1992:	8c 8b       	std	Y+20, r24	; 0x14
    1994:	00 e0       	ldi	r16, 0x00	; 0
    1996:	10 e0       	ldi	r17, 0x00	; 0
    1998:	0e c0       	rjmp	.+28     	; 0x19b6 <marqueeSendByte+0x7c>
    199a:	c8 01       	movw	r24, r16
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	e8 81       	ld	r30, Y
    19a2:	f9 81       	ldd	r31, Y+1	; 0x01
    19a4:	e8 0f       	add	r30, r24
    19a6:	f9 1f       	adc	r31, r25
    19a8:	85 91       	lpm	r24, Z+
    19aa:	94 91       	lpm	r25, Z+
    19ac:	60 e2       	ldi	r22, 0x20	; 32
    19ae:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <segled_put_char>
    19b2:	0f 5f       	subi	r16, 0xFF	; 255
    19b4:	1f 4f       	sbci	r17, 0xFF	; 255
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ba:	08 17       	cp	r16, r24
    19bc:	19 07       	cpc	r17, r25
    19be:	68 f3       	brcs	.-38     	; 0x199a <marqueeSendByte+0x60>
    19c0:	ec 81       	ldd	r30, Y+4	; 0x04
    19c2:	fd 81       	ldd	r31, Y+5	; 0x05
    19c4:	30 97       	sbiw	r30, 0x00	; 0
    19c6:	09 f4       	brne	.+2      	; 0x19ca <marqueeSendByte+0x90>
    19c8:	3e c0       	rjmp	.+124    	; 0x1a46 <marqueeSendByte+0x10c>
    19ca:	8a e0       	ldi	r24, 0x0A	; 10
    19cc:	d8 16       	cp	r13, r24
    19ce:	19 f5       	brne	.+70     	; 0x1a16 <marqueeSendByte+0xdc>
    19d0:	88 85       	ldd	r24, Y+8	; 0x08
    19d2:	99 85       	ldd	r25, Y+9	; 0x09
    19d4:	e8 0f       	add	r30, r24
    19d6:	f9 1f       	adc	r31, r25
    19d8:	10 82       	st	Z, r1
    19da:	19 86       	std	Y+9, r1	; 0x09
    19dc:	18 86       	std	Y+8, r1	; 0x08
    19de:	cf b6       	in	r12, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	8c 89       	ldd	r24, Y+20	; 0x14
    19e4:	80 fd       	sbrc	r24, 0
    19e6:	15 c0       	rjmp	.+42     	; 0x1a12 <marqueeSendByte+0xd8>
    19e8:	8c 89       	ldd	r24, Y+20	; 0x14
    19ea:	81 60       	ori	r24, 0x01	; 1
    19ec:	8c 8b       	std	Y+20, r24	; 0x14
    19ee:	8c 89       	ldd	r24, Y+20	; 0x14
    19f0:	8d 7f       	andi	r24, 0xFD	; 253
    19f2:	8c 8b       	std	Y+20, r24	; 0x14
    19f4:	1f 82       	std	Y+7, r1	; 0x07
    19f6:	1e 82       	std	Y+6, r1	; 0x06
    19f8:	0e 94 ca 07 	call	0xf94	; 0xf94 <clockGetus>
    19fc:	9b 01       	movw	r18, r22
    19fe:	ac 01       	movw	r20, r24
    1a00:	ec 84       	ldd	r14, Y+12	; 0x0c
    1a02:	fd 84       	ldd	r15, Y+13	; 0x0d
    1a04:	0e 85       	ldd	r16, Y+14	; 0x0e
    1a06:	1f 85       	ldd	r17, Y+15	; 0x0f
    1a08:	8d e2       	ldi	r24, 0x2D	; 45
    1a0a:	9d e0       	ldi	r25, 0x0D	; 13
    1a0c:	be 01       	movw	r22, r28
    1a0e:	0e 94 50 13 	call	0x26a0	; 0x26a0 <scheduleJob>
    1a12:	cf be       	out	0x3f, r12	; 63
    1a14:	18 c0       	rjmp	.+48     	; 0x1a46 <marqueeSendByte+0x10c>
    1a16:	8d e0       	ldi	r24, 0x0D	; 13
    1a18:	d8 16       	cp	r13, r24
    1a1a:	a9 f0       	breq	.+42     	; 0x1a46 <marqueeSendByte+0x10c>
    1a1c:	28 85       	ldd	r18, Y+8	; 0x08
    1a1e:	39 85       	ldd	r19, Y+9	; 0x09
    1a20:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a22:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a24:	28 17       	cp	r18, r24
    1a26:	39 07       	cpc	r19, r25
    1a28:	70 f4       	brcc	.+28     	; 0x1a46 <marqueeSendByte+0x10c>
    1a2a:	e2 0f       	add	r30, r18
    1a2c:	f3 1f       	adc	r31, r19
    1a2e:	2f b7       	in	r18, 0x3f	; 63
    1a30:	f8 94       	cli
    1a32:	d0 82       	st	Z, r13
    1a34:	11 82       	std	Z+1, r1	; 0x01
    1a36:	88 85       	ldd	r24, Y+8	; 0x08
    1a38:	99 85       	ldd	r25, Y+9	; 0x09
    1a3a:	01 96       	adiw	r24, 0x01	; 1
    1a3c:	99 87       	std	Y+9, r25	; 0x09
    1a3e:	88 87       	std	Y+8, r24	; 0x08
    1a40:	1f 82       	std	Y+7, r1	; 0x07
    1a42:	1e 82       	std	Y+6, r1	; 0x06
    1a44:	2f bf       	out	0x3f, r18	; 63
    1a46:	8d 2d       	mov	r24, r13
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	1f 91       	pop	r17
    1a4e:	0f 91       	pop	r16
    1a50:	ff 90       	pop	r15
    1a52:	ef 90       	pop	r14
    1a54:	df 90       	pop	r13
    1a56:	cf 90       	pop	r12
    1a58:	08 95       	ret

00001a5a <marqueeUpdate>:
    1a5a:	2f 92       	push	r2
    1a5c:	3f 92       	push	r3
    1a5e:	4f 92       	push	r4
    1a60:	5f 92       	push	r5
    1a62:	6f 92       	push	r6
    1a64:	7f 92       	push	r7
    1a66:	8f 92       	push	r8
    1a68:	9f 92       	push	r9
    1a6a:	af 92       	push	r10
    1a6c:	bf 92       	push	r11
    1a6e:	cf 92       	push	r12
    1a70:	df 92       	push	r13
    1a72:	ef 92       	push	r14
    1a74:	ff 92       	push	r15
    1a76:	0f 93       	push	r16
    1a78:	1f 93       	push	r17
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	38 2e       	mov	r3, r24
    1a80:	29 2e       	mov	r2, r25
    1a82:	2a 01       	movw	r4, r20
    1a84:	3b 01       	movw	r6, r22
    1a86:	c8 2f       	mov	r28, r24
    1a88:	d9 2f       	mov	r29, r25
    1a8a:	0c 81       	ldd	r16, Y+4	; 0x04
    1a8c:	1d 81       	ldd	r17, Y+5	; 0x05
    1a8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a90:	9f 81       	ldd	r25, Y+7	; 0x07
    1a92:	08 0f       	add	r16, r24
    1a94:	19 1f       	adc	r17, r25
    1a96:	f8 01       	movw	r30, r16
    1a98:	80 80       	ld	r8, Z
    1a9a:	8c 89       	ldd	r24, Y+20	; 0x14
    1a9c:	86 95       	lsr	r24
    1a9e:	81 70       	andi	r24, 0x01	; 1
    1aa0:	88 20       	and	r8, r8
    1aa2:	29 f4       	brne	.+10     	; 0x1aae <marqueeUpdate+0x54>
    1aa4:	a8 88       	ldd	r10, Y+16	; 0x10
    1aa6:	b9 88       	ldd	r11, Y+17	; 0x11
    1aa8:	ca 88       	ldd	r12, Y+18	; 0x12
    1aaa:	db 88       	ldd	r13, Y+19	; 0x13
    1aac:	04 c0       	rjmp	.+8      	; 0x1ab6 <marqueeUpdate+0x5c>
    1aae:	ac 84       	ldd	r10, Y+12	; 0x0c
    1ab0:	bd 84       	ldd	r11, Y+13	; 0x0d
    1ab2:	ce 84       	ldd	r12, Y+14	; 0x0e
    1ab4:	df 84       	ldd	r13, Y+15	; 0x0f
    1ab6:	88 23       	and	r24, r24
    1ab8:	d1 f4       	brne	.+52     	; 0x1aee <marqueeUpdate+0x94>
    1aba:	88 20       	and	r8, r8
    1abc:	c1 f0       	breq	.+48     	; 0x1aee <marqueeUpdate+0x94>
    1abe:	f8 01       	movw	r30, r16
    1ac0:	32 91       	ld	r19, -Z
    1ac2:	8f 01       	movw	r16, r30
    1ac4:	0f 5f       	subi	r16, 0xFF	; 255
    1ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac8:	4a 81       	ldd	r20, Y+2	; 0x02
    1aca:	5b 81       	ldd	r21, Y+3	; 0x03
    1acc:	f8 01       	movw	r30, r16
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	07 c0       	rjmp	.+14     	; 0x1ae2 <marqueeUpdate+0x88>
    1ad4:	20 81       	ld	r18, Z
    1ad6:	22 23       	and	r18, r18
    1ad8:	51 f0       	breq	.+20     	; 0x1aee <marqueeUpdate+0x94>
    1ada:	23 17       	cp	r18, r19
    1adc:	41 f4       	brne	.+16     	; 0x1aee <marqueeUpdate+0x94>
    1ade:	31 96       	adiw	r30, 0x01	; 1
    1ae0:	01 96       	adiw	r24, 0x01	; 1
    1ae2:	84 17       	cp	r24, r20
    1ae4:	95 07       	cpc	r25, r21
    1ae6:	b0 f3       	brcs	.-20     	; 0x1ad4 <marqueeUpdate+0x7a>
    1ae8:	99 24       	eor	r9, r9
    1aea:	9a 94       	dec	r9
    1aec:	01 c0       	rjmp	.+2      	; 0x1af0 <marqueeUpdate+0x96>
    1aee:	99 24       	eor	r9, r9
    1af0:	8c 89       	ldd	r24, Y+20	; 0x14
    1af2:	86 95       	lsr	r24
    1af4:	81 70       	andi	r24, 0x01	; 1
    1af6:	29 2d       	mov	r18, r9
    1af8:	33 27       	eor	r19, r19
    1afa:	27 fd       	sbrc	r18, 7
    1afc:	30 95       	com	r19
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	28 17       	cp	r18, r24
    1b02:	39 07       	cpc	r19, r25
    1b04:	c1 f0       	breq	.+48     	; 0x1b36 <marqueeUpdate+0xdc>
    1b06:	a6 01       	movw	r20, r12
    1b08:	95 01       	movw	r18, r10
    1b0a:	62 e0       	ldi	r22, 0x02	; 2
    1b0c:	56 95       	lsr	r21
    1b0e:	47 95       	ror	r20
    1b10:	37 95       	ror	r19
    1b12:	27 95       	ror	r18
    1b14:	6a 95       	dec	r22
    1b16:	d1 f7       	brne	.-12     	; 0x1b0c <marqueeUpdate+0xb2>
    1b18:	99 2d       	mov	r25, r9
    1b1a:	92 70       	andi	r25, 0x02	; 2
    1b1c:	8c 89       	ldd	r24, Y+20	; 0x14
    1b1e:	8d 7f       	andi	r24, 0xFD	; 253
    1b20:	89 2b       	or	r24, r25
    1b22:	8c 8b       	std	Y+20, r24	; 0x14
    1b24:	99 20       	and	r9, r9
    1b26:	19 f0       	breq	.+6      	; 0x1b2e <marqueeUpdate+0xd4>
    1b28:	59 01       	movw	r10, r18
    1b2a:	6a 01       	movw	r12, r20
    1b2c:	04 c0       	rjmp	.+8      	; 0x1b36 <marqueeUpdate+0xdc>
    1b2e:	a2 1a       	sub	r10, r18
    1b30:	b3 0a       	sbc	r11, r19
    1b32:	c4 0a       	sbc	r12, r20
    1b34:	d5 0a       	sbc	r13, r21
    1b36:	ee 24       	eor	r14, r14
    1b38:	ff 24       	eor	r15, r15
    1b3a:	18 c0       	rjmp	.+48     	; 0x1b6c <marqueeUpdate+0x112>
    1b3c:	c7 01       	movw	r24, r14
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	e8 81       	ld	r30, Y
    1b44:	f9 81       	ldd	r31, Y+1	; 0x01
    1b46:	e8 0f       	add	r30, r24
    1b48:	f9 1f       	adc	r31, r25
    1b4a:	85 91       	lpm	r24, Z+
    1b4c:	94 91       	lpm	r25, Z+
    1b4e:	99 20       	and	r9, r9
    1b50:	39 f4       	brne	.+14     	; 0x1b60 <marqueeUpdate+0x106>
    1b52:	f8 01       	movw	r30, r16
    1b54:	60 81       	ld	r22, Z
    1b56:	66 23       	and	r22, r22
    1b58:	19 f0       	breq	.+6      	; 0x1b60 <marqueeUpdate+0x106>
    1b5a:	0f 5f       	subi	r16, 0xFF	; 255
    1b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5e:	01 c0       	rjmp	.+2      	; 0x1b62 <marqueeUpdate+0x108>
    1b60:	60 e2       	ldi	r22, 0x20	; 32
    1b62:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <segled_put_char>
    1b66:	08 94       	sec
    1b68:	e1 1c       	adc	r14, r1
    1b6a:	f1 1c       	adc	r15, r1
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b70:	e8 16       	cp	r14, r24
    1b72:	f9 06       	cpc	r15, r25
    1b74:	18 f3       	brcs	.-58     	; 0x1b3c <marqueeUpdate+0xe2>
    1b76:	88 20       	and	r8, r8
    1b78:	b1 f4       	brne	.+44     	; 0x1ba6 <marqueeUpdate+0x14c>
    1b7a:	1f 82       	std	Y+7, r1	; 0x07
    1b7c:	1e 82       	std	Y+6, r1	; 0x06
    1b7e:	88 89       	ldd	r24, Y+16	; 0x10
    1b80:	99 89       	ldd	r25, Y+17	; 0x11
    1b82:	aa 89       	ldd	r26, Y+18	; 0x12
    1b84:	bb 89       	ldd	r27, Y+19	; 0x13
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	a1 05       	cpc	r26, r1
    1b8a:	b1 05       	cpc	r27, r1
    1b8c:	29 f0       	breq	.+10     	; 0x1b98 <marqueeUpdate+0x13e>
    1b8e:	ec 81       	ldd	r30, Y+4	; 0x04
    1b90:	fd 81       	ldd	r31, Y+5	; 0x05
    1b92:	80 81       	ld	r24, Z
    1b94:	88 23       	and	r24, r24
    1b96:	19 f4       	brne	.+6      	; 0x1b9e <marqueeUpdate+0x144>
    1b98:	8c 89       	ldd	r24, Y+20	; 0x14
    1b9a:	8e 7f       	andi	r24, 0xFE	; 254
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <marqueeUpdate+0x148>
    1b9e:	8c 89       	ldd	r24, Y+20	; 0x14
    1ba0:	8d 7f       	andi	r24, 0xFD	; 253
    1ba2:	8c 8b       	std	Y+20, r24	; 0x14
    1ba4:	07 c0       	rjmp	.+14     	; 0x1bb4 <marqueeUpdate+0x15a>
    1ba6:	99 20       	and	r9, r9
    1ba8:	29 f4       	brne	.+10     	; 0x1bb4 <marqueeUpdate+0x15a>
    1baa:	8e 81       	ldd	r24, Y+6	; 0x06
    1bac:	9f 81       	ldd	r25, Y+7	; 0x07
    1bae:	01 96       	adiw	r24, 0x01	; 1
    1bb0:	9f 83       	std	Y+7, r25	; 0x07
    1bb2:	8e 83       	std	Y+6, r24	; 0x06
    1bb4:	8c 89       	ldd	r24, Y+20	; 0x14
    1bb6:	80 ff       	sbrs	r24, 0
    1bb8:	0a c0       	rjmp	.+20     	; 0x1bce <marqueeUpdate+0x174>
    1bba:	8d e2       	ldi	r24, 0x2D	; 45
    1bbc:	9d e0       	ldi	r25, 0x0D	; 13
    1bbe:	63 2d       	mov	r22, r3
    1bc0:	72 2d       	mov	r23, r2
    1bc2:	a3 01       	movw	r20, r6
    1bc4:	92 01       	movw	r18, r4
    1bc6:	86 01       	movw	r16, r12
    1bc8:	75 01       	movw	r14, r10
    1bca:	0e 94 50 13 	call	0x26a0	; 0x26a0 <scheduleJob>
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	1f 91       	pop	r17
    1bd4:	0f 91       	pop	r16
    1bd6:	ff 90       	pop	r15
    1bd8:	ef 90       	pop	r14
    1bda:	df 90       	pop	r13
    1bdc:	cf 90       	pop	r12
    1bde:	bf 90       	pop	r11
    1be0:	af 90       	pop	r10
    1be2:	9f 90       	pop	r9
    1be4:	8f 90       	pop	r8
    1be6:	7f 90       	pop	r7
    1be8:	6f 90       	pop	r6
    1bea:	5f 90       	pop	r5
    1bec:	4f 90       	pop	r4
    1bee:	3f 90       	pop	r3
    1bf0:	2f 90       	pop	r2
    1bf2:	08 95       	ret

00001bf4 <segled_put_char>:
    1bf4:	ef 92       	push	r14
    1bf6:	ff 92       	push	r15
    1bf8:	0f 93       	push	r16
    1bfa:	1f 93       	push	r17
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	8c 01       	movw	r16, r24
    1c02:	e6 2e       	mov	r14, r22
    1c04:	fc 01       	movw	r30, r24
    1c06:	80 89       	ldd	r24, Z+16	; 0x10
    1c08:	81 fd       	sbrc	r24, 1
    1c0a:	12 c0       	rjmp	.+36     	; 0x1c30 <segled_put_char+0x3c>
    1c0c:	c0 e0       	ldi	r28, 0x00	; 0
    1c0e:	d0 e0       	ldi	r29, 0x00	; 0
    1c10:	f8 01       	movw	r30, r16
    1c12:	ec 0f       	add	r30, r28
    1c14:	fd 1f       	adc	r31, r29
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <pin_make_output>
    1c20:	22 96       	adiw	r28, 0x02	; 2
    1c22:	c0 31       	cpi	r28, 0x10	; 16
    1c24:	d1 05       	cpc	r29, r1
    1c26:	a1 f7       	brne	.-24     	; 0x1c10 <segled_put_char+0x1c>
    1c28:	f8 01       	movw	r30, r16
    1c2a:	80 89       	ldd	r24, Z+16	; 0x10
    1c2c:	82 60       	ori	r24, 0x02	; 2
    1c2e:	80 8b       	std	Z+16, r24	; 0x10
    1c30:	8e 2d       	mov	r24, r14
    1c32:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <segled8_get_mask>
    1c36:	f8 2e       	mov	r15, r24
    1c38:	80 ff       	sbrs	r24, 0
    1c3a:	07 c0       	rjmp	.+14     	; 0x1c4a <segled_put_char+0x56>
    1c3c:	f8 01       	movw	r30, r16
    1c3e:	86 85       	ldd	r24, Z+14	; 0x0e
    1c40:	97 85       	ldd	r25, Z+15	; 0x0f
    1c42:	89 2b       	or	r24, r25
    1c44:	11 f4       	brne	.+4      	; 0x1c4a <segled_put_char+0x56>
    1c46:	80 e1       	ldi	r24, 0x10	; 16
    1c48:	f8 2e       	mov	r15, r24
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	80 89       	ldd	r24, Z+16	; 0x10
    1c4e:	80 ff       	sbrs	r24, 0
    1c50:	f0 94       	com	r15
    1c52:	c0 e0       	ldi	r28, 0x00	; 0
    1c54:	d0 e0       	ldi	r29, 0x00	; 0
    1c56:	f8 01       	movw	r30, r16
    1c58:	ec 0f       	add	r30, r28
    1c5a:	fd 1f       	adc	r31, r29
    1c5c:	80 81       	ld	r24, Z
    1c5e:	91 81       	ldd	r25, Z+1	; 0x01
    1c60:	f7 fe       	sbrs	r15, 7
    1c62:	03 c0       	rjmp	.+6      	; 0x1c6a <segled_put_char+0x76>
    1c64:	0e 94 0f 12 	call	0x241e	; 0x241e <pin_high>
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <segled_put_char+0x7a>
    1c6a:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <pin_low>
    1c6e:	22 96       	adiw	r28, 0x02	; 2
    1c70:	c0 31       	cpi	r28, 0x10	; 16
    1c72:	d1 05       	cpc	r29, r1
    1c74:	11 f0       	breq	.+4      	; 0x1c7a <segled_put_char+0x86>
    1c76:	ff 0c       	add	r15, r15
    1c78:	ee cf       	rjmp	.-36     	; 0x1c56 <segled_put_char+0x62>
    1c7a:	8e 2d       	mov	r24, r14
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	ff 90       	pop	r15
    1c86:	ef 90       	pop	r14
    1c88:	08 95       	ret

00001c8a <segled_set>:
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	8c 01       	movw	r16, r24
    1c98:	e6 2e       	mov	r14, r22
    1c9a:	f4 2e       	mov	r15, r20
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	80 89       	ldd	r24, Z+16	; 0x10
    1ca0:	81 fd       	sbrc	r24, 1
    1ca2:	12 c0       	rjmp	.+36     	; 0x1cc8 <segled_set+0x3e>
    1ca4:	c0 e0       	ldi	r28, 0x00	; 0
    1ca6:	d0 e0       	ldi	r29, 0x00	; 0
    1ca8:	f8 01       	movw	r30, r16
    1caa:	ec 0f       	add	r30, r28
    1cac:	fd 1f       	adc	r31, r29
    1cae:	80 81       	ld	r24, Z
    1cb0:	91 81       	ldd	r25, Z+1	; 0x01
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <pin_make_output>
    1cb8:	22 96       	adiw	r28, 0x02	; 2
    1cba:	c0 31       	cpi	r28, 0x10	; 16
    1cbc:	d1 05       	cpc	r29, r1
    1cbe:	a1 f7       	brne	.-24     	; 0x1ca8 <segled_set+0x1e>
    1cc0:	f8 01       	movw	r30, r16
    1cc2:	80 89       	ldd	r24, Z+16	; 0x10
    1cc4:	82 60       	ori	r24, 0x02	; 2
    1cc6:	80 8b       	std	Z+16, r24	; 0x10
    1cc8:	f8 01       	movw	r30, r16
    1cca:	80 89       	ldd	r24, Z+16	; 0x10
    1ccc:	80 fd       	sbrc	r24, 0
    1cce:	06 c0       	rjmp	.+12     	; 0x1cdc <segled_set+0x52>
    1cd0:	ff 20       	and	r15, r15
    1cd2:	19 f4       	brne	.+6      	; 0x1cda <segled_set+0x50>
    1cd4:	ff 24       	eor	r15, r15
    1cd6:	fa 94       	dec	r15
    1cd8:	01 c0       	rjmp	.+2      	; 0x1cdc <segled_set+0x52>
    1cda:	ff 24       	eor	r15, r15
    1cdc:	ee 2d       	mov	r30, r14
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	ee 0f       	add	r30, r30
    1ce2:	ff 1f       	adc	r31, r31
    1ce4:	e0 0f       	add	r30, r16
    1ce6:	f1 1f       	adc	r31, r17
    1ce8:	80 81       	ld	r24, Z
    1cea:	91 81       	ldd	r25, Z+1	; 0x01
    1cec:	6f 2d       	mov	r22, r15
    1cee:	0e 94 33 12 	call	0x2466	; 0x2466 <pin_set>
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	1f 91       	pop	r17
    1cf8:	0f 91       	pop	r16
    1cfa:	ff 90       	pop	r15
    1cfc:	ef 90       	pop	r14
    1cfe:	08 95       	ret

00001d00 <segled8_get_mask>:
    1d00:	e8 2f       	mov	r30, r24
    1d02:	81 54       	subi	r24, 0x41	; 65
    1d04:	8a 31       	cpi	r24, 0x1A	; 26
    1d06:	28 f4       	brcc	.+10     	; 0x1d12 <segled8_get_mask+0x12>
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	e3 5a       	subi	r30, 0xA3	; 163
    1d0c:	fc 4f       	sbci	r31, 0xFC	; 252
    1d0e:	84 91       	lpm	r24, Z+
    1d10:	08 95       	ret
    1d12:	8e 2f       	mov	r24, r30
    1d14:	81 56       	subi	r24, 0x61	; 97
    1d16:	8a 31       	cpi	r24, 0x1A	; 26
    1d18:	28 f4       	brcc	.+10     	; 0x1d24 <segled8_get_mask+0x24>
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	e3 5c       	subi	r30, 0xC3	; 195
    1d1e:	fc 4f       	sbci	r31, 0xFC	; 252
    1d20:	84 91       	lpm	r24, Z+
    1d22:	08 95       	ret
    1d24:	8e 2f       	mov	r24, r30
    1d26:	80 53       	subi	r24, 0x30	; 48
    1d28:	8a 30       	cpi	r24, 0x0A	; 10
    1d2a:	28 f4       	brcc	.+10     	; 0x1d36 <segled8_get_mask+0x36>
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	e8 57       	subi	r30, 0x78	; 120
    1d30:	fc 4f       	sbci	r31, 0xFC	; 252
    1d32:	84 91       	lpm	r24, Z+
    1d34:	08 95       	ret
    1d36:	ea 30       	cpi	r30, 0x0A	; 10
    1d38:	28 f4       	brcc	.+10     	; 0x1d44 <segled8_get_mask+0x44>
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	e8 54       	subi	r30, 0x48	; 72
    1d3e:	fc 4f       	sbci	r31, 0xFC	; 252
    1d40:	84 91       	lpm	r24, Z+
    1d42:	08 95       	ret
    1d44:	ed 32       	cpi	r30, 0x2D	; 45
    1d46:	11 f4       	brne	.+4      	; 0x1d4c <segled8_get_mask+0x4c>
    1d48:	82 e0       	ldi	r24, 0x02	; 2
    1d4a:	08 95       	ret
    1d4c:	eb 35       	cpi	r30, 0x5B	; 91
    1d4e:	79 f0       	breq	.+30     	; 0x1d6e <segled8_get_mask+0x6e>
    1d50:	eb 37       	cpi	r30, 0x7B	; 123
    1d52:	69 f0       	breq	.+26     	; 0x1d6e <segled8_get_mask+0x6e>
    1d54:	e8 32       	cpi	r30, 0x28	; 40
    1d56:	59 f0       	breq	.+22     	; 0x1d6e <segled8_get_mask+0x6e>
    1d58:	ed 35       	cpi	r30, 0x5D	; 93
    1d5a:	59 f0       	breq	.+22     	; 0x1d72 <segled8_get_mask+0x72>
    1d5c:	ed 37       	cpi	r30, 0x7D	; 125
    1d5e:	49 f0       	breq	.+18     	; 0x1d72 <segled8_get_mask+0x72>
    1d60:	e9 32       	cpi	r30, 0x29	; 41
    1d62:	39 f0       	breq	.+14     	; 0x1d72 <segled8_get_mask+0x72>
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	ee 32       	cpi	r30, 0x2E	; 46
    1d68:	29 f4       	brne	.+10     	; 0x1d74 <segled8_get_mask+0x74>
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	08 95       	ret
    1d6e:	8c e9       	ldi	r24, 0x9C	; 156
    1d70:	08 95       	ret
    1d72:	80 ef       	ldi	r24, 0xF0	; 240
    1d74:	08 95       	ret

00001d76 <compareFromIOPin>:
    1d76:	bf 92       	push	r11
    1d78:	cf 92       	push	r12
    1d7a:	df 92       	push	r13
    1d7c:	ef 92       	push	r14
    1d7e:	ff 92       	push	r15
    1d80:	0f 93       	push	r16
    1d82:	1f 93       	push	r17
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	6c 01       	movw	r12, r24
    1d8a:	b0 90 c4 02 	lds	r11, 0x02C4
    1d8e:	24 ef       	ldi	r18, 0xF4	; 244
    1d90:	31 e0       	ldi	r19, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	c0 e0       	ldi	r28, 0x00	; 0
    1d96:	d0 e0       	ldi	r29, 0x00	; 0
    1d98:	2d c0       	rjmp	.+90     	; 0x1df4 <compareFromIOPin+0x7e>
    1d9a:	28 5f       	subi	r18, 0xF8	; 248
    1d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9e:	f9 01       	movw	r30, r18
    1da0:	e4 90       	lpm	r14, Z+
    1da2:	28 50       	subi	r18, 0x08	; 8
    1da4:	30 40       	sbci	r19, 0x00	; 0
    1da6:	f9 01       	movw	r30, r18
    1da8:	77 96       	adiw	r30, 0x17	; 23
    1daa:	2a 5f       	subi	r18, 0xFA	; 250
    1dac:	3f 4f       	sbci	r19, 0xFF	; 255
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	a0 e0       	ldi	r26, 0x00	; 0
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	05 91       	lpm	r16, Z+
    1db6:	14 91       	lpm	r17, Z+
    1db8:	f9 01       	movw	r30, r18
    1dba:	f4 90       	lpm	r15, Z+
    1dbc:	26 50       	subi	r18, 0x06	; 6
    1dbe:	30 40       	sbci	r19, 0x00	; 0
    1dc0:	14 c0       	rjmp	.+40     	; 0x1dea <compareFromIOPin+0x74>
    1dc2:	b8 01       	movw	r22, r16
    1dc4:	6a 0f       	add	r22, r26
    1dc6:	7b 1f       	adc	r23, r27
    1dc8:	fb 01       	movw	r30, r22
    1dca:	3e 96       	adiw	r30, 0x0e	; 14
    1dcc:	45 91       	lpm	r20, Z+
    1dce:	54 91       	lpm	r21, Z+
    1dd0:	41 15       	cp	r20, r1
    1dd2:	51 05       	cpc	r21, r1
    1dd4:	41 f0       	breq	.+16     	; 0x1de6 <compareFromIOPin+0x70>
    1dd6:	4c 15       	cp	r20, r12
    1dd8:	5d 05       	cpc	r21, r13
    1dda:	29 f4       	brne	.+10     	; 0x1de6 <compareFromIOPin+0x70>
    1ddc:	ff 20       	and	r15, r15
    1dde:	11 f0       	breq	.+4      	; 0x1de4 <compareFromIOPin+0x6e>
    1de0:	eb 01       	movw	r28, r22
    1de2:	0a c0       	rjmp	.+20     	; 0x1df8 <compareFromIOPin+0x82>
    1de4:	eb 01       	movw	r28, r22
    1de6:	8f 5f       	subi	r24, 0xFF	; 255
    1de8:	50 96       	adiw	r26, 0x10	; 16
    1dea:	8e 15       	cp	r24, r14
    1dec:	50 f3       	brcs	.-44     	; 0x1dc2 <compareFromIOPin+0x4c>
    1dee:	9f 5f       	subi	r25, 0xFF	; 255
    1df0:	24 5d       	subi	r18, 0xD4	; 212
    1df2:	3f 4f       	sbci	r19, 0xFF	; 255
    1df4:	9b 15       	cp	r25, r11
    1df6:	88 f2       	brcs	.-94     	; 0x1d9a <compareFromIOPin+0x24>
    1df8:	ce 01       	movw	r24, r28
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	1f 91       	pop	r17
    1e00:	0f 91       	pop	r16
    1e02:	ff 90       	pop	r15
    1e04:	ef 90       	pop	r14
    1e06:	df 90       	pop	r13
    1e08:	cf 90       	pop	r12
    1e0a:	bf 90       	pop	r11
    1e0c:	08 95       	ret

00001e0e <compareSetOutputMode>:
    1e0e:	9c 01       	movw	r18, r24
    1e10:	0b 96       	adiw	r24, 0x0b	; 11
    1e12:	fc 01       	movw	r30, r24
    1e14:	a5 91       	lpm	r26, Z+
    1e16:	b4 91       	lpm	r27, Z+
    1e18:	23 5f       	subi	r18, 0xF3	; 243
    1e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1c:	f9 01       	movw	r30, r18
    1e1e:	24 91       	lpm	r18, Z+
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	02 2e       	mov	r0, r18
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <compareSetOutputMode+0x1c>
    1e26:	66 0f       	add	r22, r22
    1e28:	77 1f       	adc	r23, r23
    1e2a:	0a 94       	dec	r0
    1e2c:	e2 f7       	brpl	.-8      	; 0x1e26 <compareSetOutputMode+0x18>
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <compareSetOutputMode+0x2a>
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	2a 95       	dec	r18
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <compareSetOutputMode+0x26>
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	22 0f       	add	r18, r18
    1e40:	28 2b       	or	r18, r24
    1e42:	9c 91       	ld	r25, X
    1e44:	82 2f       	mov	r24, r18
    1e46:	86 23       	and	r24, r22
    1e48:	20 95       	com	r18
    1e4a:	29 23       	and	r18, r25
    1e4c:	82 2b       	or	r24, r18
    1e4e:	8c 93       	st	X, r24
    1e50:	08 95       	ret

00001e52 <compareSetThreshold>:
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	9c 01       	movw	r18, r24
    1e58:	2e 5f       	subi	r18, 0xFE	; 254
    1e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5c:	f9 01       	movw	r30, r18
    1e5e:	84 91       	lpm	r24, Z+
    1e60:	22 50       	subi	r18, 0x02	; 2
    1e62:	30 40       	sbci	r19, 0x00	; 0
    1e64:	9c e2       	ldi	r25, 0x2C	; 44
    1e66:	89 9f       	mul	r24, r25
    1e68:	a0 01       	movw	r20, r0
    1e6a:	11 24       	eor	r1, r1
    1e6c:	4c 50       	subi	r20, 0x0C	; 12
    1e6e:	5e 4f       	sbci	r21, 0xFE	; 254
    1e70:	48 5f       	subi	r20, 0xF8	; 248
    1e72:	5f 4f       	sbci	r21, 0xFF	; 255
    1e74:	fa 01       	movw	r30, r20
    1e76:	84 91       	lpm	r24, Z+
    1e78:	48 50       	subi	r20, 0x08	; 8
    1e7a:	50 40       	sbci	r21, 0x00	; 0
    1e7c:	88 23       	and	r24, r24
    1e7e:	c1 f0       	breq	.+48     	; 0x1eb0 <compareSetThreshold+0x5e>
    1e80:	c9 01       	movw	r24, r18
    1e82:	06 96       	adiw	r24, 0x06	; 6
    1e84:	fc 01       	movw	r30, r24
    1e86:	c5 91       	lpm	r28, Z+
    1e88:	d4 91       	lpm	r29, Z+
    1e8a:	fa 01       	movw	r30, r20
    1e8c:	36 96       	adiw	r30, 0x06	; 6
    1e8e:	e4 91       	lpm	r30, Z+
    1e90:	ee 23       	and	r30, r30
    1e92:	19 f0       	breq	.+6      	; 0x1e9a <compareSetThreshold+0x48>
    1e94:	79 83       	std	Y+1, r23	; 0x01
    1e96:	68 83       	st	Y, r22
    1e98:	0e c0       	rjmp	.+28     	; 0x1eb6 <compareSetThreshold+0x64>
    1e9a:	6f 3f       	cpi	r22, 0xFF	; 255
    1e9c:	71 05       	cpc	r23, r1
    1e9e:	31 f0       	breq	.+12     	; 0x1eac <compareSetThreshold+0x5a>
    1ea0:	28 f0       	brcs	.+10     	; 0x1eac <compareSetThreshold+0x5a>
    1ea2:	8e ef       	ldi	r24, 0xFE	; 254
    1ea4:	0e 94 4d 0b 	call	0x169a	; 0x169a <setError>
    1ea8:	6f ef       	ldi	r22, 0xFF	; 255
    1eaa:	70 e0       	ldi	r23, 0x00	; 0
    1eac:	68 83       	st	Y, r22
    1eae:	03 c0       	rjmp	.+6      	; 0x1eb6 <compareSetThreshold+0x64>
    1eb0:	8d ef       	ldi	r24, 0xFD	; 253
    1eb2:	0e 94 4d 0b 	call	0x169a	; 0x169a <setError>
    1eb6:	df 91       	pop	r29
    1eb8:	cf 91       	pop	r28
    1eba:	08 95       	ret

00001ebc <_uartSetBaudRate>:
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	19 96       	adiw	r26, 0x09	; 9
    1ec0:	8d 91       	ld	r24, X+
    1ec2:	9c 91       	ld	r25, X
    1ec4:	1a 97       	sbiw	r26, 0x0a	; 10
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	25 91       	lpm	r18, Z+
    1eca:	34 91       	lpm	r19, Z+
    1ecc:	cd 01       	movw	r24, r26
    1ece:	f9 01       	movw	r30, r18
    1ed0:	09 95       	icall
    1ed2:	08 95       	ret

00001ed4 <_uartInit>:
    1ed4:	df 92       	push	r13
    1ed6:	ef 92       	push	r14
    1ed8:	ff 92       	push	r15
    1eda:	0f 93       	push	r16
    1edc:	1f 93       	push	r17
    1ede:	cf 93       	push	r28
    1ee0:	df 93       	push	r29
    1ee2:	ec 01       	movw	r28, r24
    1ee4:	7a 01       	movw	r14, r20
    1ee6:	8b 01       	movw	r16, r22
    1ee8:	df b6       	in	r13, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	2d 85       	ldd	r18, Y+13	; 0x0d
    1eee:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef2:	98 89       	ldd	r25, Y+16	; 0x10
    1ef4:	28 17       	cp	r18, r24
    1ef6:	39 07       	cpc	r19, r25
    1ef8:	11 f0       	breq	.+4      	; 0x1efe <_uartInit+0x2a>
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	01 c0       	rjmp	.+2      	; 0x1f00 <_uartInit+0x2c>
    1efe:	8f ef       	ldi	r24, 0xFF	; 255
    1f00:	8f 8b       	std	Y+23, r24	; 0x17
    1f02:	88 23       	and	r24, r24
    1f04:	81 f0       	breq	.+32     	; 0x1f26 <_uartInit+0x52>
    1f06:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f08:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f0c:	98 89       	ldd	r25, Y+16	; 0x10
    1f0e:	28 17       	cp	r18, r24
    1f10:	39 07       	cpc	r19, r25
    1f12:	21 f0       	breq	.+8      	; 0x1f1c <_uartInit+0x48>
    1f14:	c9 01       	movw	r24, r18
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	0e 94 c5 0b 	call	0x178a	; 0x178a <pin_make_input>
    1f1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f1e:	98 89       	ldd	r25, Y+16	; 0x10
    1f20:	6f ef       	ldi	r22, 0xFF	; 255
    1f22:	0e 94 c5 0b 	call	0x178a	; 0x178a <pin_make_input>
    1f26:	88 85       	ldd	r24, Y+8	; 0x08
    1f28:	81 60       	ori	r24, 0x01	; 1
    1f2a:	88 87       	std	Y+8, r24	; 0x08
    1f2c:	88 85       	ldd	r24, Y+8	; 0x08
    1f2e:	8b 7f       	andi	r24, 0xFB	; 251
    1f30:	88 87       	std	Y+8, r24	; 0x08
    1f32:	88 85       	ldd	r24, Y+8	; 0x08
    1f34:	8d 7f       	andi	r24, 0xFD	; 253
    1f36:	88 87       	std	Y+8, r24	; 0x08
    1f38:	89 85       	ldd	r24, Y+9	; 0x09
    1f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3c:	04 96       	adiw	r24, 0x04	; 4
    1f3e:	fc 01       	movw	r30, r24
    1f40:	25 91       	lpm	r18, Z+
    1f42:	34 91       	lpm	r19, Z+
    1f44:	ce 01       	movw	r24, r28
    1f46:	b8 01       	movw	r22, r16
    1f48:	a7 01       	movw	r20, r14
    1f4a:	f9 01       	movw	r30, r18
    1f4c:	09 95       	icall
    1f4e:	df be       	out	0x3f, r13	; 63
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	1f 91       	pop	r17
    1f56:	0f 91       	pop	r16
    1f58:	ff 90       	pop	r15
    1f5a:	ef 90       	pop	r14
    1f5c:	df 90       	pop	r13
    1f5e:	08 95       	ret

00001f60 <__uartHWSetBaudRate>:
    1f60:	bf 92       	push	r11
    1f62:	cf 92       	push	r12
    1f64:	df 92       	push	r13
    1f66:	ef 92       	push	r14
    1f68:	ff 92       	push	r15
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	7a 01       	movw	r14, r20
    1f74:	8b 01       	movw	r16, r22
    1f76:	ec 01       	movw	r28, r24
    1f78:	bf b6       	in	r11, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	4f 3f       	cpi	r20, 0xFF	; 255
    1f7e:	8f ef       	ldi	r24, 0xFF	; 255
    1f80:	58 07       	cpc	r21, r24
    1f82:	8f ef       	ldi	r24, 0xFF	; 255
    1f84:	68 07       	cpc	r22, r24
    1f86:	8f ef       	ldi	r24, 0xFF	; 255
    1f88:	78 07       	cpc	r23, r24
    1f8a:	21 f4       	brne	.+8      	; 0x1f94 <__uartHWSetBaudRate+0x34>
    1f8c:	a1 e0       	ldi	r26, 0x01	; 1
    1f8e:	ca 2e       	mov	r12, r26
    1f90:	d1 2c       	mov	r13, r1
    1f92:	24 c0       	rjmp	.+72     	; 0x1fdc <__uartHWSetBaudRate+0x7c>
    1f94:	cb 01       	movw	r24, r22
    1f96:	ba 01       	movw	r22, r20
    1f98:	f3 e0       	ldi	r31, 0x03	; 3
    1f9a:	66 0f       	add	r22, r22
    1f9c:	77 1f       	adc	r23, r23
    1f9e:	88 1f       	adc	r24, r24
    1fa0:	99 1f       	adc	r25, r25
    1fa2:	fa 95       	dec	r31
    1fa4:	d1 f7       	brne	.-12     	; 0x1f9a <__uartHWSetBaudRate+0x3a>
    1fa6:	20 91 12 02 	lds	r18, 0x0212
    1faa:	30 91 13 02 	lds	r19, 0x0213
    1fae:	40 91 14 02 	lds	r20, 0x0214
    1fb2:	50 91 15 02 	lds	r21, 0x0215
    1fb6:	62 0f       	add	r22, r18
    1fb8:	73 1f       	adc	r23, r19
    1fba:	84 1f       	adc	r24, r20
    1fbc:	95 1f       	adc	r25, r21
    1fbe:	a8 01       	movw	r20, r16
    1fc0:	97 01       	movw	r18, r14
    1fc2:	e4 e0       	ldi	r30, 0x04	; 4
    1fc4:	22 0f       	add	r18, r18
    1fc6:	33 1f       	adc	r19, r19
    1fc8:	44 1f       	adc	r20, r20
    1fca:	55 1f       	adc	r21, r21
    1fcc:	ea 95       	dec	r30
    1fce:	d1 f7       	brne	.-12     	; 0x1fc4 <__uartHWSetBaudRate+0x64>
    1fd0:	0e 94 47 1a 	call	0x348e	; 0x348e <__udivmodsi4>
    1fd4:	69 01       	movw	r12, r18
    1fd6:	08 94       	sec
    1fd8:	c1 08       	sbc	r12, r1
    1fda:	d1 08       	sbc	r13, r1
    1fdc:	98 a9       	ldd	r25, Y+48	; 0x30
    1fde:	99 23       	and	r25, r25
    1fe0:	c9 f1       	breq	.+114    	; 0x2054 <__uartHWSetBaudRate+0xf4>
    1fe2:	ec a1       	ldd	r30, Y+36	; 0x24
    1fe4:	fd a1       	ldd	r31, Y+37	; 0x25
    1fe6:	80 81       	ld	r24, Z
    1fe8:	90 95       	com	r25
    1fea:	89 23       	and	r24, r25
    1fec:	80 83       	st	Z, r24
    1fee:	8f ef       	ldi	r24, 0xFF	; 255
    1ff0:	e8 16       	cp	r14, r24
    1ff2:	8f ef       	ldi	r24, 0xFF	; 255
    1ff4:	f8 06       	cpc	r15, r24
    1ff6:	8f ef       	ldi	r24, 0xFF	; 255
    1ff8:	08 07       	cpc	r16, r24
    1ffa:	8f ef       	ldi	r24, 0xFF	; 255
    1ffc:	18 07       	cpc	r17, r24
    1ffe:	19 f4       	brne	.+6      	; 0x2006 <__uartHWSetBaudRate+0xa6>
    2000:	21 e0       	ldi	r18, 0x01	; 1
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	1d c0       	rjmp	.+58     	; 0x2040 <__uartHWSetBaudRate+0xe0>
    2006:	32 e0       	ldi	r19, 0x02	; 2
    2008:	ee 0c       	add	r14, r14
    200a:	ff 1c       	adc	r15, r15
    200c:	00 1f       	adc	r16, r16
    200e:	11 1f       	adc	r17, r17
    2010:	3a 95       	dec	r19
    2012:	d1 f7       	brne	.-12     	; 0x2008 <__uartHWSetBaudRate+0xa8>
    2014:	60 91 12 02 	lds	r22, 0x0212
    2018:	70 91 13 02 	lds	r23, 0x0213
    201c:	80 91 14 02 	lds	r24, 0x0214
    2020:	90 91 15 02 	lds	r25, 0x0215
    2024:	6e 0d       	add	r22, r14
    2026:	7f 1d       	adc	r23, r15
    2028:	80 1f       	adc	r24, r16
    202a:	91 1f       	adc	r25, r17
    202c:	ee 0c       	add	r14, r14
    202e:	ff 1c       	adc	r15, r15
    2030:	00 1f       	adc	r16, r16
    2032:	11 1f       	adc	r17, r17
    2034:	a8 01       	movw	r20, r16
    2036:	97 01       	movw	r18, r14
    2038:	0e 94 47 1a 	call	0x348e	; 0x348e <__udivmodsi4>
    203c:	21 50       	subi	r18, 0x01	; 1
    203e:	30 40       	sbci	r19, 0x00	; 0
    2040:	2c 15       	cp	r18, r12
    2042:	3d 05       	cpc	r19, r13
    2044:	38 f0       	brcs	.+14     	; 0x2054 <__uartHWSetBaudRate+0xf4>
    2046:	ec a1       	ldd	r30, Y+36	; 0x24
    2048:	fd a1       	ldd	r31, Y+37	; 0x25
    204a:	80 81       	ld	r24, Z
    204c:	98 a9       	ldd	r25, Y+48	; 0x30
    204e:	89 2b       	or	r24, r25
    2050:	80 83       	st	Z, r24
    2052:	69 01       	movw	r12, r18
    2054:	e8 a5       	ldd	r30, Y+40	; 0x28
    2056:	f9 a5       	ldd	r31, Y+41	; 0x29
    2058:	c0 82       	st	Z, r12
    205a:	ea a5       	ldd	r30, Y+42	; 0x2a
    205c:	fb a5       	ldd	r31, Y+43	; 0x2b
    205e:	d0 82       	st	Z, r13
    2060:	bf be       	out	0x3f, r11	; 63
    2062:	df 91       	pop	r29
    2064:	cf 91       	pop	r28
    2066:	1f 91       	pop	r17
    2068:	0f 91       	pop	r16
    206a:	ff 90       	pop	r15
    206c:	ef 90       	pop	r14
    206e:	df 90       	pop	r13
    2070:	cf 90       	pop	r12
    2072:	bf 90       	pop	r11
    2074:	08 95       	ret

00002076 <__uartHWOff>:
    2076:	dc 01       	movw	r26, r24
    2078:	96 96       	adiw	r26, 0x26	; 38
    207a:	ed 91       	ld	r30, X+
    207c:	fc 91       	ld	r31, X
    207e:	97 97       	sbiw	r26, 0x27	; 39
    2080:	80 81       	ld	r24, Z
    2082:	87 72       	andi	r24, 0x27	; 39
    2084:	80 83       	st	Z, r24
    2086:	d0 96       	adiw	r26, 0x30	; 48
    2088:	9c 91       	ld	r25, X
    208a:	d0 97       	sbiw	r26, 0x30	; 48
    208c:	99 23       	and	r25, r25
    208e:	41 f0       	breq	.+16     	; 0x20a0 <__uartHWOff+0x2a>
    2090:	94 96       	adiw	r26, 0x24	; 36
    2092:	ed 91       	ld	r30, X+
    2094:	fc 91       	ld	r31, X
    2096:	95 97       	sbiw	r26, 0x25	; 37
    2098:	80 81       	ld	r24, Z
    209a:	90 95       	com	r25
    209c:	89 23       	and	r24, r25
    209e:	80 83       	st	Z, r24
    20a0:	08 95       	ret

000020a2 <oneWireReceiveMode>:
    20a2:	dc 01       	movw	r26, r24
    20a4:	57 96       	adiw	r26, 0x17	; 23
    20a6:	8c 91       	ld	r24, X
    20a8:	57 97       	sbiw	r26, 0x17	; 23
    20aa:	88 23       	and	r24, r24
    20ac:	71 f0       	breq	.+28     	; 0x20ca <oneWireReceiveMode+0x28>
    20ae:	96 96       	adiw	r26, 0x26	; 38
    20b0:	ed 91       	ld	r30, X+
    20b2:	fc 91       	ld	r31, X
    20b4:	97 97       	sbiw	r26, 0x27	; 39
    20b6:	80 81       	ld	r24, Z
    20b8:	87 7b       	andi	r24, 0xB7	; 183
    20ba:	80 83       	st	Z, r24
    20bc:	96 96       	adiw	r26, 0x26	; 38
    20be:	ed 91       	ld	r30, X+
    20c0:	fc 91       	ld	r31, X
    20c2:	97 97       	sbiw	r26, 0x27	; 39
    20c4:	80 81       	ld	r24, Z
    20c6:	80 69       	ori	r24, 0x90	; 144
    20c8:	80 83       	st	Z, r24
    20ca:	08 95       	ret

000020cc <__uartHWStartXmit>:
    20cc:	dc 01       	movw	r26, r24
    20ce:	9c 96       	adiw	r26, 0x2c	; 44
    20d0:	ed 91       	ld	r30, X+
    20d2:	fc 91       	ld	r31, X
    20d4:	9d 97       	sbiw	r26, 0x2d	; 45
    20d6:	60 83       	st	Z, r22
    20d8:	08 95       	ret

000020da <startXmitMode>:
    20da:	dc 01       	movw	r26, r24
    20dc:	57 96       	adiw	r26, 0x17	; 23
    20de:	8c 91       	ld	r24, X
    20e0:	57 97       	sbiw	r26, 0x17	; 23
    20e2:	88 23       	and	r24, r24
    20e4:	71 f0       	breq	.+28     	; 0x2102 <startXmitMode+0x28>
    20e6:	96 96       	adiw	r26, 0x26	; 38
    20e8:	ed 91       	ld	r30, X+
    20ea:	fc 91       	ld	r31, X
    20ec:	97 97       	sbiw	r26, 0x27	; 39
    20ee:	80 81       	ld	r24, Z
    20f0:	8f 76       	andi	r24, 0x6F	; 111
    20f2:	80 83       	st	Z, r24
    20f4:	96 96       	adiw	r26, 0x26	; 38
    20f6:	ed 91       	ld	r30, X+
    20f8:	fc 91       	ld	r31, X
    20fa:	97 97       	sbiw	r26, 0x27	; 39
    20fc:	80 81       	ld	r24, Z
    20fe:	88 64       	ori	r24, 0x48	; 72
    2100:	80 83       	st	Z, r24
    2102:	08 95       	ret

00002104 <__uartHWInit>:
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	ec 01       	movw	r28, r24
    210a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_uartSetBaudRate>
    210e:	8f 89       	ldd	r24, Y+23	; 0x17
    2110:	88 23       	and	r24, r24
    2112:	11 f0       	breq	.+4      	; 0x2118 <__uartHWInit+0x14>
    2114:	20 e9       	ldi	r18, 0x90	; 144
    2116:	0c c0       	rjmp	.+24     	; 0x2130 <__uartHWInit+0x2c>
    2118:	8d 85       	ldd	r24, Y+13	; 0x0d
    211a:	9e 85       	ldd	r25, Y+14	; 0x0e
    211c:	89 2b       	or	r24, r25
    211e:	11 f0       	breq	.+4      	; 0x2124 <__uartHWInit+0x20>
    2120:	20 e9       	ldi	r18, 0x90	; 144
    2122:	01 c0       	rjmp	.+2      	; 0x2126 <__uartHWInit+0x22>
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	8f 85       	ldd	r24, Y+15	; 0x0f
    2128:	98 89       	ldd	r25, Y+16	; 0x10
    212a:	89 2b       	or	r24, r25
    212c:	09 f0       	breq	.+2      	; 0x2130 <__uartHWInit+0x2c>
    212e:	28 64       	ori	r18, 0x48	; 72
    2130:	ee a1       	ldd	r30, Y+38	; 0x26
    2132:	ff a1       	ldd	r31, Y+39	; 0x27
    2134:	20 83       	st	Z, r18
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	08 95       	ret

0000213c <__uartReceiveService>:
    213c:	dc 01       	movw	r26, r24
    213e:	26 2f       	mov	r18, r22
    2140:	14 96       	adiw	r26, 0x04	; 4
    2142:	8d 91       	ld	r24, X+
    2144:	9c 91       	ld	r25, X
    2146:	15 97       	sbiw	r26, 0x05	; 5
    2148:	89 2b       	or	r24, r25
    214a:	59 f0       	breq	.+22     	; 0x2162 <__uartReceiveService+0x26>
    214c:	14 96       	adiw	r26, 0x04	; 4
    214e:	ed 91       	ld	r30, X+
    2150:	fc 91       	ld	r31, X
    2152:	15 97       	sbiw	r26, 0x05	; 5
    2154:	16 96       	adiw	r26, 0x06	; 6
    2156:	6d 91       	ld	r22, X+
    2158:	7c 91       	ld	r23, X
    215a:	17 97       	sbiw	r26, 0x07	; 7
    215c:	82 2f       	mov	r24, r18
    215e:	09 95       	icall
    2160:	08 95       	ret
    2162:	90 96       	adiw	r26, 0x20	; 32
    2164:	ed 91       	ld	r30, X+
    2166:	fc 91       	ld	r31, X
    2168:	91 97       	sbiw	r26, 0x21	; 33
    216a:	cd 01       	movw	r24, r26
    216c:	09 95       	icall
    216e:	08 95       	ret

00002170 <__uartGetByte>:
    2170:	fc 01       	movw	r30, r24
    2172:	22 a1       	ldd	r18, Z+34	; 0x22
    2174:	33 a1       	ldd	r19, Z+35	; 0x23
    2176:	f9 01       	movw	r30, r18
    2178:	09 95       	icall
    217a:	08 95       	ret

0000217c <__uartGetByteUnbuffered>:
    217c:	fc 01       	movw	r30, r24
    217e:	4f b7       	in	r20, 0x3f	; 63
    2180:	f8 94       	cli
    2182:	23 85       	ldd	r18, Z+11	; 0x0b
    2184:	34 85       	ldd	r19, Z+12	; 0x0c
    2186:	8f ef       	ldi	r24, 0xFF	; 255
    2188:	9f ef       	ldi	r25, 0xFF	; 255
    218a:	94 87       	std	Z+12, r25	; 0x0c
    218c:	83 87       	std	Z+11, r24	; 0x0b
    218e:	4f bf       	out	0x3f, r20	; 63
    2190:	c9 01       	movw	r24, r18
    2192:	08 95       	ret

00002194 <__uartReceiveUnbuffered>:
    2194:	fc 01       	movw	r30, r24
    2196:	83 85       	ldd	r24, Z+11	; 0x0b
    2198:	94 85       	ldd	r25, Z+12	; 0x0c
    219a:	8f 5f       	subi	r24, 0xFF	; 255
    219c:	9f 4f       	sbci	r25, 0xFF	; 255
    219e:	29 f4       	brne	.+10     	; 0x21aa <__uartReceiveUnbuffered+0x16>
    21a0:	86 2f       	mov	r24, r22
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	94 87       	std	Z+12, r25	; 0x0c
    21a6:	83 87       	std	Z+11, r24	; 0x0b
    21a8:	08 95       	ret
    21aa:	80 85       	ldd	r24, Z+8	; 0x08
    21ac:	84 60       	ori	r24, 0x04	; 4
    21ae:	80 87       	std	Z+8, r24	; 0x08
    21b0:	85 ef       	ldi	r24, 0xF5	; 245
    21b2:	0e 94 4d 0b 	call	0x169a	; 0x169a <setError>
    21b6:	08 95       	ret

000021b8 <_uartStartXmit>:
    21b8:	dc 01       	movw	r26, r24
    21ba:	19 96       	adiw	r26, 0x09	; 9
    21bc:	8d 91       	ld	r24, X+
    21be:	9c 91       	ld	r25, X
    21c0:	1a 97       	sbiw	r26, 0x0a	; 10
    21c2:	02 96       	adiw	r24, 0x02	; 2
    21c4:	fc 01       	movw	r30, r24
    21c6:	25 91       	lpm	r18, Z+
    21c8:	34 91       	lpm	r19, Z+
    21ca:	cd 01       	movw	r24, r26
    21cc:	f9 01       	movw	r30, r18
    21ce:	09 95       	icall
    21d0:	08 95       	ret

000021d2 <_uartTransmitBlockStart>:
    21d2:	cf 93       	push	r28
    21d4:	df 93       	push	r29
    21d6:	ec 01       	movw	r28, r24
    21d8:	88 85       	ldd	r24, Y+8	; 0x08
    21da:	8e 7f       	andi	r24, 0xFE	; 254
    21dc:	88 87       	std	Y+8, r24	; 0x08
    21de:	e8 8d       	ldd	r30, Y+24	; 0x18
    21e0:	f9 8d       	ldd	r31, Y+25	; 0x19
    21e2:	30 97       	sbiw	r30, 0x00	; 0
    21e4:	21 f0       	breq	.+8      	; 0x21ee <_uartTransmitBlockStart+0x1c>
    21e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21ea:	6f ef       	ldi	r22, 0xFF	; 255
    21ec:	09 95       	icall
    21ee:	e9 85       	ldd	r30, Y+9	; 0x09
    21f0:	fa 85       	ldd	r31, Y+10	; 0x0a
    21f2:	38 96       	adiw	r30, 0x08	; 8
    21f4:	25 91       	lpm	r18, Z+
    21f6:	34 91       	lpm	r19, Z+
    21f8:	21 15       	cp	r18, r1
    21fa:	31 05       	cpc	r19, r1
    21fc:	19 f0       	breq	.+6      	; 0x2204 <__stack+0x5>
    21fe:	ce 01       	movw	r24, r28
    2200:	f9 01       	movw	r30, r18
    2202:	09 95       	icall
    2204:	df 91       	pop	r29
    2206:	cf 91       	pop	r28
    2208:	08 95       	ret

0000220a <_uartTransmitBlockEnd>:
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	ec 01       	movw	r28, r24
    2210:	88 85       	ldd	r24, Y+8	; 0x08
    2212:	81 60       	ori	r24, 0x01	; 1
    2214:	88 87       	std	Y+8, r24	; 0x08
    2216:	e9 85       	ldd	r30, Y+9	; 0x09
    2218:	fa 85       	ldd	r31, Y+10	; 0x0a
    221a:	3a 96       	adiw	r30, 0x0a	; 10
    221c:	25 91       	lpm	r18, Z+
    221e:	34 91       	lpm	r19, Z+
    2220:	21 15       	cp	r18, r1
    2222:	31 05       	cpc	r19, r1
    2224:	19 f0       	breq	.+6      	; 0x222c <_uartTransmitBlockEnd+0x22>
    2226:	ce 01       	movw	r24, r28
    2228:	f9 01       	movw	r30, r18
    222a:	09 95       	icall
    222c:	e8 8d       	ldd	r30, Y+24	; 0x18
    222e:	f9 8d       	ldd	r31, Y+25	; 0x19
    2230:	30 97       	sbiw	r30, 0x00	; 0
    2232:	21 f0       	breq	.+8      	; 0x223c <_uartTransmitBlockEnd+0x32>
    2234:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2236:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2238:	60 e0       	ldi	r22, 0x00	; 0
    223a:	09 95       	icall
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	08 95       	ret

00002242 <_uartSendBuffer>:
    2242:	ef 92       	push	r14
    2244:	ff 92       	push	r15
    2246:	0f 93       	push	r16
    2248:	1f 93       	push	r17
    224a:	cf 93       	push	r28
    224c:	df 93       	push	r29
    224e:	8c 01       	movw	r16, r24
    2250:	7b 01       	movw	r14, r22
    2252:	ea 01       	movw	r28, r20
    2254:	0b c0       	rjmp	.+22     	; 0x226c <_uartSendBuffer+0x2a>
    2256:	d7 01       	movw	r26, r14
    2258:	6d 91       	ld	r22, X+
    225a:	7d 01       	movw	r14, r26
    225c:	d8 01       	movw	r26, r16
    225e:	5c 96       	adiw	r26, 0x1c	; 28
    2260:	ed 91       	ld	r30, X+
    2262:	fc 91       	ld	r31, X
    2264:	5d 97       	sbiw	r26, 0x1d	; 29
    2266:	c8 01       	movw	r24, r16
    2268:	09 95       	icall
    226a:	21 97       	sbiw	r28, 0x01	; 1
    226c:	20 97       	sbiw	r28, 0x00	; 0
    226e:	99 f7       	brne	.-26     	; 0x2256 <_uartSendBuffer+0x14>
    2270:	df 91       	pop	r29
    2272:	cf 91       	pop	r28
    2274:	1f 91       	pop	r17
    2276:	0f 91       	pop	r16
    2278:	ff 90       	pop	r15
    227a:	ef 90       	pop	r14
    227c:	08 95       	ret

0000227e <_uartSendByte>:
    227e:	1f 93       	push	r17
    2280:	fc 01       	movw	r30, r24
    2282:	16 2f       	mov	r17, r22
    2284:	24 8d       	ldd	r18, Z+28	; 0x1c
    2286:	35 8d       	ldd	r19, Z+29	; 0x1d
    2288:	f9 01       	movw	r30, r18
    228a:	09 95       	icall
    228c:	81 2f       	mov	r24, r17
    228e:	1f 91       	pop	r17
    2290:	08 95       	ret

00002292 <__uartTransmitService>:
    2292:	fc 01       	movw	r30, r24
    2294:	26 8d       	ldd	r18, Z+30	; 0x1e
    2296:	37 8d       	ldd	r19, Z+31	; 0x1f
    2298:	f9 01       	movw	r30, r18
    229a:	09 95       	icall
    229c:	08 95       	ret

0000229e <__uartSendNextUnbuffered>:
    229e:	1f 93       	push	r17
    22a0:	1f b7       	in	r17, 0x3f	; 63
    22a2:	f8 94       	cli
    22a4:	0e 94 05 11 	call	0x220a	; 0x220a <_uartTransmitBlockEnd>
    22a8:	1f bf       	out	0x3f, r17	; 63
    22aa:	1f 91       	pop	r17
    22ac:	08 95       	ret

000022ae <__uartSendUnbuffered>:
    22ae:	0f 93       	push	r16
    22b0:	1f 93       	push	r17
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	06 2f       	mov	r16, r22
    22b8:	ec 01       	movw	r28, r24
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <__uartSendUnbuffered+0x12>
    22bc:	0e 94 df 11 	call	0x23be	; 0x23be <breathe>
    22c0:	88 85       	ldd	r24, Y+8	; 0x08
    22c2:	80 ff       	sbrs	r24, 0
    22c4:	fb cf       	rjmp	.-10     	; 0x22bc <__uartSendUnbuffered+0xe>
    22c6:	1f b7       	in	r17, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	ce 01       	movw	r24, r28
    22cc:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <_uartTransmitBlockStart>
    22d0:	ce 01       	movw	r24, r28
    22d2:	60 2f       	mov	r22, r16
    22d4:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <_uartStartXmit>
    22d8:	1f bf       	out	0x3f, r17	; 63
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	08 95       	ret

000022e4 <uartReceivePollingMode>:
    22e4:	dc 01       	movw	r26, r24
    22e6:	96 96       	adiw	r26, 0x26	; 38
    22e8:	ed 91       	ld	r30, X+
    22ea:	fc 91       	ld	r31, X
    22ec:	97 97       	sbiw	r26, 0x27	; 39
    22ee:	66 23       	and	r22, r22
    22f0:	19 f0       	breq	.+6      	; 0x22f8 <uartReceivePollingMode+0x14>
    22f2:	80 81       	ld	r24, Z
    22f4:	8f 77       	andi	r24, 0x7F	; 127
    22f6:	02 c0       	rjmp	.+4      	; 0x22fc <uartReceivePollingMode+0x18>
    22f8:	80 81       	ld	r24, Z
    22fa:	80 68       	ori	r24, 0x80	; 128
    22fc:	80 83       	st	Z, r24
    22fe:	08 95       	ret

00002300 <uartPollByte>:
    2300:	dc 01       	movw	r26, r24
    2302:	94 96       	adiw	r26, 0x24	; 36
    2304:	ed 91       	ld	r30, X+
    2306:	fc 91       	ld	r31, X
    2308:	95 97       	sbiw	r26, 0x25	; 37
    230a:	80 81       	ld	r24, Z
    230c:	87 fd       	sbrc	r24, 7
    230e:	03 c0       	rjmp	.+6      	; 0x2316 <uartPollByte+0x16>
    2310:	2f ef       	ldi	r18, 0xFF	; 255
    2312:	3f ef       	ldi	r19, 0xFF	; 255
    2314:	07 c0       	rjmp	.+14     	; 0x2324 <uartPollByte+0x24>
    2316:	9c 96       	adiw	r26, 0x2c	; 44
    2318:	ed 91       	ld	r30, X+
    231a:	fc 91       	ld	r31, X
    231c:	9d 97       	sbiw	r26, 0x2d	; 45
    231e:	80 81       	ld	r24, Z
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	c9 01       	movw	r24, r18
    2326:	08 95       	ret

00002328 <clockHasElapsed>:
    2328:	0f 93       	push	r16
    232a:	1f 93       	push	r17
    232c:	00 e0       	ldi	r16, 0x00	; 0
    232e:	10 e0       	ldi	r17, 0x00	; 0
    2330:	0e 94 9d 11 	call	0x233a	; 0x233a <clockHasElapsedGetOverflow>
    2334:	1f 91       	pop	r17
    2336:	0f 91       	pop	r16
    2338:	08 95       	ret

0000233a <clockHasElapsedGetOverflow>:
    233a:	8f 92       	push	r8
    233c:	9f 92       	push	r9
    233e:	af 92       	push	r10
    2340:	bf 92       	push	r11
    2342:	cf 92       	push	r12
    2344:	df 92       	push	r13
    2346:	ef 92       	push	r14
    2348:	ff 92       	push	r15
    234a:	0f 93       	push	r16
    234c:	1f 93       	push	r17
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	6b 01       	movw	r12, r22
    2354:	7c 01       	movw	r14, r24
    2356:	49 01       	movw	r8, r18
    2358:	5a 01       	movw	r10, r20
    235a:	e8 01       	movw	r28, r16
    235c:	0e 94 ca 07 	call	0xf94	; 0xf94 <clockGetus>
    2360:	6c 19       	sub	r22, r12
    2362:	7d 09       	sbc	r23, r13
    2364:	8e 09       	sbc	r24, r14
    2366:	9f 09       	sbc	r25, r15
    2368:	68 15       	cp	r22, r8
    236a:	79 05       	cpc	r23, r9
    236c:	8a 05       	cpc	r24, r10
    236e:	9b 05       	cpc	r25, r11
    2370:	68 f0       	brcs	.+26     	; 0x238c <clockHasElapsedGetOverflow+0x52>
    2372:	01 15       	cp	r16, r1
    2374:	11 05       	cpc	r17, r1
    2376:	41 f0       	breq	.+16     	; 0x2388 <clockHasElapsedGetOverflow+0x4e>
    2378:	68 19       	sub	r22, r8
    237a:	79 09       	sbc	r23, r9
    237c:	8a 09       	sbc	r24, r10
    237e:	9b 09       	sbc	r25, r11
    2380:	68 83       	st	Y, r22
    2382:	79 83       	std	Y+1, r23	; 0x01
    2384:	8a 83       	std	Y+2, r24	; 0x02
    2386:	9b 83       	std	Y+3, r25	; 0x03
    2388:	8f ef       	ldi	r24, 0xFF	; 255
    238a:	0c c0       	rjmp	.+24     	; 0x23a4 <clockHasElapsedGetOverflow+0x6a>
    238c:	01 15       	cp	r16, r1
    238e:	11 05       	cpc	r17, r1
    2390:	41 f0       	breq	.+16     	; 0x23a2 <clockHasElapsedGetOverflow+0x68>
    2392:	86 1a       	sub	r8, r22
    2394:	97 0a       	sbc	r9, r23
    2396:	a8 0a       	sbc	r10, r24
    2398:	b9 0a       	sbc	r11, r25
    239a:	88 82       	st	Y, r8
    239c:	99 82       	std	Y+1, r9	; 0x01
    239e:	aa 82       	std	Y+2, r10	; 0x02
    23a0:	bb 82       	std	Y+3, r11	; 0x03
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	df 91       	pop	r29
    23a6:	cf 91       	pop	r28
    23a8:	1f 91       	pop	r17
    23aa:	0f 91       	pop	r16
    23ac:	ff 90       	pop	r15
    23ae:	ef 90       	pop	r14
    23b0:	df 90       	pop	r13
    23b2:	cf 90       	pop	r12
    23b4:	bf 90       	pop	r11
    23b6:	af 90       	pop	r10
    23b8:	9f 90       	pop	r9
    23ba:	8f 90       	pop	r8
    23bc:	08 95       	ret

000023be <breathe>:
    23be:	8f b7       	in	r24, 0x3f	; 63
    23c0:	78 94       	sei
	...
    23ce:	00 00       	nop
    23d0:	8f bf       	out	0x3f, r24	; 63
    23d2:	08 95       	ret

000023d4 <pin_low>:
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	9c 01       	movw	r18, r24
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	e9 f0       	breq	.+58     	; 0x2418 <pin_low+0x44>
    23de:	fc 01       	movw	r30, r24
    23e0:	85 91       	lpm	r24, Z+
    23e2:	94 91       	lpm	r25, Z+
    23e4:	fc 01       	movw	r30, r24
    23e6:	a5 91       	lpm	r26, Z+
    23e8:	b4 91       	lpm	r27, Z+
    23ea:	02 96       	adiw	r24, 0x02	; 2
    23ec:	fc 01       	movw	r30, r24
    23ee:	c5 91       	lpm	r28, Z+
    23f0:	d4 91       	lpm	r29, Z+
    23f2:	2e 5f       	subi	r18, 0xFE	; 254
    23f4:	3f 4f       	sbci	r19, 0xFF	; 255
    23f6:	f9 01       	movw	r30, r18
    23f8:	24 91       	lpm	r18, Z+
    23fa:	88 81       	ld	r24, Y
    23fc:	82 23       	and	r24, r18
    23fe:	49 f0       	breq	.+18     	; 0x2412 <pin_low+0x3e>
    2400:	9f b7       	in	r25, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	8c 91       	ld	r24, X
    2406:	20 95       	com	r18
    2408:	82 23       	and	r24, r18
    240a:	8c 93       	st	X, r24
    240c:	9f bf       	out	0x3f, r25	; 63
    240e:	00 00       	nop
    2410:	03 c0       	rjmp	.+6      	; 0x2418 <pin_low+0x44>
    2412:	87 ef       	ldi	r24, 0xF7	; 247
    2414:	0e 94 4d 0b 	call	0x169a	; 0x169a <setError>
    2418:	df 91       	pop	r29
    241a:	cf 91       	pop	r28
    241c:	08 95       	ret

0000241e <pin_high>:
    241e:	cf 93       	push	r28
    2420:	df 93       	push	r29
    2422:	9c 01       	movw	r18, r24
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	e1 f0       	breq	.+56     	; 0x2460 <pin_high+0x42>
    2428:	fc 01       	movw	r30, r24
    242a:	85 91       	lpm	r24, Z+
    242c:	94 91       	lpm	r25, Z+
    242e:	fc 01       	movw	r30, r24
    2430:	a5 91       	lpm	r26, Z+
    2432:	b4 91       	lpm	r27, Z+
    2434:	02 96       	adiw	r24, 0x02	; 2
    2436:	fc 01       	movw	r30, r24
    2438:	c5 91       	lpm	r28, Z+
    243a:	d4 91       	lpm	r29, Z+
    243c:	2e 5f       	subi	r18, 0xFE	; 254
    243e:	3f 4f       	sbci	r19, 0xFF	; 255
    2440:	f9 01       	movw	r30, r18
    2442:	24 91       	lpm	r18, Z+
    2444:	88 81       	ld	r24, Y
    2446:	82 23       	and	r24, r18
    2448:	41 f0       	breq	.+16     	; 0x245a <pin_high+0x3c>
    244a:	9f b7       	in	r25, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	8c 91       	ld	r24, X
    2450:	82 2b       	or	r24, r18
    2452:	8c 93       	st	X, r24
    2454:	9f bf       	out	0x3f, r25	; 63
    2456:	00 00       	nop
    2458:	03 c0       	rjmp	.+6      	; 0x2460 <pin_high+0x42>
    245a:	87 ef       	ldi	r24, 0xF7	; 247
    245c:	0e 94 4d 0b 	call	0x169a	; 0x169a <setError>
    2460:	df 91       	pop	r29
    2462:	cf 91       	pop	r28
    2464:	08 95       	ret

00002466 <pin_set>:
    2466:	66 23       	and	r22, r22
    2468:	19 f0       	breq	.+6      	; 0x2470 <pin_set+0xa>
    246a:	0e 94 0f 12 	call	0x241e	; 0x241e <pin_high>
    246e:	08 95       	ret
    2470:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <pin_low>
    2474:	08 95       	ret

00002476 <__scheduleUpdate>:
	uint16_t rtn = MIN(ticks,CLOCK_TOP);
	return rtn;
}

// called under compare interrupts when there is something in the queue
static void __scheduleUpdate(void){
    2476:	2f 92       	push	r2
    2478:	3f 92       	push	r3
    247a:	4f 92       	push	r4
    247c:	5f 92       	push	r5
    247e:	6f 92       	push	r6
    2480:	7f 92       	push	r7
    2482:	8f 92       	push	r8
    2484:	9f 92       	push	r9
    2486:	af 92       	push	r10
    2488:	bf 92       	push	r11
    248a:	cf 92       	push	r12
    248c:	df 92       	push	r13
    248e:	ef 92       	push	r14
    2490:	ff 92       	push	r15
    2492:	0f 93       	push	r16
    2494:	1f 93       	push	r17
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	27 97       	sbiw	r28, 0x07	; 7
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
	// Dont call me again - turn off compare interrupts
	SCHEDULER_INT_DISABLE;
    24aa:	80 91 73 00 	lds	r24, 0x0073
    24ae:	8b 7f       	andi	r24, 0xFB	; 251
    24b0:	80 93 73 00 	sts	0x0073, r24

	// Turn interrupts back on
	INTERRUPTABLE_SECTION{
    24b4:	2f b7       	in	r18, 0x3f	; 63
    24b6:	2f 83       	std	Y+7, r18	; 0x07
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
    24b8:	78 94       	sei
		__running = TRUE;
    24ba:	8f ef       	ldi	r24, 0xFF	; 255
    24bc:	80 93 2d 04 	sts	0x042D, r24
		TICK_COUNT lowest;
		do{
			int slot;
			__recheck = FALSE;
    24c0:	10 92 2e 04 	sts	0x042E, r1
			JOB* job;
			lowest=0;
			for(slot=maxJobs-1, job=&__queue[slot]; slot>=0; slot--, job--){
    24c4:	80 91 f9 02 	lds	r24, 0x02F9
    24c8:	a8 2f       	mov	r26, r24
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	11 97       	sbiw	r26, 0x01	; 1
    24ce:	be 83       	std	Y+6, r27	; 0x06
    24d0:	ad 83       	std	Y+5, r26	; 0x05
    24d2:	ed e0       	ldi	r30, 0x0D	; 13
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	ae 9f       	mul	r26, r30
    24d8:	50 01       	movw	r10, r0
    24da:	af 9f       	mul	r26, r31
    24dc:	b0 0c       	add	r11, r0
    24de:	be 9f       	mul	r27, r30
    24e0:	b0 0c       	add	r11, r0
    24e2:	11 24       	eor	r1, r1
    24e4:	20 e2       	ldi	r18, 0x20	; 32
    24e6:	34 e0       	ldi	r19, 0x04	; 4
    24e8:	a2 0e       	add	r10, r18
    24ea:	b3 1e       	adc	r11, r19
    24ec:	66 24       	eor	r6, r6
    24ee:	77 24       	eor	r7, r7
    24f0:	43 01       	movw	r8, r6
    24f2:	5a c0       	rjmp	.+180    	; 0x25a8 <__scheduleUpdate+0x132>
				if(job->used){
    24f4:	d5 01       	movw	r26, r10
    24f6:	8c 91       	ld	r24, X
    24f8:	88 23       	and	r24, r24
    24fa:	09 f4       	brne	.+2      	; 0x24fe <__scheduleUpdate+0x88>
    24fc:	4c c0       	rjmp	.+152    	; 0x2596 <__scheduleUpdate+0x120>
					// check if time has elapsed
					TICK_COUNT overflow;	// how many us the timer has overshot when it should have happened
					TICK_COUNT start=job->start;
    24fe:	19 96       	adiw	r26, 0x09	; 9
    2500:	2d 90       	ld	r2, X+
    2502:	3d 90       	ld	r3, X+
    2504:	4d 90       	ld	r4, X+
    2506:	5c 90       	ld	r5, X
    2508:	1c 97       	sbiw	r26, 0x0c	; 12
					TICK_COUNT delay=job->delay;
    250a:	15 96       	adiw	r26, 0x05	; 5
    250c:	cd 90       	ld	r12, X+
    250e:	dd 90       	ld	r13, X+
    2510:	ed 90       	ld	r14, X+
    2512:	fc 90       	ld	r15, X
    2514:	18 97       	sbiw	r26, 0x08	; 8
					if(clockHasElapsedGetOverflow(start, delay, &overflow)){
    2516:	c2 01       	movw	r24, r4
    2518:	b1 01       	movw	r22, r2
    251a:	a7 01       	movw	r20, r14
    251c:	96 01       	movw	r18, r12
    251e:	8e 01       	movw	r16, r28
    2520:	0f 5f       	subi	r16, 0xFF	; 255
    2522:	1f 4f       	sbci	r17, 0xFF	; 255
    2524:	0e 94 9d 11 	call	0x233a	; 0x233a <clockHasElapsedGetOverflow>
    2528:	88 23       	and	r24, r24
    252a:	19 f1       	breq	.+70     	; 0x2572 <__scheduleUpdate+0xfc>
						SchedulerCallback callback = job->callback;
    252c:	d5 01       	movw	r26, r10
    252e:	11 96       	adiw	r26, 0x01	; 1
    2530:	ed 91       	ld	r30, X+
    2532:	fc 91       	ld	r31, X
    2534:	12 97       	sbiw	r26, 0x02	; 2
						SchedulerData data = job->data;
    2536:	13 96       	adiw	r26, 0x03	; 3
    2538:	8d 91       	ld	r24, X+
    253a:	9c 91       	ld	r25, X
    253c:	14 97       	sbiw	r26, 0x04	; 4

						// Mark this job as unused. No more references shoud be made to job->xxxx
						job->used = FALSE;
    253e:	1c 92       	st	X, r1
						--__numJobs;
    2540:	20 91 2f 04 	lds	r18, 0x042F
    2544:	30 91 30 04 	lds	r19, 0x0430
    2548:	21 50       	subi	r18, 0x01	; 1
    254a:	30 40       	sbci	r19, 0x00	; 0
    254c:	30 93 30 04 	sts	0x0430, r19
    2550:	20 93 2f 04 	sts	0x042F, r18

						// Run the job with interrupts enabled
						callback(data,start+delay,overflow);
    2554:	c2 0c       	add	r12, r2
    2556:	d3 1c       	adc	r13, r3
    2558:	e4 1c       	adc	r14, r4
    255a:	f5 1c       	adc	r15, r5
    255c:	09 81       	ldd	r16, Y+1	; 0x01
    255e:	1a 81       	ldd	r17, Y+2	; 0x02
    2560:	2b 81       	ldd	r18, Y+3	; 0x03
    2562:	3c 81       	ldd	r19, Y+4	; 0x04
    2564:	b7 01       	movw	r22, r14
    2566:	a6 01       	movw	r20, r12
    2568:	09 95       	icall


						// Force another loop as the time taken may mean
						// something else can now run
						__recheck = TRUE;
    256a:	bf ef       	ldi	r27, 0xFF	; 255
    256c:	b0 93 2e 04 	sts	0x042E, r27
    2570:	12 c0       	rjmp	.+36     	; 0x2596 <__scheduleUpdate+0x120>
					}else{
					   // overflow has the remaining number of microseconds to wait
					   if(lowest==0 || overflow < lowest){
    2572:	61 14       	cp	r6, r1
    2574:	71 04       	cpc	r7, r1
    2576:	81 04       	cpc	r8, r1
    2578:	91 04       	cpc	r9, r1
    257a:	49 f0       	breq	.+18     	; 0x258e <__scheduleUpdate+0x118>
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	9a 81       	ldd	r25, Y+2	; 0x02
    2580:	ab 81       	ldd	r26, Y+3	; 0x03
    2582:	bc 81       	ldd	r27, Y+4	; 0x04
    2584:	86 15       	cp	r24, r6
    2586:	97 05       	cpc	r25, r7
    2588:	a8 05       	cpc	r26, r8
    258a:	b9 05       	cpc	r27, r9
    258c:	20 f4       	brcc	.+8      	; 0x2596 <__scheduleUpdate+0x120>
						   lowest = overflow;
    258e:	69 80       	ldd	r6, Y+1	; 0x01
    2590:	7a 80       	ldd	r7, Y+2	; 0x02
    2592:	8b 80       	ldd	r8, Y+3	; 0x03
    2594:	9c 80       	ldd	r9, Y+4	; 0x04
		do{
			int slot;
			__recheck = FALSE;
			JOB* job;
			lowest=0;
			for(slot=maxJobs-1, job=&__queue[slot]; slot>=0; slot--, job--){
    2596:	ed 81       	ldd	r30, Y+5	; 0x05
    2598:	fe 81       	ldd	r31, Y+6	; 0x06
    259a:	31 97       	sbiw	r30, 0x01	; 1
    259c:	fe 83       	std	Y+6, r31	; 0x06
    259e:	ed 83       	std	Y+5, r30	; 0x05
    25a0:	23 ef       	ldi	r18, 0xF3	; 243
    25a2:	3f ef       	ldi	r19, 0xFF	; 255
    25a4:	a2 0e       	add	r10, r18
    25a6:	b3 1e       	adc	r11, r19
    25a8:	8d 81       	ldd	r24, Y+5	; 0x05
    25aa:	9e 81       	ldd	r25, Y+6	; 0x06
    25ac:	8f 5f       	subi	r24, 0xFF	; 255
    25ae:	9f 4f       	sbci	r25, 0xFF	; 255
    25b0:	09 f0       	breq	.+2      	; 0x25b4 <__scheduleUpdate+0x13e>
    25b2:	a0 cf       	rjmp	.-192    	; 0x24f4 <__scheduleUpdate+0x7e>
						   lowest = overflow;
					   }
					}
				}
			}
		}while( __recheck);
    25b4:	80 91 2e 04 	lds	r24, 0x042E
    25b8:	88 23       	and	r24, r24
    25ba:	09 f0       	breq	.+2      	; 0x25be <__scheduleUpdate+0x148>
    25bc:	81 cf       	rjmp	.-254    	; 0x24c0 <__scheduleUpdate+0x4a>
		__running=FALSE;
    25be:	10 92 2d 04 	sts	0x042D, r1

		if(__numJobs > 0){
    25c2:	80 91 2f 04 	lds	r24, 0x042F
    25c6:	90 91 30 04 	lds	r25, 0x0430
    25ca:	18 16       	cp	r1, r24
    25cc:	19 06       	cpc	r1, r25
    25ce:	4c f5       	brge	.+82     	; 0x2622 <__scheduleUpdate+0x1ac>
			// Decide when we need to interrupt again
			uint16_t compare = calcTicks(lowest) + CLOCK_COUNTER;
    25d0:	20 91 24 01 	lds	r18, 0x0124
    25d4:	30 91 25 01 	lds	r19, 0x0125
    25d8:	d4 01       	movw	r26, r8
    25da:	c3 01       	movw	r24, r6
    25dc:	88 0f       	add	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	aa 1f       	adc	r26, r26
    25e2:	bb 1f       	adc	r27, r27
    25e4:	81 30       	cpi	r24, 0x01	; 1
    25e6:	ea ef       	ldi	r30, 0xFA	; 250
    25e8:	9e 07       	cpc	r25, r30
    25ea:	e0 e0       	ldi	r30, 0x00	; 0
    25ec:	ae 07       	cpc	r26, r30
    25ee:	e0 e0       	ldi	r30, 0x00	; 0
    25f0:	be 07       	cpc	r27, r30
    25f2:	20 f0       	brcs	.+8      	; 0x25fc <__scheduleUpdate+0x186>
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	9a ef       	ldi	r25, 0xFA	; 250
    25f8:	a0 e0       	ldi	r26, 0x00	; 0
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	82 0f       	add	r24, r18
    25fe:	93 1f       	adc	r25, r19
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <__scheduleUpdate+0x190>
			while(compare >= CLOCK_TOP){
				compare -= CLOCK_TOP;
    2602:	80 50       	subi	r24, 0x00	; 0
    2604:	9a 4f       	sbci	r25, 0xFA	; 250
		__running=FALSE;

		if(__numJobs > 0){
			// Decide when we need to interrupt again
			uint16_t compare = calcTicks(lowest) + CLOCK_COUNTER;
			while(compare >= CLOCK_TOP){
    2606:	fa ef       	ldi	r31, 0xFA	; 250
    2608:	80 30       	cpi	r24, 0x00	; 0
    260a:	9f 07       	cpc	r25, r31
    260c:	d0 f7       	brcc	.-12     	; 0x2602 <__scheduleUpdate+0x18c>
				compare -= CLOCK_TOP;
			}
			// Set when next interrupt should occur
			SCHEDULER_THRESHOLD = compare;
    260e:	90 93 2b 01 	sts	0x012B, r25
    2612:	80 93 2a 01 	sts	0x012A, r24
			// Clear any pending interrupt
			SCHEDULER_INT_CLEAR;
    2616:	d2 9a       	sbi	0x1a, 2	; 26
			// Look for new interrupts
			SCHEDULER_INT_ENABLE;
    2618:	80 91 73 00 	lds	r24, 0x0073
    261c:	84 60       	ori	r24, 0x04	; 4
    261e:	80 93 73 00 	sts	0x0073, r24
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    2622:	2f 81       	ldd	r18, Y+7	; 0x07
    2624:	2f bf       	out	0x3f, r18	; 63
		}

	} // Restore previous interrupt enable
}
    2626:	27 96       	adiw	r28, 0x07	; 7
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	f8 94       	cli
    262c:	de bf       	out	0x3e, r29	; 62
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	cd bf       	out	0x3d, r28	; 61
    2632:	cf 91       	pop	r28
    2634:	df 91       	pop	r29
    2636:	1f 91       	pop	r17
    2638:	0f 91       	pop	r16
    263a:	ff 90       	pop	r15
    263c:	ef 90       	pop	r14
    263e:	df 90       	pop	r13
    2640:	cf 90       	pop	r12
    2642:	bf 90       	pop	r11
    2644:	af 90       	pop	r10
    2646:	9f 90       	pop	r9
    2648:	8f 90       	pop	r8
    264a:	7f 90       	pop	r7
    264c:	6f 90       	pop	r6
    264e:	5f 90       	pop	r5
    2650:	4f 90       	pop	r4
    2652:	3f 90       	pop	r3
    2654:	2f 90       	pop	r2
    2656:	08 95       	ret

00002658 <__vector_48>:
}



// ISR for scheduler match - check if another job needs to run
ISR(TIMER5_COMPB_vect) {
    2658:	1f 92       	push	r1
    265a:	0f 92       	push	r0
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	0f 92       	push	r0
    2660:	11 24       	eor	r1, r1
    2662:	2f 93       	push	r18
    2664:	3f 93       	push	r19
    2666:	4f 93       	push	r20
    2668:	5f 93       	push	r21
    266a:	6f 93       	push	r22
    266c:	7f 93       	push	r23
    266e:	8f 93       	push	r24
    2670:	9f 93       	push	r25
    2672:	af 93       	push	r26
    2674:	bf 93       	push	r27
    2676:	ef 93       	push	r30
    2678:	ff 93       	push	r31
	__scheduleUpdate();
    267a:	0e 94 3b 12 	call	0x2476	; 0x2476 <__scheduleUpdate>
}
    267e:	ff 91       	pop	r31
    2680:	ef 91       	pop	r30
    2682:	bf 91       	pop	r27
    2684:	af 91       	pop	r26
    2686:	9f 91       	pop	r25
    2688:	8f 91       	pop	r24
    268a:	7f 91       	pop	r23
    268c:	6f 91       	pop	r22
    268e:	5f 91       	pop	r21
    2690:	4f 91       	pop	r20
    2692:	3f 91       	pop	r19
    2694:	2f 91       	pop	r18
    2696:	0f 90       	pop	r0
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	0f 90       	pop	r0
    269c:	1f 90       	pop	r1
    269e:	18 95       	reti

000026a0 <scheduleJob>:
// schedule a new job
// callback Is the function to be run at a later date
// data is a block of data to be passed into the callback
// start (in us) Is the start time of the delay
// delay (in us) Is the amount to delay by
void scheduleJob(SchedulerCallback callback, SchedulerData data, TICK_COUNT start, TICK_COUNT delay){
    26a0:	2f 92       	push	r2
    26a2:	3f 92       	push	r3
    26a4:	4f 92       	push	r4
    26a6:	5f 92       	push	r5
    26a8:	6f 92       	push	r6
    26aa:	7f 92       	push	r7
    26ac:	8f 92       	push	r8
    26ae:	9f 92       	push	r9
    26b0:	af 92       	push	r10
    26b2:	bf 92       	push	r11
    26b4:	cf 92       	push	r12
    26b6:	df 92       	push	r13
    26b8:	ef 92       	push	r14
    26ba:	ff 92       	push	r15
    26bc:	0f 93       	push	r16
    26be:	1f 93       	push	r17
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <scheduleJob+0x26>
    26c6:	00 d0       	rcall	.+0      	; 0x26c8 <scheduleJob+0x28>
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	1c 01       	movw	r2, r24
    26ce:	2b 01       	movw	r4, r22
    26d0:	49 01       	movw	r8, r18
    26d2:	5a 01       	movw	r10, r20
    26d4:	67 01       	movw	r12, r14
    26d6:	78 01       	movw	r14, r16
	boolean doItNow = FALSE;

 	if(delay < 1000U){
    26d8:	88 ee       	ldi	r24, 0xE8	; 232
    26da:	c8 16       	cp	r12, r24
    26dc:	83 e0       	ldi	r24, 0x03	; 3
    26de:	d8 06       	cpc	r13, r24
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	e8 06       	cpc	r14, r24
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	f8 06       	cpc	r15, r24
    26e8:	38 f4       	brcc	.+14     	; 0x26f8 <scheduleJob+0x58>
		// it needs to happen now as the delay is less than the heartbeat timer interrupt of 1ms
		if(__running){
    26ea:	80 91 2d 04 	lds	r24, 0x042D
    26ee:	88 23       	and	r24, r24
    26f0:	c1 f1       	breq	.+112    	; 0x2762 <scheduleJob+0xc2>
			// make sure we do another loop of __scheduleUpdate to find it
			__recheck=TRUE;
    26f2:	8f ef       	ldi	r24, 0xFF	; 255
    26f4:	80 93 2e 04 	sts	0x042E, r24

	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
    26f8:	6f b7       	in	r22, 0x3f	; 63
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
    26fa:	f8 94       	cli
			for(slot=0; slot < maxJobs; slot++){
    26fc:	80 91 f9 02 	lds	r24, 0x02F9
    2700:	48 2f       	mov	r20, r24
    2702:	50 e0       	ldi	r21, 0x00	; 0
    2704:	a0 e2       	ldi	r26, 0x20	; 32
    2706:	b4 e0       	ldi	r27, 0x04	; 4
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	20 c0       	rjmp	.+64     	; 0x274e <scheduleJob+0xae>

	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
    270e:	fd 01       	movw	r30, r26
			for(slot=0; slot < maxJobs; slot++){
				JOB* job = &__queue[slot];
				if(!job->used){
    2710:	8c 91       	ld	r24, X
    2712:	1d 96       	adiw	r26, 0x0d	; 13
    2714:	88 23       	and	r24, r24
    2716:	c9 f4       	brne	.+50     	; 0x274a <scheduleJob+0xaa>
					job->used = TRUE;
    2718:	8f ef       	ldi	r24, 0xFF	; 255
    271a:	80 83       	st	Z, r24
					job->callback = callback;
    271c:	32 82       	std	Z+2, r3	; 0x02
    271e:	21 82       	std	Z+1, r2	; 0x01
					job->data = data;
    2720:	54 82       	std	Z+4, r5	; 0x04
    2722:	43 82       	std	Z+3, r4	; 0x03
					job->start=start;
    2724:	81 86       	std	Z+9, r8	; 0x09
    2726:	92 86       	std	Z+10, r9	; 0x0a
    2728:	a3 86       	std	Z+11, r10	; 0x0b
    272a:	b4 86       	std	Z+12, r11	; 0x0c
					job->delay=delay;
    272c:	c5 82       	std	Z+5, r12	; 0x05
    272e:	d6 82       	std	Z+6, r13	; 0x06
    2730:	e7 82       	std	Z+7, r14	; 0x07
    2732:	f0 86       	std	Z+8, r15	; 0x08
					found=TRUE;
					__numJobs++;
    2734:	80 91 2f 04 	lds	r24, 0x042F
    2738:	90 91 30 04 	lds	r25, 0x0430
    273c:	01 96       	adiw	r24, 0x01	; 1
    273e:	90 93 30 04 	sts	0x0430, r25
    2742:	80 93 2f 04 	sts	0x042F, r24
    2746:	8f ef       	ldi	r24, 0xFF	; 255
    2748:	06 c0       	rjmp	.+12     	; 0x2756 <scheduleJob+0xb6>
	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
			for(slot=0; slot < maxJobs; slot++){
    274a:	2f 5f       	subi	r18, 0xFF	; 255
    274c:	3f 4f       	sbci	r19, 0xFF	; 255
    274e:	24 17       	cp	r18, r20
    2750:	35 07       	cpc	r19, r21
    2752:	ec f2       	brlt	.-70     	; 0x270e <scheduleJob+0x6e>
    2754:	80 e0       	ldi	r24, 0x00	; 0
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    2756:	6f bf       	out	0x3f, r22	; 63
					break;
				}
			}
		}

		if(!found){
    2758:	88 23       	and	r24, r24
    275a:	f1 f4       	brne	.+60     	; 0x2798 <scheduleJob+0xf8>
			// the queue is exhausted
			setError(SCHEDULER_EXHAUSTED);
    275c:	8f ef       	ldi	r24, 0xFF	; 255
    275e:	0e 94 4d 0b 	call	0x169a	; 0x169a <setError>
	if(doItNow){
		// we need to do it now
		TICK_COUNT overflow;

		// wait for expiry
		while(!clockHasElapsedGetOverflow(start, delay, &overflow));
    2762:	3e 01       	movw	r6, r28
    2764:	08 94       	sec
    2766:	61 1c       	adc	r6, r1
    2768:	71 1c       	adc	r7, r1
    276a:	c5 01       	movw	r24, r10
    276c:	b4 01       	movw	r22, r8
    276e:	a7 01       	movw	r20, r14
    2770:	96 01       	movw	r18, r12
    2772:	83 01       	movw	r16, r6
    2774:	0e 94 9d 11 	call	0x233a	; 0x233a <clockHasElapsedGetOverflow>
    2778:	88 23       	and	r24, r24
    277a:	b9 f3       	breq	.-18     	; 0x276a <scheduleJob+0xca>

		// call the queued routine
		callback(data,start+delay,overflow);
    277c:	c8 0c       	add	r12, r8
    277e:	d9 1c       	adc	r13, r9
    2780:	ea 1c       	adc	r14, r10
    2782:	fb 1c       	adc	r15, r11
    2784:	09 81       	ldd	r16, Y+1	; 0x01
    2786:	1a 81       	ldd	r17, Y+2	; 0x02
    2788:	2b 81       	ldd	r18, Y+3	; 0x03
    278a:	3c 81       	ldd	r19, Y+4	; 0x04
    278c:	c2 01       	movw	r24, r4
    278e:	b7 01       	movw	r22, r14
    2790:	a6 01       	movw	r20, r12
    2792:	f1 01       	movw	r30, r2
    2794:	09 95       	icall
    2796:	06 c0       	rjmp	.+12     	; 0x27a4 <scheduleJob+0x104>
	}else{
		if(!__running){
    2798:	80 91 2d 04 	lds	r24, 0x042D
    279c:	88 23       	and	r24, r24
    279e:	11 f4       	brne	.+4      	; 0x27a4 <scheduleJob+0x104>
			__scheduleUpdate();
    27a0:	0e 94 3b 12 	call	0x2476	; 0x2476 <__scheduleUpdate>
		}
	}
}
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	0f 90       	pop	r0
    27aa:	0f 90       	pop	r0
    27ac:	cf 91       	pop	r28
    27ae:	df 91       	pop	r29
    27b0:	1f 91       	pop	r17
    27b2:	0f 91       	pop	r16
    27b4:	ff 90       	pop	r15
    27b6:	ef 90       	pop	r14
    27b8:	df 90       	pop	r13
    27ba:	cf 90       	pop	r12
    27bc:	bf 90       	pop	r11
    27be:	af 90       	pop	r10
    27c0:	9f 90       	pop	r9
    27c2:	8f 90       	pop	r8
    27c4:	7f 90       	pop	r7
    27c6:	6f 90       	pop	r6
    27c8:	5f 90       	pop	r5
    27ca:	4f 90       	pop	r4
    27cc:	3f 90       	pop	r3
    27ce:	2f 90       	pop	r2
    27d0:	08 95       	ret

000027d2 <vfprintf>:
    27d2:	a1 e1       	ldi	r26, 0x11	; 17
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	ef ee       	ldi	r30, 0xEF	; 239
    27d8:	f3 e1       	ldi	r31, 0x13	; 19
    27da:	0c 94 84 1a 	jmp	0x3508	; 0x3508 <__prologue_saves__>
    27de:	3c 01       	movw	r6, r24
    27e0:	7f 87       	std	Y+15, r23	; 0x0f
    27e2:	6e 87       	std	Y+14, r22	; 0x0e
    27e4:	6a 01       	movw	r12, r20
    27e6:	fc 01       	movw	r30, r24
    27e8:	17 82       	std	Z+7, r1	; 0x07
    27ea:	16 82       	std	Z+6, r1	; 0x06
    27ec:	83 81       	ldd	r24, Z+3	; 0x03
    27ee:	81 fd       	sbrc	r24, 1
    27f0:	03 c0       	rjmp	.+6      	; 0x27f8 <vfprintf+0x26>
    27f2:	6f ef       	ldi	r22, 0xFF	; 255
    27f4:	7f ef       	ldi	r23, 0xFF	; 255
    27f6:	6f c3       	rjmp	.+1758   	; 0x2ed6 <vfprintf+0x704>
    27f8:	9e 01       	movw	r18, r28
    27fa:	2f 5f       	subi	r18, 0xFF	; 255
    27fc:	3f 4f       	sbci	r19, 0xFF	; 255
    27fe:	39 8b       	std	Y+17, r19	; 0x11
    2800:	28 8b       	std	Y+16, r18	; 0x10
    2802:	f3 01       	movw	r30, r6
    2804:	23 81       	ldd	r18, Z+3	; 0x03
    2806:	ee 85       	ldd	r30, Y+14	; 0x0e
    2808:	ff 85       	ldd	r31, Y+15	; 0x0f
    280a:	23 fd       	sbrc	r18, 3
    280c:	85 91       	lpm	r24, Z+
    280e:	23 ff       	sbrs	r18, 3
    2810:	81 91       	ld	r24, Z+
    2812:	ff 87       	std	Y+15, r31	; 0x0f
    2814:	ee 87       	std	Y+14, r30	; 0x0e
    2816:	88 23       	and	r24, r24
    2818:	09 f4       	brne	.+2      	; 0x281c <vfprintf+0x4a>
    281a:	5a c3       	rjmp	.+1716   	; 0x2ed0 <vfprintf+0x6fe>
    281c:	85 32       	cpi	r24, 0x25	; 37
    281e:	51 f4       	brne	.+20     	; 0x2834 <vfprintf+0x62>
    2820:	ee 85       	ldd	r30, Y+14	; 0x0e
    2822:	ff 85       	ldd	r31, Y+15	; 0x0f
    2824:	23 fd       	sbrc	r18, 3
    2826:	85 91       	lpm	r24, Z+
    2828:	23 ff       	sbrs	r18, 3
    282a:	81 91       	ld	r24, Z+
    282c:	ff 87       	std	Y+15, r31	; 0x0f
    282e:	ee 87       	std	Y+14, r30	; 0x0e
    2830:	85 32       	cpi	r24, 0x25	; 37
    2832:	29 f4       	brne	.+10     	; 0x283e <vfprintf+0x6c>
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	b3 01       	movw	r22, r6
    2838:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    283c:	e2 cf       	rjmp	.-60     	; 0x2802 <vfprintf+0x30>
    283e:	98 2f       	mov	r25, r24
    2840:	10 e0       	ldi	r17, 0x00	; 0
    2842:	88 24       	eor	r8, r8
    2844:	99 24       	eor	r9, r9
    2846:	10 32       	cpi	r17, 0x20	; 32
    2848:	b0 f4       	brcc	.+44     	; 0x2876 <vfprintf+0xa4>
    284a:	9b 32       	cpi	r25, 0x2B	; 43
    284c:	69 f0       	breq	.+26     	; 0x2868 <vfprintf+0x96>
    284e:	9c 32       	cpi	r25, 0x2C	; 44
    2850:	28 f4       	brcc	.+10     	; 0x285c <vfprintf+0x8a>
    2852:	90 32       	cpi	r25, 0x20	; 32
    2854:	51 f0       	breq	.+20     	; 0x286a <vfprintf+0x98>
    2856:	93 32       	cpi	r25, 0x23	; 35
    2858:	71 f4       	brne	.+28     	; 0x2876 <vfprintf+0xa4>
    285a:	0b c0       	rjmp	.+22     	; 0x2872 <vfprintf+0xa0>
    285c:	9d 32       	cpi	r25, 0x2D	; 45
    285e:	39 f0       	breq	.+14     	; 0x286e <vfprintf+0x9c>
    2860:	90 33       	cpi	r25, 0x30	; 48
    2862:	49 f4       	brne	.+18     	; 0x2876 <vfprintf+0xa4>
    2864:	11 60       	ori	r17, 0x01	; 1
    2866:	28 c0       	rjmp	.+80     	; 0x28b8 <vfprintf+0xe6>
    2868:	12 60       	ori	r17, 0x02	; 2
    286a:	14 60       	ori	r17, 0x04	; 4
    286c:	25 c0       	rjmp	.+74     	; 0x28b8 <vfprintf+0xe6>
    286e:	18 60       	ori	r17, 0x08	; 8
    2870:	23 c0       	rjmp	.+70     	; 0x28b8 <vfprintf+0xe6>
    2872:	10 61       	ori	r17, 0x10	; 16
    2874:	21 c0       	rjmp	.+66     	; 0x28b8 <vfprintf+0xe6>
    2876:	17 fd       	sbrc	r17, 7
    2878:	2a c0       	rjmp	.+84     	; 0x28ce <vfprintf+0xfc>
    287a:	89 2f       	mov	r24, r25
    287c:	80 53       	subi	r24, 0x30	; 48
    287e:	8a 30       	cpi	r24, 0x0A	; 10
    2880:	78 f4       	brcc	.+30     	; 0x28a0 <vfprintf+0xce>
    2882:	16 ff       	sbrs	r17, 6
    2884:	06 c0       	rjmp	.+12     	; 0x2892 <vfprintf+0xc0>
    2886:	fa e0       	ldi	r31, 0x0A	; 10
    2888:	9f 9e       	mul	r9, r31
    288a:	90 2c       	mov	r9, r0
    288c:	11 24       	eor	r1, r1
    288e:	98 0e       	add	r9, r24
    2890:	13 c0       	rjmp	.+38     	; 0x28b8 <vfprintf+0xe6>
    2892:	3a e0       	ldi	r19, 0x0A	; 10
    2894:	83 9e       	mul	r8, r19
    2896:	80 2c       	mov	r8, r0
    2898:	11 24       	eor	r1, r1
    289a:	88 0e       	add	r8, r24
    289c:	10 62       	ori	r17, 0x20	; 32
    289e:	0c c0       	rjmp	.+24     	; 0x28b8 <vfprintf+0xe6>
    28a0:	9e 32       	cpi	r25, 0x2E	; 46
    28a2:	21 f4       	brne	.+8      	; 0x28ac <vfprintf+0xda>
    28a4:	16 fd       	sbrc	r17, 6
    28a6:	14 c3       	rjmp	.+1576   	; 0x2ed0 <vfprintf+0x6fe>
    28a8:	10 64       	ori	r17, 0x40	; 64
    28aa:	06 c0       	rjmp	.+12     	; 0x28b8 <vfprintf+0xe6>
    28ac:	9c 36       	cpi	r25, 0x6C	; 108
    28ae:	11 f4       	brne	.+4      	; 0x28b4 <vfprintf+0xe2>
    28b0:	10 68       	ori	r17, 0x80	; 128
    28b2:	02 c0       	rjmp	.+4      	; 0x28b8 <vfprintf+0xe6>
    28b4:	98 36       	cpi	r25, 0x68	; 104
    28b6:	59 f4       	brne	.+22     	; 0x28ce <vfprintf+0xfc>
    28b8:	ee 85       	ldd	r30, Y+14	; 0x0e
    28ba:	ff 85       	ldd	r31, Y+15	; 0x0f
    28bc:	23 fd       	sbrc	r18, 3
    28be:	95 91       	lpm	r25, Z+
    28c0:	23 ff       	sbrs	r18, 3
    28c2:	91 91       	ld	r25, Z+
    28c4:	ff 87       	std	Y+15, r31	; 0x0f
    28c6:	ee 87       	std	Y+14, r30	; 0x0e
    28c8:	99 23       	and	r25, r25
    28ca:	09 f0       	breq	.+2      	; 0x28ce <vfprintf+0xfc>
    28cc:	bc cf       	rjmp	.-136    	; 0x2846 <vfprintf+0x74>
    28ce:	89 2f       	mov	r24, r25
    28d0:	85 54       	subi	r24, 0x45	; 69
    28d2:	83 30       	cpi	r24, 0x03	; 3
    28d4:	20 f4       	brcc	.+8      	; 0x28de <vfprintf+0x10c>
    28d6:	81 2f       	mov	r24, r17
    28d8:	80 61       	ori	r24, 0x10	; 16
    28da:	90 5e       	subi	r25, 0xE0	; 224
    28dc:	07 c0       	rjmp	.+14     	; 0x28ec <vfprintf+0x11a>
    28de:	89 2f       	mov	r24, r25
    28e0:	85 56       	subi	r24, 0x65	; 101
    28e2:	83 30       	cpi	r24, 0x03	; 3
    28e4:	08 f0       	brcs	.+2      	; 0x28e8 <vfprintf+0x116>
    28e6:	9f c1       	rjmp	.+830    	; 0x2c26 <vfprintf+0x454>
    28e8:	81 2f       	mov	r24, r17
    28ea:	8f 7e       	andi	r24, 0xEF	; 239
    28ec:	86 fd       	sbrc	r24, 6
    28ee:	02 c0       	rjmp	.+4      	; 0x28f4 <vfprintf+0x122>
    28f0:	76 e0       	ldi	r23, 0x06	; 6
    28f2:	97 2e       	mov	r9, r23
    28f4:	6f e3       	ldi	r22, 0x3F	; 63
    28f6:	f6 2e       	mov	r15, r22
    28f8:	f8 22       	and	r15, r24
    28fa:	95 36       	cpi	r25, 0x65	; 101
    28fc:	19 f4       	brne	.+6      	; 0x2904 <vfprintf+0x132>
    28fe:	f0 e4       	ldi	r31, 0x40	; 64
    2900:	ff 2a       	or	r15, r31
    2902:	07 c0       	rjmp	.+14     	; 0x2912 <vfprintf+0x140>
    2904:	96 36       	cpi	r25, 0x66	; 102
    2906:	19 f4       	brne	.+6      	; 0x290e <vfprintf+0x13c>
    2908:	20 e8       	ldi	r18, 0x80	; 128
    290a:	f2 2a       	or	r15, r18
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <vfprintf+0x140>
    290e:	91 10       	cpse	r9, r1
    2910:	9a 94       	dec	r9
    2912:	f7 fe       	sbrs	r15, 7
    2914:	0a c0       	rjmp	.+20     	; 0x292a <vfprintf+0x158>
    2916:	3b e3       	ldi	r19, 0x3B	; 59
    2918:	39 15       	cp	r19, r9
    291a:	18 f4       	brcc	.+6      	; 0x2922 <vfprintf+0x150>
    291c:	5c e3       	ldi	r21, 0x3C	; 60
    291e:	b5 2e       	mov	r11, r21
    2920:	02 c0       	rjmp	.+4      	; 0x2926 <vfprintf+0x154>
    2922:	b9 2c       	mov	r11, r9
    2924:	b3 94       	inc	r11
    2926:	27 e0       	ldi	r18, 0x07	; 7
    2928:	09 c0       	rjmp	.+18     	; 0x293c <vfprintf+0x16a>
    292a:	47 e0       	ldi	r20, 0x07	; 7
    292c:	49 15       	cp	r20, r9
    292e:	20 f4       	brcc	.+8      	; 0x2938 <vfprintf+0x166>
    2930:	bb 24       	eor	r11, r11
    2932:	47 e0       	ldi	r20, 0x07	; 7
    2934:	94 2e       	mov	r9, r20
    2936:	f7 cf       	rjmp	.-18     	; 0x2926 <vfprintf+0x154>
    2938:	29 2d       	mov	r18, r9
    293a:	bb 24       	eor	r11, r11
    293c:	c6 01       	movw	r24, r12
    293e:	04 96       	adiw	r24, 0x04	; 4
    2940:	9d 87       	std	Y+13, r25	; 0x0d
    2942:	8c 87       	std	Y+12, r24	; 0x0c
    2944:	f6 01       	movw	r30, r12
    2946:	60 81       	ld	r22, Z
    2948:	71 81       	ldd	r23, Z+1	; 0x01
    294a:	82 81       	ldd	r24, Z+2	; 0x02
    294c:	93 81       	ldd	r25, Z+3	; 0x03
    294e:	ae 01       	movw	r20, r28
    2950:	4f 5f       	subi	r20, 0xFF	; 255
    2952:	5f 4f       	sbci	r21, 0xFF	; 255
    2954:	0b 2d       	mov	r16, r11
    2956:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__ftoa_engine>
    295a:	6c 01       	movw	r12, r24
    295c:	09 81       	ldd	r16, Y+1	; 0x01
    295e:	20 2e       	mov	r2, r16
    2960:	33 24       	eor	r3, r3
    2962:	00 ff       	sbrs	r16, 0
    2964:	04 c0       	rjmp	.+8      	; 0x296e <vfprintf+0x19c>
    2966:	03 fd       	sbrc	r16, 3
    2968:	02 c0       	rjmp	.+4      	; 0x296e <vfprintf+0x19c>
    296a:	1d e2       	ldi	r17, 0x2D	; 45
    296c:	09 c0       	rjmp	.+18     	; 0x2980 <vfprintf+0x1ae>
    296e:	f1 fe       	sbrs	r15, 1
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <vfprintf+0x1a4>
    2972:	1b e2       	ldi	r17, 0x2B	; 43
    2974:	05 c0       	rjmp	.+10     	; 0x2980 <vfprintf+0x1ae>
    2976:	f2 fc       	sbrc	r15, 2
    2978:	02 c0       	rjmp	.+4      	; 0x297e <vfprintf+0x1ac>
    297a:	10 e0       	ldi	r17, 0x00	; 0
    297c:	01 c0       	rjmp	.+2      	; 0x2980 <vfprintf+0x1ae>
    297e:	10 e2       	ldi	r17, 0x20	; 32
    2980:	c1 01       	movw	r24, r2
    2982:	8c 70       	andi	r24, 0x0C	; 12
    2984:	90 70       	andi	r25, 0x00	; 0
    2986:	89 2b       	or	r24, r25
    2988:	b9 f1       	breq	.+110    	; 0x29f8 <vfprintf+0x226>
    298a:	11 23       	and	r17, r17
    298c:	11 f4       	brne	.+4      	; 0x2992 <vfprintf+0x1c0>
    298e:	83 e0       	ldi	r24, 0x03	; 3
    2990:	01 c0       	rjmp	.+2      	; 0x2994 <vfprintf+0x1c2>
    2992:	84 e0       	ldi	r24, 0x04	; 4
    2994:	88 15       	cp	r24, r8
    2996:	10 f0       	brcs	.+4      	; 0x299c <vfprintf+0x1ca>
    2998:	88 24       	eor	r8, r8
    299a:	0a c0       	rjmp	.+20     	; 0x29b0 <vfprintf+0x1de>
    299c:	88 1a       	sub	r8, r24
    299e:	f3 fc       	sbrc	r15, 3
    29a0:	07 c0       	rjmp	.+14     	; 0x29b0 <vfprintf+0x1de>
    29a2:	80 e2       	ldi	r24, 0x20	; 32
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	b3 01       	movw	r22, r6
    29a8:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    29ac:	8a 94       	dec	r8
    29ae:	c9 f7       	brne	.-14     	; 0x29a2 <vfprintf+0x1d0>
    29b0:	11 23       	and	r17, r17
    29b2:	29 f0       	breq	.+10     	; 0x29be <vfprintf+0x1ec>
    29b4:	81 2f       	mov	r24, r17
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	b3 01       	movw	r22, r6
    29ba:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    29be:	23 fe       	sbrs	r2, 3
    29c0:	03 c0       	rjmp	.+6      	; 0x29c8 <vfprintf+0x1f6>
    29c2:	04 ee       	ldi	r16, 0xE4	; 228
    29c4:	10 e0       	ldi	r17, 0x00	; 0
    29c6:	0e c0       	rjmp	.+28     	; 0x29e4 <vfprintf+0x212>
    29c8:	08 ee       	ldi	r16, 0xE8	; 232
    29ca:	10 e0       	ldi	r17, 0x00	; 0
    29cc:	0b c0       	rjmp	.+22     	; 0x29e4 <vfprintf+0x212>
    29ce:	e1 14       	cp	r14, r1
    29d0:	f1 04       	cpc	r15, r1
    29d2:	09 f0       	breq	.+2      	; 0x29d6 <vfprintf+0x204>
    29d4:	80 52       	subi	r24, 0x20	; 32
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	b3 01       	movw	r22, r6
    29da:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    29de:	0f 5f       	subi	r16, 0xFF	; 255
    29e0:	1f 4f       	sbci	r17, 0xFF	; 255
    29e2:	05 c0       	rjmp	.+10     	; 0x29ee <vfprintf+0x21c>
    29e4:	ef 2c       	mov	r14, r15
    29e6:	ff 24       	eor	r15, r15
    29e8:	f0 e1       	ldi	r31, 0x10	; 16
    29ea:	ef 22       	and	r14, r31
    29ec:	ff 24       	eor	r15, r15
    29ee:	f8 01       	movw	r30, r16
    29f0:	84 91       	lpm	r24, Z+
    29f2:	88 23       	and	r24, r24
    29f4:	61 f7       	brne	.-40     	; 0x29ce <vfprintf+0x1fc>
    29f6:	14 c1       	rjmp	.+552    	; 0x2c20 <vfprintf+0x44e>
    29f8:	f7 fe       	sbrs	r15, 7
    29fa:	12 c0       	rjmp	.+36     	; 0x2a20 <vfprintf+0x24e>
    29fc:	bc 0c       	add	r11, r12
    29fe:	24 fe       	sbrs	r2, 4
    2a00:	04 c0       	rjmp	.+8      	; 0x2a0a <vfprintf+0x238>
    2a02:	8a 81       	ldd	r24, Y+2	; 0x02
    2a04:	81 33       	cpi	r24, 0x31	; 49
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <vfprintf+0x238>
    2a08:	ba 94       	dec	r11
    2a0a:	1b 14       	cp	r1, r11
    2a0c:	1c f0       	brlt	.+6      	; 0x2a14 <vfprintf+0x242>
    2a0e:	bb 24       	eor	r11, r11
    2a10:	b3 94       	inc	r11
    2a12:	2d c0       	rjmp	.+90     	; 0x2a6e <vfprintf+0x29c>
    2a14:	f8 e0       	ldi	r31, 0x08	; 8
    2a16:	fb 15       	cp	r31, r11
    2a18:	50 f5       	brcc	.+84     	; 0x2a6e <vfprintf+0x29c>
    2a1a:	38 e0       	ldi	r19, 0x08	; 8
    2a1c:	b3 2e       	mov	r11, r19
    2a1e:	27 c0       	rjmp	.+78     	; 0x2a6e <vfprintf+0x29c>
    2a20:	f6 fc       	sbrc	r15, 6
    2a22:	25 c0       	rjmp	.+74     	; 0x2a6e <vfprintf+0x29c>
    2a24:	89 2d       	mov	r24, r9
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	8c 15       	cp	r24, r12
    2a2a:	9d 05       	cpc	r25, r13
    2a2c:	4c f0       	brlt	.+18     	; 0x2a40 <vfprintf+0x26e>
    2a2e:	2c ef       	ldi	r18, 0xFC	; 252
    2a30:	c2 16       	cp	r12, r18
    2a32:	2f ef       	ldi	r18, 0xFF	; 255
    2a34:	d2 06       	cpc	r13, r18
    2a36:	24 f0       	brlt	.+8      	; 0x2a40 <vfprintf+0x26e>
    2a38:	30 e8       	ldi	r19, 0x80	; 128
    2a3a:	f3 2a       	or	r15, r19
    2a3c:	01 c0       	rjmp	.+2      	; 0x2a40 <vfprintf+0x26e>
    2a3e:	9a 94       	dec	r9
    2a40:	99 20       	and	r9, r9
    2a42:	49 f0       	breq	.+18     	; 0x2a56 <vfprintf+0x284>
    2a44:	e2 e0       	ldi	r30, 0x02	; 2
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	ec 0f       	add	r30, r28
    2a4a:	fd 1f       	adc	r31, r29
    2a4c:	e9 0d       	add	r30, r9
    2a4e:	f1 1d       	adc	r31, r1
    2a50:	80 81       	ld	r24, Z
    2a52:	80 33       	cpi	r24, 0x30	; 48
    2a54:	a1 f3       	breq	.-24     	; 0x2a3e <vfprintf+0x26c>
    2a56:	f7 fe       	sbrs	r15, 7
    2a58:	0a c0       	rjmp	.+20     	; 0x2a6e <vfprintf+0x29c>
    2a5a:	b9 2c       	mov	r11, r9
    2a5c:	b3 94       	inc	r11
    2a5e:	89 2d       	mov	r24, r9
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	c8 16       	cp	r12, r24
    2a64:	d9 06       	cpc	r13, r25
    2a66:	14 f0       	brlt	.+4      	; 0x2a6c <vfprintf+0x29a>
    2a68:	99 24       	eor	r9, r9
    2a6a:	01 c0       	rjmp	.+2      	; 0x2a6e <vfprintf+0x29c>
    2a6c:	9c 18       	sub	r9, r12
    2a6e:	f7 fc       	sbrc	r15, 7
    2a70:	03 c0       	rjmp	.+6      	; 0x2a78 <vfprintf+0x2a6>
    2a72:	25 e0       	ldi	r18, 0x05	; 5
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	09 c0       	rjmp	.+18     	; 0x2a8a <vfprintf+0x2b8>
    2a78:	1c 14       	cp	r1, r12
    2a7a:	1d 04       	cpc	r1, r13
    2a7c:	1c f0       	brlt	.+6      	; 0x2a84 <vfprintf+0x2b2>
    2a7e:	21 e0       	ldi	r18, 0x01	; 1
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	03 c0       	rjmp	.+6      	; 0x2a8a <vfprintf+0x2b8>
    2a84:	96 01       	movw	r18, r12
    2a86:	2f 5f       	subi	r18, 0xFF	; 255
    2a88:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8a:	11 23       	and	r17, r17
    2a8c:	11 f0       	breq	.+4      	; 0x2a92 <vfprintf+0x2c0>
    2a8e:	2f 5f       	subi	r18, 0xFF	; 255
    2a90:	3f 4f       	sbci	r19, 0xFF	; 255
    2a92:	99 20       	and	r9, r9
    2a94:	29 f0       	breq	.+10     	; 0x2aa0 <vfprintf+0x2ce>
    2a96:	89 2d       	mov	r24, r9
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	01 96       	adiw	r24, 0x01	; 1
    2a9c:	28 0f       	add	r18, r24
    2a9e:	39 1f       	adc	r19, r25
    2aa0:	88 2d       	mov	r24, r8
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	28 17       	cp	r18, r24
    2aa6:	39 07       	cpc	r19, r25
    2aa8:	14 f0       	brlt	.+4      	; 0x2aae <vfprintf+0x2dc>
    2aaa:	88 24       	eor	r8, r8
    2aac:	01 c0       	rjmp	.+2      	; 0x2ab0 <vfprintf+0x2de>
    2aae:	82 1a       	sub	r8, r18
    2ab0:	4f 2c       	mov	r4, r15
    2ab2:	55 24       	eor	r5, r5
    2ab4:	c2 01       	movw	r24, r4
    2ab6:	89 70       	andi	r24, 0x09	; 9
    2ab8:	90 70       	andi	r25, 0x00	; 0
    2aba:	89 2b       	or	r24, r25
    2abc:	39 f0       	breq	.+14     	; 0x2acc <vfprintf+0x2fa>
    2abe:	08 c0       	rjmp	.+16     	; 0x2ad0 <vfprintf+0x2fe>
    2ac0:	80 e2       	ldi	r24, 0x20	; 32
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	b3 01       	movw	r22, r6
    2ac6:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2aca:	8a 94       	dec	r8
    2acc:	88 20       	and	r8, r8
    2ace:	c1 f7       	brne	.-16     	; 0x2ac0 <vfprintf+0x2ee>
    2ad0:	11 23       	and	r17, r17
    2ad2:	29 f0       	breq	.+10     	; 0x2ade <vfprintf+0x30c>
    2ad4:	81 2f       	mov	r24, r17
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	b3 01       	movw	r22, r6
    2ada:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2ade:	43 fe       	sbrs	r4, 3
    2ae0:	07 c0       	rjmp	.+14     	; 0x2af0 <vfprintf+0x31e>
    2ae2:	08 c0       	rjmp	.+16     	; 0x2af4 <vfprintf+0x322>
    2ae4:	80 e3       	ldi	r24, 0x30	; 48
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	b3 01       	movw	r22, r6
    2aea:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2aee:	8a 94       	dec	r8
    2af0:	88 20       	and	r8, r8
    2af2:	c1 f7       	brne	.-16     	; 0x2ae4 <vfprintf+0x312>
    2af4:	f7 fe       	sbrs	r15, 7
    2af6:	46 c0       	rjmp	.+140    	; 0x2b84 <vfprintf+0x3b2>
    2af8:	86 01       	movw	r16, r12
    2afa:	d7 fe       	sbrs	r13, 7
    2afc:	02 c0       	rjmp	.+4      	; 0x2b02 <vfprintf+0x330>
    2afe:	00 e0       	ldi	r16, 0x00	; 0
    2b00:	10 e0       	ldi	r17, 0x00	; 0
    2b02:	76 01       	movw	r14, r12
    2b04:	08 94       	sec
    2b06:	e1 1c       	adc	r14, r1
    2b08:	f1 1c       	adc	r15, r1
    2b0a:	e0 1a       	sub	r14, r16
    2b0c:	f1 0a       	sbc	r15, r17
    2b0e:	41 e0       	ldi	r20, 0x01	; 1
    2b10:	50 e0       	ldi	r21, 0x00	; 0
    2b12:	4c 0f       	add	r20, r28
    2b14:	5d 1f       	adc	r21, r29
    2b16:	e4 0e       	add	r14, r20
    2b18:	f5 1e       	adc	r15, r21
    2b1a:	26 01       	movw	r4, r12
    2b1c:	4b 18       	sub	r4, r11
    2b1e:	51 08       	sbc	r5, r1
    2b20:	89 2d       	mov	r24, r9
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	aa 24       	eor	r10, r10
    2b26:	bb 24       	eor	r11, r11
    2b28:	a8 1a       	sub	r10, r24
    2b2a:	b9 0a       	sbc	r11, r25
    2b2c:	5f ef       	ldi	r21, 0xFF	; 255
    2b2e:	0f 3f       	cpi	r16, 0xFF	; 255
    2b30:	15 07       	cpc	r17, r21
    2b32:	29 f4       	brne	.+10     	; 0x2b3e <vfprintf+0x36c>
    2b34:	8e e2       	ldi	r24, 0x2E	; 46
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	b3 01       	movw	r22, r6
    2b3a:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2b3e:	c0 16       	cp	r12, r16
    2b40:	d1 06       	cpc	r13, r17
    2b42:	34 f0       	brlt	.+12     	; 0x2b50 <vfprintf+0x37e>
    2b44:	40 16       	cp	r4, r16
    2b46:	51 06       	cpc	r5, r17
    2b48:	1c f4       	brge	.+6      	; 0x2b50 <vfprintf+0x37e>
    2b4a:	f7 01       	movw	r30, r14
    2b4c:	80 81       	ld	r24, Z
    2b4e:	01 c0       	rjmp	.+2      	; 0x2b52 <vfprintf+0x380>
    2b50:	80 e3       	ldi	r24, 0x30	; 48
    2b52:	01 50       	subi	r16, 0x01	; 1
    2b54:	10 40       	sbci	r17, 0x00	; 0
    2b56:	08 94       	sec
    2b58:	e1 1c       	adc	r14, r1
    2b5a:	f1 1c       	adc	r15, r1
    2b5c:	0a 15       	cp	r16, r10
    2b5e:	1b 05       	cpc	r17, r11
    2b60:	2c f0       	brlt	.+10     	; 0x2b6c <vfprintf+0x39a>
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	b3 01       	movw	r22, r6
    2b66:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2b6a:	e0 cf       	rjmp	.-64     	; 0x2b2c <vfprintf+0x35a>
    2b6c:	0c 15       	cp	r16, r12
    2b6e:	1d 05       	cpc	r17, r13
    2b70:	39 f4       	brne	.+14     	; 0x2b80 <vfprintf+0x3ae>
    2b72:	9a 81       	ldd	r25, Y+2	; 0x02
    2b74:	96 33       	cpi	r25, 0x36	; 54
    2b76:	18 f4       	brcc	.+6      	; 0x2b7e <vfprintf+0x3ac>
    2b78:	95 33       	cpi	r25, 0x35	; 53
    2b7a:	11 f4       	brne	.+4      	; 0x2b80 <vfprintf+0x3ae>
    2b7c:	24 fe       	sbrs	r2, 4
    2b7e:	81 e3       	ldi	r24, 0x31	; 49
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	4b c0       	rjmp	.+150    	; 0x2c1a <vfprintf+0x448>
    2b84:	8a 81       	ldd	r24, Y+2	; 0x02
    2b86:	81 33       	cpi	r24, 0x31	; 49
    2b88:	09 f0       	breq	.+2      	; 0x2b8c <vfprintf+0x3ba>
    2b8a:	0f 7e       	andi	r16, 0xEF	; 239
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	b3 01       	movw	r22, r6
    2b90:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2b94:	99 20       	and	r9, r9
    2b96:	a1 f0       	breq	.+40     	; 0x2bc0 <vfprintf+0x3ee>
    2b98:	8e e2       	ldi	r24, 0x2E	; 46
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	b3 01       	movw	r22, r6
    2b9e:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2ba2:	12 e0       	ldi	r17, 0x02	; 2
    2ba4:	e1 e0       	ldi	r30, 0x01	; 1
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	ec 0f       	add	r30, r28
    2baa:	fd 1f       	adc	r31, r29
    2bac:	e1 0f       	add	r30, r17
    2bae:	f1 1d       	adc	r31, r1
    2bb0:	1f 5f       	subi	r17, 0xFF	; 255
    2bb2:	80 81       	ld	r24, Z
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	b3 01       	movw	r22, r6
    2bb8:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2bbc:	9a 94       	dec	r9
    2bbe:	91 f7       	brne	.-28     	; 0x2ba4 <vfprintf+0x3d2>
    2bc0:	44 fc       	sbrc	r4, 4
    2bc2:	03 c0       	rjmp	.+6      	; 0x2bca <vfprintf+0x3f8>
    2bc4:	85 e6       	ldi	r24, 0x65	; 101
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	02 c0       	rjmp	.+4      	; 0x2bce <vfprintf+0x3fc>
    2bca:	85 e4       	ldi	r24, 0x45	; 69
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	b3 01       	movw	r22, r6
    2bd0:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2bd4:	d7 fc       	sbrc	r13, 7
    2bd6:	05 c0       	rjmp	.+10     	; 0x2be2 <vfprintf+0x410>
    2bd8:	c1 14       	cp	r12, r1
    2bda:	d1 04       	cpc	r13, r1
    2bdc:	41 f4       	brne	.+16     	; 0x2bee <vfprintf+0x41c>
    2bde:	04 ff       	sbrs	r16, 4
    2be0:	06 c0       	rjmp	.+12     	; 0x2bee <vfprintf+0x41c>
    2be2:	d0 94       	com	r13
    2be4:	c1 94       	neg	r12
    2be6:	d1 08       	sbc	r13, r1
    2be8:	d3 94       	inc	r13
    2bea:	8d e2       	ldi	r24, 0x2D	; 45
    2bec:	01 c0       	rjmp	.+2      	; 0x2bf0 <vfprintf+0x41e>
    2bee:	8b e2       	ldi	r24, 0x2B	; 43
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	b3 01       	movw	r22, r6
    2bf4:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2bf8:	80 e3       	ldi	r24, 0x30	; 48
    2bfa:	05 c0       	rjmp	.+10     	; 0x2c06 <vfprintf+0x434>
    2bfc:	8f 5f       	subi	r24, 0xFF	; 255
    2bfe:	26 ef       	ldi	r18, 0xF6	; 246
    2c00:	3f ef       	ldi	r19, 0xFF	; 255
    2c02:	c2 0e       	add	r12, r18
    2c04:	d3 1e       	adc	r13, r19
    2c06:	3a e0       	ldi	r19, 0x0A	; 10
    2c08:	c3 16       	cp	r12, r19
    2c0a:	d1 04       	cpc	r13, r1
    2c0c:	bc f7       	brge	.-18     	; 0x2bfc <vfprintf+0x42a>
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	b3 01       	movw	r22, r6
    2c12:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2c16:	c6 01       	movw	r24, r12
    2c18:	c0 96       	adiw	r24, 0x30	; 48
    2c1a:	b3 01       	movw	r22, r6
    2c1c:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2c20:	cc 84       	ldd	r12, Y+12	; 0x0c
    2c22:	dd 84       	ldd	r13, Y+13	; 0x0d
    2c24:	52 c1       	rjmp	.+676    	; 0x2eca <vfprintf+0x6f8>
    2c26:	93 36       	cpi	r25, 0x63	; 99
    2c28:	31 f0       	breq	.+12     	; 0x2c36 <vfprintf+0x464>
    2c2a:	93 37       	cpi	r25, 0x73	; 115
    2c2c:	99 f0       	breq	.+38     	; 0x2c54 <vfprintf+0x482>
    2c2e:	93 35       	cpi	r25, 0x53	; 83
    2c30:	09 f0       	breq	.+2      	; 0x2c34 <vfprintf+0x462>
    2c32:	59 c0       	rjmp	.+178    	; 0x2ce6 <vfprintf+0x514>
    2c34:	23 c0       	rjmp	.+70     	; 0x2c7c <vfprintf+0x4aa>
    2c36:	f6 01       	movw	r30, r12
    2c38:	80 81       	ld	r24, Z
    2c3a:	89 83       	std	Y+1, r24	; 0x01
    2c3c:	5e 01       	movw	r10, r28
    2c3e:	08 94       	sec
    2c40:	a1 1c       	adc	r10, r1
    2c42:	b1 1c       	adc	r11, r1
    2c44:	22 e0       	ldi	r18, 0x02	; 2
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	c2 0e       	add	r12, r18
    2c4a:	d3 1e       	adc	r13, r19
    2c4c:	21 e0       	ldi	r18, 0x01	; 1
    2c4e:	e2 2e       	mov	r14, r18
    2c50:	f1 2c       	mov	r15, r1
    2c52:	12 c0       	rjmp	.+36     	; 0x2c78 <vfprintf+0x4a6>
    2c54:	f6 01       	movw	r30, r12
    2c56:	a0 80       	ld	r10, Z
    2c58:	b1 80       	ldd	r11, Z+1	; 0x01
    2c5a:	16 fd       	sbrc	r17, 6
    2c5c:	03 c0       	rjmp	.+6      	; 0x2c64 <vfprintf+0x492>
    2c5e:	6f ef       	ldi	r22, 0xFF	; 255
    2c60:	7f ef       	ldi	r23, 0xFF	; 255
    2c62:	02 c0       	rjmp	.+4      	; 0x2c68 <vfprintf+0x496>
    2c64:	69 2d       	mov	r22, r9
    2c66:	70 e0       	ldi	r23, 0x00	; 0
    2c68:	22 e0       	ldi	r18, 0x02	; 2
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	c2 0e       	add	r12, r18
    2c6e:	d3 1e       	adc	r13, r19
    2c70:	c5 01       	movw	r24, r10
    2c72:	0e 94 62 19 	call	0x32c4	; 0x32c4 <strnlen>
    2c76:	7c 01       	movw	r14, r24
    2c78:	1f 77       	andi	r17, 0x7F	; 127
    2c7a:	13 c0       	rjmp	.+38     	; 0x2ca2 <vfprintf+0x4d0>
    2c7c:	f6 01       	movw	r30, r12
    2c7e:	a0 80       	ld	r10, Z
    2c80:	b1 80       	ldd	r11, Z+1	; 0x01
    2c82:	16 fd       	sbrc	r17, 6
    2c84:	03 c0       	rjmp	.+6      	; 0x2c8c <vfprintf+0x4ba>
    2c86:	6f ef       	ldi	r22, 0xFF	; 255
    2c88:	7f ef       	ldi	r23, 0xFF	; 255
    2c8a:	02 c0       	rjmp	.+4      	; 0x2c90 <vfprintf+0x4be>
    2c8c:	69 2d       	mov	r22, r9
    2c8e:	70 e0       	ldi	r23, 0x00	; 0
    2c90:	22 e0       	ldi	r18, 0x02	; 2
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	c2 0e       	add	r12, r18
    2c96:	d3 1e       	adc	r13, r19
    2c98:	c5 01       	movw	r24, r10
    2c9a:	0e 94 50 19 	call	0x32a0	; 0x32a0 <strnlen_P>
    2c9e:	7c 01       	movw	r14, r24
    2ca0:	10 68       	ori	r17, 0x80	; 128
    2ca2:	13 ff       	sbrs	r17, 3
    2ca4:	07 c0       	rjmp	.+14     	; 0x2cb4 <vfprintf+0x4e2>
    2ca6:	1b c0       	rjmp	.+54     	; 0x2cde <vfprintf+0x50c>
    2ca8:	80 e2       	ldi	r24, 0x20	; 32
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	b3 01       	movw	r22, r6
    2cae:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2cb2:	8a 94       	dec	r8
    2cb4:	88 2d       	mov	r24, r8
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	e8 16       	cp	r14, r24
    2cba:	f9 06       	cpc	r15, r25
    2cbc:	a8 f3       	brcs	.-22     	; 0x2ca8 <vfprintf+0x4d6>
    2cbe:	0f c0       	rjmp	.+30     	; 0x2cde <vfprintf+0x50c>
    2cc0:	f5 01       	movw	r30, r10
    2cc2:	17 fd       	sbrc	r17, 7
    2cc4:	85 91       	lpm	r24, Z+
    2cc6:	17 ff       	sbrs	r17, 7
    2cc8:	81 91       	ld	r24, Z+
    2cca:	5f 01       	movw	r10, r30
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	b3 01       	movw	r22, r6
    2cd0:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2cd4:	81 10       	cpse	r8, r1
    2cd6:	8a 94       	dec	r8
    2cd8:	08 94       	sec
    2cda:	e1 08       	sbc	r14, r1
    2cdc:	f1 08       	sbc	r15, r1
    2cde:	e1 14       	cp	r14, r1
    2ce0:	f1 04       	cpc	r15, r1
    2ce2:	71 f7       	brne	.-36     	; 0x2cc0 <vfprintf+0x4ee>
    2ce4:	f2 c0       	rjmp	.+484    	; 0x2eca <vfprintf+0x6f8>
    2ce6:	94 36       	cpi	r25, 0x64	; 100
    2ce8:	11 f0       	breq	.+4      	; 0x2cee <vfprintf+0x51c>
    2cea:	99 36       	cpi	r25, 0x69	; 105
    2cec:	89 f5       	brne	.+98     	; 0x2d50 <vfprintf+0x57e>
    2cee:	17 ff       	sbrs	r17, 7
    2cf0:	08 c0       	rjmp	.+16     	; 0x2d02 <vfprintf+0x530>
    2cf2:	f6 01       	movw	r30, r12
    2cf4:	20 81       	ld	r18, Z
    2cf6:	31 81       	ldd	r19, Z+1	; 0x01
    2cf8:	42 81       	ldd	r20, Z+2	; 0x02
    2cfa:	53 81       	ldd	r21, Z+3	; 0x03
    2cfc:	84 e0       	ldi	r24, 0x04	; 4
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	0a c0       	rjmp	.+20     	; 0x2d16 <vfprintf+0x544>
    2d02:	f6 01       	movw	r30, r12
    2d04:	80 81       	ld	r24, Z
    2d06:	91 81       	ldd	r25, Z+1	; 0x01
    2d08:	9c 01       	movw	r18, r24
    2d0a:	44 27       	eor	r20, r20
    2d0c:	37 fd       	sbrc	r19, 7
    2d0e:	40 95       	com	r20
    2d10:	54 2f       	mov	r21, r20
    2d12:	82 e0       	ldi	r24, 0x02	; 2
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	c8 0e       	add	r12, r24
    2d18:	d9 1e       	adc	r13, r25
    2d1a:	9f e6       	ldi	r25, 0x6F	; 111
    2d1c:	f9 2e       	mov	r15, r25
    2d1e:	f1 22       	and	r15, r17
    2d20:	57 ff       	sbrs	r21, 7
    2d22:	09 c0       	rjmp	.+18     	; 0x2d36 <vfprintf+0x564>
    2d24:	50 95       	com	r21
    2d26:	40 95       	com	r20
    2d28:	30 95       	com	r19
    2d2a:	21 95       	neg	r18
    2d2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2e:	4f 4f       	sbci	r20, 0xFF	; 255
    2d30:	5f 4f       	sbci	r21, 0xFF	; 255
    2d32:	90 e8       	ldi	r25, 0x80	; 128
    2d34:	f9 2a       	or	r15, r25
    2d36:	ca 01       	movw	r24, r20
    2d38:	b9 01       	movw	r22, r18
    2d3a:	ae 01       	movw	r20, r28
    2d3c:	4f 5f       	subi	r20, 0xFF	; 255
    2d3e:	5f 4f       	sbci	r21, 0xFF	; 255
    2d40:	2a e0       	ldi	r18, 0x0A	; 10
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	0e 94 b6 19 	call	0x336c	; 0x336c <__ultoa_invert>
    2d48:	e8 2e       	mov	r14, r24
    2d4a:	e8 89       	ldd	r30, Y+16	; 0x10
    2d4c:	ee 1a       	sub	r14, r30
    2d4e:	41 c0       	rjmp	.+130    	; 0x2dd2 <vfprintf+0x600>
    2d50:	95 37       	cpi	r25, 0x75	; 117
    2d52:	21 f4       	brne	.+8      	; 0x2d5c <vfprintf+0x58a>
    2d54:	1f 7e       	andi	r17, 0xEF	; 239
    2d56:	2a e0       	ldi	r18, 0x0A	; 10
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	1c c0       	rjmp	.+56     	; 0x2d94 <vfprintf+0x5c2>
    2d5c:	19 7f       	andi	r17, 0xF9	; 249
    2d5e:	9f 36       	cpi	r25, 0x6F	; 111
    2d60:	61 f0       	breq	.+24     	; 0x2d7a <vfprintf+0x5a8>
    2d62:	90 37       	cpi	r25, 0x70	; 112
    2d64:	20 f4       	brcc	.+8      	; 0x2d6e <vfprintf+0x59c>
    2d66:	98 35       	cpi	r25, 0x58	; 88
    2d68:	09 f0       	breq	.+2      	; 0x2d6c <vfprintf+0x59a>
    2d6a:	b2 c0       	rjmp	.+356    	; 0x2ed0 <vfprintf+0x6fe>
    2d6c:	0f c0       	rjmp	.+30     	; 0x2d8c <vfprintf+0x5ba>
    2d6e:	90 37       	cpi	r25, 0x70	; 112
    2d70:	39 f0       	breq	.+14     	; 0x2d80 <vfprintf+0x5ae>
    2d72:	98 37       	cpi	r25, 0x78	; 120
    2d74:	09 f0       	breq	.+2      	; 0x2d78 <vfprintf+0x5a6>
    2d76:	ac c0       	rjmp	.+344    	; 0x2ed0 <vfprintf+0x6fe>
    2d78:	04 c0       	rjmp	.+8      	; 0x2d82 <vfprintf+0x5b0>
    2d7a:	28 e0       	ldi	r18, 0x08	; 8
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	0a c0       	rjmp	.+20     	; 0x2d94 <vfprintf+0x5c2>
    2d80:	10 61       	ori	r17, 0x10	; 16
    2d82:	14 fd       	sbrc	r17, 4
    2d84:	14 60       	ori	r17, 0x04	; 4
    2d86:	20 e1       	ldi	r18, 0x10	; 16
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	04 c0       	rjmp	.+8      	; 0x2d94 <vfprintf+0x5c2>
    2d8c:	14 fd       	sbrc	r17, 4
    2d8e:	16 60       	ori	r17, 0x06	; 6
    2d90:	20 e1       	ldi	r18, 0x10	; 16
    2d92:	32 e0       	ldi	r19, 0x02	; 2
    2d94:	17 ff       	sbrs	r17, 7
    2d96:	08 c0       	rjmp	.+16     	; 0x2da8 <vfprintf+0x5d6>
    2d98:	f6 01       	movw	r30, r12
    2d9a:	60 81       	ld	r22, Z
    2d9c:	71 81       	ldd	r23, Z+1	; 0x01
    2d9e:	82 81       	ldd	r24, Z+2	; 0x02
    2da0:	93 81       	ldd	r25, Z+3	; 0x03
    2da2:	44 e0       	ldi	r20, 0x04	; 4
    2da4:	50 e0       	ldi	r21, 0x00	; 0
    2da6:	08 c0       	rjmp	.+16     	; 0x2db8 <vfprintf+0x5e6>
    2da8:	f6 01       	movw	r30, r12
    2daa:	80 81       	ld	r24, Z
    2dac:	91 81       	ldd	r25, Z+1	; 0x01
    2dae:	bc 01       	movw	r22, r24
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	42 e0       	ldi	r20, 0x02	; 2
    2db6:	50 e0       	ldi	r21, 0x00	; 0
    2db8:	c4 0e       	add	r12, r20
    2dba:	d5 1e       	adc	r13, r21
    2dbc:	ae 01       	movw	r20, r28
    2dbe:	4f 5f       	subi	r20, 0xFF	; 255
    2dc0:	5f 4f       	sbci	r21, 0xFF	; 255
    2dc2:	0e 94 b6 19 	call	0x336c	; 0x336c <__ultoa_invert>
    2dc6:	e8 2e       	mov	r14, r24
    2dc8:	58 89       	ldd	r21, Y+16	; 0x10
    2dca:	e5 1a       	sub	r14, r21
    2dcc:	8f e7       	ldi	r24, 0x7F	; 127
    2dce:	f8 2e       	mov	r15, r24
    2dd0:	f1 22       	and	r15, r17
    2dd2:	f6 fe       	sbrs	r15, 6
    2dd4:	0b c0       	rjmp	.+22     	; 0x2dec <vfprintf+0x61a>
    2dd6:	8e ef       	ldi	r24, 0xFE	; 254
    2dd8:	f8 22       	and	r15, r24
    2dda:	e9 14       	cp	r14, r9
    2ddc:	38 f4       	brcc	.+14     	; 0x2dec <vfprintf+0x61a>
    2dde:	f4 fe       	sbrs	r15, 4
    2de0:	07 c0       	rjmp	.+14     	; 0x2df0 <vfprintf+0x61e>
    2de2:	f2 fc       	sbrc	r15, 2
    2de4:	05 c0       	rjmp	.+10     	; 0x2df0 <vfprintf+0x61e>
    2de6:	9f ee       	ldi	r25, 0xEF	; 239
    2de8:	f9 22       	and	r15, r25
    2dea:	02 c0       	rjmp	.+4      	; 0x2df0 <vfprintf+0x61e>
    2dec:	1e 2d       	mov	r17, r14
    2dee:	01 c0       	rjmp	.+2      	; 0x2df2 <vfprintf+0x620>
    2df0:	19 2d       	mov	r17, r9
    2df2:	f4 fe       	sbrs	r15, 4
    2df4:	0d c0       	rjmp	.+26     	; 0x2e10 <vfprintf+0x63e>
    2df6:	fe 01       	movw	r30, r28
    2df8:	ee 0d       	add	r30, r14
    2dfa:	f1 1d       	adc	r31, r1
    2dfc:	80 81       	ld	r24, Z
    2dfe:	80 33       	cpi	r24, 0x30	; 48
    2e00:	19 f4       	brne	.+6      	; 0x2e08 <vfprintf+0x636>
    2e02:	e9 ee       	ldi	r30, 0xE9	; 233
    2e04:	fe 22       	and	r15, r30
    2e06:	08 c0       	rjmp	.+16     	; 0x2e18 <vfprintf+0x646>
    2e08:	1f 5f       	subi	r17, 0xFF	; 255
    2e0a:	f2 fe       	sbrs	r15, 2
    2e0c:	05 c0       	rjmp	.+10     	; 0x2e18 <vfprintf+0x646>
    2e0e:	03 c0       	rjmp	.+6      	; 0x2e16 <vfprintf+0x644>
    2e10:	8f 2d       	mov	r24, r15
    2e12:	86 78       	andi	r24, 0x86	; 134
    2e14:	09 f0       	breq	.+2      	; 0x2e18 <vfprintf+0x646>
    2e16:	1f 5f       	subi	r17, 0xFF	; 255
    2e18:	0f 2d       	mov	r16, r15
    2e1a:	f3 fc       	sbrc	r15, 3
    2e1c:	14 c0       	rjmp	.+40     	; 0x2e46 <vfprintf+0x674>
    2e1e:	f0 fe       	sbrs	r15, 0
    2e20:	0f c0       	rjmp	.+30     	; 0x2e40 <vfprintf+0x66e>
    2e22:	18 15       	cp	r17, r8
    2e24:	10 f0       	brcs	.+4      	; 0x2e2a <vfprintf+0x658>
    2e26:	9e 2c       	mov	r9, r14
    2e28:	0b c0       	rjmp	.+22     	; 0x2e40 <vfprintf+0x66e>
    2e2a:	9e 2c       	mov	r9, r14
    2e2c:	98 0c       	add	r9, r8
    2e2e:	91 1a       	sub	r9, r17
    2e30:	18 2d       	mov	r17, r8
    2e32:	06 c0       	rjmp	.+12     	; 0x2e40 <vfprintf+0x66e>
    2e34:	80 e2       	ldi	r24, 0x20	; 32
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	b3 01       	movw	r22, r6
    2e3a:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2e3e:	1f 5f       	subi	r17, 0xFF	; 255
    2e40:	18 15       	cp	r17, r8
    2e42:	c0 f3       	brcs	.-16     	; 0x2e34 <vfprintf+0x662>
    2e44:	04 c0       	rjmp	.+8      	; 0x2e4e <vfprintf+0x67c>
    2e46:	18 15       	cp	r17, r8
    2e48:	10 f4       	brcc	.+4      	; 0x2e4e <vfprintf+0x67c>
    2e4a:	81 1a       	sub	r8, r17
    2e4c:	01 c0       	rjmp	.+2      	; 0x2e50 <vfprintf+0x67e>
    2e4e:	88 24       	eor	r8, r8
    2e50:	04 ff       	sbrs	r16, 4
    2e52:	0f c0       	rjmp	.+30     	; 0x2e72 <vfprintf+0x6a0>
    2e54:	80 e3       	ldi	r24, 0x30	; 48
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	b3 01       	movw	r22, r6
    2e5a:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2e5e:	02 ff       	sbrs	r16, 2
    2e60:	1d c0       	rjmp	.+58     	; 0x2e9c <vfprintf+0x6ca>
    2e62:	01 fd       	sbrc	r16, 1
    2e64:	03 c0       	rjmp	.+6      	; 0x2e6c <vfprintf+0x69a>
    2e66:	88 e7       	ldi	r24, 0x78	; 120
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	0e c0       	rjmp	.+28     	; 0x2e88 <vfprintf+0x6b6>
    2e6c:	88 e5       	ldi	r24, 0x58	; 88
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	0b c0       	rjmp	.+22     	; 0x2e88 <vfprintf+0x6b6>
    2e72:	80 2f       	mov	r24, r16
    2e74:	86 78       	andi	r24, 0x86	; 134
    2e76:	91 f0       	breq	.+36     	; 0x2e9c <vfprintf+0x6ca>
    2e78:	01 ff       	sbrs	r16, 1
    2e7a:	02 c0       	rjmp	.+4      	; 0x2e80 <vfprintf+0x6ae>
    2e7c:	8b e2       	ldi	r24, 0x2B	; 43
    2e7e:	01 c0       	rjmp	.+2      	; 0x2e82 <vfprintf+0x6b0>
    2e80:	80 e2       	ldi	r24, 0x20	; 32
    2e82:	f7 fc       	sbrc	r15, 7
    2e84:	8d e2       	ldi	r24, 0x2D	; 45
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	b3 01       	movw	r22, r6
    2e8a:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2e8e:	06 c0       	rjmp	.+12     	; 0x2e9c <vfprintf+0x6ca>
    2e90:	80 e3       	ldi	r24, 0x30	; 48
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	b3 01       	movw	r22, r6
    2e96:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2e9a:	9a 94       	dec	r9
    2e9c:	e9 14       	cp	r14, r9
    2e9e:	c0 f3       	brcs	.-16     	; 0x2e90 <vfprintf+0x6be>
    2ea0:	ea 94       	dec	r14
    2ea2:	e1 e0       	ldi	r30, 0x01	; 1
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	ec 0f       	add	r30, r28
    2ea8:	fd 1f       	adc	r31, r29
    2eaa:	ee 0d       	add	r30, r14
    2eac:	f1 1d       	adc	r31, r1
    2eae:	80 81       	ld	r24, Z
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	b3 01       	movw	r22, r6
    2eb4:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2eb8:	ee 20       	and	r14, r14
    2eba:	91 f7       	brne	.-28     	; 0x2ea0 <vfprintf+0x6ce>
    2ebc:	06 c0       	rjmp	.+12     	; 0x2eca <vfprintf+0x6f8>
    2ebe:	80 e2       	ldi	r24, 0x20	; 32
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	b3 01       	movw	r22, r6
    2ec4:	0e 94 8a 19 	call	0x3314	; 0x3314 <fputc>
    2ec8:	8a 94       	dec	r8
    2eca:	88 20       	and	r8, r8
    2ecc:	c1 f7       	brne	.-16     	; 0x2ebe <vfprintf+0x6ec>
    2ece:	99 cc       	rjmp	.-1742   	; 0x2802 <vfprintf+0x30>
    2ed0:	f3 01       	movw	r30, r6
    2ed2:	66 81       	ldd	r22, Z+6	; 0x06
    2ed4:	77 81       	ldd	r23, Z+7	; 0x07
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	61 96       	adiw	r28, 0x11	; 17
    2eda:	e2 e1       	ldi	r30, 0x12	; 18
    2edc:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <__epilogue_restores__>

00002ee0 <malloc>:
    2ee0:	cf 93       	push	r28
    2ee2:	df 93       	push	r29
    2ee4:	bc 01       	movw	r22, r24
    2ee6:	82 30       	cpi	r24, 0x02	; 2
    2ee8:	91 05       	cpc	r25, r1
    2eea:	10 f4       	brcc	.+4      	; 0x2ef0 <malloc+0x10>
    2eec:	62 e0       	ldi	r22, 0x02	; 2
    2eee:	70 e0       	ldi	r23, 0x00	; 0
    2ef0:	a0 91 3b 04 	lds	r26, 0x043B
    2ef4:	b0 91 3c 04 	lds	r27, 0x043C
    2ef8:	ed 01       	movw	r28, r26
    2efa:	e0 e0       	ldi	r30, 0x00	; 0
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	40 e0       	ldi	r20, 0x00	; 0
    2f00:	50 e0       	ldi	r21, 0x00	; 0
    2f02:	21 c0       	rjmp	.+66     	; 0x2f46 <malloc+0x66>
    2f04:	88 81       	ld	r24, Y
    2f06:	99 81       	ldd	r25, Y+1	; 0x01
    2f08:	86 17       	cp	r24, r22
    2f0a:	97 07       	cpc	r25, r23
    2f0c:	69 f4       	brne	.+26     	; 0x2f28 <malloc+0x48>
    2f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f10:	9b 81       	ldd	r25, Y+3	; 0x03
    2f12:	30 97       	sbiw	r30, 0x00	; 0
    2f14:	19 f0       	breq	.+6      	; 0x2f1c <malloc+0x3c>
    2f16:	93 83       	std	Z+3, r25	; 0x03
    2f18:	82 83       	std	Z+2, r24	; 0x02
    2f1a:	04 c0       	rjmp	.+8      	; 0x2f24 <malloc+0x44>
    2f1c:	90 93 3c 04 	sts	0x043C, r25
    2f20:	80 93 3b 04 	sts	0x043B, r24
    2f24:	fe 01       	movw	r30, r28
    2f26:	34 c0       	rjmp	.+104    	; 0x2f90 <malloc+0xb0>
    2f28:	68 17       	cp	r22, r24
    2f2a:	79 07       	cpc	r23, r25
    2f2c:	38 f4       	brcc	.+14     	; 0x2f3c <malloc+0x5c>
    2f2e:	41 15       	cp	r20, r1
    2f30:	51 05       	cpc	r21, r1
    2f32:	19 f0       	breq	.+6      	; 0x2f3a <malloc+0x5a>
    2f34:	84 17       	cp	r24, r20
    2f36:	95 07       	cpc	r25, r21
    2f38:	08 f4       	brcc	.+2      	; 0x2f3c <malloc+0x5c>
    2f3a:	ac 01       	movw	r20, r24
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f40:	9b 81       	ldd	r25, Y+3	; 0x03
    2f42:	9c 01       	movw	r18, r24
    2f44:	e9 01       	movw	r28, r18
    2f46:	20 97       	sbiw	r28, 0x00	; 0
    2f48:	e9 f6       	brne	.-70     	; 0x2f04 <malloc+0x24>
    2f4a:	41 15       	cp	r20, r1
    2f4c:	51 05       	cpc	r21, r1
    2f4e:	a9 f1       	breq	.+106    	; 0x2fba <malloc+0xda>
    2f50:	ca 01       	movw	r24, r20
    2f52:	86 1b       	sub	r24, r22
    2f54:	97 0b       	sbc	r25, r23
    2f56:	04 97       	sbiw	r24, 0x04	; 4
    2f58:	08 f4       	brcc	.+2      	; 0x2f5c <malloc+0x7c>
    2f5a:	ba 01       	movw	r22, r20
    2f5c:	e0 e0       	ldi	r30, 0x00	; 0
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	2a c0       	rjmp	.+84     	; 0x2fb6 <malloc+0xd6>
    2f62:	8d 91       	ld	r24, X+
    2f64:	9c 91       	ld	r25, X
    2f66:	11 97       	sbiw	r26, 0x01	; 1
    2f68:	84 17       	cp	r24, r20
    2f6a:	95 07       	cpc	r25, r21
    2f6c:	f9 f4       	brne	.+62     	; 0x2fac <malloc+0xcc>
    2f6e:	64 17       	cp	r22, r20
    2f70:	75 07       	cpc	r23, r21
    2f72:	81 f4       	brne	.+32     	; 0x2f94 <malloc+0xb4>
    2f74:	12 96       	adiw	r26, 0x02	; 2
    2f76:	8d 91       	ld	r24, X+
    2f78:	9c 91       	ld	r25, X
    2f7a:	13 97       	sbiw	r26, 0x03	; 3
    2f7c:	30 97       	sbiw	r30, 0x00	; 0
    2f7e:	19 f0       	breq	.+6      	; 0x2f86 <malloc+0xa6>
    2f80:	93 83       	std	Z+3, r25	; 0x03
    2f82:	82 83       	std	Z+2, r24	; 0x02
    2f84:	04 c0       	rjmp	.+8      	; 0x2f8e <malloc+0xae>
    2f86:	90 93 3c 04 	sts	0x043C, r25
    2f8a:	80 93 3b 04 	sts	0x043B, r24
    2f8e:	fd 01       	movw	r30, r26
    2f90:	32 96       	adiw	r30, 0x02	; 2
    2f92:	4f c0       	rjmp	.+158    	; 0x3032 <malloc+0x152>
    2f94:	ca 01       	movw	r24, r20
    2f96:	86 1b       	sub	r24, r22
    2f98:	97 0b       	sbc	r25, r23
    2f9a:	fd 01       	movw	r30, r26
    2f9c:	e8 0f       	add	r30, r24
    2f9e:	f9 1f       	adc	r31, r25
    2fa0:	61 93       	st	Z+, r22
    2fa2:	71 93       	st	Z+, r23
    2fa4:	02 97       	sbiw	r24, 0x02	; 2
    2fa6:	8d 93       	st	X+, r24
    2fa8:	9c 93       	st	X, r25
    2faa:	43 c0       	rjmp	.+134    	; 0x3032 <malloc+0x152>
    2fac:	fd 01       	movw	r30, r26
    2fae:	82 81       	ldd	r24, Z+2	; 0x02
    2fb0:	93 81       	ldd	r25, Z+3	; 0x03
    2fb2:	9c 01       	movw	r18, r24
    2fb4:	d9 01       	movw	r26, r18
    2fb6:	10 97       	sbiw	r26, 0x00	; 0
    2fb8:	a1 f6       	brne	.-88     	; 0x2f62 <malloc+0x82>
    2fba:	80 91 39 04 	lds	r24, 0x0439
    2fbe:	90 91 3a 04 	lds	r25, 0x043A
    2fc2:	89 2b       	or	r24, r25
    2fc4:	41 f4       	brne	.+16     	; 0x2fd6 <malloc+0xf6>
    2fc6:	80 91 fc 02 	lds	r24, 0x02FC
    2fca:	90 91 fd 02 	lds	r25, 0x02FD
    2fce:	90 93 3a 04 	sts	0x043A, r25
    2fd2:	80 93 39 04 	sts	0x0439, r24
    2fd6:	40 91 fe 02 	lds	r20, 0x02FE
    2fda:	50 91 ff 02 	lds	r21, 0x02FF
    2fde:	41 15       	cp	r20, r1
    2fe0:	51 05       	cpc	r21, r1
    2fe2:	41 f4       	brne	.+16     	; 0x2ff4 <malloc+0x114>
    2fe4:	4d b7       	in	r20, 0x3d	; 61
    2fe6:	5e b7       	in	r21, 0x3e	; 62
    2fe8:	80 91 fa 02 	lds	r24, 0x02FA
    2fec:	90 91 fb 02 	lds	r25, 0x02FB
    2ff0:	48 1b       	sub	r20, r24
    2ff2:	59 0b       	sbc	r21, r25
    2ff4:	20 91 39 04 	lds	r18, 0x0439
    2ff8:	30 91 3a 04 	lds	r19, 0x043A
    2ffc:	24 17       	cp	r18, r20
    2ffe:	35 07       	cpc	r19, r21
    3000:	b0 f4       	brcc	.+44     	; 0x302e <malloc+0x14e>
    3002:	ca 01       	movw	r24, r20
    3004:	82 1b       	sub	r24, r18
    3006:	93 0b       	sbc	r25, r19
    3008:	86 17       	cp	r24, r22
    300a:	97 07       	cpc	r25, r23
    300c:	80 f0       	brcs	.+32     	; 0x302e <malloc+0x14e>
    300e:	ab 01       	movw	r20, r22
    3010:	4e 5f       	subi	r20, 0xFE	; 254
    3012:	5f 4f       	sbci	r21, 0xFF	; 255
    3014:	84 17       	cp	r24, r20
    3016:	95 07       	cpc	r25, r21
    3018:	50 f0       	brcs	.+20     	; 0x302e <malloc+0x14e>
    301a:	42 0f       	add	r20, r18
    301c:	53 1f       	adc	r21, r19
    301e:	50 93 3a 04 	sts	0x043A, r21
    3022:	40 93 39 04 	sts	0x0439, r20
    3026:	f9 01       	movw	r30, r18
    3028:	61 93       	st	Z+, r22
    302a:	71 93       	st	Z+, r23
    302c:	02 c0       	rjmp	.+4      	; 0x3032 <malloc+0x152>
    302e:	e0 e0       	ldi	r30, 0x00	; 0
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	cf 01       	movw	r24, r30
    3034:	df 91       	pop	r29
    3036:	cf 91       	pop	r28
    3038:	08 95       	ret

0000303a <free>:
    303a:	cf 93       	push	r28
    303c:	df 93       	push	r29
    303e:	00 97       	sbiw	r24, 0x00	; 0
    3040:	09 f4       	brne	.+2      	; 0x3044 <free+0xa>
    3042:	50 c0       	rjmp	.+160    	; 0x30e4 <free+0xaa>
    3044:	ec 01       	movw	r28, r24
    3046:	22 97       	sbiw	r28, 0x02	; 2
    3048:	1b 82       	std	Y+3, r1	; 0x03
    304a:	1a 82       	std	Y+2, r1	; 0x02
    304c:	a0 91 3b 04 	lds	r26, 0x043B
    3050:	b0 91 3c 04 	lds	r27, 0x043C
    3054:	10 97       	sbiw	r26, 0x00	; 0
    3056:	09 f1       	breq	.+66     	; 0x309a <free+0x60>
    3058:	40 e0       	ldi	r20, 0x00	; 0
    305a:	50 e0       	ldi	r21, 0x00	; 0
    305c:	ac 17       	cp	r26, r28
    305e:	bd 07       	cpc	r27, r29
    3060:	08 f1       	brcs	.+66     	; 0x30a4 <free+0x6a>
    3062:	bb 83       	std	Y+3, r27	; 0x03
    3064:	aa 83       	std	Y+2, r26	; 0x02
    3066:	fe 01       	movw	r30, r28
    3068:	21 91       	ld	r18, Z+
    306a:	31 91       	ld	r19, Z+
    306c:	e2 0f       	add	r30, r18
    306e:	f3 1f       	adc	r31, r19
    3070:	ae 17       	cp	r26, r30
    3072:	bf 07       	cpc	r27, r31
    3074:	79 f4       	brne	.+30     	; 0x3094 <free+0x5a>
    3076:	8d 91       	ld	r24, X+
    3078:	9c 91       	ld	r25, X
    307a:	11 97       	sbiw	r26, 0x01	; 1
    307c:	28 0f       	add	r18, r24
    307e:	39 1f       	adc	r19, r25
    3080:	2e 5f       	subi	r18, 0xFE	; 254
    3082:	3f 4f       	sbci	r19, 0xFF	; 255
    3084:	39 83       	std	Y+1, r19	; 0x01
    3086:	28 83       	st	Y, r18
    3088:	12 96       	adiw	r26, 0x02	; 2
    308a:	8d 91       	ld	r24, X+
    308c:	9c 91       	ld	r25, X
    308e:	13 97       	sbiw	r26, 0x03	; 3
    3090:	9b 83       	std	Y+3, r25	; 0x03
    3092:	8a 83       	std	Y+2, r24	; 0x02
    3094:	41 15       	cp	r20, r1
    3096:	51 05       	cpc	r21, r1
    3098:	71 f4       	brne	.+28     	; 0x30b6 <free+0x7c>
    309a:	d0 93 3c 04 	sts	0x043C, r29
    309e:	c0 93 3b 04 	sts	0x043B, r28
    30a2:	20 c0       	rjmp	.+64     	; 0x30e4 <free+0xaa>
    30a4:	12 96       	adiw	r26, 0x02	; 2
    30a6:	8d 91       	ld	r24, X+
    30a8:	9c 91       	ld	r25, X
    30aa:	13 97       	sbiw	r26, 0x03	; 3
    30ac:	ad 01       	movw	r20, r26
    30ae:	00 97       	sbiw	r24, 0x00	; 0
    30b0:	11 f0       	breq	.+4      	; 0x30b6 <free+0x7c>
    30b2:	dc 01       	movw	r26, r24
    30b4:	d3 cf       	rjmp	.-90     	; 0x305c <free+0x22>
    30b6:	fa 01       	movw	r30, r20
    30b8:	d3 83       	std	Z+3, r29	; 0x03
    30ba:	c2 83       	std	Z+2, r28	; 0x02
    30bc:	21 91       	ld	r18, Z+
    30be:	31 91       	ld	r19, Z+
    30c0:	e2 0f       	add	r30, r18
    30c2:	f3 1f       	adc	r31, r19
    30c4:	ce 17       	cp	r28, r30
    30c6:	df 07       	cpc	r29, r31
    30c8:	69 f4       	brne	.+26     	; 0x30e4 <free+0xaa>
    30ca:	88 81       	ld	r24, Y
    30cc:	99 81       	ldd	r25, Y+1	; 0x01
    30ce:	28 0f       	add	r18, r24
    30d0:	39 1f       	adc	r19, r25
    30d2:	2e 5f       	subi	r18, 0xFE	; 254
    30d4:	3f 4f       	sbci	r19, 0xFF	; 255
    30d6:	fa 01       	movw	r30, r20
    30d8:	31 83       	std	Z+1, r19	; 0x01
    30da:	20 83       	st	Z, r18
    30dc:	8a 81       	ldd	r24, Y+2	; 0x02
    30de:	9b 81       	ldd	r25, Y+3	; 0x03
    30e0:	93 83       	std	Z+3, r25	; 0x03
    30e2:	82 83       	std	Z+2, r24	; 0x02
    30e4:	df 91       	pop	r29
    30e6:	cf 91       	pop	r28
    30e8:	08 95       	ret

000030ea <exit>:
    30ea:	f8 94       	cli
    30ec:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <_exit>

000030f0 <__ftoa_engine>:
    30f0:	28 30       	cpi	r18, 0x08	; 8
    30f2:	08 f0       	brcs	.+2      	; 0x30f6 <__ftoa_engine+0x6>
    30f4:	27 e0       	ldi	r18, 0x07	; 7
    30f6:	33 27       	eor	r19, r19
    30f8:	da 01       	movw	r26, r20
    30fa:	99 0f       	add	r25, r25
    30fc:	31 1d       	adc	r19, r1
    30fe:	87 fd       	sbrc	r24, 7
    3100:	91 60       	ori	r25, 0x01	; 1
    3102:	00 96       	adiw	r24, 0x00	; 0
    3104:	61 05       	cpc	r22, r1
    3106:	71 05       	cpc	r23, r1
    3108:	39 f4       	brne	.+14     	; 0x3118 <__ftoa_engine+0x28>
    310a:	32 60       	ori	r19, 0x02	; 2
    310c:	2e 5f       	subi	r18, 0xFE	; 254
    310e:	3d 93       	st	X+, r19
    3110:	30 e3       	ldi	r19, 0x30	; 48
    3112:	2a 95       	dec	r18
    3114:	e1 f7       	brne	.-8      	; 0x310e <__ftoa_engine+0x1e>
    3116:	08 95       	ret
    3118:	9f 3f       	cpi	r25, 0xFF	; 255
    311a:	30 f0       	brcs	.+12     	; 0x3128 <__ftoa_engine+0x38>
    311c:	80 38       	cpi	r24, 0x80	; 128
    311e:	71 05       	cpc	r23, r1
    3120:	61 05       	cpc	r22, r1
    3122:	09 f0       	breq	.+2      	; 0x3126 <__ftoa_engine+0x36>
    3124:	3c 5f       	subi	r19, 0xFC	; 252
    3126:	3c 5f       	subi	r19, 0xFC	; 252
    3128:	3d 93       	st	X+, r19
    312a:	91 30       	cpi	r25, 0x01	; 1
    312c:	08 f0       	brcs	.+2      	; 0x3130 <__ftoa_engine+0x40>
    312e:	80 68       	ori	r24, 0x80	; 128
    3130:	91 1d       	adc	r25, r1
    3132:	df 93       	push	r29
    3134:	cf 93       	push	r28
    3136:	1f 93       	push	r17
    3138:	0f 93       	push	r16
    313a:	ff 92       	push	r15
    313c:	ef 92       	push	r14
    313e:	19 2f       	mov	r17, r25
    3140:	98 7f       	andi	r25, 0xF8	; 248
    3142:	96 95       	lsr	r25
    3144:	e9 2f       	mov	r30, r25
    3146:	96 95       	lsr	r25
    3148:	96 95       	lsr	r25
    314a:	e9 0f       	add	r30, r25
    314c:	ff 27       	eor	r31, r31
    314e:	e8 5d       	subi	r30, 0xD8	; 216
    3150:	fb 4f       	sbci	r31, 0xFB	; 251
    3152:	99 27       	eor	r25, r25
    3154:	33 27       	eor	r19, r19
    3156:	ee 24       	eor	r14, r14
    3158:	ff 24       	eor	r15, r15
    315a:	a7 01       	movw	r20, r14
    315c:	e7 01       	movw	r28, r14
    315e:	05 90       	lpm	r0, Z+
    3160:	08 94       	sec
    3162:	07 94       	ror	r0
    3164:	28 f4       	brcc	.+10     	; 0x3170 <__ftoa_engine+0x80>
    3166:	36 0f       	add	r19, r22
    3168:	e7 1e       	adc	r14, r23
    316a:	f8 1e       	adc	r15, r24
    316c:	49 1f       	adc	r20, r25
    316e:	51 1d       	adc	r21, r1
    3170:	66 0f       	add	r22, r22
    3172:	77 1f       	adc	r23, r23
    3174:	88 1f       	adc	r24, r24
    3176:	99 1f       	adc	r25, r25
    3178:	06 94       	lsr	r0
    317a:	a1 f7       	brne	.-24     	; 0x3164 <__ftoa_engine+0x74>
    317c:	05 90       	lpm	r0, Z+
    317e:	07 94       	ror	r0
    3180:	28 f4       	brcc	.+10     	; 0x318c <__ftoa_engine+0x9c>
    3182:	e7 0e       	add	r14, r23
    3184:	f8 1e       	adc	r15, r24
    3186:	49 1f       	adc	r20, r25
    3188:	56 1f       	adc	r21, r22
    318a:	c1 1d       	adc	r28, r1
    318c:	77 0f       	add	r23, r23
    318e:	88 1f       	adc	r24, r24
    3190:	99 1f       	adc	r25, r25
    3192:	66 1f       	adc	r22, r22
    3194:	06 94       	lsr	r0
    3196:	a1 f7       	brne	.-24     	; 0x3180 <__ftoa_engine+0x90>
    3198:	05 90       	lpm	r0, Z+
    319a:	07 94       	ror	r0
    319c:	28 f4       	brcc	.+10     	; 0x31a8 <__ftoa_engine+0xb8>
    319e:	f8 0e       	add	r15, r24
    31a0:	49 1f       	adc	r20, r25
    31a2:	56 1f       	adc	r21, r22
    31a4:	c7 1f       	adc	r28, r23
    31a6:	d1 1d       	adc	r29, r1
    31a8:	88 0f       	add	r24, r24
    31aa:	99 1f       	adc	r25, r25
    31ac:	66 1f       	adc	r22, r22
    31ae:	77 1f       	adc	r23, r23
    31b0:	06 94       	lsr	r0
    31b2:	a1 f7       	brne	.-24     	; 0x319c <__ftoa_engine+0xac>
    31b4:	05 90       	lpm	r0, Z+
    31b6:	07 94       	ror	r0
    31b8:	20 f4       	brcc	.+8      	; 0x31c2 <__ftoa_engine+0xd2>
    31ba:	49 0f       	add	r20, r25
    31bc:	56 1f       	adc	r21, r22
    31be:	c7 1f       	adc	r28, r23
    31c0:	d8 1f       	adc	r29, r24
    31c2:	99 0f       	add	r25, r25
    31c4:	66 1f       	adc	r22, r22
    31c6:	77 1f       	adc	r23, r23
    31c8:	88 1f       	adc	r24, r24
    31ca:	06 94       	lsr	r0
    31cc:	a9 f7       	brne	.-22     	; 0x31b8 <__ftoa_engine+0xc8>
    31ce:	84 91       	lpm	r24, Z+
    31d0:	10 95       	com	r17
    31d2:	17 70       	andi	r17, 0x07	; 7
    31d4:	41 f0       	breq	.+16     	; 0x31e6 <__ftoa_engine+0xf6>
    31d6:	d6 95       	lsr	r29
    31d8:	c7 95       	ror	r28
    31da:	57 95       	ror	r21
    31dc:	47 95       	ror	r20
    31de:	f7 94       	ror	r15
    31e0:	e7 94       	ror	r14
    31e2:	1a 95       	dec	r17
    31e4:	c1 f7       	brne	.-16     	; 0x31d6 <__ftoa_engine+0xe6>
    31e6:	ee ec       	ldi	r30, 0xCE	; 206
    31e8:	f3 e0       	ldi	r31, 0x03	; 3
    31ea:	68 94       	set
    31ec:	15 90       	lpm	r1, Z+
    31ee:	15 91       	lpm	r17, Z+
    31f0:	35 91       	lpm	r19, Z+
    31f2:	65 91       	lpm	r22, Z+
    31f4:	95 91       	lpm	r25, Z+
    31f6:	05 90       	lpm	r0, Z+
    31f8:	7f e2       	ldi	r23, 0x2F	; 47
    31fa:	73 95       	inc	r23
    31fc:	e1 18       	sub	r14, r1
    31fe:	f1 0a       	sbc	r15, r17
    3200:	43 0b       	sbc	r20, r19
    3202:	56 0b       	sbc	r21, r22
    3204:	c9 0b       	sbc	r28, r25
    3206:	d0 09       	sbc	r29, r0
    3208:	c0 f7       	brcc	.-16     	; 0x31fa <__ftoa_engine+0x10a>
    320a:	e1 0c       	add	r14, r1
    320c:	f1 1e       	adc	r15, r17
    320e:	43 1f       	adc	r20, r19
    3210:	56 1f       	adc	r21, r22
    3212:	c9 1f       	adc	r28, r25
    3214:	d0 1d       	adc	r29, r0
    3216:	7e f4       	brtc	.+30     	; 0x3236 <__ftoa_engine+0x146>
    3218:	70 33       	cpi	r23, 0x30	; 48
    321a:	11 f4       	brne	.+4      	; 0x3220 <__ftoa_engine+0x130>
    321c:	8a 95       	dec	r24
    321e:	e6 cf       	rjmp	.-52     	; 0x31ec <__ftoa_engine+0xfc>
    3220:	e8 94       	clt
    3222:	01 50       	subi	r16, 0x01	; 1
    3224:	30 f0       	brcs	.+12     	; 0x3232 <__ftoa_engine+0x142>
    3226:	08 0f       	add	r16, r24
    3228:	0a f4       	brpl	.+2      	; 0x322c <__ftoa_engine+0x13c>
    322a:	00 27       	eor	r16, r16
    322c:	02 17       	cp	r16, r18
    322e:	08 f4       	brcc	.+2      	; 0x3232 <__ftoa_engine+0x142>
    3230:	20 2f       	mov	r18, r16
    3232:	23 95       	inc	r18
    3234:	02 2f       	mov	r16, r18
    3236:	7a 33       	cpi	r23, 0x3A	; 58
    3238:	28 f0       	brcs	.+10     	; 0x3244 <__ftoa_engine+0x154>
    323a:	79 e3       	ldi	r23, 0x39	; 57
    323c:	7d 93       	st	X+, r23
    323e:	2a 95       	dec	r18
    3240:	e9 f7       	brne	.-6      	; 0x323c <__ftoa_engine+0x14c>
    3242:	10 c0       	rjmp	.+32     	; 0x3264 <__ftoa_engine+0x174>
    3244:	7d 93       	st	X+, r23
    3246:	2a 95       	dec	r18
    3248:	89 f6       	brne	.-94     	; 0x31ec <__ftoa_engine+0xfc>
    324a:	06 94       	lsr	r0
    324c:	97 95       	ror	r25
    324e:	67 95       	ror	r22
    3250:	37 95       	ror	r19
    3252:	17 95       	ror	r17
    3254:	17 94       	ror	r1
    3256:	e1 18       	sub	r14, r1
    3258:	f1 0a       	sbc	r15, r17
    325a:	43 0b       	sbc	r20, r19
    325c:	56 0b       	sbc	r21, r22
    325e:	c9 0b       	sbc	r28, r25
    3260:	d0 09       	sbc	r29, r0
    3262:	98 f0       	brcs	.+38     	; 0x328a <__ftoa_engine+0x19a>
    3264:	23 95       	inc	r18
    3266:	7e 91       	ld	r23, -X
    3268:	73 95       	inc	r23
    326a:	7a 33       	cpi	r23, 0x3A	; 58
    326c:	08 f0       	brcs	.+2      	; 0x3270 <__ftoa_engine+0x180>
    326e:	70 e3       	ldi	r23, 0x30	; 48
    3270:	7c 93       	st	X, r23
    3272:	20 13       	cpse	r18, r16
    3274:	b8 f7       	brcc	.-18     	; 0x3264 <__ftoa_engine+0x174>
    3276:	7e 91       	ld	r23, -X
    3278:	70 61       	ori	r23, 0x10	; 16
    327a:	7d 93       	st	X+, r23
    327c:	30 f0       	brcs	.+12     	; 0x328a <__ftoa_engine+0x19a>
    327e:	83 95       	inc	r24
    3280:	71 e3       	ldi	r23, 0x31	; 49
    3282:	7d 93       	st	X+, r23
    3284:	70 e3       	ldi	r23, 0x30	; 48
    3286:	2a 95       	dec	r18
    3288:	e1 f7       	brne	.-8      	; 0x3282 <__ftoa_engine+0x192>
    328a:	11 24       	eor	r1, r1
    328c:	ef 90       	pop	r14
    328e:	ff 90       	pop	r15
    3290:	0f 91       	pop	r16
    3292:	1f 91       	pop	r17
    3294:	cf 91       	pop	r28
    3296:	df 91       	pop	r29
    3298:	99 27       	eor	r25, r25
    329a:	87 fd       	sbrc	r24, 7
    329c:	90 95       	com	r25
    329e:	08 95       	ret

000032a0 <strnlen_P>:
    32a0:	fc 01       	movw	r30, r24
    32a2:	05 90       	lpm	r0, Z+
    32a4:	61 50       	subi	r22, 0x01	; 1
    32a6:	70 40       	sbci	r23, 0x00	; 0
    32a8:	01 10       	cpse	r0, r1
    32aa:	d8 f7       	brcc	.-10     	; 0x32a2 <strnlen_P+0x2>
    32ac:	80 95       	com	r24
    32ae:	90 95       	com	r25
    32b0:	8e 0f       	add	r24, r30
    32b2:	9f 1f       	adc	r25, r31
    32b4:	08 95       	ret

000032b6 <memset>:
    32b6:	dc 01       	movw	r26, r24
    32b8:	01 c0       	rjmp	.+2      	; 0x32bc <memset+0x6>
    32ba:	6d 93       	st	X+, r22
    32bc:	41 50       	subi	r20, 0x01	; 1
    32be:	50 40       	sbci	r21, 0x00	; 0
    32c0:	e0 f7       	brcc	.-8      	; 0x32ba <memset+0x4>
    32c2:	08 95       	ret

000032c4 <strnlen>:
    32c4:	fc 01       	movw	r30, r24
    32c6:	61 50       	subi	r22, 0x01	; 1
    32c8:	70 40       	sbci	r23, 0x00	; 0
    32ca:	01 90       	ld	r0, Z+
    32cc:	01 10       	cpse	r0, r1
    32ce:	d8 f7       	brcc	.-10     	; 0x32c6 <strnlen+0x2>
    32d0:	80 95       	com	r24
    32d2:	90 95       	com	r25
    32d4:	8e 0f       	add	r24, r30
    32d6:	9f 1f       	adc	r25, r31
    32d8:	08 95       	ret

000032da <fprintf_P>:
    32da:	a0 e0       	ldi	r26, 0x00	; 0
    32dc:	b0 e0       	ldi	r27, 0x00	; 0
    32de:	e3 e7       	ldi	r30, 0x73	; 115
    32e0:	f9 e1       	ldi	r31, 0x19	; 25
    32e2:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__prologue_saves__+0x1c>
    32e6:	0f 81       	ldd	r16, Y+7	; 0x07
    32e8:	18 85       	ldd	r17, Y+8	; 0x08
    32ea:	9e 01       	movw	r18, r28
    32ec:	25 5f       	subi	r18, 0xF5	; 245
    32ee:	3f 4f       	sbci	r19, 0xFF	; 255
    32f0:	f8 01       	movw	r30, r16
    32f2:	83 81       	ldd	r24, Z+3	; 0x03
    32f4:	88 60       	ori	r24, 0x08	; 8
    32f6:	83 83       	std	Z+3, r24	; 0x03
    32f8:	c8 01       	movw	r24, r16
    32fa:	69 85       	ldd	r22, Y+9	; 0x09
    32fc:	7a 85       	ldd	r23, Y+10	; 0x0a
    32fe:	a9 01       	movw	r20, r18
    3300:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <vfprintf>
    3304:	f8 01       	movw	r30, r16
    3306:	23 81       	ldd	r18, Z+3	; 0x03
    3308:	27 7f       	andi	r18, 0xF7	; 247
    330a:	23 83       	std	Z+3, r18	; 0x03
    330c:	20 96       	adiw	r28, 0x00	; 0
    330e:	e4 e0       	ldi	r30, 0x04	; 4
    3310:	0c 94 ae 1a 	jmp	0x355c	; 0x355c <__epilogue_restores__+0x1c>

00003314 <fputc>:
    3314:	0f 93       	push	r16
    3316:	1f 93       	push	r17
    3318:	cf 93       	push	r28
    331a:	df 93       	push	r29
    331c:	8c 01       	movw	r16, r24
    331e:	eb 01       	movw	r28, r22
    3320:	8b 81       	ldd	r24, Y+3	; 0x03
    3322:	81 ff       	sbrs	r24, 1
    3324:	1b c0       	rjmp	.+54     	; 0x335c <fputc+0x48>
    3326:	82 ff       	sbrs	r24, 2
    3328:	0d c0       	rjmp	.+26     	; 0x3344 <fputc+0x30>
    332a:	2e 81       	ldd	r18, Y+6	; 0x06
    332c:	3f 81       	ldd	r19, Y+7	; 0x07
    332e:	8c 81       	ldd	r24, Y+4	; 0x04
    3330:	9d 81       	ldd	r25, Y+5	; 0x05
    3332:	28 17       	cp	r18, r24
    3334:	39 07       	cpc	r19, r25
    3336:	64 f4       	brge	.+24     	; 0x3350 <fputc+0x3c>
    3338:	e8 81       	ld	r30, Y
    333a:	f9 81       	ldd	r31, Y+1	; 0x01
    333c:	01 93       	st	Z+, r16
    333e:	f9 83       	std	Y+1, r31	; 0x01
    3340:	e8 83       	st	Y, r30
    3342:	06 c0       	rjmp	.+12     	; 0x3350 <fputc+0x3c>
    3344:	e8 85       	ldd	r30, Y+8	; 0x08
    3346:	f9 85       	ldd	r31, Y+9	; 0x09
    3348:	80 2f       	mov	r24, r16
    334a:	09 95       	icall
    334c:	89 2b       	or	r24, r25
    334e:	31 f4       	brne	.+12     	; 0x335c <fputc+0x48>
    3350:	8e 81       	ldd	r24, Y+6	; 0x06
    3352:	9f 81       	ldd	r25, Y+7	; 0x07
    3354:	01 96       	adiw	r24, 0x01	; 1
    3356:	9f 83       	std	Y+7, r25	; 0x07
    3358:	8e 83       	std	Y+6, r24	; 0x06
    335a:	02 c0       	rjmp	.+4      	; 0x3360 <fputc+0x4c>
    335c:	0f ef       	ldi	r16, 0xFF	; 255
    335e:	1f ef       	ldi	r17, 0xFF	; 255
    3360:	c8 01       	movw	r24, r16
    3362:	df 91       	pop	r29
    3364:	cf 91       	pop	r28
    3366:	1f 91       	pop	r17
    3368:	0f 91       	pop	r16
    336a:	08 95       	ret

0000336c <__ultoa_invert>:
    336c:	fa 01       	movw	r30, r20
    336e:	aa 27       	eor	r26, r26
    3370:	28 30       	cpi	r18, 0x08	; 8
    3372:	51 f1       	breq	.+84     	; 0x33c8 <__ultoa_invert+0x5c>
    3374:	20 31       	cpi	r18, 0x10	; 16
    3376:	81 f1       	breq	.+96     	; 0x33d8 <__ultoa_invert+0x6c>
    3378:	e8 94       	clt
    337a:	6f 93       	push	r22
    337c:	6e 7f       	andi	r22, 0xFE	; 254
    337e:	6e 5f       	subi	r22, 0xFE	; 254
    3380:	7f 4f       	sbci	r23, 0xFF	; 255
    3382:	8f 4f       	sbci	r24, 0xFF	; 255
    3384:	9f 4f       	sbci	r25, 0xFF	; 255
    3386:	af 4f       	sbci	r26, 0xFF	; 255
    3388:	b1 e0       	ldi	r27, 0x01	; 1
    338a:	3e d0       	rcall	.+124    	; 0x3408 <__ultoa_invert+0x9c>
    338c:	b4 e0       	ldi	r27, 0x04	; 4
    338e:	3c d0       	rcall	.+120    	; 0x3408 <__ultoa_invert+0x9c>
    3390:	67 0f       	add	r22, r23
    3392:	78 1f       	adc	r23, r24
    3394:	89 1f       	adc	r24, r25
    3396:	9a 1f       	adc	r25, r26
    3398:	a1 1d       	adc	r26, r1
    339a:	68 0f       	add	r22, r24
    339c:	79 1f       	adc	r23, r25
    339e:	8a 1f       	adc	r24, r26
    33a0:	91 1d       	adc	r25, r1
    33a2:	a1 1d       	adc	r26, r1
    33a4:	6a 0f       	add	r22, r26
    33a6:	71 1d       	adc	r23, r1
    33a8:	81 1d       	adc	r24, r1
    33aa:	91 1d       	adc	r25, r1
    33ac:	a1 1d       	adc	r26, r1
    33ae:	20 d0       	rcall	.+64     	; 0x33f0 <__ultoa_invert+0x84>
    33b0:	09 f4       	brne	.+2      	; 0x33b4 <__ultoa_invert+0x48>
    33b2:	68 94       	set
    33b4:	3f 91       	pop	r19
    33b6:	2a e0       	ldi	r18, 0x0A	; 10
    33b8:	26 9f       	mul	r18, r22
    33ba:	11 24       	eor	r1, r1
    33bc:	30 19       	sub	r19, r0
    33be:	30 5d       	subi	r19, 0xD0	; 208
    33c0:	31 93       	st	Z+, r19
    33c2:	de f6       	brtc	.-74     	; 0x337a <__ultoa_invert+0xe>
    33c4:	cf 01       	movw	r24, r30
    33c6:	08 95       	ret
    33c8:	46 2f       	mov	r20, r22
    33ca:	47 70       	andi	r20, 0x07	; 7
    33cc:	40 5d       	subi	r20, 0xD0	; 208
    33ce:	41 93       	st	Z+, r20
    33d0:	b3 e0       	ldi	r27, 0x03	; 3
    33d2:	0f d0       	rcall	.+30     	; 0x33f2 <__ultoa_invert+0x86>
    33d4:	c9 f7       	brne	.-14     	; 0x33c8 <__ultoa_invert+0x5c>
    33d6:	f6 cf       	rjmp	.-20     	; 0x33c4 <__ultoa_invert+0x58>
    33d8:	46 2f       	mov	r20, r22
    33da:	4f 70       	andi	r20, 0x0F	; 15
    33dc:	40 5d       	subi	r20, 0xD0	; 208
    33de:	4a 33       	cpi	r20, 0x3A	; 58
    33e0:	18 f0       	brcs	.+6      	; 0x33e8 <__ultoa_invert+0x7c>
    33e2:	49 5d       	subi	r20, 0xD9	; 217
    33e4:	31 fd       	sbrc	r19, 1
    33e6:	40 52       	subi	r20, 0x20	; 32
    33e8:	41 93       	st	Z+, r20
    33ea:	02 d0       	rcall	.+4      	; 0x33f0 <__ultoa_invert+0x84>
    33ec:	a9 f7       	brne	.-22     	; 0x33d8 <__ultoa_invert+0x6c>
    33ee:	ea cf       	rjmp	.-44     	; 0x33c4 <__ultoa_invert+0x58>
    33f0:	b4 e0       	ldi	r27, 0x04	; 4
    33f2:	a6 95       	lsr	r26
    33f4:	97 95       	ror	r25
    33f6:	87 95       	ror	r24
    33f8:	77 95       	ror	r23
    33fa:	67 95       	ror	r22
    33fc:	ba 95       	dec	r27
    33fe:	c9 f7       	brne	.-14     	; 0x33f2 <__ultoa_invert+0x86>
    3400:	00 97       	sbiw	r24, 0x00	; 0
    3402:	61 05       	cpc	r22, r1
    3404:	71 05       	cpc	r23, r1
    3406:	08 95       	ret
    3408:	9b 01       	movw	r18, r22
    340a:	ac 01       	movw	r20, r24
    340c:	0a 2e       	mov	r0, r26
    340e:	06 94       	lsr	r0
    3410:	57 95       	ror	r21
    3412:	47 95       	ror	r20
    3414:	37 95       	ror	r19
    3416:	27 95       	ror	r18
    3418:	ba 95       	dec	r27
    341a:	c9 f7       	brne	.-14     	; 0x340e <__ultoa_invert+0xa2>
    341c:	62 0f       	add	r22, r18
    341e:	73 1f       	adc	r23, r19
    3420:	84 1f       	adc	r24, r20
    3422:	95 1f       	adc	r25, r21
    3424:	a0 1d       	adc	r26, r0
    3426:	08 95       	ret

00003428 <__mulsi3>:
    3428:	62 9f       	mul	r22, r18
    342a:	d0 01       	movw	r26, r0
    342c:	73 9f       	mul	r23, r19
    342e:	f0 01       	movw	r30, r0
    3430:	82 9f       	mul	r24, r18
    3432:	e0 0d       	add	r30, r0
    3434:	f1 1d       	adc	r31, r1
    3436:	64 9f       	mul	r22, r20
    3438:	e0 0d       	add	r30, r0
    343a:	f1 1d       	adc	r31, r1
    343c:	92 9f       	mul	r25, r18
    343e:	f0 0d       	add	r31, r0
    3440:	83 9f       	mul	r24, r19
    3442:	f0 0d       	add	r31, r0
    3444:	74 9f       	mul	r23, r20
    3446:	f0 0d       	add	r31, r0
    3448:	65 9f       	mul	r22, r21
    344a:	f0 0d       	add	r31, r0
    344c:	99 27       	eor	r25, r25
    344e:	72 9f       	mul	r23, r18
    3450:	b0 0d       	add	r27, r0
    3452:	e1 1d       	adc	r30, r1
    3454:	f9 1f       	adc	r31, r25
    3456:	63 9f       	mul	r22, r19
    3458:	b0 0d       	add	r27, r0
    345a:	e1 1d       	adc	r30, r1
    345c:	f9 1f       	adc	r31, r25
    345e:	bd 01       	movw	r22, r26
    3460:	cf 01       	movw	r24, r30
    3462:	11 24       	eor	r1, r1
    3464:	08 95       	ret

00003466 <__udivmodhi4>:
    3466:	aa 1b       	sub	r26, r26
    3468:	bb 1b       	sub	r27, r27
    346a:	51 e1       	ldi	r21, 0x11	; 17
    346c:	07 c0       	rjmp	.+14     	; 0x347c <__udivmodhi4_ep>

0000346e <__udivmodhi4_loop>:
    346e:	aa 1f       	adc	r26, r26
    3470:	bb 1f       	adc	r27, r27
    3472:	a6 17       	cp	r26, r22
    3474:	b7 07       	cpc	r27, r23
    3476:	10 f0       	brcs	.+4      	; 0x347c <__udivmodhi4_ep>
    3478:	a6 1b       	sub	r26, r22
    347a:	b7 0b       	sbc	r27, r23

0000347c <__udivmodhi4_ep>:
    347c:	88 1f       	adc	r24, r24
    347e:	99 1f       	adc	r25, r25
    3480:	5a 95       	dec	r21
    3482:	a9 f7       	brne	.-22     	; 0x346e <__udivmodhi4_loop>
    3484:	80 95       	com	r24
    3486:	90 95       	com	r25
    3488:	bc 01       	movw	r22, r24
    348a:	cd 01       	movw	r24, r26
    348c:	08 95       	ret

0000348e <__udivmodsi4>:
    348e:	a1 e2       	ldi	r26, 0x21	; 33
    3490:	1a 2e       	mov	r1, r26
    3492:	aa 1b       	sub	r26, r26
    3494:	bb 1b       	sub	r27, r27
    3496:	fd 01       	movw	r30, r26
    3498:	0d c0       	rjmp	.+26     	; 0x34b4 <__udivmodsi4_ep>

0000349a <__udivmodsi4_loop>:
    349a:	aa 1f       	adc	r26, r26
    349c:	bb 1f       	adc	r27, r27
    349e:	ee 1f       	adc	r30, r30
    34a0:	ff 1f       	adc	r31, r31
    34a2:	a2 17       	cp	r26, r18
    34a4:	b3 07       	cpc	r27, r19
    34a6:	e4 07       	cpc	r30, r20
    34a8:	f5 07       	cpc	r31, r21
    34aa:	20 f0       	brcs	.+8      	; 0x34b4 <__udivmodsi4_ep>
    34ac:	a2 1b       	sub	r26, r18
    34ae:	b3 0b       	sbc	r27, r19
    34b0:	e4 0b       	sbc	r30, r20
    34b2:	f5 0b       	sbc	r31, r21

000034b4 <__udivmodsi4_ep>:
    34b4:	66 1f       	adc	r22, r22
    34b6:	77 1f       	adc	r23, r23
    34b8:	88 1f       	adc	r24, r24
    34ba:	99 1f       	adc	r25, r25
    34bc:	1a 94       	dec	r1
    34be:	69 f7       	brne	.-38     	; 0x349a <__udivmodsi4_loop>
    34c0:	60 95       	com	r22
    34c2:	70 95       	com	r23
    34c4:	80 95       	com	r24
    34c6:	90 95       	com	r25
    34c8:	9b 01       	movw	r18, r22
    34ca:	ac 01       	movw	r20, r24
    34cc:	bd 01       	movw	r22, r26
    34ce:	cf 01       	movw	r24, r30
    34d0:	08 95       	ret

000034d2 <__divmodsi4>:
    34d2:	97 fb       	bst	r25, 7
    34d4:	09 2e       	mov	r0, r25
    34d6:	05 26       	eor	r0, r21
    34d8:	0e d0       	rcall	.+28     	; 0x34f6 <__divmodsi4_neg1>
    34da:	57 fd       	sbrc	r21, 7
    34dc:	04 d0       	rcall	.+8      	; 0x34e6 <__divmodsi4_neg2>
    34de:	d7 df       	rcall	.-82     	; 0x348e <__udivmodsi4>
    34e0:	0a d0       	rcall	.+20     	; 0x34f6 <__divmodsi4_neg1>
    34e2:	00 1c       	adc	r0, r0
    34e4:	38 f4       	brcc	.+14     	; 0x34f4 <__divmodsi4_exit>

000034e6 <__divmodsi4_neg2>:
    34e6:	50 95       	com	r21
    34e8:	40 95       	com	r20
    34ea:	30 95       	com	r19
    34ec:	21 95       	neg	r18
    34ee:	3f 4f       	sbci	r19, 0xFF	; 255
    34f0:	4f 4f       	sbci	r20, 0xFF	; 255
    34f2:	5f 4f       	sbci	r21, 0xFF	; 255

000034f4 <__divmodsi4_exit>:
    34f4:	08 95       	ret

000034f6 <__divmodsi4_neg1>:
    34f6:	f6 f7       	brtc	.-4      	; 0x34f4 <__divmodsi4_exit>
    34f8:	90 95       	com	r25
    34fa:	80 95       	com	r24
    34fc:	70 95       	com	r23
    34fe:	61 95       	neg	r22
    3500:	7f 4f       	sbci	r23, 0xFF	; 255
    3502:	8f 4f       	sbci	r24, 0xFF	; 255
    3504:	9f 4f       	sbci	r25, 0xFF	; 255
    3506:	08 95       	ret

00003508 <__prologue_saves__>:
    3508:	2f 92       	push	r2
    350a:	3f 92       	push	r3
    350c:	4f 92       	push	r4
    350e:	5f 92       	push	r5
    3510:	6f 92       	push	r6
    3512:	7f 92       	push	r7
    3514:	8f 92       	push	r8
    3516:	9f 92       	push	r9
    3518:	af 92       	push	r10
    351a:	bf 92       	push	r11
    351c:	cf 92       	push	r12
    351e:	df 92       	push	r13
    3520:	ef 92       	push	r14
    3522:	ff 92       	push	r15
    3524:	0f 93       	push	r16
    3526:	1f 93       	push	r17
    3528:	cf 93       	push	r28
    352a:	df 93       	push	r29
    352c:	cd b7       	in	r28, 0x3d	; 61
    352e:	de b7       	in	r29, 0x3e	; 62
    3530:	ca 1b       	sub	r28, r26
    3532:	db 0b       	sbc	r29, r27
    3534:	0f b6       	in	r0, 0x3f	; 63
    3536:	f8 94       	cli
    3538:	de bf       	out	0x3e, r29	; 62
    353a:	0f be       	out	0x3f, r0	; 63
    353c:	cd bf       	out	0x3d, r28	; 61
    353e:	09 94       	ijmp

00003540 <__epilogue_restores__>:
    3540:	2a 88       	ldd	r2, Y+18	; 0x12
    3542:	39 88       	ldd	r3, Y+17	; 0x11
    3544:	48 88       	ldd	r4, Y+16	; 0x10
    3546:	5f 84       	ldd	r5, Y+15	; 0x0f
    3548:	6e 84       	ldd	r6, Y+14	; 0x0e
    354a:	7d 84       	ldd	r7, Y+13	; 0x0d
    354c:	8c 84       	ldd	r8, Y+12	; 0x0c
    354e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3550:	aa 84       	ldd	r10, Y+10	; 0x0a
    3552:	b9 84       	ldd	r11, Y+9	; 0x09
    3554:	c8 84       	ldd	r12, Y+8	; 0x08
    3556:	df 80       	ldd	r13, Y+7	; 0x07
    3558:	ee 80       	ldd	r14, Y+6	; 0x06
    355a:	fd 80       	ldd	r15, Y+5	; 0x05
    355c:	0c 81       	ldd	r16, Y+4	; 0x04
    355e:	1b 81       	ldd	r17, Y+3	; 0x03
    3560:	aa 81       	ldd	r26, Y+2	; 0x02
    3562:	b9 81       	ldd	r27, Y+1	; 0x01
    3564:	ce 0f       	add	r28, r30
    3566:	d1 1d       	adc	r29, r1
    3568:	0f b6       	in	r0, 0x3f	; 63
    356a:	f8 94       	cli
    356c:	de bf       	out	0x3e, r29	; 62
    356e:	0f be       	out	0x3f, r0	; 63
    3570:	cd bf       	out	0x3d, r28	; 61
    3572:	ed 01       	movw	r28, r26
    3574:	08 95       	ret

00003576 <__tablejump2__>:
    3576:	ee 0f       	add	r30, r30
    3578:	ff 1f       	adc	r31, r31

0000357a <__tablejump__>:
    357a:	05 90       	lpm	r0, Z+
    357c:	f4 91       	lpm	r31, Z+
    357e:	e0 2d       	mov	r30, r0
    3580:	09 94       	ijmp

00003582 <_exit>:
    3582:	f8 94       	cli

00003584 <__stop_program>:
    3584:	ff cf       	rjmp	.-2      	; 0x3584 <__stop_program>
