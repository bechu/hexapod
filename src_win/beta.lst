
beta.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800200  00003522  000035b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003522  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013f  008002f0  008002f0  000036a6  2**0
                  ALLOC
  3 .debug_aranges 000004c0  00000000  00000000  000036a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000d35  00000000  00000000  00003b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00010fbc  00000000  00000000  0000489b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000045b5  00000000  00000000  00015857  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000421e  00000000  00000000  00019e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000940  00000000  00000000  0001e02c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002350  00000000  00000000  0001e96c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002177  00000000  00000000  00020cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00022e33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__ctors_end>
       4:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
       8:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
       c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      10:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      14:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      18:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      1c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      20:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      24:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      28:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      2c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      30:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      34:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      38:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      3c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      40:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      44:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      48:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      4c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      50:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      54:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      58:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      5c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      60:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      64:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      68:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      6c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      70:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      74:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      78:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      7c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      80:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      84:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      88:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      8c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      90:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__vector_36>
      94:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      98:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__vector_38>
      9c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      a0:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      a4:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      a8:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      ac:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      b0:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      b4:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      b8:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      bc:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__vector_47>
      c0:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__vector_48>
      c4:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      c8:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      cc:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      d0:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      d4:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      d8:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      dc:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      e0:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>

000000e4 <__c.1790>:
      e4:	6e 61 6e 00                                         nan.

000000e8 <__c.1788>:
      e8:	69 6e 66 00                                         inf.

000000ec <marquee_list>:
      ec:	52 02                                               R.

000000ee <bank1_list>:
      ee:	7a 02 90 02                                         z...

000000f2 <__timer0Compare>:
      f2:	2e 03 00 6e 00 02 47 00 35 00 02 44 00 06 03 03     ...n..G.5..D....
     102:	32 03 00 6e 00 04 48 00 35 00 04 44 00 04 33 03     2..n..H.5..D..3.

00000112 <__timer1Compare>:
     112:	36 03 01 6f 00 02 88 00 36 00 02 80 00 06 fd 02     6..o....6.......
     122:	3a 03 01 6f 00 04 8a 00 36 00 04 80 00 04 00 03     :..o....6.......
     132:	3e 03 01 6f 00 08 8c 00 36 00 08 80 00 02 03 03     >..o....6.......

00000142 <__timer2Compare>:
     142:	42 03 02 70 00 02 b3 00 37 00 02 b0 00 06 fa 02     B..p....7.......
     152:	46 03 02 70 00 04 b4 00 37 00 04 b0 00 04 3f 03     F..p....7.....?.

00000162 <__timer3Compare>:
     162:	4a 03 03 71 00 02 98 00 38 00 02 90 00 06 27 03     J..q....8.....'.
     172:	4e 03 03 71 00 04 9a 00 38 00 04 90 00 04 2a 03     N..q....8.....*.
     182:	52 03 03 71 00 08 9c 00 38 00 08 90 00 02 2d 03     R..q....8.....-.

00000192 <__timer4Compare>:
     192:	56 03 04 72 00 02 a8 00 39 00 02 a0 00 06 36 03     V..r....9.....6.
     1a2:	5a 03 04 72 00 04 aa 00 39 00 04 a0 00 04 39 03     Z..r....9.....9.
     1b2:	5e 03 04 72 00 08 ac 00 39 00 08 a0 00 02 3c 03     ^..r....9.....<.

000001c2 <__timer5Compare>:
     1c2:	62 03 05 73 00 02 28 01 3a 00 02 20 01 06 48 03     b..s..(.:.. ..H.
     1d2:	66 03 05 73 00 04 2a 01 3a 00 04 20 01 04 4b 03     f..s..*.:.. ..K.
     1e2:	6a 03 05 73 00 08 2c 01 3a 00 08 20 01 02 4e 03     j..s..,.:.. ..N.

000001f2 <pgm_Timers>:
     1f2:	6e 03 46 00 45 00 00 00 02 33 88 44 00 01 44 00     n.F.E....3.D..D.
     202:	02 45 00 08 00 00 01 f2 00 6e 00 01 35 00 01 00     .E.......n..5...
     212:	00 00 00 01 00 00 01 00 00 01 00 00 79 03 84 00     ............y...
     222:	81 00 ff 00 03 ff df 80 00 01 80 00 02 81 00 08     ................
     232:	81 00 10 12 01 6f 00 01 36 00 01 86 00 6f 00 20     .....o..6....o. 
     242:	36 00 20 81 00 40 00 00 84 03 b2 00 b1 00 00 ff     6. ..@..........
     252:	02 33 88 b0 00 01 b0 00 02 b1 00 08 00 00 01 42     .3.............B
     262:	01 70 00 01 37 00 01 00 00 00 00 01 00 00 01 00     .p..7...........
     272:	00 01 00 00 8f 03 94 00 91 00 ff 00 03 ff df 90     ................
     282:	00 01 90 00 02 91 00 08 91 00 10 62 01 71 00 01     ...........b.q..
     292:	38 00 01 96 00 71 00 20 38 00 20 91 00 40 30 03     8....q. 8. ..@0.
     2a2:	9a 03 a4 00 a1 00 ff 00 03 ff df a0 00 01 a0 00     ................
     2b2:	02 a1 00 08 a1 00 10 92 01 72 00 01 39 00 01 a6     .........r..9...
     2c2:	00 72 00 20 39 00 20 a1 00 40 42 03 a5 03 24 01     .r. 9. ..@B...$.
     2d2:	21 01 ff 00 03 ff df 20 01 01 20 01 02 21 01 08     !...... .. ..!..
     2e2:	21 01 10 c2 01 73 00 01 3a 00 01 26 01 73 00 20     !....s..:..&.s. 
     2f2:	3a 00 20 21 01 40 45 03                             :. !.@E.

000002fa <_B4>:
     2fa:	53 03 10                                            S..

000002fd <_B5>:
     2fd:	53 03 20                                            S. 

00000300 <_B6>:
     300:	53 03 40                                            S.@

00000303 <_B7>:
     303:	53 03 80                                            S..

00000306 <_C0>:
     306:	59 03 01                                            Y..

00000309 <_C1>:
     309:	59 03 02                                            Y..

0000030c <_C2>:
     30c:	59 03 04                                            Y..

0000030f <_C3>:
     30f:	59 03 08                                            Y..

00000312 <_C4>:
     312:	59 03 10                                            Y..

00000315 <_C5>:
     315:	59 03 20                                            Y. 

00000318 <_D2>:
     318:	5f 03 04                                            _..

0000031b <_D3>:
     31b:	5f 03 08                                            _..

0000031e <_D5>:
     31e:	5f 03 20                                            _. 

00000321 <_D6>:
     321:	5f 03 40                                            _.@

00000324 <_D7>:
     324:	5f 03 80                                            _..

00000327 <_E3>:
     327:	65 03 08                                            e..

0000032a <_E4>:
     32a:	65 03 10                                            e..

0000032d <_E5>:
     32d:	65 03 20                                            e. 

00000330 <_E7>:
     330:	65 03 80                                            e..

00000333 <_G5>:
     333:	6b 03 20                                            k. 

00000336 <_H3>:
     336:	71 03 08                                            q..

00000339 <_H4>:
     339:	71 03 10                                            q..

0000033c <_H5>:
     33c:	71 03 20                                            q. 

0000033f <_H6>:
     33f:	71 03 40                                            q.@

00000342 <_L0>:
     342:	77 03 01                                            w..

00000345 <_L1>:
     345:	77 03 02                                            w..

00000348 <_L3>:
     348:	77 03 08                                            w..

0000034b <_L4>:
     34b:	77 03 10                                            w..

0000034e <_L5>:
     34e:	77 03 20                                            w. 

00000351 <AVcc_MV>:
     351:	88 13                                               ..

00000353 <_PORTB>:
     353:	25 00 24 00 23 00                                   %.$.#.

00000359 <_PORTC>:
     359:	28 00 27 00 26 00                                   (.'.&.

0000035f <_PORTD>:
     35f:	2b 00 2a 00 29 00                                   +.*.).

00000365 <_PORTE>:
     365:	2e 00 2d 00 2c 00                                   ..-.,.

0000036b <_PORTG>:
     36b:	34 00 33 00 32 00                                   4.3.2.

00000371 <_PORTH>:
     371:	02 01 01 01 00 01                                   ......

00000377 <_PORTL>:
     377:	0b 01 0a 01 09 01                                   ......

0000037d <c_servoPWM>:
     37d:	b4 09 ac 09                                         ....

00000381 <__c.1911>:
     381:	20 45 72 72 6f 72 3a 25 64 0d 0a 00                  Error:%d...

0000038d <__c.1909>:
     38d:	55 73 65 72 00                                      User.

00000392 <__c.1907>:
     392:	57 65 62 62 6f 74 4c 69 62 00                       WebbotLib.

0000039c <atoz>:
     39c:	ee 3e 9c 7a 9e 8e f6 2e 0c 78 ae 1c aa 2a 3a ce     .>.z.....x...*:.
     3ac:	e6 0a b6 1e 38 7c b8 6e 76 da                       ....8|.nv.

000003b6 <digits>:
     3b6:	fc 60 da f2 66 b6 3e e0 fe e6                       .`..f.>...

000003c0 <c_hw_uart>:
     3c0:	5f 0f 15 10 31 10 ea 0f 1c 10 00 10 00 40 7a 10     _...1........@z.
     3d0:	f3 5a 00 a0 72 4e 18 09 00 10 a5 d4 e8 00 00 e8     .Z..rN..........
     3e0:	76 48 17 00 00 e4 0b 54 02 00 00 ca 9a 3b 00 00     vH.....T.....;..
     3f0:	00 e1 f5 05 00 00 80 96 98 00 00 00 40 42 0f 00     ............@B..
     400:	00 00 a0 86 01 00 00 00 10 27 00 00 00 00 e8 03     .........'......
     410:	00 00 00 00 64 00 00 00 00 00 0a 00 00 00 00 00     ....d...........
     420:	01 00 00 00 00 00 2c 76 d8 88 dc 67 4f 08 23 df     ......,v...gO.#.
     430:	c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51     ...Y.......S.:.Q
     440:	99 76 96 e8 e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c     .v.....&....b.@|
     450:	6f fc ef bc 9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a     o.....@...o....Z
     460:	2a f7 5c 93 6b 6c f9 67 6d c1 1b fc e0 e4 0d 47     *.\.kl.gm......G
     470:	fe f5 20 e6 b5 00 d0 ed 90 2e 03 00 94 35 77 05     .. ..........5w.
     480:	00 80 84 1e 08 00 00 20 4e 0a 00 00 00 c8 0c 33     ....... N......3
     490:	33 33 33 0f 98 6e 12 83 11 41 ef 8d 21 14 89 3b     333..n...A..!..;
     4a0:	e6 55 16 cf fe e6 db 18 d1 84 4b 38 1b f7 7c 1d     .U........K8..|.
     4b0:	90 1d a4 bb e4 24 20 32 84 72 5e 22 81 00 c9 f1     .....$ 2.r^"....
     4c0:	24 ec a1 e5 3d 27                                   $...='

000004c6 <__ctors_start>:
     4c6:	b4 02       	muls	r27, r20
     4c8:	2c 08       	sbc	r2, r12
     4ca:	3c 08       	sbc	r3, r12

000004cc <__ctors_end>:
     4cc:	11 24       	eor	r1, r1
     4ce:	1f be       	out	0x3f, r1	; 63
     4d0:	cf ef       	ldi	r28, 0xFF	; 255
     4d2:	d1 e2       	ldi	r29, 0x21	; 33
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	cd bf       	out	0x3d, r28	; 61

000004d8 <__do_copy_data>:
     4d8:	12 e0       	ldi	r17, 0x02	; 2
     4da:	a0 e0       	ldi	r26, 0x00	; 0
     4dc:	b2 e0       	ldi	r27, 0x02	; 2
     4de:	e2 e2       	ldi	r30, 0x22	; 34
     4e0:	f5 e3       	ldi	r31, 0x35	; 53
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <.do_copy_data_start>

000004e4 <.do_copy_data_loop>:
     4e4:	05 90       	lpm	r0, Z+
     4e6:	0d 92       	st	X+, r0

000004e8 <.do_copy_data_start>:
     4e8:	a0 3f       	cpi	r26, 0xF0	; 240
     4ea:	b1 07       	cpc	r27, r17
     4ec:	d9 f7       	brne	.-10     	; 0x4e4 <.do_copy_data_loop>

000004ee <__do_clear_bss>:
     4ee:	14 e0       	ldi	r17, 0x04	; 4
     4f0:	a0 ef       	ldi	r26, 0xF0	; 240
     4f2:	b2 e0       	ldi	r27, 0x02	; 2
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <.do_clear_bss_start>

000004f6 <.do_clear_bss_loop>:
     4f6:	1d 92       	st	X+, r1

000004f8 <.do_clear_bss_start>:
     4f8:	af 32       	cpi	r26, 0x2F	; 47
     4fa:	b1 07       	cpc	r27, r17
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <.do_clear_bss_loop>

000004fe <__do_global_ctors>:
     4fe:	14 e0       	ldi	r17, 0x04	; 4
     500:	cc ec       	ldi	r28, 0xCC	; 204
     502:	d4 e0       	ldi	r29, 0x04	; 4
     504:	04 c0       	rjmp	.+8      	; 0x50e <.do_global_ctors_start>

00000506 <.do_global_ctors_loop>:
     506:	22 97       	sbiw	r28, 0x02	; 2
     508:	fe 01       	movw	r30, r28
     50a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__tablejump__>

0000050e <.do_global_ctors_start>:
     50e:	c6 3c       	cpi	r28, 0xC6	; 198
     510:	d1 07       	cpc	r29, r17
     512:	c9 f7       	brne	.-14     	; 0x506 <.do_global_ctors_loop>
     514:	0e 94 bf 0b 	call	0x177e	; 0x177e <main>
     518:	0c 94 43 18 	jmp	0x3086	; 0x3086 <exit>

0000051c <__bad_interrupt>:
     51c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000520 <_Z41__static_initialization_and_destruction_0ii>:
	servo1.setSpeed(speed);
	servo2.setSpeed(speed);
	// -------- End   Actuators -------
*/
	return 0;
}
     520:	df 93       	push	r29
     522:	cf 93       	push	r28
     524:	00 d0       	rcall	.+0      	; 0x526 <_Z41__static_initialization_and_destruction_0ii+0x6>
     526:	00 d0       	rcall	.+0      	; 0x528 <_Z41__static_initialization_and_destruction_0ii+0x8>
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	9a 83       	std	Y+2, r25	; 0x02
     52e:	89 83       	std	Y+1, r24	; 0x01
     530:	7c 83       	std	Y+4, r23	; 0x04
     532:	6b 83       	std	Y+3, r22	; 0x03
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	9a 81       	ldd	r25, Y+2	; 0x02
     538:	81 30       	cpi	r24, 0x01	; 1
     53a:	91 05       	cpc	r25, r1
     53c:	71 f4       	brne	.+28     	; 0x55a <_Z41__static_initialization_and_destruction_0ii+0x3a>
     53e:	8b 81       	ldd	r24, Y+3	; 0x03
     540:	9c 81       	ldd	r25, Y+4	; 0x04
     542:	2f ef       	ldi	r18, 0xFF	; 255
     544:	8f 3f       	cpi	r24, 0xFF	; 255
     546:	92 07       	cpc	r25, r18
     548:	41 f4       	brne	.+16     	; 0x55a <_Z41__static_initialization_and_destruction_0ii+0x3a>
#include "hardware.h"
#include "protocol.h"
#include "services.h"

Protocol test;
     54a:	80 ef       	ldi	r24, 0xF0	; 240
     54c:	92 e0       	ldi	r25, 0x02	; 2
     54e:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN8ProtocolC1Ev>
PingService ping;
     552:	89 e2       	ldi	r24, 0x29	; 41
     554:	93 e0       	ldi	r25, 0x03	; 3
     556:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN11PingServiceC1Ev>
	servo1.setSpeed(speed);
	servo2.setSpeed(speed);
	// -------- End   Actuators -------
*/
	return 0;
}
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	cf 91       	pop	r28
     564:	df 91       	pop	r29
     566:	08 95       	ret

00000568 <_GLOBAL__I_test>:
     568:	df 93       	push	r29
     56a:	cf 93       	push	r28
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	6f ef       	ldi	r22, 0xFF	; 255
     576:	7f ef       	ldi	r23, 0xFF	; 255
     578:	0e 94 90 02 	call	0x520	; 0x520 <_Z41__static_initialization_and_destruction_0ii>
     57c:	cf 91       	pop	r28
     57e:	df 91       	pop	r29
     580:	08 95       	ret

00000582 <appControl>:
	return 0;
}


// This is the main loop
TICK_COUNT appControl(LOOP_COUNT loopCount, TICK_COUNT loopStart) {
     582:	df 93       	push	r29
     584:	cf 93       	push	r28
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
     58a:	28 97       	sbiw	r28, 0x08	; 8
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
     596:	69 83       	std	Y+1, r22	; 0x01
     598:	7a 83       	std	Y+2, r23	; 0x02
     59a:	8b 83       	std	Y+3, r24	; 0x03
     59c:	9c 83       	std	Y+4, r25	; 0x04
     59e:	2d 83       	std	Y+5, r18	; 0x05
     5a0:	3e 83       	std	Y+6, r19	; 0x06
     5a2:	4f 83       	std	Y+7, r20	; 0x07
     5a4:	58 87       	std	Y+8, r21	; 0x08

    
	// treat input/output for the protocol
	test.treatIO();
     5a6:	80 ef       	ldi	r24, 0xF0	; 240
     5a8:	92 e0       	ldi	r25, 0x02	; 2
     5aa:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN8Protocol7treatIOEv>
	if(test.haveMessage == true)
     5ae:	80 91 28 03 	lds	r24, 0x0328
     5b2:	88 2f       	mov	r24, r24
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	2f ef       	ldi	r18, 0xFF	; 255
     5b8:	8f 3f       	cpi	r24, 0xFF	; 255
     5ba:	92 07       	cpc	r25, r18
     5bc:	49 f4       	brne	.+18     	; 0x5d0 <appControl+0x4e>
			test._write("true", 4);
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	32 e0       	ldi	r19, 0x02	; 2
     5c2:	80 ef       	ldi	r24, 0xF0	; 240
     5c4:	92 e0       	ldi	r25, 0x02	; 2
     5c6:	b9 01       	movw	r22, r18
     5c8:	44 e0       	ldi	r20, 0x04	; 4
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN8Protocol6_writeEPci>
	// Set speed for all motors/servos
	servo1.setSpeed(speed);
	servo2.setSpeed(speed);
	// -------- End   Actuators -------
*/
	return 0;
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	a0 e0       	ldi	r26, 0x00	; 0
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
}
     5d8:	bc 01       	movw	r22, r24
     5da:	cd 01       	movw	r24, r26
     5dc:	28 96       	adiw	r28, 0x08	; 8
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	cf 91       	pop	r28
     5ea:	df 91       	pop	r29
     5ec:	08 95       	ret

000005ee <appInitSoftware>:
	initHardware();
}


// Initialise the software
TICK_COUNT appInitSoftware(TICK_COUNT loopStart){
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	00 d0       	rcall	.+0      	; 0x5f4 <appInitSoftware+0x6>
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <appInitSoftware+0x8>
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	69 83       	std	Y+1, r22	; 0x01
     5fc:	7a 83       	std	Y+2, r23	; 0x02
     5fe:	8b 83       	std	Y+3, r24	; 0x03
     600:	9c 83       	std	Y+4, r25	; 0x04
	test.init(&uart1);
     602:	80 ef       	ldi	r24, 0xF0	; 240
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	27 ed       	ldi	r18, 0xD7	; 215
     608:	33 e0       	ldi	r19, 0x03	; 3
     60a:	b9 01       	movw	r22, r18
     60c:	0e 94 4b 03 	call	0x696	; 0x696 <_ZN8Protocol4initEP6UartHW>
    ping.init(&test);
     610:	89 e2       	ldi	r24, 0x29	; 41
     612:	93 e0       	ldi	r25, 0x03	; 3
     614:	20 ef       	ldi	r18, 0xF0	; 240
     616:	32 e0       	ldi	r19, 0x02	; 2
     618:	b9 01       	movw	r22, r18
     61a:	0e 94 09 06 	call	0xc12	; 0xc12 <_ZN7Service4initEP8Protocol>
	return 0;
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	a0 e0       	ldi	r26, 0x00	; 0
     624:	b0 e0       	ldi	r27, 0x00	; 0
}
     626:	bc 01       	movw	r22, r24
     628:	cd 01       	movw	r24, r26
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	cf 91       	pop	r28
     634:	df 91       	pop	r29
     636:	08 95       	ret

00000638 <appInitHardware>:

Protocol test;
PingService ping;

// Initialise the hardware
void appInitHardware(void) {
     638:	df 93       	push	r29
     63a:	cf 93       	push	r28
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
	initHardware();
     640:	0e 94 a0 06 	call	0xd40	; 0xd40 <initHardware>
}
     644:	cf 91       	pop	r28
     646:	df 91       	pop	r29
     648:	08 95       	ret

0000064a <_ZN6PacketC2Ev>:
#include <stdio.h>
#include <string.h>
#include "protocol.h"

Packet::Packet()
     64a:	df 93       	push	r29
     64c:	cf 93       	push	r28
     64e:	00 d0       	rcall	.+0      	; 0x650 <_ZN6PacketC2Ev+0x6>
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	9a 83       	std	Y+2, r25	; 0x02
     656:	89 83       	std	Y+1, r24	; 0x01
{
	command = PROT_ERROR;
     658:	e9 81       	ldd	r30, Y+1	; 0x01
     65a:	fa 81       	ldd	r31, Y+2	; 0x02
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	80 83       	st	Z, r24
	len = 0;
     660:	e9 81       	ldd	r30, Y+1	; 0x01
     662:	fa 81       	ldd	r31, Y+2	; 0x02
     664:	11 82       	std	Z+1, r1	; 0x01
}
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	cf 91       	pop	r28
     66c:	df 91       	pop	r29
     66e:	08 95       	ret

00000670 <_ZN6PacketC1Ev>:
#include <stdio.h>
#include <string.h>
#include "protocol.h"

Packet::Packet()
     670:	df 93       	push	r29
     672:	cf 93       	push	r28
     674:	00 d0       	rcall	.+0      	; 0x676 <_ZN6PacketC1Ev+0x6>
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
     67a:	9a 83       	std	Y+2, r25	; 0x02
     67c:	89 83       	std	Y+1, r24	; 0x01
{
	command = PROT_ERROR;
     67e:	e9 81       	ldd	r30, Y+1	; 0x01
     680:	fa 81       	ldd	r31, Y+2	; 0x02
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 83       	st	Z, r24
	len = 0;
     686:	e9 81       	ldd	r30, Y+1	; 0x01
     688:	fa 81       	ldd	r31, Y+2	; 0x02
     68a:	11 82       	std	Z+1, r1	; 0x01
}
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	cf 91       	pop	r28
     692:	df 91       	pop	r29
     694:	08 95       	ret

00000696 <_ZN8Protocol4initEP6UartHW>:
	memset(in, 0, Protocol::BUFFER_SIZE);
	memset(out, 0, Protocol::BUFFER_SIZE);
	haveMessage = false;
}

void Protocol::init(UartHW *uart)
     696:	df 93       	push	r29
     698:	cf 93       	push	r28
     69a:	00 d0       	rcall	.+0      	; 0x69c <_ZN8Protocol4initEP6UartHW+0x6>
     69c:	00 d0       	rcall	.+0      	; 0x69e <_ZN8Protocol4initEP6UartHW+0x8>
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	9a 83       	std	Y+2, r25	; 0x02
     6a4:	89 83       	std	Y+1, r24	; 0x01
     6a6:	7c 83       	std	Y+4, r23	; 0x04
     6a8:	6b 83       	std	Y+3, r22	; 0x03
{
	_uart = uart;
     6aa:	e9 81       	ldd	r30, Y+1	; 0x01
     6ac:	fa 81       	ldd	r31, Y+2	; 0x02
     6ae:	8b 81       	ldd	r24, Y+3	; 0x03
     6b0:	9c 81       	ldd	r25, Y+4	; 0x04
     6b2:	95 87       	std	Z+13, r25	; 0x0d
     6b4:	84 87       	std	Z+12, r24	; 0x0c
}
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	cf 91       	pop	r28
     6c0:	df 91       	pop	r29
     6c2:	08 95       	ret

000006c4 <_ZN8Protocol4sendER6Packet>:
        return true;
    }
	return false;
}

void Protocol::send(Packet &msg)
     6c4:	df 93       	push	r29
     6c6:	cf 93       	push	r28
     6c8:	00 d0       	rcall	.+0      	; 0x6ca <_ZN8Protocol4sendER6Packet+0x6>
     6ca:	00 d0       	rcall	.+0      	; 0x6cc <_ZN8Protocol4sendER6Packet+0x8>
     6cc:	00 d0       	rcall	.+0      	; 0x6ce <_ZN8Protocol4sendER6Packet+0xa>
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	9c 83       	std	Y+4, r25	; 0x04
     6d4:	8b 83       	std	Y+3, r24	; 0x03
     6d6:	7e 83       	std	Y+6, r23	; 0x06
     6d8:	6d 83       	std	Y+5, r22	; 0x05
{
    if((out_offset + msg.len + 2) < Protocol::BUFFER_SIZE)
     6da:	eb 81       	ldd	r30, Y+3	; 0x03
     6dc:	fc 81       	ldd	r31, Y+4	; 0x04
     6de:	87 a9       	ldd	r24, Z+55	; 0x37
     6e0:	28 2f       	mov	r18, r24
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	ed 81       	ldd	r30, Y+5	; 0x05
     6e6:	fe 81       	ldd	r31, Y+6	; 0x06
     6e8:	81 81       	ldd	r24, Z+1	; 0x01
     6ea:	88 2f       	mov	r24, r24
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	82 0f       	add	r24, r18
     6f0:	93 1f       	adc	r25, r19
     6f2:	02 96       	adiw	r24, 0x02	; 2
     6f4:	84 31       	cpi	r24, 0x14	; 20
     6f6:	91 05       	cpc	r25, r1
     6f8:	0c f0       	brlt	.+2      	; 0x6fc <_ZN8Protocol4sendER6Packet+0x38>
     6fa:	54 c0       	rjmp	.+168    	; 0x7a4 <_ZN8Protocol4sendER6Packet+0xe0>
    {
        out[out_offset++] = msg.command;
     6fc:	eb 81       	ldd	r30, Y+3	; 0x03
     6fe:	fc 81       	ldd	r31, Y+4	; 0x04
     700:	57 a9       	ldd	r21, Z+55	; 0x37
     702:	25 2f       	mov	r18, r21
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	ed 81       	ldd	r30, Y+5	; 0x05
     708:	fe 81       	ldd	r31, Y+6	; 0x06
     70a:	40 81       	ld	r20, Z
     70c:	8b 81       	ldd	r24, Y+3	; 0x03
     70e:	9c 81       	ldd	r25, Y+4	; 0x04
     710:	82 0f       	add	r24, r18
     712:	93 1f       	adc	r25, r19
     714:	fc 01       	movw	r30, r24
     716:	b2 96       	adiw	r30, 0x22	; 34
     718:	40 83       	st	Z, r20
     71a:	85 2f       	mov	r24, r21
     71c:	8f 5f       	subi	r24, 0xFF	; 255
     71e:	eb 81       	ldd	r30, Y+3	; 0x03
     720:	fc 81       	ldd	r31, Y+4	; 0x04
     722:	87 ab       	std	Z+55, r24	; 0x37
        out[out_offset++] = msg.len;
     724:	eb 81       	ldd	r30, Y+3	; 0x03
     726:	fc 81       	ldd	r31, Y+4	; 0x04
     728:	57 a9       	ldd	r21, Z+55	; 0x37
     72a:	25 2f       	mov	r18, r21
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	ed 81       	ldd	r30, Y+5	; 0x05
     730:	fe 81       	ldd	r31, Y+6	; 0x06
     732:	41 81       	ldd	r20, Z+1	; 0x01
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	9c 81       	ldd	r25, Y+4	; 0x04
     738:	82 0f       	add	r24, r18
     73a:	93 1f       	adc	r25, r19
     73c:	fc 01       	movw	r30, r24
     73e:	b2 96       	adiw	r30, 0x22	; 34
     740:	40 83       	st	Z, r20
     742:	85 2f       	mov	r24, r21
     744:	8f 5f       	subi	r24, 0xFF	; 255
     746:	eb 81       	ldd	r30, Y+3	; 0x03
     748:	fc 81       	ldd	r31, Y+4	; 0x04
     74a:	87 ab       	std	Z+55, r24	; 0x37
        for(int i=0;i<msg.len;i++)
     74c:	1a 82       	std	Y+2, r1	; 0x02
     74e:	19 82       	std	Y+1, r1	; 0x01
     750:	1f c0       	rjmp	.+62     	; 0x790 <_ZN8Protocol4sendER6Packet+0xcc>
            out[out_offset++] = msg.data[i];
     752:	eb 81       	ldd	r30, Y+3	; 0x03
     754:	fc 81       	ldd	r31, Y+4	; 0x04
     756:	67 a9       	ldd	r22, Z+55	; 0x37
     758:	46 2f       	mov	r20, r22
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	29 81       	ldd	r18, Y+1	; 0x01
     75e:	3a 81       	ldd	r19, Y+2	; 0x02
     760:	8d 81       	ldd	r24, Y+5	; 0x05
     762:	9e 81       	ldd	r25, Y+6	; 0x06
     764:	82 0f       	add	r24, r18
     766:	93 1f       	adc	r25, r19
     768:	fc 01       	movw	r30, r24
     76a:	32 96       	adiw	r30, 0x02	; 2
     76c:	20 81       	ld	r18, Z
     76e:	8b 81       	ldd	r24, Y+3	; 0x03
     770:	9c 81       	ldd	r25, Y+4	; 0x04
     772:	84 0f       	add	r24, r20
     774:	95 1f       	adc	r25, r21
     776:	fc 01       	movw	r30, r24
     778:	b2 96       	adiw	r30, 0x22	; 34
     77a:	20 83       	st	Z, r18
     77c:	86 2f       	mov	r24, r22
     77e:	8f 5f       	subi	r24, 0xFF	; 255
     780:	eb 81       	ldd	r30, Y+3	; 0x03
     782:	fc 81       	ldd	r31, Y+4	; 0x04
     784:	87 ab       	std	Z+55, r24	; 0x37
{
    if((out_offset + msg.len + 2) < Protocol::BUFFER_SIZE)
    {
        out[out_offset++] = msg.command;
        out[out_offset++] = msg.len;
        for(int i=0;i<msg.len;i++)
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	9a 81       	ldd	r25, Y+2	; 0x02
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	9a 83       	std	Y+2, r25	; 0x02
     78e:	89 83       	std	Y+1, r24	; 0x01
     790:	ed 81       	ldd	r30, Y+5	; 0x05
     792:	fe 81       	ldd	r31, Y+6	; 0x06
     794:	81 81       	ldd	r24, Z+1	; 0x01
     796:	28 2f       	mov	r18, r24
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	9a 81       	ldd	r25, Y+2	; 0x02
     79e:	82 17       	cp	r24, r18
     7a0:	93 07       	cpc	r25, r19
     7a2:	bc f2       	brlt	.-82     	; 0x752 <_ZN8Protocol4sendER6Packet+0x8e>
            out[out_offset++] = msg.data[i];
    }
}
     7a4:	26 96       	adiw	r28, 0x06	; 6
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	cf 91       	pop	r28
     7b2:	df 91       	pop	r29
     7b4:	08 95       	ret

000007b6 <_ZN8Protocol6_writeEPci>:

//////////////////////////////////////////
//
// PRIVATE
//////////////////////////////////////////////
void Protocol::_write(char *data, int size)
     7b6:	df 93       	push	r29
     7b8:	cf 93       	push	r28
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	28 97       	sbiw	r28, 0x08	; 8
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
     7ca:	9c 83       	std	Y+4, r25	; 0x04
     7cc:	8b 83       	std	Y+3, r24	; 0x03
     7ce:	7e 83       	std	Y+6, r23	; 0x06
     7d0:	6d 83       	std	Y+5, r22	; 0x05
     7d2:	58 87       	std	Y+8, r21	; 0x08
     7d4:	4f 83       	std	Y+7, r20	; 0x07
{
	char *p = data;
     7d6:	8d 81       	ldd	r24, Y+5	; 0x05
     7d8:	9e 81       	ldd	r25, Y+6	; 0x06
     7da:	9a 83       	std	Y+2, r25	; 0x02
     7dc:	89 83       	std	Y+1, r24	; 0x01
     7de:	19 c0       	rjmp	.+50     	; 0x812 <_ZN8Protocol6_writeEPci+0x5c>
	while(p-data < size)
	{
		_uart->write(*p);
     7e0:	eb 81       	ldd	r30, Y+3	; 0x03
     7e2:	fc 81       	ldd	r31, Y+4	; 0x04
     7e4:	04 84       	ldd	r0, Z+12	; 0x0c
     7e6:	f5 85       	ldd	r31, Z+13	; 0x0d
     7e8:	e0 2d       	mov	r30, r0
     7ea:	01 90       	ld	r0, Z+
     7ec:	f0 81       	ld	r31, Z
     7ee:	e0 2d       	mov	r30, r0
     7f0:	40 81       	ld	r20, Z
     7f2:	51 81       	ldd	r21, Z+1	; 0x01
     7f4:	eb 81       	ldd	r30, Y+3	; 0x03
     7f6:	fc 81       	ldd	r31, Y+4	; 0x04
     7f8:	84 85       	ldd	r24, Z+12	; 0x0c
     7fa:	95 85       	ldd	r25, Z+13	; 0x0d
     7fc:	e9 81       	ldd	r30, Y+1	; 0x01
     7fe:	fa 81       	ldd	r31, Y+2	; 0x02
     800:	20 81       	ld	r18, Z
     802:	62 2f       	mov	r22, r18
     804:	fa 01       	movw	r30, r20
     806:	09 95       	icall
		p++;
     808:	89 81       	ldd	r24, Y+1	; 0x01
     80a:	9a 81       	ldd	r25, Y+2	; 0x02
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	9a 83       	std	Y+2, r25	; 0x02
     810:	89 83       	std	Y+1, r24	; 0x01
// PRIVATE
//////////////////////////////////////////////
void Protocol::_write(char *data, int size)
{
	char *p = data;
	while(p-data < size)
     812:	29 81       	ldd	r18, Y+1	; 0x01
     814:	3a 81       	ldd	r19, Y+2	; 0x02
     816:	8d 81       	ldd	r24, Y+5	; 0x05
     818:	9e 81       	ldd	r25, Y+6	; 0x06
     81a:	28 1b       	sub	r18, r24
     81c:	39 0b       	sbc	r19, r25
     81e:	8f 81       	ldd	r24, Y+7	; 0x07
     820:	98 85       	ldd	r25, Y+8	; 0x08
     822:	28 17       	cp	r18, r24
     824:	39 07       	cpc	r19, r25
     826:	e4 f2       	brlt	.-72     	; 0x7e0 <_ZN8Protocol6_writeEPci+0x2a>
	{
		_uart->write(*p);
		p++;
	}
}
     828:	28 96       	adiw	r28, 0x08	; 8
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	cf 91       	pop	r28
     836:	df 91       	pop	r29
     838:	08 95       	ret

0000083a <_ZN8Protocol7receiveEv>:
        _write(out, out_offset);
        out_offset = 0;
    }
}

bool Protocol::receive()
     83a:	df 93       	push	r29
     83c:	cf 93       	push	r28
     83e:	00 d0       	rcall	.+0      	; 0x840 <_ZN8Protocol7receiveEv+0x6>
     840:	00 d0       	rcall	.+0      	; 0x842 <_ZN8Protocol7receiveEv+0x8>
     842:	0f 92       	push	r0
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	9c 83       	std	Y+4, r25	; 0x04
     84a:	8b 83       	std	Y+3, r24	; 0x03
{
    if(in_offset >= 2)
     84c:	eb 81       	ldd	r30, Y+3	; 0x03
     84e:	fc 81       	ldd	r31, Y+4	; 0x04
     850:	86 a9       	ldd	r24, Z+54	; 0x36
     852:	82 30       	cpi	r24, 0x02	; 2
     854:	08 f4       	brcc	.+2      	; 0x858 <_ZN8Protocol7receiveEv+0x1e>
     856:	42 c0       	rjmp	.+132    	; 0x8dc <_ZN8Protocol7receiveEv+0xa2>
    {
        msg.command = in[0];
     858:	eb 81       	ldd	r30, Y+3	; 0x03
     85a:	fc 81       	ldd	r31, Y+4	; 0x04
     85c:	86 85       	ldd	r24, Z+14	; 0x0e
     85e:	eb 81       	ldd	r30, Y+3	; 0x03
     860:	fc 81       	ldd	r31, Y+4	; 0x04
     862:	80 83       	st	Z, r24
        msg.len = in[1];
     864:	eb 81       	ldd	r30, Y+3	; 0x03
     866:	fc 81       	ldd	r31, Y+4	; 0x04
     868:	87 85       	ldd	r24, Z+15	; 0x0f
     86a:	eb 81       	ldd	r30, Y+3	; 0x03
     86c:	fc 81       	ldd	r31, Y+4	; 0x04
     86e:	81 83       	std	Z+1, r24	; 0x01
        for(int i=0;i<msg.len;i++)
     870:	1a 82       	std	Y+2, r1	; 0x02
     872:	19 82       	std	Y+1, r1	; 0x01
     874:	1a c0       	rjmp	.+52     	; 0x8aa <_ZN8Protocol7receiveEv+0x70>
        {
            msg.data[i] = in[i+2];
     876:	49 81       	ldd	r20, Y+1	; 0x01
     878:	5a 81       	ldd	r21, Y+2	; 0x02
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	9a 81       	ldd	r25, Y+2	; 0x02
     87e:	9c 01       	movw	r18, r24
     880:	2e 5f       	subi	r18, 0xFE	; 254
     882:	3f 4f       	sbci	r19, 0xFF	; 255
     884:	8b 81       	ldd	r24, Y+3	; 0x03
     886:	9c 81       	ldd	r25, Y+4	; 0x04
     888:	82 0f       	add	r24, r18
     88a:	93 1f       	adc	r25, r19
     88c:	fc 01       	movw	r30, r24
     88e:	3e 96       	adiw	r30, 0x0e	; 14
     890:	20 81       	ld	r18, Z
     892:	8b 81       	ldd	r24, Y+3	; 0x03
     894:	9c 81       	ldd	r25, Y+4	; 0x04
     896:	84 0f       	add	r24, r20
     898:	95 1f       	adc	r25, r21
     89a:	fc 01       	movw	r30, r24
     89c:	32 96       	adiw	r30, 0x02	; 2
     89e:	20 83       	st	Z, r18
{
    if(in_offset >= 2)
    {
        msg.command = in[0];
        msg.len = in[1];
        for(int i=0;i<msg.len;i++)
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	9a 81       	ldd	r25, Y+2	; 0x02
     8a4:	01 96       	adiw	r24, 0x01	; 1
     8a6:	9a 83       	std	Y+2, r25	; 0x02
     8a8:	89 83       	std	Y+1, r24	; 0x01
     8aa:	eb 81       	ldd	r30, Y+3	; 0x03
     8ac:	fc 81       	ldd	r31, Y+4	; 0x04
     8ae:	81 81       	ldd	r24, Z+1	; 0x01
     8b0:	28 2f       	mov	r18, r24
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	89 81       	ldd	r24, Y+1	; 0x01
     8b6:	9a 81       	ldd	r25, Y+2	; 0x02
     8b8:	82 17       	cp	r24, r18
     8ba:	93 07       	cpc	r25, r19
     8bc:	e4 f2       	brlt	.-72     	; 0x876 <_ZN8Protocol7receiveEv+0x3c>
        {
            msg.data[i] = in[i+2];
        }
        in_offset = 0;
     8be:	eb 81       	ldd	r30, Y+3	; 0x03
     8c0:	fc 81       	ldd	r31, Y+4	; 0x04
     8c2:	16 aa       	std	Z+54, r1	; 0x36
		_write("true", 4);
     8c4:	25 e0       	ldi	r18, 0x05	; 5
     8c6:	32 e0       	ldi	r19, 0x02	; 2
     8c8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ca:	9c 81       	ldd	r25, Y+4	; 0x04
     8cc:	b9 01       	movw	r22, r18
     8ce:	44 e0       	ldi	r20, 0x04	; 4
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN8Protocol6_writeEPci>
        return true;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	8d 83       	std	Y+5, r24	; 0x05
     8da:	01 c0       	rjmp	.+2      	; 0x8de <_ZN8Protocol7receiveEv+0xa4>
    }
	return false;
     8dc:	1d 82       	std	Y+5, r1	; 0x05
     8de:	8d 81       	ldd	r24, Y+5	; 0x05
}
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	cf 91       	pop	r28
     8ec:	df 91       	pop	r29
     8ee:	08 95       	ret

000008f0 <_ZNK4Uart15isRxBufferEmptyEv>:
	}
	void flushTx(void) const{
		__uartFlushTransmitBuffer(m_cstr);
	}

	boolean isRxBufferEmpty(void) const{
     8f0:	df 93       	push	r29
     8f2:	cf 93       	push	r28
     8f4:	00 d0       	rcall	.+0      	; 0x8f6 <_ZNK4Uart15isRxBufferEmptyEv+0x6>
     8f6:	cd b7       	in	r28, 0x3d	; 61
     8f8:	de b7       	in	r29, 0x3e	; 62
     8fa:	9a 83       	std	Y+2, r25	; 0x02
     8fc:	89 83       	std	Y+1, r24	; 0x01
		return __uartReceiveBufferIsEmpty(m_cstr);
     8fe:	e9 81       	ldd	r30, Y+1	; 0x01
     900:	fa 81       	ldd	r31, Y+2	; 0x02
     902:	80 89       	ldd	r24, Z+16	; 0x10
     904:	91 89       	ldd	r25, Z+17	; 0x11
     906:	0e 94 43 11 	call	0x2286	; 0x2286 <__uartReceiveBufferIsEmpty>
	}
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	cf 91       	pop	r28
     910:	df 91       	pop	r29
     912:	08 95       	ret

00000914 <_ZN8Protocol5_readEPci>:
		_uart->write(*p);
		p++;
	}
}

char Protocol::_read(char *data, int size)
     914:	df 93       	push	r29
     916:	cf 93       	push	r28
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
     91c:	2a 97       	sbiw	r28, 0x0a	; 10
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	de bf       	out	0x3e, r29	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	cd bf       	out	0x3d, r28	; 61
     928:	9d 83       	std	Y+5, r25	; 0x05
     92a:	8c 83       	std	Y+4, r24	; 0x04
     92c:	7f 83       	std	Y+7, r23	; 0x07
     92e:	6e 83       	std	Y+6, r22	; 0x06
     930:	59 87       	std	Y+9, r21	; 0x09
     932:	48 87       	std	Y+8, r20	; 0x08
{
	char *p = data;
     934:	8e 81       	ldd	r24, Y+6	; 0x06
     936:	9f 81       	ldd	r25, Y+7	; 0x07
     938:	9b 83       	std	Y+3, r25	; 0x03
     93a:	8a 83       	std	Y+2, r24	; 0x02
	char cpt = 0;
     93c:	19 82       	std	Y+1, r1	; 0x01
     93e:	1c c0       	rjmp	.+56     	; 0x978 <_ZN8Protocol5_readEPci+0x64>
	while(_uart->isRxBufferEmpty() == false && p < data+size)
	{
		*p = _uart->read();
     940:	ec 81       	ldd	r30, Y+4	; 0x04
     942:	fd 81       	ldd	r31, Y+5	; 0x05
     944:	04 84       	ldd	r0, Z+12	; 0x0c
     946:	f5 85       	ldd	r31, Z+13	; 0x0d
     948:	e0 2d       	mov	r30, r0
     94a:	80 81       	ld	r24, Z
     94c:	91 81       	ldd	r25, Z+1	; 0x01
     94e:	fc 01       	movw	r30, r24
     950:	32 96       	adiw	r30, 0x02	; 2
     952:	20 81       	ld	r18, Z
     954:	31 81       	ldd	r19, Z+1	; 0x01
     956:	ec 81       	ldd	r30, Y+4	; 0x04
     958:	fd 81       	ldd	r31, Y+5	; 0x05
     95a:	84 85       	ldd	r24, Z+12	; 0x0c
     95c:	95 85       	ldd	r25, Z+13	; 0x0d
     95e:	f9 01       	movw	r30, r18
     960:	09 95       	icall
     962:	ea 81       	ldd	r30, Y+2	; 0x02
     964:	fb 81       	ldd	r31, Y+3	; 0x03
     966:	80 83       	st	Z, r24
		p++;
     968:	8a 81       	ldd	r24, Y+2	; 0x02
     96a:	9b 81       	ldd	r25, Y+3	; 0x03
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	9b 83       	std	Y+3, r25	; 0x03
     970:	8a 83       	std	Y+2, r24	; 0x02
		cpt++;
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	8f 5f       	subi	r24, 0xFF	; 255
     976:	89 83       	std	Y+1, r24	; 0x01

char Protocol::_read(char *data, int size)
{
	char *p = data;
	char cpt = 0;
	while(_uart->isRxBufferEmpty() == false && p < data+size)
     978:	ec 81       	ldd	r30, Y+4	; 0x04
     97a:	fd 81       	ldd	r31, Y+5	; 0x05
     97c:	84 85       	ldd	r24, Z+12	; 0x0c
     97e:	95 85       	ldd	r25, Z+13	; 0x0d
     980:	0e 94 78 04 	call	0x8f0	; 0x8f0 <_ZNK4Uart15isRxBufferEmptyEv>
     984:	88 23       	and	r24, r24
     986:	71 f4       	brne	.+28     	; 0x9a4 <_ZN8Protocol5_readEPci+0x90>
     988:	28 85       	ldd	r18, Y+8	; 0x08
     98a:	39 85       	ldd	r19, Y+9	; 0x09
     98c:	8e 81       	ldd	r24, Y+6	; 0x06
     98e:	9f 81       	ldd	r25, Y+7	; 0x07
     990:	28 0f       	add	r18, r24
     992:	39 1f       	adc	r19, r25
     994:	8a 81       	ldd	r24, Y+2	; 0x02
     996:	9b 81       	ldd	r25, Y+3	; 0x03
     998:	82 17       	cp	r24, r18
     99a:	93 07       	cpc	r25, r19
     99c:	18 f4       	brcc	.+6      	; 0x9a4 <_ZN8Protocol5_readEPci+0x90>
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	8a 87       	std	Y+10, r24	; 0x0a
     9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <_ZN8Protocol5_readEPci+0x92>
     9a4:	1a 86       	std	Y+10, r1	; 0x0a
     9a6:	8a 85       	ldd	r24, Y+10	; 0x0a
     9a8:	88 23       	and	r24, r24
     9aa:	51 f6       	brne	.-108    	; 0x940 <_ZN8Protocol5_readEPci+0x2c>
	{
		*p = _uart->read();
		p++;
		cpt++;
	}
	return cpt;
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
}
     9ae:	2a 96       	adiw	r28, 0x0a	; 10
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	cf 91       	pop	r28
     9bc:	df 91       	pop	r29
     9be:	08 95       	ret

000009c0 <_ZN8Protocol7treatIOEv>:
void Protocol::init(UartHW *uart)
{
	_uart = uart;
}

void Protocol::treatIO()
     9c0:	1f 93       	push	r17
     9c2:	df 93       	push	r29
     9c4:	cf 93       	push	r28
     9c6:	00 d0       	rcall	.+0      	; 0x9c8 <_ZN8Protocol7treatIOEv+0x8>
     9c8:	00 d0       	rcall	.+0      	; 0x9ca <_ZN8Protocol7treatIOEv+0xa>
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	9c 83       	std	Y+4, r25	; 0x04
     9d0:	8b 83       	std	Y+3, r24	; 0x03
{
	in_offset += _read(in+in_offset, Protocol::BUFFER_SIZE-in_offset);
     9d2:	eb 81       	ldd	r30, Y+3	; 0x03
     9d4:	fc 81       	ldd	r31, Y+4	; 0x04
     9d6:	16 a9       	ldd	r17, Z+54	; 0x36
     9d8:	8b 81       	ldd	r24, Y+3	; 0x03
     9da:	9c 81       	ldd	r25, Y+4	; 0x04
     9dc:	9c 01       	movw	r18, r24
     9de:	22 5f       	subi	r18, 0xF2	; 242
     9e0:	3f 4f       	sbci	r19, 0xFF	; 255
     9e2:	eb 81       	ldd	r30, Y+3	; 0x03
     9e4:	fc 81       	ldd	r31, Y+4	; 0x04
     9e6:	86 a9       	ldd	r24, Z+54	; 0x36
     9e8:	88 2f       	mov	r24, r24
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	a9 01       	movw	r20, r18
     9ee:	48 0f       	add	r20, r24
     9f0:	59 1f       	adc	r21, r25
     9f2:	eb 81       	ldd	r30, Y+3	; 0x03
     9f4:	fc 81       	ldd	r31, Y+4	; 0x04
     9f6:	86 a9       	ldd	r24, Z+54	; 0x36
     9f8:	28 2f       	mov	r18, r24
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	84 e1       	ldi	r24, 0x14	; 20
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	bc 01       	movw	r22, r24
     a02:	62 1b       	sub	r22, r18
     a04:	73 0b       	sbc	r23, r19
     a06:	9b 01       	movw	r18, r22
     a08:	8b 81       	ldd	r24, Y+3	; 0x03
     a0a:	9c 81       	ldd	r25, Y+4	; 0x04
     a0c:	ba 01       	movw	r22, r20
     a0e:	a9 01       	movw	r20, r18
     a10:	0e 94 8a 04 	call	0x914	; 0x914 <_ZN8Protocol5_readEPci>
     a14:	81 0f       	add	r24, r17
     a16:	eb 81       	ldd	r30, Y+3	; 0x03
     a18:	fc 81       	ldd	r31, Y+4	; 0x04
     a1a:	86 ab       	std	Z+54, r24	; 0x36
    if(in_offset >= 2)
     a1c:	eb 81       	ldd	r30, Y+3	; 0x03
     a1e:	fc 81       	ldd	r31, Y+4	; 0x04
     a20:	86 a9       	ldd	r24, Z+54	; 0x36
     a22:	82 30       	cpi	r24, 0x02	; 2
     a24:	d8 f1       	brcs	.+118    	; 0xa9c <_ZN8Protocol7treatIOEv+0xdc>
    {
        msg.command = in[0];
     a26:	eb 81       	ldd	r30, Y+3	; 0x03
     a28:	fc 81       	ldd	r31, Y+4	; 0x04
     a2a:	86 85       	ldd	r24, Z+14	; 0x0e
     a2c:	eb 81       	ldd	r30, Y+3	; 0x03
     a2e:	fc 81       	ldd	r31, Y+4	; 0x04
     a30:	80 83       	st	Z, r24
        msg.len = in[1];
     a32:	eb 81       	ldd	r30, Y+3	; 0x03
     a34:	fc 81       	ldd	r31, Y+4	; 0x04
     a36:	87 85       	ldd	r24, Z+15	; 0x0f
     a38:	eb 81       	ldd	r30, Y+3	; 0x03
     a3a:	fc 81       	ldd	r31, Y+4	; 0x04
     a3c:	81 83       	std	Z+1, r24	; 0x01
        for(int i=0;i<msg.len;i++)
     a3e:	1a 82       	std	Y+2, r1	; 0x02
     a40:	19 82       	std	Y+1, r1	; 0x01
     a42:	1a c0       	rjmp	.+52     	; 0xa78 <_ZN8Protocol7treatIOEv+0xb8>
        {
            msg.data[i] = in[i+2];
     a44:	49 81       	ldd	r20, Y+1	; 0x01
     a46:	5a 81       	ldd	r21, Y+2	; 0x02
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	9a 81       	ldd	r25, Y+2	; 0x02
     a4c:	9c 01       	movw	r18, r24
     a4e:	2e 5f       	subi	r18, 0xFE	; 254
     a50:	3f 4f       	sbci	r19, 0xFF	; 255
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	9c 81       	ldd	r25, Y+4	; 0x04
     a56:	82 0f       	add	r24, r18
     a58:	93 1f       	adc	r25, r19
     a5a:	fc 01       	movw	r30, r24
     a5c:	3e 96       	adiw	r30, 0x0e	; 14
     a5e:	20 81       	ld	r18, Z
     a60:	8b 81       	ldd	r24, Y+3	; 0x03
     a62:	9c 81       	ldd	r25, Y+4	; 0x04
     a64:	84 0f       	add	r24, r20
     a66:	95 1f       	adc	r25, r21
     a68:	fc 01       	movw	r30, r24
     a6a:	32 96       	adiw	r30, 0x02	; 2
     a6c:	20 83       	st	Z, r18
	in_offset += _read(in+in_offset, Protocol::BUFFER_SIZE-in_offset);
    if(in_offset >= 2)
    {
        msg.command = in[0];
        msg.len = in[1];
        for(int i=0;i<msg.len;i++)
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	9a 81       	ldd	r25, Y+2	; 0x02
     a72:	01 96       	adiw	r24, 0x01	; 1
     a74:	9a 83       	std	Y+2, r25	; 0x02
     a76:	89 83       	std	Y+1, r24	; 0x01
     a78:	eb 81       	ldd	r30, Y+3	; 0x03
     a7a:	fc 81       	ldd	r31, Y+4	; 0x04
     a7c:	81 81       	ldd	r24, Z+1	; 0x01
     a7e:	28 2f       	mov	r18, r24
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	9a 81       	ldd	r25, Y+2	; 0x02
     a86:	82 17       	cp	r24, r18
     a88:	93 07       	cpc	r25, r19
     a8a:	e4 f2       	brlt	.-72     	; 0xa44 <_ZN8Protocol7treatIOEv+0x84>
        {
            msg.data[i] = in[i+2];
        }
        in_offset = 0;
     a8c:	eb 81       	ldd	r30, Y+3	; 0x03
     a8e:	fc 81       	ldd	r31, Y+4	; 0x04
     a90:	16 aa       	std	Z+54, r1	; 0x36
		haveMessage = true;
     a92:	eb 81       	ldd	r30, Y+3	; 0x03
     a94:	fc 81       	ldd	r31, Y+4	; 0x04
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	80 af       	std	Z+56, r24	; 0x38
     a9a:	03 c0       	rjmp	.+6      	; 0xaa2 <_ZN8Protocol7treatIOEv+0xe2>
    }
	else
		haveMessage = false;
     a9c:	eb 81       	ldd	r30, Y+3	; 0x03
     a9e:	fc 81       	ldd	r31, Y+4	; 0x04
     aa0:	10 ae       	std	Z+56, r1	; 0x38
	//if(in_offset >= Protocol::BUFFER_SIZE)
	//	_write("buffer full", 11);
    if(out_offset > 0)
     aa2:	eb 81       	ldd	r30, Y+3	; 0x03
     aa4:	fc 81       	ldd	r31, Y+4	; 0x04
     aa6:	87 a9       	ldd	r24, Z+55	; 0x37
     aa8:	88 23       	and	r24, r24
     aaa:	99 f0       	breq	.+38     	; 0xad2 <_ZN8Protocol7treatIOEv+0x112>
    {
        _write(out, out_offset);
     aac:	8b 81       	ldd	r24, Y+3	; 0x03
     aae:	9c 81       	ldd	r25, Y+4	; 0x04
     ab0:	ac 01       	movw	r20, r24
     ab2:	4e 5d       	subi	r20, 0xDE	; 222
     ab4:	5f 4f       	sbci	r21, 0xFF	; 255
     ab6:	eb 81       	ldd	r30, Y+3	; 0x03
     ab8:	fc 81       	ldd	r31, Y+4	; 0x04
     aba:	87 a9       	ldd	r24, Z+55	; 0x37
     abc:	28 2f       	mov	r18, r24
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	8b 81       	ldd	r24, Y+3	; 0x03
     ac2:	9c 81       	ldd	r25, Y+4	; 0x04
     ac4:	ba 01       	movw	r22, r20
     ac6:	a9 01       	movw	r20, r18
     ac8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN8Protocol6_writeEPci>
        out_offset = 0;
     acc:	eb 81       	ldd	r30, Y+3	; 0x03
     ace:	fc 81       	ldd	r31, Y+4	; 0x04
     ad0:	17 aa       	std	Z+55, r1	; 0x37
    }
}
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	cf 91       	pop	r28
     adc:	df 91       	pop	r29
     ade:	1f 91       	pop	r17
     ae0:	08 95       	ret

00000ae2 <_ZN8ProtocolC1Ev>:
{
	command = PROT_ERROR;
	len = 0;
}

Protocol::Protocol()
     ae2:	df 93       	push	r29
     ae4:	cf 93       	push	r28
     ae6:	00 d0       	rcall	.+0      	; 0xae8 <_ZN8ProtocolC1Ev+0x6>
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	9a 83       	std	Y+2, r25	; 0x02
     aee:	89 83       	std	Y+1, r24	; 0x01
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	9a 81       	ldd	r25, Y+2	; 0x02
     af4:	0e 94 38 03 	call	0x670	; 0x670 <_ZN6PacketC1Ev>
{
	_uart = NULL;
     af8:	e9 81       	ldd	r30, Y+1	; 0x01
     afa:	fa 81       	ldd	r31, Y+2	; 0x02
     afc:	15 86       	std	Z+13, r1	; 0x0d
     afe:	14 86       	std	Z+12, r1	; 0x0c
	in_offset = 0;
     b00:	e9 81       	ldd	r30, Y+1	; 0x01
     b02:	fa 81       	ldd	r31, Y+2	; 0x02
     b04:	16 aa       	std	Z+54, r1	; 0x36
	out_offset = 0;
     b06:	e9 81       	ldd	r30, Y+1	; 0x01
     b08:	fa 81       	ldd	r31, Y+2	; 0x02
     b0a:	17 aa       	std	Z+55, r1	; 0x37
	memset(in, 0, Protocol::BUFFER_SIZE);
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	9a 81       	ldd	r25, Y+2	; 0x02
     b10:	0e 96       	adiw	r24, 0x0e	; 14
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	44 e1       	ldi	r20, 0x14	; 20
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	0e 94 29 19 	call	0x3252	; 0x3252 <memset>
	memset(out, 0, Protocol::BUFFER_SIZE);
     b1e:	89 81       	ldd	r24, Y+1	; 0x01
     b20:	9a 81       	ldd	r25, Y+2	; 0x02
     b22:	82 96       	adiw	r24, 0x22	; 34
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	44 e1       	ldi	r20, 0x14	; 20
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	0e 94 29 19 	call	0x3252	; 0x3252 <memset>
	haveMessage = false;
     b30:	e9 81       	ldd	r30, Y+1	; 0x01
     b32:	fa 81       	ldd	r31, Y+2	; 0x02
     b34:	10 ae       	std	Z+56, r1	; 0x38
}
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	cf 91       	pop	r28
     b3c:	df 91       	pop	r29
     b3e:	08 95       	ret

00000b40 <_ZN8ProtocolC2Ev>:
{
	command = PROT_ERROR;
	len = 0;
}

Protocol::Protocol()
     b40:	df 93       	push	r29
     b42:	cf 93       	push	r28
     b44:	00 d0       	rcall	.+0      	; 0xb46 <_ZN8ProtocolC2Ev+0x6>
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	9a 83       	std	Y+2, r25	; 0x02
     b4c:	89 83       	std	Y+1, r24	; 0x01
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	9a 81       	ldd	r25, Y+2	; 0x02
     b52:	0e 94 38 03 	call	0x670	; 0x670 <_ZN6PacketC1Ev>
{
	_uart = NULL;
     b56:	e9 81       	ldd	r30, Y+1	; 0x01
     b58:	fa 81       	ldd	r31, Y+2	; 0x02
     b5a:	15 86       	std	Z+13, r1	; 0x0d
     b5c:	14 86       	std	Z+12, r1	; 0x0c
	in_offset = 0;
     b5e:	e9 81       	ldd	r30, Y+1	; 0x01
     b60:	fa 81       	ldd	r31, Y+2	; 0x02
     b62:	16 aa       	std	Z+54, r1	; 0x36
	out_offset = 0;
     b64:	e9 81       	ldd	r30, Y+1	; 0x01
     b66:	fa 81       	ldd	r31, Y+2	; 0x02
     b68:	17 aa       	std	Z+55, r1	; 0x37
	memset(in, 0, Protocol::BUFFER_SIZE);
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	0e 96       	adiw	r24, 0x0e	; 14
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	44 e1       	ldi	r20, 0x14	; 20
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	0e 94 29 19 	call	0x3252	; 0x3252 <memset>
	memset(out, 0, Protocol::BUFFER_SIZE);
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	9a 81       	ldd	r25, Y+2	; 0x02
     b80:	82 96       	adiw	r24, 0x22	; 34
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	44 e1       	ldi	r20, 0x14	; 20
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	0e 94 29 19 	call	0x3252	; 0x3252 <memset>
	haveMessage = false;
     b8e:	e9 81       	ldd	r30, Y+1	; 0x01
     b90:	fa 81       	ldd	r31, Y+2	; 0x02
     b92:	10 ae       	std	Z+56, r1	; 0x38
}
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <_ZN7ServiceC2Ec>:
#include "services.h"

Service::Service(char id)
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <_ZN7ServiceC2Ec+0x6>
     ba4:	0f 92       	push	r0
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	9a 83       	std	Y+2, r25	; 0x02
     bac:	89 83       	std	Y+1, r24	; 0x01
     bae:	6b 83       	std	Y+3, r22	; 0x03
     bb0:	e9 81       	ldd	r30, Y+1	; 0x01
     bb2:	fa 81       	ldd	r31, Y+2	; 0x02
     bb4:	84 e1       	ldi	r24, 0x14	; 20
     bb6:	92 e0       	ldi	r25, 0x02	; 2
     bb8:	91 83       	std	Z+1, r25	; 0x01
     bba:	80 83       	st	Z, r24
{
    _id = id;
     bbc:	e9 81       	ldd	r30, Y+1	; 0x01
     bbe:	fa 81       	ldd	r31, Y+2	; 0x02
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	82 83       	std	Z+2, r24	; 0x02
    _prot = NULL;
     bc4:	e9 81       	ldd	r30, Y+1	; 0x01
     bc6:	fa 81       	ldd	r31, Y+2	; 0x02
     bc8:	14 82       	std	Z+4, r1	; 0x04
     bca:	13 82       	std	Z+3, r1	; 0x03
}
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	cf 91       	pop	r28
     bd4:	df 91       	pop	r29
     bd6:	08 95       	ret

00000bd8 <_ZN7ServiceC1Ec>:
#include "services.h"

Service::Service(char id)
     bd8:	df 93       	push	r29
     bda:	cf 93       	push	r28
     bdc:	00 d0       	rcall	.+0      	; 0xbde <_ZN7ServiceC1Ec+0x6>
     bde:	0f 92       	push	r0
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	9a 83       	std	Y+2, r25	; 0x02
     be6:	89 83       	std	Y+1, r24	; 0x01
     be8:	6b 83       	std	Y+3, r22	; 0x03
     bea:	e9 81       	ldd	r30, Y+1	; 0x01
     bec:	fa 81       	ldd	r31, Y+2	; 0x02
     bee:	84 e1       	ldi	r24, 0x14	; 20
     bf0:	92 e0       	ldi	r25, 0x02	; 2
     bf2:	91 83       	std	Z+1, r25	; 0x01
     bf4:	80 83       	st	Z, r24
{
    _id = id;
     bf6:	e9 81       	ldd	r30, Y+1	; 0x01
     bf8:	fa 81       	ldd	r31, Y+2	; 0x02
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	82 83       	std	Z+2, r24	; 0x02
    _prot = NULL;
     bfe:	e9 81       	ldd	r30, Y+1	; 0x01
     c00:	fa 81       	ldd	r31, Y+2	; 0x02
     c02:	14 82       	std	Z+4, r1	; 0x04
     c04:	13 82       	std	Z+3, r1	; 0x03
}
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <_ZN7Service4initEP8Protocol>:

void Service::init(Protocol *prot)
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <_ZN7Service4initEP8Protocol+0x6>
     c18:	00 d0       	rcall	.+0      	; 0xc1a <_ZN7Service4initEP8Protocol+0x8>
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	9a 83       	std	Y+2, r25	; 0x02
     c20:	89 83       	std	Y+1, r24	; 0x01
     c22:	7c 83       	std	Y+4, r23	; 0x04
     c24:	6b 83       	std	Y+3, r22	; 0x03
{
    _prot = prot;
     c26:	e9 81       	ldd	r30, Y+1	; 0x01
     c28:	fa 81       	ldd	r31, Y+2	; 0x02
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	9c 81       	ldd	r25, Y+4	; 0x04
     c2e:	94 83       	std	Z+4, r25	; 0x04
     c30:	83 83       	std	Z+3, r24	; 0x03
}
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	08 95       	ret

00000c40 <_ZN7Service5matchERK6Packet>:

bool Service::match(const Packet &msg)
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	00 d0       	rcall	.+0      	; 0xc46 <_ZN7Service5matchERK6Packet+0x6>
     c46:	00 d0       	rcall	.+0      	; 0xc48 <_ZN7Service5matchERK6Packet+0x8>
     c48:	0f 92       	push	r0
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	9a 83       	std	Y+2, r25	; 0x02
     c50:	89 83       	std	Y+1, r24	; 0x01
     c52:	7c 83       	std	Y+4, r23	; 0x04
     c54:	6b 83       	std	Y+3, r22	; 0x03
{
    return msg.command == _id ? true : false;    
     c56:	eb 81       	ldd	r30, Y+3	; 0x03
     c58:	fc 81       	ldd	r31, Y+4	; 0x04
     c5a:	90 81       	ld	r25, Z
     c5c:	e9 81       	ldd	r30, Y+1	; 0x01
     c5e:	fa 81       	ldd	r31, Y+2	; 0x02
     c60:	82 81       	ldd	r24, Z+2	; 0x02
     c62:	1d 82       	std	Y+5, r1	; 0x05
     c64:	98 17       	cp	r25, r24
     c66:	11 f4       	brne	.+4      	; 0xc6c <_ZN7Service5matchERK6Packet+0x2c>
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	8d 83       	std	Y+5, r24	; 0x05
     c6c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <_ZN11PingServiceC2Ev>:



PingService::PingService() : Service(PROT_PING)
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	00 d0       	rcall	.+0      	; 0xc84 <_ZN11PingServiceC2Ev+0x6>
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	9a 83       	std	Y+2, r25	; 0x02
     c8a:	89 83       	std	Y+1, r24	; 0x01
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	62 e0       	ldi	r22, 0x02	; 2
     c92:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_ZN7ServiceC2Ec>
     c96:	e9 81       	ldd	r30, Y+1	; 0x01
     c98:	fa 81       	ldd	r31, Y+2	; 0x02
     c9a:	8e e0       	ldi	r24, 0x0E	; 14
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	91 83       	std	Z+1, r25	; 0x01
     ca0:	80 83       	st	Z, r24
{
}
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	cf 91       	pop	r28
     ca8:	df 91       	pop	r29
     caa:	08 95       	ret

00000cac <_ZN11PingServiceC1Ev>:
    return msg.command == _id ? true : false;    
}



PingService::PingService() : Service(PROT_PING)
     cac:	df 93       	push	r29
     cae:	cf 93       	push	r28
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <_ZN11PingServiceC1Ev+0x6>
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
     cb6:	9a 83       	std	Y+2, r25	; 0x02
     cb8:	89 83       	std	Y+1, r24	; 0x01
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	9a 81       	ldd	r25, Y+2	; 0x02
     cbe:	62 e0       	ldi	r22, 0x02	; 2
     cc0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_ZN7ServiceC2Ec>
     cc4:	e9 81       	ldd	r30, Y+1	; 0x01
     cc6:	fa 81       	ldd	r31, Y+2	; 0x02
     cc8:	8e e0       	ldi	r24, 0x0E	; 14
     cca:	92 e0       	ldi	r25, 0x02	; 2
     ccc:	91 83       	std	Z+1, r25	; 0x01
     cce:	80 83       	st	Z, r24
{
}
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <_ZN11PingService7executeER6Packet>:

bool PingService::execute(Packet &msg)
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	00 d0       	rcall	.+0      	; 0xce0 <_ZN11PingService7executeER6Packet+0x6>
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <_ZN11PingService7executeER6Packet+0x8>
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	9a 83       	std	Y+2, r25	; 0x02
     ce8:	89 83       	std	Y+1, r24	; 0x01
     cea:	7c 83       	std	Y+4, r23	; 0x04
     cec:	6b 83       	std	Y+3, r22	; 0x03
{
    // i just forward the message
    _prot->send(msg);
     cee:	e9 81       	ldd	r30, Y+1	; 0x01
     cf0:	fa 81       	ldd	r31, Y+2	; 0x02
     cf2:	83 81       	ldd	r24, Z+3	; 0x03
     cf4:	94 81       	ldd	r25, Z+4	; 0x04
     cf6:	2b 81       	ldd	r18, Y+3	; 0x03
     cf8:	3c 81       	ldd	r19, Y+4	; 0x04
     cfa:	b9 01       	movw	r22, r18
     cfc:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN8Protocol4sendER6Packet>
    return true;
     d00:	81 e0       	ldi	r24, 0x01	; 1
}
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <marquee_put_char>:
static MAKE_WRITER(marquee_put_char); /* Fwd Def */
MARQUEE _marquee_ = MAKE_MARQUEE(marquee_list,500000,2000000,&marquee_put_char);
// Create a Writer to write to marquee
// Do NOT call it directly instead, to write the char 'A' use:
// 	marqueeGetWriter(&marquee)('A');
static MAKE_WRITER(marquee_put_char){ /* createWriter */
     d10:	68 2f       	mov	r22, r24
	return marqueeSendByte(&_marquee_,byte);
     d12:	83 e6       	ldi	r24, 0x63	; 99
     d14:	92 e0       	ldi	r25, 0x02	; 2
     d16:	0e 94 4c 0c 	call	0x1898	; 0x1898 <marqueeSendByte>
}
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	08 95       	ret

00000d1e <registerLED>:
static __inline__ void LED_off(LED* led){
	LED_set(led,FALSE);
}

static __inline__ void statusLEDregister(const IOPin* pin, boolean activeHigh){
	statusLED.pin = pin;
     d1e:	89 e0       	ldi	r24, 0x09	; 9
     d20:	93 e0       	ldi	r25, 0x03	; 3
     d22:	90 93 23 04 	sts	0x0423, r25
     d26:	80 93 22 04 	sts	0x0422, r24
	statusLED.activeHigh = activeHigh;
     d2a:	80 91 24 04 	lds	r24, 0x0424
	statusLED.initialised=FALSE;
     d2e:	8c 7f       	andi	r24, 0xFC	; 252
     d30:	80 93 24 04 	sts	0x0424, r24


void LED_set(LED* led,	boolean value);

static __inline__ void LED_on(LED* led){
	LED_set(led,TRUE);
     d34:	82 e2       	ldi	r24, 0x22	; 34
     d36:	94 e0       	ldi	r25, 0x04	; 4
     d38:	6f ef       	ldi	r22, 0xFF	; 255
     d3a:	0e 94 9d 0b 	call	0x173a	; 0x173a <LED_set>
	servoPWMInit(&_bank1_);
}
// ----------- Register the statusLED -----------
void registerLED(void){
	statusLEDregister(C1,false);
}
     d3e:	08 95       	ret

00000d40 <initHardware>:
	segled_init(&_led_display_);
}

// ----------- Initialise my added devices ------
void initHardware(void){
	servoPWMInit(&_bank1_);
     d40:	86 ea       	ldi	r24, 0xA6	; 166
     d42:	92 e0       	ldi	r25, 0x02	; 2
     d44:	0e 94 36 09 	call	0x126c	; 0x126c <servoPWMInit>
}
     d48:	08 95       	ret

00000d4a <sysInitHardware>:
	&_servo2_
};
SERVO_DRIVER _bank1_ = MAKE_SERVO_DRIVER(bank1_list);

// ----------- Initialise built in devices ------
void sysInitHardware(void){
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
static __inline__ boolean SWITCH_released(SWITCH* sw){
	return pin_is_high(sw->pin);
}

static __inline__ void SWITCH_init(SWITCH *sw){
	pin_make_input(sw->pin,TRUE);
     d4e:	80 91 50 02 	lds	r24, 0x0250
     d52:	90 91 51 02 	lds	r25, 0x0251
     d56:	6f ef       	ldi	r22, 0xFF	; 255
     d58:	0e 94 4f 0b 	call	0x169e	; 0x169e <pin_make_input>
	SWITCH_init(&_button_);
	setErrorLog(&uart1SendByte);
     d5c:	0c e1       	ldi	r16, 0x1C	; 28
     d5e:	17 e0       	ldi	r17, 0x07	; 7
     d60:	c8 01       	movw	r24, r16
     d62:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <setErrorLog>
	rprintfInit(&uart1SendByte);
     d66:	c8 01       	movw	r24, r16
     d68:	0e 94 29 0c 	call	0x1852	; 0x1852 <rprintfInit>
	uartInit(_C_uart1,115200);
     d6c:	8e e1       	ldi	r24, 0x1E	; 30
     d6e:	92 e0       	ldi	r25, 0x02	; 2
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	52 ec       	ldi	r21, 0xC2	; 194
     d74:	61 e0       	ldi	r22, 0x01	; 1
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <_uartInit>

// Write a character to the display
uint8_t segled_put_char(SEGLED* led, uint8_t ch);

static __inline__ void segled_init(SEGLED* led){
	segled_put_char(led,' ');
     d7c:	82 e5       	ldi	r24, 0x52	; 82
     d7e:	92 e0       	ldi	r25, 0x02	; 2
     d80:	60 e2       	ldi	r22, 0x20	; 32
     d82:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <segled_put_char>
	segled_init(&_led_display_);
}
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	08 95       	ret

00000d8c <__vector_36>:
#endif

#ifndef USART1_RX_vect
# error Uart1 Rx complete vector undefined
#else
ISR(USART1_RX_vect){
     d8c:	1f 92       	push	r1
     d8e:	0f 92       	push	r0
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	0f 92       	push	r0
     d94:	11 24       	eor	r1, r1
     d96:	2f 93       	push	r18
     d98:	3f 93       	push	r19
     d9a:	4f 93       	push	r20
     d9c:	5f 93       	push	r21
     d9e:	6f 93       	push	r22
     da0:	7f 93       	push	r23
     da2:	8f 93       	push	r24
     da4:	9f 93       	push	r25
     da6:	af 93       	push	r26
     da8:	bf 93       	push	r27
     daa:	ef 93       	push	r30
     dac:	ff 93       	push	r31
	uartReceiveService(_C_uart1);
     dae:	e0 91 4a 02 	lds	r30, 0x024A
     db2:	f0 91 4b 02 	lds	r31, 0x024B
     db6:	60 81       	ld	r22, Z
     db8:	8e e1       	ldi	r24, 0x1E	; 30
     dba:	92 e0       	ldi	r25, 0x02	; 2
     dbc:	0e 94 4d 10 	call	0x209a	; 0x209a <__uartReceiveService>
}
     dc0:	ff 91       	pop	r31
     dc2:	ef 91       	pop	r30
     dc4:	bf 91       	pop	r27
     dc6:	af 91       	pop	r26
     dc8:	9f 91       	pop	r25
     dca:	8f 91       	pop	r24
     dcc:	7f 91       	pop	r23
     dce:	6f 91       	pop	r22
     dd0:	5f 91       	pop	r21
     dd2:	4f 91       	pop	r20
     dd4:	3f 91       	pop	r19
     dd6:	2f 91       	pop	r18
     dd8:	0f 90       	pop	r0
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	0f 90       	pop	r0
     dde:	1f 90       	pop	r1
     de0:	18 95       	reti

00000de2 <__vector_38>:
HW_UART __C_uart1 = MAKE_UART_BUFFERED(null,null,UCSR1A,UCSR1B,UBRR1L,UBRR1H,UDR1,null,BV(U2X1),D2,D3,&uart1GetByte,&uart1SendByte);

#ifndef USART1_TX_vect
# error Uart1 Tx complete vector undefined
#else
ISR(USART1_TX_vect){
     de2:	1f 92       	push	r1
     de4:	0f 92       	push	r0
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	0f 92       	push	r0
     dea:	11 24       	eor	r1, r1
     dec:	2f 93       	push	r18
     dee:	3f 93       	push	r19
     df0:	4f 93       	push	r20
     df2:	5f 93       	push	r21
     df4:	6f 93       	push	r22
     df6:	7f 93       	push	r23
     df8:	8f 93       	push	r24
     dfa:	9f 93       	push	r25
     dfc:	af 93       	push	r26
     dfe:	bf 93       	push	r27
     e00:	ef 93       	push	r30
     e02:	ff 93       	push	r31
	uartTransmitService(_C_uart1);
     e04:	8e e1       	ldi	r24, 0x1E	; 30
     e06:	92 e0       	ldi	r25, 0x02	; 2
     e08:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__uartTransmitService>
}
     e0c:	ff 91       	pop	r31
     e0e:	ef 91       	pop	r30
     e10:	bf 91       	pop	r27
     e12:	af 91       	pop	r26
     e14:	9f 91       	pop	r25
     e16:	8f 91       	pop	r24
     e18:	7f 91       	pop	r23
     e1a:	6f 91       	pop	r22
     e1c:	5f 91       	pop	r21
     e1e:	4f 91       	pop	r20
     e20:	3f 91       	pop	r19
     e22:	2f 91       	pop	r18
     e24:	0f 90       	pop	r0
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	0f 90       	pop	r0
     e2a:	1f 90       	pop	r1
     e2c:	18 95       	reti

00000e2e <uart1GetByte>:
}

// Create a routine to read a byte from uart1
// Returns -1 if there was no data
MAKE_READER( uart1GetByte){
	return uartGetByte(_C_uart1);
     e2e:	8e e1       	ldi	r24, 0x1E	; 30
     e30:	92 e0       	ldi	r25, 0x02	; 2
     e32:	0e 94 67 10 	call	0x20ce	; 0x20ce <__uartGetByte>
}
     e36:	08 95       	ret

00000e38 <uart1SendByte>:

// ------------------- uart1 -------------------

// Create a routine to write bytes to uart1
// You can set rprintf to use it by calling rprintfInit(&uart1SendByte)
MAKE_WRITER(uart1SendByte){
     e38:	68 2f       	mov	r22, r24
	return uartSendByte(_C_uart1,byte);
     e3a:	8e e1       	ldi	r24, 0x1E	; 30
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <_uartSendByte>
}
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	08 95       	ret

00000e46 <clockGetSnapshot>:
#define STATUS_LED_DDR   DDRC		
#define STATUS_LED_PIN   PC1		
static uint8_t counter;
		

void clockGetSnapshot(TIMER_SNAPSHOT* snapshot){
     e46:	fc 01       	movw	r30, r24
	// Clock timer uses TIMER_MODE_CTC_OCR which generate compare interrupts on channel A
	CRITICAL_SECTION{
     e48:	6f b7       	in	r22, 0x3f	; 63
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
     e4a:	f8 94       	cli
		// get the current ticks from the timer
		uint16_t tcnt = TCNT5;
     e4c:	80 91 24 01 	lds	r24, 0x0124
     e50:	90 91 25 01 	lds	r25, 0x0125
		// get the number of whole ticks
		snapshot->whole  = wholeTicks;
     e54:	20 91 b0 03 	lds	r18, 0x03B0
     e58:	30 91 b1 03 	lds	r19, 0x03B1
     e5c:	40 91 b2 03 	lds	r20, 0x03B2
     e60:	50 91 b3 03 	lds	r21, 0x03B3
     e64:	20 83       	st	Z, r18
     e66:	31 83       	std	Z+1, r19	; 0x01
     e68:	42 83       	std	Z+2, r20	; 0x02
     e6a:	53 83       	std	Z+3, r21	; 0x03
		// get the current ticks again
		snapshot->part   = TCNT5;
     e6c:	20 91 24 01 	lds	r18, 0x0124
     e70:	30 91 25 01 	lds	r19, 0x0125
     e74:	35 83       	std	Z+5, r19	; 0x05
     e76:	24 83       	std	Z+4, r18	; 0x04
		// If the second reading of tcnt has gone down then there must have been an overflow
		// since reading the 'rtn' value. Or there may be a pending interrupt which may be
		// because interrupts are currently turned off. In either case increment the 'rtn' value
		// as if the interrupt has happened
		if(snapshot->part < tcnt || CLOCK_INT_PENDING ){
     e78:	28 17       	cp	r18, r24
     e7a:	39 07       	cpc	r19, r25
     e7c:	10 f0       	brcs	.+4      	; 0xe82 <clockGetSnapshot+0x3c>
     e7e:	d1 9b       	sbis	0x1a, 1	; 26
     e80:	12 c0       	rjmp	.+36     	; 0xea6 <clockGetSnapshot+0x60>
			snapshot->whole += usPerTop;
     e82:	80 81       	ld	r24, Z
     e84:	91 81       	ldd	r25, Z+1	; 0x01
     e86:	a2 81       	ldd	r26, Z+2	; 0x02
     e88:	b3 81       	ldd	r27, Z+3	; 0x03
     e8a:	80 50       	subi	r24, 0x00	; 0
     e8c:	93 48       	sbci	r25, 0x83	; 131
     e8e:	af 4f       	sbci	r26, 0xFF	; 255
     e90:	bf 4f       	sbci	r27, 0xFF	; 255
     e92:	80 83       	st	Z, r24
     e94:	91 83       	std	Z+1, r25	; 0x01
     e96:	a2 83       	std	Z+2, r26	; 0x02
     e98:	b3 83       	std	Z+3, r27	; 0x03
			// get the current ticks again
			snapshot->part = TCNT5;
     e9a:	80 91 24 01 	lds	r24, 0x0124
     e9e:	90 91 25 01 	lds	r25, 0x0125
     ea2:	95 83       	std	Z+5, r25	; 0x05
     ea4:	84 83       	std	Z+4, r24	; 0x04
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
     ea6:	6f bf       	out	0x3f, r22	; 63
		}
	}
}
     ea8:	08 95       	ret

00000eaa <clockSnapshotToTicks>:

TICK_COUNT clockSnapshotToTicks(const TIMER_SNAPSHOT* snapshot){
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	fc 01       	movw	r30, r24
	TICK_COUNT rtn = snapshot->whole;
     eb4:	e0 80       	ld	r14, Z
     eb6:	f1 80       	ldd	r15, Z+1	; 0x01
     eb8:	02 81       	ldd	r16, Z+2	; 0x02
     eba:	13 81       	ldd	r17, Z+3	; 0x03

	// top = usPerTop
	// part     x
	TICK_COUNT frac  = snapshot->part;
     ebc:	64 81       	ldd	r22, Z+4	; 0x04
     ebe:	75 81       	ldd	r23, Z+5	; 0x05
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
	frac *= usPerTop;
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	3d e7       	ldi	r19, 0x7D	; 125
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__mulsi3>
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	3a ef       	ldi	r19, 0xFA	; 250
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	0e 94 15 1a 	call	0x342a	; 0x342a <__udivmodsi4>
     edc:	2e 0d       	add	r18, r14
     ede:	3f 1d       	adc	r19, r15
     ee0:	40 1f       	adc	r20, r16
     ee2:	51 1f       	adc	r21, r17
	frac /= CLOCK_TOP;

	rtn += frac;

	return rtn;
}
     ee4:	b9 01       	movw	r22, r18
     ee6:	ca 01       	movw	r24, r20
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	08 95       	ret

00000ef2 <clockGetus>:

// Get the current clock time in uS
TICK_COUNT clockGetus(void){
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	00 d0       	rcall	.+0      	; 0xefc <clockGetus+0xa>
     efc:	00 d0       	rcall	.+0      	; 0xefe <clockGetus+0xc>
     efe:	00 d0       	rcall	.+0      	; 0xf00 <clockGetus+0xe>
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	TIMER_SNAPSHOT snapshot;
	clockGetSnapshot(&snapshot);
     f04:	8e 01       	movw	r16, r28
     f06:	0f 5f       	subi	r16, 0xFF	; 255
     f08:	1f 4f       	sbci	r17, 0xFF	; 255
     f0a:	c8 01       	movw	r24, r16
     f0c:	0e 94 23 07 	call	0xe46	; 0xe46 <clockGetSnapshot>

	return clockSnapshotToTicks(&snapshot);
     f10:	c8 01       	movw	r24, r16
     f12:	0e 94 55 07 	call	0xeaa	; 0xeaa <clockSnapshotToTicks>
}
     f16:	26 96       	adiw	r28, 0x06	; 6
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	08 95       	ret

00000f2c <__clockInit>:

// Initialise the clock timer and turn it on
void __clockInit(void){
	// Set interrupt pending = false
	CLOCK_INT_CLEAR;
     f2c:	d1 9a       	sbi	0x1a, 1	; 26
	
	// Enable interrupts
	CLOCK_INT_ENABLE;
     f2e:	e3 e7       	ldi	r30, 0x73	; 115
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	82 60       	ori	r24, 0x02	; 2
     f36:	80 83       	st	Z, r24
}
     f38:	08 95       	ret

00000f3a <__vector_47>:

// ISR for clock overflow. Occurs every msPerTop
ISR(TIMER5_COMPA_vect) {
     f3a:	1f 92       	push	r1
     f3c:	0f 92       	push	r0
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	0f 92       	push	r0
     f42:	11 24       	eor	r1, r1
     f44:	2f 93       	push	r18
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
	wholeTicks += usPerTop;
     f4e:	80 91 b0 03 	lds	r24, 0x03B0
     f52:	90 91 b1 03 	lds	r25, 0x03B1
     f56:	a0 91 b2 03 	lds	r26, 0x03B2
     f5a:	b0 91 b3 03 	lds	r27, 0x03B3
     f5e:	80 50       	subi	r24, 0x00	; 0
     f60:	93 48       	sbci	r25, 0x83	; 131
     f62:	af 4f       	sbci	r26, 0xFF	; 255
     f64:	bf 4f       	sbci	r27, 0xFF	; 255
     f66:	80 93 b0 03 	sts	0x03B0, r24
     f6a:	90 93 b1 03 	sts	0x03B1, r25
     f6e:	a0 93 b2 03 	sts	0x03B2, r26
     f72:	b0 93 b3 03 	sts	0x03B3, r27

	
	// Flash the status led if there is an error
	ERROR* err = &__error;
	if(err->errorCode && bit_is_set(STATUS_LED_DDR,STATUS_LED_PIN)){
     f76:	20 91 1d 04 	lds	r18, 0x041D
     f7a:	22 23       	and	r18, r18
     f7c:	b9 f1       	breq	.+110    	; 0xfec <__vector_47+0xb2>
     f7e:	39 9b       	sbis	0x07, 1	; 7
     f80:	35 c0       	rjmp	.+106    	; 0xfec <__vector_47+0xb2>
		// There is an error and status led pin is an output

		// Decrement any counter
		if(counter){
     f82:	80 91 b4 03 	lds	r24, 0x03B4
     f86:	88 23       	and	r24, r24
     f88:	19 f0       	breq	.+6      	; 0xf90 <__vector_47+0x56>
			counter--;
     f8a:	81 50       	subi	r24, 0x01	; 1
     f8c:	80 93 b4 03 	sts	0x03B4, r24
		}
		if(counter==0){
     f90:	80 91 b4 03 	lds	r24, 0x03B4
     f94:	88 23       	and	r24, r24
     f96:	51 f5       	brne	.+84     	; 0xfec <__vector_47+0xb2>
			// Its time to do something
			if(err->remaining==0){
     f98:	80 91 1e 04 	lds	r24, 0x041E
     f9c:	88 23       	and	r24, r24
     f9e:	59 f4       	brne	.+22     	; 0xfb6 <__vector_47+0x7c>
				err->remaining = ABS(err->errorCode);
     fa0:	82 2f       	mov	r24, r18
     fa2:	99 27       	eor	r25, r25
     fa4:	87 fd       	sbrc	r24, 7
     fa6:	90 95       	com	r25
     fa8:	97 ff       	sbrs	r25, 7
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <__vector_47+0x78>
     fac:	90 95       	com	r25
     fae:	81 95       	neg	r24
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	80 93 1e 04 	sts	0x041E, r24
			}

			uint8_t delay = (err->errorCode < 0 ) ? 250/msPerTop : 500/msPerTop;
     fb6:	27 fd       	sbrc	r18, 7
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <__vector_47+0x84>
     fba:	9f e0       	ldi	r25, 0x0F	; 15
     fbc:	01 c0       	rjmp	.+2      	; 0xfc0 <__vector_47+0x86>
     fbe:	97 e0       	ldi	r25, 0x07	; 7
			if(err->phase){
     fc0:	20 91 1f 04 	lds	r18, 0x041F
     fc4:	22 23       	and	r18, r18
     fc6:	41 f0       	breq	.+16     	; 0xfd8 <__vector_47+0x9e>
				// turn led off
				if(-- err->remaining == 0){
     fc8:	80 91 1e 04 	lds	r24, 0x041E
     fcc:	81 50       	subi	r24, 0x01	; 1
     fce:	80 93 1e 04 	sts	0x041E, r24
     fd2:	88 23       	and	r24, r24
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <__vector_47+0x9e>
     fd6:	9e e3       	ldi	r25, 0x3E	; 62
					delay = 2000/msPerTop;
				}
			}else{
				// turn led on
			}
			err->phase = !err->phase;
     fd8:	10 92 1f 04 	sts	0x041F, r1
     fdc:	22 23       	and	r18, r18
     fde:	19 f4       	brne	.+6      	; 0xfe6 <__vector_47+0xac>
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	80 93 1f 04 	sts	0x041F, r24
			counter = delay;
     fe6:	90 93 b4 03 	sts	0x03B4, r25
			// toggle the LED
			sbi(STATUS_LED_INPUT,STATUS_LED_PIN);
     fea:	31 9a       	sbi	0x06, 1	; 6
		}
	}
	
}
     fec:	bf 91       	pop	r27
     fee:	af 91       	pop	r26
     ff0:	9f 91       	pop	r25
     ff2:	8f 91       	pop	r24
     ff4:	2f 91       	pop	r18
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f 90       	pop	r0
     ffc:	1f 90       	pop	r1
     ffe:	18 95       	reti

00001000 <_ZN6Stream4_putEcP6__file>:
	/* function to write one char to device
	 * Called directly from the C FILE code
	 * when using commands from stdio.h
	 * This is passed on to the write of our C++ object
	 */
	static int	_put(char c, STREAM *s){
    1000:	28 2f       	mov	r18, r24
		Stream* str = (Stream*)s;
    1002:	61 15       	cp	r22, r1
    1004:	71 05       	cpc	r23, r1
    1006:	19 f4       	brne	.+6      	; 0x100e <_ZN6Stream4_putEcP6__file+0xe>
    1008:	a0 e0       	ldi	r26, 0x00	; 0
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <_ZN6Stream4_putEcP6__file+0x12>
    100e:	db 01       	movw	r26, r22
    1010:	12 97       	sbiw	r26, 0x02	; 2
		return str->write((uint8_t)c);
    1012:	ed 91       	ld	r30, X+
    1014:	fc 91       	ld	r31, X
    1016:	11 97       	sbiw	r26, 0x01	; 1
    1018:	01 90       	ld	r0, Z+
    101a:	f0 81       	ld	r31, Z
    101c:	e0 2d       	mov	r30, r0
    101e:	cd 01       	movw	r24, r26
    1020:	62 2f       	mov	r22, r18
    1022:	09 95       	icall
	}
    1024:	08 95       	ret

00001026 <_ZN6Stream4_getEP6__file>:
	 * Called directly from the C FILE code
	 * when using commands from stdio.h
	 * This is passed on to the read of our C++ object
	 */
	static int	_get(STREAM *s){
		Stream* str = (Stream*)s;
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	19 f4       	brne	.+6      	; 0x1030 <_ZN6Stream4_getEP6__file+0xa>
    102a:	a0 e0       	ldi	r26, 0x00	; 0
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <_ZN6Stream4_getEP6__file+0xe>
    1030:	dc 01       	movw	r26, r24
    1032:	12 97       	sbiw	r26, 0x02	; 2
		return str->read();
    1034:	ed 91       	ld	r30, X+
    1036:	fc 91       	ld	r31, X
    1038:	11 97       	sbiw	r26, 0x01	; 1
    103a:	02 80       	ldd	r0, Z+2	; 0x02
    103c:	f3 81       	ldd	r31, Z+3	; 0x03
    103e:	e0 2d       	mov	r30, r0
    1040:	cd 01       	movw	r24, r26
    1042:	09 95       	icall
	}
    1044:	08 95       	ret

00001046 <_ZN10NullStream5writeEh>:
// A type of stream that just throws away output and returns EOF for input
class NullStream : public Stream{
public:
	NullStream(void) : Stream(){};
protected:
	virtual int write(uint8_t c) { return c;};
    1046:	86 2f       	mov	r24, r22
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	08 95       	ret

0000104c <_ZN10NullStream4readEv>:
	virtual int read(void) {return EOF;};
    104c:	8f ef       	ldi	r24, 0xFF	; 255
    104e:	9f ef       	ldi	r25, 0xFF	; 255
    1050:	08 95       	ret

00001052 <_ZN7Marquee4readEv>:
public:
	Marquee(MARQUEE* cstr) {m_cstr = cstr;}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){return marqueeSendByte(m_cstr,data);}
	virtual int read(void){return EOF;}
    1052:	8f ef       	ldi	r24, 0xFF	; 255
    1054:	9f ef       	ldi	r25, 0xFF	; 255
    1056:	08 95       	ret

00001058 <_Z10_cpp_Init_v>:
UartHW uart1(_C_uart1);
#include <Stream/Stream.h>
NullStream nullStream;

void __attribute__ ((constructor)) _cpp_Init_(void){
	stdin = stdout = uart1;
    1058:	89 ed       	ldi	r24, 0xD9	; 217
    105a:	93 e0       	ldi	r25, 0x03	; 3
    105c:	90 93 2c 04 	sts	0x042C, r25
    1060:	80 93 2b 04 	sts	0x042B, r24
    1064:	90 93 2a 04 	sts	0x042A, r25
    1068:	80 93 29 04 	sts	0x0429, r24
	stderr = uart1;
    106c:	90 93 2e 04 	sts	0x042E, r25
    1070:	80 93 2d 04 	sts	0x042D, r24
}
    1074:	08 95       	ret

00001076 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void){
    1076:	ff cf       	rjmp	.-2      	; 0x1076 <__cxa_pure_virtual>

00001078 <_GLOBAL__I_statusLed>:
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class Led {
public:
	Led(LED * cstr){m_cstr = cstr;};
    1078:	82 e2       	ldi	r24, 0x22	; 34
    107a:	94 e0       	ldi	r25, 0x04	; 4
    107c:	90 93 b8 03 	sts	0x03B8, r25
    1080:	80 93 b7 03 	sts	0x03B7, r24
	LED* m_cstr;
};

class StatusLed : public Led {
public:
	StatusLed(LED * cstr) : Led(cstr){
    1084:	87 eb       	ldi	r24, 0xB7	; 183
    1086:	92 e0       	ldi	r25, 0x02	; 2
    1088:	90 93 b6 03 	sts	0x03B6, r25
    108c:	80 93 b5 03 	sts	0x03B5, r24
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class Switch {
public:
	Switch(SWITCH * cstr){m_cstr = cstr;};
    1090:	80 e5       	ldi	r24, 0x50	; 80
    1092:	92 e0       	ldi	r25, 0x02	; 2
    1094:	90 93 ba 03 	sts	0x03BA, r25
    1098:	80 93 b9 03 	sts	0x03B9, r24

class Stream : STREAM{

public:
	Stream(void){
		fdev_setup_stream(this, &_put, &_get, _FDEV_SETUP_RW);
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	78 e0       	ldi	r23, 0x08	; 8
    10a0:	70 93 c6 03 	sts	0x03C6, r23
    10a4:	60 93 c5 03 	sts	0x03C5, r22
    10a8:	43 e1       	ldi	r20, 0x13	; 19
    10aa:	58 e0       	ldi	r21, 0x08	; 8
    10ac:	50 93 c8 03 	sts	0x03C8, r21
    10b0:	40 93 c7 03 	sts	0x03C7, r20
    10b4:	a3 e0       	ldi	r26, 0x03	; 3
    10b6:	a0 93 c0 03 	sts	0x03C0, r26
    10ba:	10 92 ca 03 	sts	0x03CA, r1
    10be:	10 92 c9 03 	sts	0x03C9, r1
};


class Marquee : public Stream {
public:
	Marquee(MARQUEE* cstr) {m_cstr = cstr;}
    10c2:	83 ec       	ldi	r24, 0xC3	; 195
    10c4:	92 e0       	ldi	r25, 0x02	; 2
    10c6:	90 93 bc 03 	sts	0x03BC, r25
    10ca:	80 93 bb 03 	sts	0x03BB, r24
    10ce:	83 e6       	ldi	r24, 0x63	; 99
    10d0:	92 e0       	ldi	r25, 0x02	; 2
    10d2:	90 93 cc 03 	sts	0x03CC, r25
    10d6:	80 93 cb 03 	sts	0x03CB, r24
#ifdef __cplusplus
}
class Actuator{
public:
	Actuator(__ACTUATOR* cstr){
		m_cstr = cstr;
    10da:	8a e7       	ldi	r24, 0x7A	; 122
    10dc:	92 e0       	ldi	r25, 0x02	; 2
    10de:	90 93 ce 03 	sts	0x03CE, r25
    10e2:	80 93 cd 03 	sts	0x03CD, r24
#ifdef __cplusplus
}
class Servo : public Actuator{
public:
	Servo(SERVO* cstr) : Actuator(&cstr->actuator){
		m_cstr = cstr;
    10e6:	90 93 d0 03 	sts	0x03D0, r25
    10ea:	80 93 cf 03 	sts	0x03CF, r24
    10ee:	80 e9       	ldi	r24, 0x90	; 144
    10f0:	92 e0       	ldi	r25, 0x02	; 2
    10f2:	90 93 d2 03 	sts	0x03D2, r25
    10f6:	80 93 d1 03 	sts	0x03D1, r24
    10fa:	90 93 d4 03 	sts	0x03D4, r25
    10fe:	80 93 d3 03 	sts	0x03D3, r24
};

class ServoDriver{
public:
	ServoDriver(SERVO_DRIVER* cstr){
		driver = cstr;
    1102:	86 ea       	ldi	r24, 0xA6	; 166
    1104:	92 e0       	ldi	r25, 0x02	; 2
    1106:	90 93 d6 03 	sts	0x03D6, r25
    110a:	80 93 d5 03 	sts	0x03D5, r24
    110e:	70 93 e2 03 	sts	0x03E2, r23
    1112:	60 93 e1 03 	sts	0x03E1, r22
    1116:	50 93 e4 03 	sts	0x03E4, r21
    111a:	40 93 e3 03 	sts	0x03E3, r20
    111e:	a0 93 dc 03 	sts	0x03DC, r26
    1122:	10 92 e6 03 	sts	0x03E6, r1
    1126:	10 92 e5 03 	sts	0x03E5, r1
/* ===================== C++ Wrapper Code ===============================================*/
#include "Stream/Stream.h"
class Uart : public Stream {
public:
	Uart(UART * cstr): Stream(){
		m_cstr = cstr;
    112a:	2e e1       	ldi	r18, 0x1E	; 30
    112c:	32 e0       	ldi	r19, 0x02	; 2
    112e:	30 93 e8 03 	sts	0x03E8, r19
    1132:	20 93 e7 03 	sts	0x03E7, r18
		cstr->cpp = this;
    1136:	e7 ed       	ldi	r30, 0xD7	; 215
    1138:	f3 e0       	ldi	r31, 0x03	; 3
    113a:	f0 93 34 02 	sts	0x0234, r31
    113e:	e0 93 33 02 	sts	0x0233, r30
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class UartHW : public Uart {
public:
	UartHW(HW_UART* uart) : Uart(&uart->_uart_){
    1142:	83 ed       	ldi	r24, 0xD3	; 211
    1144:	92 e0       	ldi	r25, 0x02	; 2
    1146:	91 83       	std	Z+1, r25	; 0x01
    1148:	80 83       	st	Z, r24
		m_hw = uart;
    114a:	30 93 ee 03 	sts	0x03EE, r19
    114e:	20 93 ed 03 	sts	0x03ED, r18
		m_polling = FALSE;
    1152:	10 92 ef 03 	sts	0x03EF, r1
    1156:	70 93 fb 03 	sts	0x03FB, r23
    115a:	60 93 fa 03 	sts	0x03FA, r22
    115e:	50 93 fd 03 	sts	0x03FD, r21
    1162:	40 93 fc 03 	sts	0x03FC, r20
    1166:	a0 93 f5 03 	sts	0x03F5, r26
    116a:	10 92 ff 03 	sts	0x03FF, r1
    116e:	10 92 fe 03 	sts	0x03FE, r1
};

// A type of stream that just throws away output and returns EOF for input
class NullStream : public Stream{
public:
	NullStream(void) : Stream(){};
    1172:	83 ee       	ldi	r24, 0xE3	; 227
    1174:	92 e0       	ldi	r25, 0x02	; 2
    1176:	90 93 f1 03 	sts	0x03F1, r25
    117a:	80 93 f0 03 	sts	0x03F0, r24
	while(1);
}
    117e:	08 95       	ret

00001180 <_ZNK9StatusLed3setEa>:
	}

	virtual void set(boolean value) const{
    1180:	1f 93       	push	r17
    1182:	16 2f       	mov	r17, r22
		LED_off(&statusLED);
	}
}

static __inline__ void statusLED_set(boolean value){
	if(pin_is_output(statusLED.pin)){
    1184:	80 91 22 04 	lds	r24, 0x0422
    1188:	90 91 23 04 	lds	r25, 0x0423
    118c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <pin_is_output>
    1190:	88 23       	and	r24, r24
    1192:	29 f0       	breq	.+10     	; 0x119e <_ZNK9StatusLed3setEa+0x1e>
		LED_set(&statusLED, value);
    1194:	82 e2       	ldi	r24, 0x22	; 34
    1196:	94 e0       	ldi	r25, 0x04	; 4
    1198:	61 2f       	mov	r22, r17
    119a:	0e 94 9d 0b 	call	0x173a	; 0x173a <LED_set>
	StatusLed(LED * cstr) : Led(cstr){
	}

	virtual void set(boolean value) const{
		statusLED_set(value);
	}
    119e:	1f 91       	pop	r17
    11a0:	08 95       	ret

000011a2 <_ZNK3Led3setEa>:
	}
	void off(void) const{
		set(FALSE);
	}
	virtual void set(boolean value) const{
		LED_set(m_cstr,value);
    11a2:	fc 01       	movw	r30, r24
    11a4:	82 81       	ldd	r24, Z+2	; 0x02
    11a6:	93 81       	ldd	r25, Z+3	; 0x03
    11a8:	0e 94 9d 0b 	call	0x173a	; 0x173a <LED_set>
	}
    11ac:	08 95       	ret

000011ae <_ZN7Marquee5writeEh>:

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){return marqueeSendByte(m_cstr,data);}
    11ae:	fc 01       	movw	r30, r24
    11b0:	80 89       	ldd	r24, Z+16	; 0x10
    11b2:	91 89       	ldd	r25, Z+17	; 0x11
    11b4:	0e 94 4c 0c 	call	0x1898	; 0x1898 <marqueeSendByte>
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	08 95       	ret

000011bc <_ZN6UartHW4readEv>:
	};

	virtual int read(void){
    11bc:	fc 01       	movw	r30, r24
		int ch;

		if(m_polling){
    11be:	80 8d       	ldd	r24, Z+24	; 0x18
    11c0:	88 23       	and	r24, r24
    11c2:	29 f0       	breq	.+10     	; 0x11ce <_ZN6UartHW4readEv+0x12>
			ch = uartPollByte(m_hw);
    11c4:	86 89       	ldd	r24, Z+22	; 0x16
    11c6:	97 89       	ldd	r25, Z+23	; 0x17
    11c8:	0e 94 2f 11 	call	0x225e	; 0x225e <uartPollByte>
    11cc:	08 95       	ret
		}else{
			ch = __uartGetByte(m_cstr);
    11ce:	80 89       	ldd	r24, Z+16	; 0x10
    11d0:	91 89       	ldd	r25, Z+17	; 0x11
    11d2:	0e 94 67 10 	call	0x20ce	; 0x20ce <__uartGetByte>
		}

		return ch;
	}
    11d6:	08 95       	ret

000011d8 <_ZN4Uart4readEv>:
	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
		return _uartSendByte(m_cstr, data);
	}
	virtual int read(void){
		return __uartGetByte(m_cstr);
    11d8:	fc 01       	movw	r30, r24
    11da:	80 89       	ldd	r24, Z+16	; 0x10
    11dc:	91 89       	ldd	r25, Z+17	; 0x11
    11de:	0e 94 67 10 	call	0x20ce	; 0x20ce <__uartGetByte>
	}
    11e2:	08 95       	ret

000011e4 <_ZN4Uart5writeEh>:
		return m_cstr;
	}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
		return _uartSendByte(m_cstr, data);
    11e4:	fc 01       	movw	r30, r24
    11e6:	80 89       	ldd	r24, Z+16	; 0x10
    11e8:	91 89       	ldd	r25, Z+17	; 0x11
    11ea:	0e 94 ee 10 	call	0x21dc	; 0x21dc <_uartSendByte>
	}
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	08 95       	ret

000011f2 <__initTimers>:
// Private methods

//int __timerPrescalerIndex(const Timer* timer, uint16_t prescaler);

static __inline__ TimerData* timerGetData(const Timer* timer){
	return (TimerData*)pgm_read_word(&timer->pgm_data);
    11f2:	22 ea       	ldi	r18, 0xA2	; 162
    11f4:	32 e0       	ldi	r19, 0x02	; 2
    11f6:	f9 01       	movw	r30, r18
    11f8:	a5 91       	lpm	r26, Z+
    11fa:	b4 91       	lpm	r27, Z+
 
// Set Timer4 to the following:-
//		Mode 	 = TIMER_MODE_PWM_FAST_ICR
//		Prescale = 8
	// Save the timer mode
	timerGetData(&pgm_Timers[4])->mode = TIMER_MODE_PWM_FAST_ICR;
    11fc:	8e e0       	ldi	r24, 0x0E	; 14
    11fe:	1a 96       	adiw	r26, 0x0a	; 10
    1200:	8c 93       	st	X, r24
    1202:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR4A,WGM40);
	} 
		
			
	if(14 & 2){
		sbi(TCCR4A,WGM41);
    1204:	e0 ea       	ldi	r30, 0xA0	; 160
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	82 60       	ori	r24, 0x02	; 2
    120c:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 4){
		sbi(TCCR4B,WGM42);
    120e:	e1 ea       	ldi	r30, 0xA1	; 161
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	88 60       	ori	r24, 0x08	; 8
    1216:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 8){
		sbi(TCCR4B,WGM43);
    1218:	80 81       	ld	r24, Z
    121a:	80 61       	ori	r24, 0x10	; 16
    121c:	80 83       	st	Z, r24
	} 
		
	// Top is stored in ICR register
	ICR4 = 40000;			
    121e:	80 e4       	ldi	r24, 0x40	; 64
    1220:	9c e9       	ldi	r25, 0x9C	; 156
    1222:	90 93 a7 00 	sts	0x00A7, r25
    1226:	80 93 a6 00 	sts	0x00A6, r24
			
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[4])->prescale_value = 8;
    122a:	48 e0       	ldi	r20, 0x08	; 8
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	4d 93       	st	X+, r20
    1230:	5c 93       	st	X, r21
	TCCR4B |= 2;
    1232:	80 81       	ld	r24, Z
    1234:	82 60       	ori	r24, 0x02	; 2
    1236:	80 83       	st	Z, r24
    1238:	24 5d       	subi	r18, 0xD4	; 212
    123a:	3f 4f       	sbci	r19, 0xFF	; 255
    123c:	f9 01       	movw	r30, r18
    123e:	a5 91       	lpm	r26, Z+
    1240:	b4 91       	lpm	r27, Z+
	 
// Set Timer5 to the following:-
//		Mode 	 = TIMER_MODE_CTC_OCR
//		Prescale = 8
	// Save the timer mode
	timerGetData(&pgm_Timers[5])->mode = TIMER_MODE_CTC_OCR;
    1242:	84 e0       	ldi	r24, 0x04	; 4
    1244:	1a 96       	adiw	r26, 0x0a	; 10
    1246:	8c 93       	st	X, r24
    1248:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR5A,WGM51);
	} 
		
			
	if(4 & 4){
		sbi(TCCR5B,WGM52);
    124a:	e1 e2       	ldi	r30, 0x21	; 33
    124c:	f1 e0       	ldi	r31, 0x01	; 1
    124e:	80 81       	ld	r24, Z
    1250:	88 60       	ori	r24, 0x08	; 8
    1252:	80 83       	st	Z, r24
	if(4 & 8){
		sbi(TCCR5B,WGM53);
	} 
		
	// Top is stored in Compare A OCR
				OCR5A = 64000;			
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	9a ef       	ldi	r25, 0xFA	; 250
    1258:	90 93 29 01 	sts	0x0129, r25
    125c:	80 93 28 01 	sts	0x0128, r24
				
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[5])->prescale_value = 8;
    1260:	4d 93       	st	X+, r20
    1262:	5c 93       	st	X, r21
	TCCR5B |= 2;
    1264:	80 81       	ld	r24, Z
    1266:	82 60       	ori	r24, 0x02	; 2
    1268:	80 83       	st	Z, r24
	}
    126a:	08 95       	ret

0000126c <servoPWMInit>:
    126c:	8f 92       	push	r8
    126e:	9f 92       	push	r9
    1270:	af 92       	push	r10
    1272:	bf 92       	push	r11
    1274:	cf 92       	push	r12
    1276:	df 92       	push	r13
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	6c 01       	movw	r12, r24
    1286:	dc 01       	movw	r26, r24
    1288:	12 96       	adiw	r26, 0x02	; 2
    128a:	8c 91       	ld	r24, X
    128c:	c8 2f       	mov	r28, r24
    128e:	d0 e0       	ldi	r29, 0x00	; 0
    1290:	21 97       	sbiw	r28, 0x01	; 1
    1292:	7e 01       	movw	r14, r28
    1294:	ee 0c       	add	r14, r14
    1296:	ff 1c       	adc	r15, r15
    1298:	9d e7       	ldi	r25, 0x7D	; 125
    129a:	89 2e       	mov	r8, r25
    129c:	93 e0       	ldi	r25, 0x03	; 3
    129e:	99 2e       	mov	r9, r25
    12a0:	8c e2       	ldi	r24, 0x2C	; 44
    12a2:	a8 2e       	mov	r10, r24
    12a4:	47 c0       	rjmp	.+142    	; 0x1334 <servoPWMInit+0xc8>
    12a6:	d6 01       	movw	r26, r12
    12a8:	ed 91       	ld	r30, X+
    12aa:	fc 91       	ld	r31, X
    12ac:	ee 0d       	add	r30, r14
    12ae:	ff 1d       	adc	r31, r15
    12b0:	05 91       	lpm	r16, Z+
    12b2:	14 91       	lpm	r17, Z+
    12b4:	f8 01       	movw	r30, r16
    12b6:	d5 82       	std	Z+5, r13	; 0x05
    12b8:	c4 82       	std	Z+4, r12	; 0x04
    12ba:	86 81       	ldd	r24, Z+6	; 0x06
    12bc:	97 81       	ldd	r25, Z+7	; 0x07
    12be:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <compareFromIOPin>
    12c2:	fc 01       	movw	r30, r24
    12c4:	d8 01       	movw	r26, r16
    12c6:	55 96       	adiw	r26, 0x15	; 21
    12c8:	9c 93       	st	X, r25
    12ca:	8e 93       	st	-X, r24
    12cc:	54 97       	sbiw	r26, 0x14	; 20
    12ce:	32 96       	adiw	r30, 0x02	; 2
    12d0:	b4 90       	lpm	r11, Z+
    12d2:	11 96       	adiw	r26, 0x01	; 1
    12d4:	9c 92       	st	X, r9
    12d6:	8e 92       	st	-X, r8
    12d8:	16 96       	adiw	r26, 0x06	; 6
    12da:	8d 91       	ld	r24, X+
    12dc:	9c 91       	ld	r25, X
    12de:	17 97       	sbiw	r26, 0x07	; 7
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <pin_make_output>
    12e6:	ba 9c       	mul	r11, r10
    12e8:	c0 01       	movw	r24, r0
    12ea:	11 24       	eor	r1, r1
    12ec:	8f 5e       	subi	r24, 0xEF	; 239
    12ee:	9d 4f       	sbci	r25, 0xFD	; 253
    12f0:	fc 01       	movw	r30, r24
    12f2:	a5 91       	lpm	r26, Z+
    12f4:	b4 91       	lpm	r27, Z+
    12f6:	8d 91       	ld	r24, X+
    12f8:	9c 91       	ld	r25, X
    12fa:	d8 01       	movw	r26, r16
    12fc:	53 96       	adiw	r26, 0x13	; 19
    12fe:	9c 93       	st	X, r25
    1300:	8e 93       	st	-X, r24
    1302:	52 97       	sbiw	r26, 0x12	; 18
    1304:	18 96       	adiw	r26, 0x08	; 8
    1306:	6d 91       	ld	r22, X+
    1308:	7c 91       	ld	r23, X
    130a:	19 97       	sbiw	r26, 0x09	; 9
    130c:	1a 96       	adiw	r26, 0x0a	; 10
    130e:	4d 91       	ld	r20, X+
    1310:	5c 91       	ld	r21, X
    1312:	1b 97       	sbiw	r26, 0x0b	; 11
    1314:	c8 01       	movw	r24, r16
    1316:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <servoSetConfig>
    131a:	c8 01       	movw	r24, r16
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__act_setSpeed>
    1322:	c8 01       	movw	r24, r16
    1324:	6f ef       	ldi	r22, 0xFF	; 255
    1326:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__act_setConnected>
    132a:	21 97       	sbiw	r28, 0x01	; 1
    132c:	ee ef       	ldi	r30, 0xFE	; 254
    132e:	ff ef       	ldi	r31, 0xFF	; 255
    1330:	ee 0e       	add	r14, r30
    1332:	ff 1e       	adc	r15, r31
    1334:	ff ef       	ldi	r31, 0xFF	; 255
    1336:	cf 3f       	cpi	r28, 0xFF	; 255
    1338:	df 07       	cpc	r29, r31
    133a:	09 f0       	breq	.+2      	; 0x133e <servoPWMInit+0xd2>
    133c:	b4 cf       	rjmp	.-152    	; 0x12a6 <servoPWMInit+0x3a>
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	ff 90       	pop	r15
    1348:	ef 90       	pop	r14
    134a:	df 90       	pop	r13
    134c:	cf 90       	pop	r12
    134e:	bf 90       	pop	r11
    1350:	af 90       	pop	r10
    1352:	9f 90       	pop	r9
    1354:	8f 90       	pop	r8
    1356:	08 95       	ret

00001358 <setConnected>:
    1358:	fc 01       	movw	r30, r24
    135a:	84 89       	ldd	r24, Z+20	; 0x14
    135c:	95 89       	ldd	r25, Z+21	; 0x15
    135e:	61 11       	cpse	r22, r1
    1360:	62 e0       	ldi	r22, 0x02	; 2
    1362:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <compareSetOutputMode>
    1366:	08 95       	ret

00001368 <setSpeed>:
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	fc 01       	movw	r30, r24
    1372:	e4 88       	ldd	r14, Z+20	; 0x14
    1374:	f5 88       	ldd	r15, Z+21	; 0x15
    1376:	24 85       	ldd	r18, Z+12	; 0x0c
    1378:	35 85       	ldd	r19, Z+13	; 0x0d
    137a:	06 85       	ldd	r16, Z+14	; 0x0e
    137c:	17 85       	ldd	r17, Z+15	; 0x0f
    137e:	86 2f       	mov	r24, r22
    1380:	99 27       	eor	r25, r25
    1382:	87 fd       	sbrc	r24, 7
    1384:	90 95       	com	r25
    1386:	61 e8       	ldi	r22, 0x81	; 129
    1388:	7f ef       	ldi	r23, 0xFF	; 255
    138a:	4f e7       	ldi	r20, 0x7F	; 127
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	0e 94 8e 0a 	call	0x151c	; 0x151c <interpolateU>
    1392:	bc 01       	movw	r22, r24
    1394:	c7 01       	movw	r24, r14
    1396:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <compareSetThreshold>
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	08 95       	ret

000013a4 <servoSetConfig>:
    13a4:	9f 92       	push	r9
    13a6:	af 92       	push	r10
    13a8:	bf 92       	push	r11
    13aa:	cf 92       	push	r12
    13ac:	df 92       	push	r13
    13ae:	ef 92       	push	r14
    13b0:	ff 92       	push	r15
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	ec 01       	movw	r28, r24
    13bc:	7b 01       	movw	r14, r22
    13be:	8a 01       	movw	r16, r20
    13c0:	79 87       	std	Y+9, r23	; 0x09
    13c2:	68 87       	std	Y+8, r22	; 0x08
    13c4:	5b 87       	std	Y+11, r21	; 0x0b
    13c6:	4a 87       	std	Y+10, r20	; 0x0a
    13c8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ca:	9d 81       	ldd	r25, Y+5	; 0x05
    13cc:	89 2b       	or	r24, r25
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <servoSetConfig+0x2e>
    13d0:	5e c0       	rjmp	.+188    	; 0x148e <servoSetConfig+0xea>
    13d2:	9f b6       	in	r9, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	8a 89       	ldd	r24, Y+18	; 0x12
    13d8:	9b 89       	ldd	r25, Y+19	; 0x13
    13da:	68 ee       	ldi	r22, 0xE8	; 232
    13dc:	73 e0       	ldi	r23, 0x03	; 3
    13de:	0e 94 01 1a 	call	0x3402	; 0x3402 <__udivmodhi4>
    13e2:	5b 01       	movw	r10, r22
    13e4:	cc 24       	eor	r12, r12
    13e6:	dd 24       	eor	r13, r13
    13e8:	b7 01       	movw	r22, r14
    13ea:	60 1b       	sub	r22, r16
    13ec:	71 0b       	sbc	r23, r17
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	a6 01       	movw	r20, r12
    13f4:	95 01       	movw	r18, r10
    13f6:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__mulsi3>
    13fa:	24 e1       	ldi	r18, 0x14	; 20
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	0e 94 15 1a 	call	0x342a	; 0x342a <__udivmodsi4>
    1406:	c9 01       	movw	r24, r18
    1408:	da 01       	movw	r26, r20
    140a:	9c 01       	movw	r18, r24
    140c:	ad 01       	movw	r20, r26
    140e:	da 01       	movw	r26, r20
    1410:	c9 01       	movw	r24, r18
    1412:	80 70       	andi	r24, 0x00	; 0
    1414:	90 70       	andi	r25, 0x00	; 0
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	a1 05       	cpc	r26, r1
    141a:	b1 05       	cpc	r27, r1
    141c:	39 f0       	breq	.+14     	; 0x142c <servoSetConfig+0x88>
    141e:	86 ee       	ldi	r24, 0xE6	; 230
    1420:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <setError>
    1424:	2f ef       	ldi	r18, 0xFF	; 255
    1426:	3f ef       	ldi	r19, 0xFF	; 255
    1428:	40 e0       	ldi	r20, 0x00	; 0
    142a:	50 e0       	ldi	r21, 0x00	; 0
    142c:	3d 87       	std	Y+13, r19	; 0x0d
    142e:	2c 87       	std	Y+12, r18	; 0x0c
    1430:	0e 0d       	add	r16, r14
    1432:	1f 1d       	adc	r17, r15
    1434:	b8 01       	movw	r22, r16
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a6 01       	movw	r20, r12
    143c:	95 01       	movw	r18, r10
    143e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__mulsi3>
    1442:	24 e1       	ldi	r18, 0x14	; 20
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e0       	ldi	r20, 0x00	; 0
    1448:	50 e0       	ldi	r21, 0x00	; 0
    144a:	0e 94 15 1a 	call	0x342a	; 0x342a <__udivmodsi4>
    144e:	c9 01       	movw	r24, r18
    1450:	da 01       	movw	r26, r20
    1452:	9c 01       	movw	r18, r24
    1454:	ad 01       	movw	r20, r26
    1456:	da 01       	movw	r26, r20
    1458:	c9 01       	movw	r24, r18
    145a:	80 70       	andi	r24, 0x00	; 0
    145c:	90 70       	andi	r25, 0x00	; 0
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	a1 05       	cpc	r26, r1
    1462:	b1 05       	cpc	r27, r1
    1464:	39 f0       	breq	.+14     	; 0x1474 <servoSetConfig+0xd0>
    1466:	86 ee       	ldi	r24, 0xE6	; 230
    1468:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <setError>
    146c:	2f ef       	ldi	r18, 0xFF	; 255
    146e:	3f ef       	ldi	r19, 0xFF	; 255
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	3f 87       	std	Y+15, r19	; 0x0f
    1476:	2e 87       	std	Y+14, r18	; 0x0e
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	80 ff       	sbrs	r24, 0
    147c:	07 c0       	rjmp	.+14     	; 0x148c <servoSetConfig+0xe8>
    147e:	6a 81       	ldd	r22, Y+2	; 0x02
    1480:	61 50       	subi	r22, 0x01	; 1
    1482:	6a 83       	std	Y+2, r22	; 0x02
    1484:	6f 5f       	subi	r22, 0xFF	; 255
    1486:	ce 01       	movw	r24, r28
    1488:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__act_setSpeed>
    148c:	9f be       	out	0x3f, r9	; 63
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	0f 91       	pop	r16
    1496:	ff 90       	pop	r15
    1498:	ef 90       	pop	r14
    149a:	df 90       	pop	r13
    149c:	cf 90       	pop	r12
    149e:	bf 90       	pop	r11
    14a0:	af 90       	pop	r10
    14a2:	9f 90       	pop	r9
    14a4:	08 95       	ret

000014a6 <__act_setSpeed>:
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	ec 01       	movw	r28, r24
    14ae:	16 2f       	mov	r17, r22
    14b0:	61 38       	cpi	r22, 0x81	; 129
    14b2:	0c f4       	brge	.+2      	; 0x14b6 <__act_setSpeed+0x10>
    14b4:	11 e8       	ldi	r17, 0x81	; 129
    14b6:	e8 81       	ld	r30, Y
    14b8:	f9 81       	ldd	r31, Y+1	; 0x01
    14ba:	30 97       	sbiw	r30, 0x00	; 0
    14bc:	79 f0       	breq	.+30     	; 0x14dc <__act_setSpeed+0x36>
    14be:	25 91       	lpm	r18, Z+
    14c0:	34 91       	lpm	r19, Z+
    14c2:	21 15       	cp	r18, r1
    14c4:	31 05       	cpc	r19, r1
    14c6:	51 f0       	breq	.+20     	; 0x14dc <__act_setSpeed+0x36>
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	81 fd       	sbrc	r24, 1
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <__act_setSpeed+0x2c>
    14ce:	61 2f       	mov	r22, r17
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <__act_setSpeed+0x30>
    14d2:	61 2f       	mov	r22, r17
    14d4:	61 95       	neg	r22
    14d6:	ce 01       	movw	r24, r28
    14d8:	f9 01       	movw	r30, r18
    14da:	09 95       	icall
    14dc:	1a 83       	std	Y+2, r17	; 0x02
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	08 95       	ret

000014e6 <__act_setConnected>:
    14e6:	dc 01       	movw	r26, r24
    14e8:	96 2f       	mov	r25, r22
    14ea:	91 70       	andi	r25, 0x01	; 1
    14ec:	13 96       	adiw	r26, 0x03	; 3
    14ee:	8c 91       	ld	r24, X
    14f0:	13 97       	sbiw	r26, 0x03	; 3
    14f2:	8e 7f       	andi	r24, 0xFE	; 254
    14f4:	89 2b       	or	r24, r25
    14f6:	13 96       	adiw	r26, 0x03	; 3
    14f8:	8c 93       	st	X, r24
    14fa:	13 97       	sbiw	r26, 0x03	; 3
    14fc:	8d 91       	ld	r24, X+
    14fe:	9c 91       	ld	r25, X
    1500:	11 97       	sbiw	r26, 0x01	; 1
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	51 f0       	breq	.+20     	; 0x151a <__act_setConnected+0x34>
    1506:	fc 01       	movw	r30, r24
    1508:	32 96       	adiw	r30, 0x02	; 2
    150a:	25 91       	lpm	r18, Z+
    150c:	34 91       	lpm	r19, Z+
    150e:	21 15       	cp	r18, r1
    1510:	31 05       	cpc	r19, r1
    1512:	19 f0       	breq	.+6      	; 0x151a <__act_setConnected+0x34>
    1514:	cd 01       	movw	r24, r26
    1516:	f9 01       	movw	r30, r18
    1518:	09 95       	icall
    151a:	08 95       	ret

0000151c <interpolateU>:
    151c:	4f 92       	push	r4
    151e:	5f 92       	push	r5
    1520:	6f 92       	push	r6
    1522:	7f 92       	push	r7
    1524:	8f 92       	push	r8
    1526:	9f 92       	push	r9
    1528:	af 92       	push	r10
    152a:	bf 92       	push	r11
    152c:	cf 92       	push	r12
    152e:	df 92       	push	r13
    1530:	ef 92       	push	r14
    1532:	ff 92       	push	r15
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	2b 01       	movw	r4, r22
    153a:	5a 01       	movw	r10, r20
    153c:	39 01       	movw	r6, r18
    153e:	78 01       	movw	r14, r16
    1540:	e2 1a       	sub	r14, r18
    1542:	f3 0a       	sbc	r15, r19
    1544:	00 e0       	ldi	r16, 0x00	; 0
    1546:	10 e0       	ldi	r17, 0x00	; 0
    1548:	9c 01       	movw	r18, r24
    154a:	26 1b       	sub	r18, r22
    154c:	37 0b       	sbc	r19, r23
    154e:	44 27       	eor	r20, r20
    1550:	37 fd       	sbrc	r19, 7
    1552:	40 95       	com	r20
    1554:	54 2f       	mov	r21, r20
    1556:	c8 01       	movw	r24, r16
    1558:	b7 01       	movw	r22, r14
    155a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__mulsi3>
    155e:	a4 18       	sub	r10, r4
    1560:	b5 08       	sbc	r11, r5
    1562:	cc 24       	eor	r12, r12
    1564:	b7 fc       	sbrc	r11, 7
    1566:	c0 94       	com	r12
    1568:	dc 2c       	mov	r13, r12
    156a:	a6 01       	movw	r20, r12
    156c:	95 01       	movw	r18, r10
    156e:	0e 94 37 1a 	call	0x346e	; 0x346e <__divmodsi4>
    1572:	88 24       	eor	r8, r8
    1574:	99 24       	eor	r9, r9
    1576:	26 0d       	add	r18, r6
    1578:	37 1d       	adc	r19, r7
    157a:	48 1d       	adc	r20, r8
    157c:	59 1d       	adc	r21, r9
    157e:	c9 01       	movw	r24, r18
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	ff 90       	pop	r15
    1586:	ef 90       	pop	r14
    1588:	df 90       	pop	r13
    158a:	cf 90       	pop	r12
    158c:	bf 90       	pop	r11
    158e:	af 90       	pop	r10
    1590:	9f 90       	pop	r9
    1592:	8f 90       	pop	r8
    1594:	7f 90       	pop	r7
    1596:	6f 90       	pop	r6
    1598:	5f 90       	pop	r5
    159a:	4f 90       	pop	r4
    159c:	08 95       	ret

0000159e <getError>:
    159e:	80 91 1d 04 	lds	r24, 0x041D
    15a2:	08 95       	ret

000015a4 <setErrorLog>:
    15a4:	90 93 21 04 	sts	0x0421, r25
    15a8:	80 93 20 04 	sts	0x0420, r24
    15ac:	08 95       	ret

000015ae <setError>:
    15ae:	1f 93       	push	r17
    15b0:	18 2f       	mov	r17, r24
    15b2:	80 91 1d 04 	lds	r24, 0x041D
    15b6:	88 23       	and	r24, r24
    15b8:	09 f0       	breq	.+2      	; 0x15bc <setError+0xe>
    15ba:	5a c0       	rjmp	.+180    	; 0x1670 <setError+0xc2>
    15bc:	10 93 1d 04 	sts	0x041D, r17
    15c0:	80 91 22 04 	lds	r24, 0x0422
    15c4:	90 91 23 04 	lds	r25, 0x0423
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	49 f0       	breq	.+18     	; 0x15de <setError+0x30>
    15cc:	0e 94 3a 0b 	call	0x1674	; 0x1674 <pin_is_output>
    15d0:	88 23       	and	r24, r24
    15d2:	29 f0       	breq	.+10     	; 0x15de <setError+0x30>
    15d4:	82 e2       	ldi	r24, 0x22	; 34
    15d6:	94 e0       	ldi	r25, 0x04	; 4
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	0e 94 9d 0b 	call	0x173a	; 0x173a <LED_set>
    15de:	80 91 2d 04 	lds	r24, 0x042D
    15e2:	90 91 2e 04 	lds	r25, 0x042E
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	09 f4       	brne	.+2      	; 0x15ec <setError+0x3e>
    15ea:	42 c0       	rjmp	.+132    	; 0x1670 <setError+0xc2>
    15ec:	17 ff       	sbrs	r17, 7
    15ee:	12 c0       	rjmp	.+36     	; 0x1614 <setError+0x66>
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <setError+0x44>
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <setError+0x46>
    15f4:	ad b7       	in	r26, 0x3d	; 61
    15f6:	be b7       	in	r27, 0x3e	; 62
    15f8:	12 96       	adiw	r26, 0x02	; 2
    15fa:	9c 93       	st	X, r25
    15fc:	8e 93       	st	-X, r24
    15fe:	11 97       	sbiw	r26, 0x01	; 1
    1600:	82 e9       	ldi	r24, 0x92	; 146
    1602:	93 e0       	ldi	r25, 0x03	; 3
    1604:	14 96       	adiw	r26, 0x04	; 4
    1606:	9c 93       	st	X, r25
    1608:	8e 93       	st	-X, r24
    160a:	13 97       	sbiw	r26, 0x03	; 3
    160c:	0e 94 3b 19 	call	0x3276	; 0x3276 <fprintf_P>
    1610:	11 95       	neg	r17
    1612:	0c c0       	rjmp	.+24     	; 0x162c <setError+0x7e>
    1614:	00 d0       	rcall	.+0      	; 0x1616 <setError+0x68>
    1616:	00 d0       	rcall	.+0      	; 0x1618 <setError+0x6a>
    1618:	ed b7       	in	r30, 0x3d	; 61
    161a:	fe b7       	in	r31, 0x3e	; 62
    161c:	92 83       	std	Z+2, r25	; 0x02
    161e:	81 83       	std	Z+1, r24	; 0x01
    1620:	8d e8       	ldi	r24, 0x8D	; 141
    1622:	93 e0       	ldi	r25, 0x03	; 3
    1624:	94 83       	std	Z+4, r25	; 0x04
    1626:	83 83       	std	Z+3, r24	; 0x03
    1628:	0e 94 3b 19 	call	0x3276	; 0x3276 <fprintf_P>
    162c:	00 d0       	rcall	.+0      	; 0x162e <setError+0x80>
    162e:	ed b7       	in	r30, 0x3d	; 61
    1630:	fe b7       	in	r31, 0x3e	; 62
    1632:	31 96       	adiw	r30, 0x01	; 1
    1634:	80 91 2d 04 	lds	r24, 0x042D
    1638:	90 91 2e 04 	lds	r25, 0x042E
    163c:	ad b7       	in	r26, 0x3d	; 61
    163e:	be b7       	in	r27, 0x3e	; 62
    1640:	12 96       	adiw	r26, 0x02	; 2
    1642:	9c 93       	st	X, r25
    1644:	8e 93       	st	-X, r24
    1646:	11 97       	sbiw	r26, 0x01	; 1
    1648:	81 e8       	ldi	r24, 0x81	; 129
    164a:	93 e0       	ldi	r25, 0x03	; 3
    164c:	93 83       	std	Z+3, r25	; 0x03
    164e:	82 83       	std	Z+2, r24	; 0x02
    1650:	81 2f       	mov	r24, r17
    1652:	99 27       	eor	r25, r25
    1654:	87 fd       	sbrc	r24, 7
    1656:	90 95       	com	r25
    1658:	95 83       	std	Z+5, r25	; 0x05
    165a:	84 83       	std	Z+4, r24	; 0x04
    165c:	0e 94 3b 19 	call	0x3276	; 0x3276 <fprintf_P>
    1660:	ed b7       	in	r30, 0x3d	; 61
    1662:	fe b7       	in	r31, 0x3e	; 62
    1664:	36 96       	adiw	r30, 0x06	; 6
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	f8 94       	cli
    166a:	fe bf       	out	0x3e, r31	; 62
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	ed bf       	out	0x3d, r30	; 61
    1670:	1f 91       	pop	r17
    1672:	08 95       	ret

00001674 <pin_is_output>:
    1674:	9c 01       	movw	r18, r24
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	81 f0       	breq	.+32     	; 0x169a <pin_is_output+0x26>
    167a:	fc 01       	movw	r30, r24
    167c:	85 91       	lpm	r24, Z+
    167e:	94 91       	lpm	r25, Z+
    1680:	02 96       	adiw	r24, 0x02	; 2
    1682:	fc 01       	movw	r30, r24
    1684:	a5 91       	lpm	r26, Z+
    1686:	b4 91       	lpm	r27, Z+
    1688:	2e 5f       	subi	r18, 0xFE	; 254
    168a:	3f 4f       	sbci	r19, 0xFF	; 255
    168c:	f9 01       	movw	r30, r18
    168e:	94 91       	lpm	r25, Z+
    1690:	8c 91       	ld	r24, X
    1692:	89 23       	and	r24, r25
    1694:	11 f0       	breq	.+4      	; 0x169a <pin_is_output+0x26>
    1696:	8f ef       	ldi	r24, 0xFF	; 255
    1698:	08 95       	ret
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	08 95       	ret

0000169e <pin_make_input>:
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	9c 01       	movw	r18, r24
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	f9 f0       	breq	.+62     	; 0x16e6 <pin_make_input+0x48>
    16a8:	fc 01       	movw	r30, r24
    16aa:	45 91       	lpm	r20, Z+
    16ac:	54 91       	lpm	r21, Z+
    16ae:	ca 01       	movw	r24, r20
    16b0:	02 96       	adiw	r24, 0x02	; 2
    16b2:	fc 01       	movw	r30, r24
    16b4:	a5 91       	lpm	r26, Z+
    16b6:	b4 91       	lpm	r27, Z+
    16b8:	fa 01       	movw	r30, r20
    16ba:	c5 91       	lpm	r28, Z+
    16bc:	d4 91       	lpm	r29, Z+
    16be:	2e 5f       	subi	r18, 0xFE	; 254
    16c0:	3f 4f       	sbci	r19, 0xFF	; 255
    16c2:	f9 01       	movw	r30, r18
    16c4:	94 91       	lpm	r25, Z+
    16c6:	3f b7       	in	r19, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	8c 91       	ld	r24, X
    16cc:	29 2f       	mov	r18, r25
    16ce:	20 95       	com	r18
    16d0:	82 23       	and	r24, r18
    16d2:	8c 93       	st	X, r24
    16d4:	66 23       	and	r22, r22
    16d6:	19 f0       	breq	.+6      	; 0x16de <pin_make_input+0x40>
    16d8:	88 81       	ld	r24, Y
    16da:	89 2b       	or	r24, r25
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <pin_make_input+0x44>
    16de:	88 81       	ld	r24, Y
    16e0:	82 23       	and	r24, r18
    16e2:	88 83       	st	Y, r24
    16e4:	3f bf       	out	0x3f, r19	; 63
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	08 95       	ret

000016ec <pin_make_output>:
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	9c 01       	movw	r18, r24
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	f9 f0       	breq	.+62     	; 0x1734 <pin_make_output+0x48>
    16f6:	fc 01       	movw	r30, r24
    16f8:	45 91       	lpm	r20, Z+
    16fa:	54 91       	lpm	r21, Z+
    16fc:	ca 01       	movw	r24, r20
    16fe:	02 96       	adiw	r24, 0x02	; 2
    1700:	fc 01       	movw	r30, r24
    1702:	c5 91       	lpm	r28, Z+
    1704:	d4 91       	lpm	r29, Z+
    1706:	fa 01       	movw	r30, r20
    1708:	a5 91       	lpm	r26, Z+
    170a:	b4 91       	lpm	r27, Z+
    170c:	2e 5f       	subi	r18, 0xFE	; 254
    170e:	3f 4f       	sbci	r19, 0xFF	; 255
    1710:	f9 01       	movw	r30, r18
    1712:	24 91       	lpm	r18, Z+
    1714:	3f b7       	in	r19, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	66 23       	and	r22, r22
    171a:	19 f0       	breq	.+6      	; 0x1722 <pin_make_output+0x36>
    171c:	8c 91       	ld	r24, X
    171e:	82 2b       	or	r24, r18
    1720:	04 c0       	rjmp	.+8      	; 0x172a <pin_make_output+0x3e>
    1722:	8c 91       	ld	r24, X
    1724:	92 2f       	mov	r25, r18
    1726:	90 95       	com	r25
    1728:	89 23       	and	r24, r25
    172a:	8c 93       	st	X, r24
    172c:	88 81       	ld	r24, Y
    172e:	82 2b       	or	r24, r18
    1730:	88 83       	st	Y, r24
    1732:	3f bf       	out	0x3f, r19	; 63
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	08 95       	ret

0000173a <LED_set>:
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	ec 01       	movw	r28, r24
    1742:	16 2f       	mov	r17, r22
    1744:	88 81       	ld	r24, Y
    1746:	99 81       	ldd	r25, Y+1	; 0x01
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	a9 f0       	breq	.+42     	; 0x1776 <LED_set+0x3c>
    174c:	3a 81       	ldd	r19, Y+2	; 0x02
    174e:	30 fd       	sbrc	r19, 0
    1750:	05 c0       	rjmp	.+10     	; 0x175c <LED_set+0x22>
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	66 23       	and	r22, r22
    1756:	09 f4       	brne	.+2      	; 0x175a <LED_set+0x20>
    1758:	21 e0       	ldi	r18, 0x01	; 1
    175a:	12 2f       	mov	r17, r18
    175c:	31 fd       	sbrc	r19, 1
    175e:	06 c0       	rjmp	.+12     	; 0x176c <LED_set+0x32>
    1760:	61 2f       	mov	r22, r17
    1762:	0e 94 76 0b 	call	0x16ec	; 0x16ec <pin_make_output>
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	82 60       	ori	r24, 0x02	; 2
    176a:	8a 83       	std	Y+2, r24	; 0x02
    176c:	88 81       	ld	r24, Y
    176e:	99 81       	ldd	r25, Y+1	; 0x01
    1770:	61 2f       	mov	r22, r17
    1772:	0e 94 01 12 	call	0x2402	; 0x2402 <pin_set>
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
    177c:	08 95       	ret

0000177e <main>:
    177e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <registerLED>
    1782:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__initTimers>
    1786:	0e 94 96 07 	call	0xf2c	; 0xf2c <__clockInit>
    178a:	78 94       	sei
    178c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <sysInitHardware>
    1790:	0e 94 1c 03 	call	0x638	; 0x638 <appInitHardware>
    1794:	0e 94 79 07 	call	0xef2	; 0xef2 <clockGetus>
    1798:	60 93 04 04 	sts	0x0404, r22
    179c:	70 93 05 04 	sts	0x0405, r23
    17a0:	80 93 06 04 	sts	0x0406, r24
    17a4:	90 93 07 04 	sts	0x0407, r25
    17a8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <appInitSoftware>
    17ac:	60 93 08 04 	sts	0x0408, r22
    17b0:	70 93 09 04 	sts	0x0409, r23
    17b4:	80 93 0a 04 	sts	0x040A, r24
    17b8:	90 93 0b 04 	sts	0x040B, r25
    17bc:	78 94       	sei
    17be:	0e 94 ad 11 	call	0x235a	; 0x235a <breathe>
    17c2:	80 91 08 04 	lds	r24, 0x0408
    17c6:	90 91 09 04 	lds	r25, 0x0409
    17ca:	a0 91 0a 04 	lds	r26, 0x040A
    17ce:	b0 91 0b 04 	lds	r27, 0x040B
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	a1 05       	cpc	r26, r1
    17d6:	b1 05       	cpc	r27, r1
    17d8:	19 f4       	brne	.+6      	; 0x17e0 <main+0x62>
    17da:	16 c0       	rjmp	.+44     	; 0x1808 <main+0x8a>
    17dc:	0e 94 ad 11 	call	0x235a	; 0x235a <breathe>
    17e0:	60 91 04 04 	lds	r22, 0x0404
    17e4:	70 91 05 04 	lds	r23, 0x0405
    17e8:	80 91 06 04 	lds	r24, 0x0406
    17ec:	90 91 07 04 	lds	r25, 0x0407
    17f0:	20 91 08 04 	lds	r18, 0x0408
    17f4:	30 91 09 04 	lds	r19, 0x0409
    17f8:	40 91 0a 04 	lds	r20, 0x040A
    17fc:	50 91 0b 04 	lds	r21, 0x040B
    1800:	0e 94 62 11 	call	0x22c4	; 0x22c4 <clockHasElapsed>
    1804:	88 23       	and	r24, r24
    1806:	51 f3       	breq	.-44     	; 0x17dc <main+0x5e>
    1808:	0e 94 79 07 	call	0xef2	; 0xef2 <clockGetus>
    180c:	9b 01       	movw	r18, r22
    180e:	ac 01       	movw	r20, r24
    1810:	60 93 04 04 	sts	0x0404, r22
    1814:	70 93 05 04 	sts	0x0405, r23
    1818:	80 93 06 04 	sts	0x0406, r24
    181c:	90 93 07 04 	sts	0x0407, r25
    1820:	60 91 00 04 	lds	r22, 0x0400
    1824:	70 91 01 04 	lds	r23, 0x0401
    1828:	80 91 02 04 	lds	r24, 0x0402
    182c:	90 91 03 04 	lds	r25, 0x0403
    1830:	6f 5f       	subi	r22, 0xFF	; 255
    1832:	7f 4f       	sbci	r23, 0xFF	; 255
    1834:	8f 4f       	sbci	r24, 0xFF	; 255
    1836:	9f 4f       	sbci	r25, 0xFF	; 255
    1838:	60 93 00 04 	sts	0x0400, r22
    183c:	70 93 01 04 	sts	0x0401, r23
    1840:	80 93 02 04 	sts	0x0402, r24
    1844:	90 93 03 04 	sts	0x0403, r25
    1848:	0e 94 c1 02 	call	0x582	; 0x582 <appControl>
    184c:	af cf       	rjmp	.-162    	; 0x17ac <main+0x2e>

0000184e <rprintfIgnore>:
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	08 95       	ret

00001852 <rprintfInit>:
    1852:	4f b7       	in	r20, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	20 91 e7 02 	lds	r18, 0x02E7
    185a:	30 91 e8 02 	lds	r19, 0x02E8
    185e:	90 93 e8 02 	sts	0x02E8, r25
    1862:	80 93 e7 02 	sts	0x02E7, r24
    1866:	4f bf       	out	0x3f, r20	; 63
    1868:	c9 01       	movw	r24, r18
    186a:	08 95       	ret

0000186c <rprintfChar>:
    186c:	1f 93       	push	r17
    186e:	18 2f       	mov	r17, r24
    1870:	8a 30       	cpi	r24, 0x0A	; 10
    1872:	31 f4       	brne	.+12     	; 0x1880 <rprintfChar+0x14>
    1874:	e0 91 e7 02 	lds	r30, 0x02E7
    1878:	f0 91 e8 02 	lds	r31, 0x02E8
    187c:	8d e0       	ldi	r24, 0x0D	; 13
    187e:	09 95       	icall
    1880:	e0 91 e7 02 	lds	r30, 0x02E7
    1884:	f0 91 e8 02 	lds	r31, 0x02E8
    1888:	81 2f       	mov	r24, r17
    188a:	09 95       	icall
    188c:	1f 91       	pop	r17
    188e:	08 95       	ret

00001890 <rprintfCRLF>:
    1890:	8a e0       	ldi	r24, 0x0A	; 10
    1892:	0e 94 36 0c 	call	0x186c	; 0x186c <rprintfChar>
    1896:	08 95       	ret

00001898 <marqueeSendByte>:
    1898:	cf 92       	push	r12
    189a:	df 92       	push	r13
    189c:	ef 92       	push	r14
    189e:	ff 92       	push	r15
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
    18a8:	ec 01       	movw	r28, r24
    18aa:	d6 2e       	mov	r13, r22
    18ac:	8c 81       	ldd	r24, Y+4	; 0x04
    18ae:	9d 81       	ldd	r25, Y+5	; 0x05
    18b0:	89 2b       	or	r24, r25
    18b2:	a9 f5       	brne	.+106    	; 0x191e <marqueeSendByte+0x86>
    18b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    18b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    18b8:	01 96       	adiw	r24, 0x01	; 1
    18ba:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <malloc>
    18be:	9d 83       	std	Y+5, r25	; 0x05
    18c0:	8c 83       	std	Y+4, r24	; 0x04
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	61 f1       	breq	.+88     	; 0x191e <marqueeSendByte+0x86>
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	07 c0       	rjmp	.+14     	; 0x18da <marqueeSendByte+0x42>
    18cc:	ec 81       	ldd	r30, Y+4	; 0x04
    18ce:	fd 81       	ldd	r31, Y+5	; 0x05
    18d0:	e2 0f       	add	r30, r18
    18d2:	f3 1f       	adc	r31, r19
    18d4:	10 82       	st	Z, r1
    18d6:	2f 5f       	subi	r18, 0xFF	; 255
    18d8:	3f 4f       	sbci	r19, 0xFF	; 255
    18da:	8a 85       	ldd	r24, Y+10	; 0x0a
    18dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    18de:	82 17       	cp	r24, r18
    18e0:	93 07       	cpc	r25, r19
    18e2:	a0 f7       	brcc	.-24     	; 0x18cc <marqueeSendByte+0x34>
    18e4:	19 86       	std	Y+9, r1	; 0x09
    18e6:	18 86       	std	Y+8, r1	; 0x08
    18e8:	1f 82       	std	Y+7, r1	; 0x07
    18ea:	1e 82       	std	Y+6, r1	; 0x06
    18ec:	8c 89       	ldd	r24, Y+20	; 0x14
    18ee:	8e 7f       	andi	r24, 0xFE	; 254
    18f0:	8c 8b       	std	Y+20, r24	; 0x14
    18f2:	00 e0       	ldi	r16, 0x00	; 0
    18f4:	10 e0       	ldi	r17, 0x00	; 0
    18f6:	0e c0       	rjmp	.+28     	; 0x1914 <marqueeSendByte+0x7c>
    18f8:	c8 01       	movw	r24, r16
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	e8 81       	ld	r30, Y
    1900:	f9 81       	ldd	r31, Y+1	; 0x01
    1902:	e8 0f       	add	r30, r24
    1904:	f9 1f       	adc	r31, r25
    1906:	85 91       	lpm	r24, Z+
    1908:	94 91       	lpm	r25, Z+
    190a:	60 e2       	ldi	r22, 0x20	; 32
    190c:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <segled_put_char>
    1910:	0f 5f       	subi	r16, 0xFF	; 255
    1912:	1f 4f       	sbci	r17, 0xFF	; 255
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	9b 81       	ldd	r25, Y+3	; 0x03
    1918:	08 17       	cp	r16, r24
    191a:	19 07       	cpc	r17, r25
    191c:	68 f3       	brcs	.-38     	; 0x18f8 <marqueeSendByte+0x60>
    191e:	ec 81       	ldd	r30, Y+4	; 0x04
    1920:	fd 81       	ldd	r31, Y+5	; 0x05
    1922:	30 97       	sbiw	r30, 0x00	; 0
    1924:	09 f4       	brne	.+2      	; 0x1928 <marqueeSendByte+0x90>
    1926:	3e c0       	rjmp	.+124    	; 0x19a4 <marqueeSendByte+0x10c>
    1928:	8a e0       	ldi	r24, 0x0A	; 10
    192a:	d8 16       	cp	r13, r24
    192c:	19 f5       	brne	.+70     	; 0x1974 <marqueeSendByte+0xdc>
    192e:	88 85       	ldd	r24, Y+8	; 0x08
    1930:	99 85       	ldd	r25, Y+9	; 0x09
    1932:	e8 0f       	add	r30, r24
    1934:	f9 1f       	adc	r31, r25
    1936:	10 82       	st	Z, r1
    1938:	19 86       	std	Y+9, r1	; 0x09
    193a:	18 86       	std	Y+8, r1	; 0x08
    193c:	cf b6       	in	r12, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	8c 89       	ldd	r24, Y+20	; 0x14
    1942:	80 fd       	sbrc	r24, 0
    1944:	15 c0       	rjmp	.+42     	; 0x1970 <marqueeSendByte+0xd8>
    1946:	8c 89       	ldd	r24, Y+20	; 0x14
    1948:	81 60       	ori	r24, 0x01	; 1
    194a:	8c 8b       	std	Y+20, r24	; 0x14
    194c:	8c 89       	ldd	r24, Y+20	; 0x14
    194e:	8d 7f       	andi	r24, 0xFD	; 253
    1950:	8c 8b       	std	Y+20, r24	; 0x14
    1952:	1f 82       	std	Y+7, r1	; 0x07
    1954:	1e 82       	std	Y+6, r1	; 0x06
    1956:	0e 94 79 07 	call	0xef2	; 0xef2 <clockGetus>
    195a:	9b 01       	movw	r18, r22
    195c:	ac 01       	movw	r20, r24
    195e:	ec 84       	ldd	r14, Y+12	; 0x0c
    1960:	fd 84       	ldd	r15, Y+13	; 0x0d
    1962:	0e 85       	ldd	r16, Y+14	; 0x0e
    1964:	1f 85       	ldd	r17, Y+15	; 0x0f
    1966:	8c ed       	ldi	r24, 0xDC	; 220
    1968:	9c e0       	ldi	r25, 0x0C	; 12
    196a:	be 01       	movw	r22, r28
    196c:	0e 94 1e 13 	call	0x263c	; 0x263c <scheduleJob>
    1970:	cf be       	out	0x3f, r12	; 63
    1972:	18 c0       	rjmp	.+48     	; 0x19a4 <marqueeSendByte+0x10c>
    1974:	8d e0       	ldi	r24, 0x0D	; 13
    1976:	d8 16       	cp	r13, r24
    1978:	a9 f0       	breq	.+42     	; 0x19a4 <marqueeSendByte+0x10c>
    197a:	28 85       	ldd	r18, Y+8	; 0x08
    197c:	39 85       	ldd	r19, Y+9	; 0x09
    197e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1980:	9b 85       	ldd	r25, Y+11	; 0x0b
    1982:	28 17       	cp	r18, r24
    1984:	39 07       	cpc	r19, r25
    1986:	70 f4       	brcc	.+28     	; 0x19a4 <marqueeSendByte+0x10c>
    1988:	e2 0f       	add	r30, r18
    198a:	f3 1f       	adc	r31, r19
    198c:	2f b7       	in	r18, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	d0 82       	st	Z, r13
    1992:	11 82       	std	Z+1, r1	; 0x01
    1994:	88 85       	ldd	r24, Y+8	; 0x08
    1996:	99 85       	ldd	r25, Y+9	; 0x09
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	99 87       	std	Y+9, r25	; 0x09
    199c:	88 87       	std	Y+8, r24	; 0x08
    199e:	1f 82       	std	Y+7, r1	; 0x07
    19a0:	1e 82       	std	Y+6, r1	; 0x06
    19a2:	2f bf       	out	0x3f, r18	; 63
    19a4:	8d 2d       	mov	r24, r13
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	1f 91       	pop	r17
    19ac:	0f 91       	pop	r16
    19ae:	ff 90       	pop	r15
    19b0:	ef 90       	pop	r14
    19b2:	df 90       	pop	r13
    19b4:	cf 90       	pop	r12
    19b6:	08 95       	ret

000019b8 <marqueeUpdate>:
    19b8:	2f 92       	push	r2
    19ba:	3f 92       	push	r3
    19bc:	4f 92       	push	r4
    19be:	5f 92       	push	r5
    19c0:	6f 92       	push	r6
    19c2:	7f 92       	push	r7
    19c4:	8f 92       	push	r8
    19c6:	9f 92       	push	r9
    19c8:	af 92       	push	r10
    19ca:	bf 92       	push	r11
    19cc:	cf 92       	push	r12
    19ce:	df 92       	push	r13
    19d0:	ef 92       	push	r14
    19d2:	ff 92       	push	r15
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	38 2e       	mov	r3, r24
    19de:	29 2e       	mov	r2, r25
    19e0:	2a 01       	movw	r4, r20
    19e2:	3b 01       	movw	r6, r22
    19e4:	c8 2f       	mov	r28, r24
    19e6:	d9 2f       	mov	r29, r25
    19e8:	0c 81       	ldd	r16, Y+4	; 0x04
    19ea:	1d 81       	ldd	r17, Y+5	; 0x05
    19ec:	8e 81       	ldd	r24, Y+6	; 0x06
    19ee:	9f 81       	ldd	r25, Y+7	; 0x07
    19f0:	08 0f       	add	r16, r24
    19f2:	19 1f       	adc	r17, r25
    19f4:	f8 01       	movw	r30, r16
    19f6:	80 80       	ld	r8, Z
    19f8:	8c 89       	ldd	r24, Y+20	; 0x14
    19fa:	86 95       	lsr	r24
    19fc:	81 70       	andi	r24, 0x01	; 1
    19fe:	88 20       	and	r8, r8
    1a00:	29 f4       	brne	.+10     	; 0x1a0c <marqueeUpdate+0x54>
    1a02:	a8 88       	ldd	r10, Y+16	; 0x10
    1a04:	b9 88       	ldd	r11, Y+17	; 0x11
    1a06:	ca 88       	ldd	r12, Y+18	; 0x12
    1a08:	db 88       	ldd	r13, Y+19	; 0x13
    1a0a:	04 c0       	rjmp	.+8      	; 0x1a14 <marqueeUpdate+0x5c>
    1a0c:	ac 84       	ldd	r10, Y+12	; 0x0c
    1a0e:	bd 84       	ldd	r11, Y+13	; 0x0d
    1a10:	ce 84       	ldd	r12, Y+14	; 0x0e
    1a12:	df 84       	ldd	r13, Y+15	; 0x0f
    1a14:	88 23       	and	r24, r24
    1a16:	d1 f4       	brne	.+52     	; 0x1a4c <marqueeUpdate+0x94>
    1a18:	88 20       	and	r8, r8
    1a1a:	c1 f0       	breq	.+48     	; 0x1a4c <marqueeUpdate+0x94>
    1a1c:	f8 01       	movw	r30, r16
    1a1e:	32 91       	ld	r19, -Z
    1a20:	8f 01       	movw	r16, r30
    1a22:	0f 5f       	subi	r16, 0xFF	; 255
    1a24:	1f 4f       	sbci	r17, 0xFF	; 255
    1a26:	4a 81       	ldd	r20, Y+2	; 0x02
    1a28:	5b 81       	ldd	r21, Y+3	; 0x03
    1a2a:	f8 01       	movw	r30, r16
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	07 c0       	rjmp	.+14     	; 0x1a40 <marqueeUpdate+0x88>
    1a32:	20 81       	ld	r18, Z
    1a34:	22 23       	and	r18, r18
    1a36:	51 f0       	breq	.+20     	; 0x1a4c <marqueeUpdate+0x94>
    1a38:	23 17       	cp	r18, r19
    1a3a:	41 f4       	brne	.+16     	; 0x1a4c <marqueeUpdate+0x94>
    1a3c:	31 96       	adiw	r30, 0x01	; 1
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	84 17       	cp	r24, r20
    1a42:	95 07       	cpc	r25, r21
    1a44:	b0 f3       	brcs	.-20     	; 0x1a32 <marqueeUpdate+0x7a>
    1a46:	99 24       	eor	r9, r9
    1a48:	9a 94       	dec	r9
    1a4a:	01 c0       	rjmp	.+2      	; 0x1a4e <marqueeUpdate+0x96>
    1a4c:	99 24       	eor	r9, r9
    1a4e:	8c 89       	ldd	r24, Y+20	; 0x14
    1a50:	86 95       	lsr	r24
    1a52:	81 70       	andi	r24, 0x01	; 1
    1a54:	29 2d       	mov	r18, r9
    1a56:	33 27       	eor	r19, r19
    1a58:	27 fd       	sbrc	r18, 7
    1a5a:	30 95       	com	r19
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	28 17       	cp	r18, r24
    1a60:	39 07       	cpc	r19, r25
    1a62:	c1 f0       	breq	.+48     	; 0x1a94 <marqueeUpdate+0xdc>
    1a64:	a6 01       	movw	r20, r12
    1a66:	95 01       	movw	r18, r10
    1a68:	62 e0       	ldi	r22, 0x02	; 2
    1a6a:	56 95       	lsr	r21
    1a6c:	47 95       	ror	r20
    1a6e:	37 95       	ror	r19
    1a70:	27 95       	ror	r18
    1a72:	6a 95       	dec	r22
    1a74:	d1 f7       	brne	.-12     	; 0x1a6a <marqueeUpdate+0xb2>
    1a76:	99 2d       	mov	r25, r9
    1a78:	92 70       	andi	r25, 0x02	; 2
    1a7a:	8c 89       	ldd	r24, Y+20	; 0x14
    1a7c:	8d 7f       	andi	r24, 0xFD	; 253
    1a7e:	89 2b       	or	r24, r25
    1a80:	8c 8b       	std	Y+20, r24	; 0x14
    1a82:	99 20       	and	r9, r9
    1a84:	19 f0       	breq	.+6      	; 0x1a8c <marqueeUpdate+0xd4>
    1a86:	59 01       	movw	r10, r18
    1a88:	6a 01       	movw	r12, r20
    1a8a:	04 c0       	rjmp	.+8      	; 0x1a94 <marqueeUpdate+0xdc>
    1a8c:	a2 1a       	sub	r10, r18
    1a8e:	b3 0a       	sbc	r11, r19
    1a90:	c4 0a       	sbc	r12, r20
    1a92:	d5 0a       	sbc	r13, r21
    1a94:	ee 24       	eor	r14, r14
    1a96:	ff 24       	eor	r15, r15
    1a98:	18 c0       	rjmp	.+48     	; 0x1aca <marqueeUpdate+0x112>
    1a9a:	c7 01       	movw	r24, r14
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	e8 81       	ld	r30, Y
    1aa2:	f9 81       	ldd	r31, Y+1	; 0x01
    1aa4:	e8 0f       	add	r30, r24
    1aa6:	f9 1f       	adc	r31, r25
    1aa8:	85 91       	lpm	r24, Z+
    1aaa:	94 91       	lpm	r25, Z+
    1aac:	99 20       	and	r9, r9
    1aae:	39 f4       	brne	.+14     	; 0x1abe <marqueeUpdate+0x106>
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	60 81       	ld	r22, Z
    1ab4:	66 23       	and	r22, r22
    1ab6:	19 f0       	breq	.+6      	; 0x1abe <marqueeUpdate+0x106>
    1ab8:	0f 5f       	subi	r16, 0xFF	; 255
    1aba:	1f 4f       	sbci	r17, 0xFF	; 255
    1abc:	01 c0       	rjmp	.+2      	; 0x1ac0 <marqueeUpdate+0x108>
    1abe:	60 e2       	ldi	r22, 0x20	; 32
    1ac0:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <segled_put_char>
    1ac4:	08 94       	sec
    1ac6:	e1 1c       	adc	r14, r1
    1ac8:	f1 1c       	adc	r15, r1
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ace:	e8 16       	cp	r14, r24
    1ad0:	f9 06       	cpc	r15, r25
    1ad2:	18 f3       	brcs	.-58     	; 0x1a9a <marqueeUpdate+0xe2>
    1ad4:	88 20       	and	r8, r8
    1ad6:	b1 f4       	brne	.+44     	; 0x1b04 <marqueeUpdate+0x14c>
    1ad8:	1f 82       	std	Y+7, r1	; 0x07
    1ada:	1e 82       	std	Y+6, r1	; 0x06
    1adc:	88 89       	ldd	r24, Y+16	; 0x10
    1ade:	99 89       	ldd	r25, Y+17	; 0x11
    1ae0:	aa 89       	ldd	r26, Y+18	; 0x12
    1ae2:	bb 89       	ldd	r27, Y+19	; 0x13
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	a1 05       	cpc	r26, r1
    1ae8:	b1 05       	cpc	r27, r1
    1aea:	29 f0       	breq	.+10     	; 0x1af6 <marqueeUpdate+0x13e>
    1aec:	ec 81       	ldd	r30, Y+4	; 0x04
    1aee:	fd 81       	ldd	r31, Y+5	; 0x05
    1af0:	80 81       	ld	r24, Z
    1af2:	88 23       	and	r24, r24
    1af4:	19 f4       	brne	.+6      	; 0x1afc <marqueeUpdate+0x144>
    1af6:	8c 89       	ldd	r24, Y+20	; 0x14
    1af8:	8e 7f       	andi	r24, 0xFE	; 254
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <marqueeUpdate+0x148>
    1afc:	8c 89       	ldd	r24, Y+20	; 0x14
    1afe:	8d 7f       	andi	r24, 0xFD	; 253
    1b00:	8c 8b       	std	Y+20, r24	; 0x14
    1b02:	07 c0       	rjmp	.+14     	; 0x1b12 <marqueeUpdate+0x15a>
    1b04:	99 20       	and	r9, r9
    1b06:	29 f4       	brne	.+10     	; 0x1b12 <marqueeUpdate+0x15a>
    1b08:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	9f 83       	std	Y+7, r25	; 0x07
    1b10:	8e 83       	std	Y+6, r24	; 0x06
    1b12:	8c 89       	ldd	r24, Y+20	; 0x14
    1b14:	80 ff       	sbrs	r24, 0
    1b16:	0a c0       	rjmp	.+20     	; 0x1b2c <marqueeUpdate+0x174>
    1b18:	8c ed       	ldi	r24, 0xDC	; 220
    1b1a:	9c e0       	ldi	r25, 0x0C	; 12
    1b1c:	63 2d       	mov	r22, r3
    1b1e:	72 2d       	mov	r23, r2
    1b20:	a3 01       	movw	r20, r6
    1b22:	92 01       	movw	r18, r4
    1b24:	86 01       	movw	r16, r12
    1b26:	75 01       	movw	r14, r10
    1b28:	0e 94 1e 13 	call	0x263c	; 0x263c <scheduleJob>
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	1f 91       	pop	r17
    1b32:	0f 91       	pop	r16
    1b34:	ff 90       	pop	r15
    1b36:	ef 90       	pop	r14
    1b38:	df 90       	pop	r13
    1b3a:	cf 90       	pop	r12
    1b3c:	bf 90       	pop	r11
    1b3e:	af 90       	pop	r10
    1b40:	9f 90       	pop	r9
    1b42:	8f 90       	pop	r8
    1b44:	7f 90       	pop	r7
    1b46:	6f 90       	pop	r6
    1b48:	5f 90       	pop	r5
    1b4a:	4f 90       	pop	r4
    1b4c:	3f 90       	pop	r3
    1b4e:	2f 90       	pop	r2
    1b50:	08 95       	ret

00001b52 <segled_put_char>:
    1b52:	ef 92       	push	r14
    1b54:	ff 92       	push	r15
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	8c 01       	movw	r16, r24
    1b60:	e6 2e       	mov	r14, r22
    1b62:	fc 01       	movw	r30, r24
    1b64:	80 89       	ldd	r24, Z+16	; 0x10
    1b66:	81 fd       	sbrc	r24, 1
    1b68:	12 c0       	rjmp	.+36     	; 0x1b8e <segled_put_char+0x3c>
    1b6a:	c0 e0       	ldi	r28, 0x00	; 0
    1b6c:	d0 e0       	ldi	r29, 0x00	; 0
    1b6e:	f8 01       	movw	r30, r16
    1b70:	ec 0f       	add	r30, r28
    1b72:	fd 1f       	adc	r31, r29
    1b74:	80 81       	ld	r24, Z
    1b76:	91 81       	ldd	r25, Z+1	; 0x01
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <pin_make_output>
    1b7e:	22 96       	adiw	r28, 0x02	; 2
    1b80:	c0 31       	cpi	r28, 0x10	; 16
    1b82:	d1 05       	cpc	r29, r1
    1b84:	a1 f7       	brne	.-24     	; 0x1b6e <segled_put_char+0x1c>
    1b86:	f8 01       	movw	r30, r16
    1b88:	80 89       	ldd	r24, Z+16	; 0x10
    1b8a:	82 60       	ori	r24, 0x02	; 2
    1b8c:	80 8b       	std	Z+16, r24	; 0x10
    1b8e:	8e 2d       	mov	r24, r14
    1b90:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <segled8_get_mask>
    1b94:	f8 2e       	mov	r15, r24
    1b96:	80 ff       	sbrs	r24, 0
    1b98:	07 c0       	rjmp	.+14     	; 0x1ba8 <segled_put_char+0x56>
    1b9a:	f8 01       	movw	r30, r16
    1b9c:	86 85       	ldd	r24, Z+14	; 0x0e
    1b9e:	97 85       	ldd	r25, Z+15	; 0x0f
    1ba0:	89 2b       	or	r24, r25
    1ba2:	11 f4       	brne	.+4      	; 0x1ba8 <segled_put_char+0x56>
    1ba4:	80 e1       	ldi	r24, 0x10	; 16
    1ba6:	f8 2e       	mov	r15, r24
    1ba8:	f8 01       	movw	r30, r16
    1baa:	80 89       	ldd	r24, Z+16	; 0x10
    1bac:	80 ff       	sbrs	r24, 0
    1bae:	f0 94       	com	r15
    1bb0:	c0 e0       	ldi	r28, 0x00	; 0
    1bb2:	d0 e0       	ldi	r29, 0x00	; 0
    1bb4:	f8 01       	movw	r30, r16
    1bb6:	ec 0f       	add	r30, r28
    1bb8:	fd 1f       	adc	r31, r29
    1bba:	80 81       	ld	r24, Z
    1bbc:	91 81       	ldd	r25, Z+1	; 0x01
    1bbe:	f7 fe       	sbrs	r15, 7
    1bc0:	03 c0       	rjmp	.+6      	; 0x1bc8 <segled_put_char+0x76>
    1bc2:	0e 94 dd 11 	call	0x23ba	; 0x23ba <pin_high>
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <segled_put_char+0x7a>
    1bc8:	0e 94 b8 11 	call	0x2370	; 0x2370 <pin_low>
    1bcc:	22 96       	adiw	r28, 0x02	; 2
    1bce:	c0 31       	cpi	r28, 0x10	; 16
    1bd0:	d1 05       	cpc	r29, r1
    1bd2:	11 f0       	breq	.+4      	; 0x1bd8 <segled_put_char+0x86>
    1bd4:	ff 0c       	add	r15, r15
    1bd6:	ee cf       	rjmp	.-36     	; 0x1bb4 <segled_put_char+0x62>
    1bd8:	8e 2d       	mov	r24, r14
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	ff 90       	pop	r15
    1be4:	ef 90       	pop	r14
    1be6:	08 95       	ret

00001be8 <segled_set>:
    1be8:	ef 92       	push	r14
    1bea:	ff 92       	push	r15
    1bec:	0f 93       	push	r16
    1bee:	1f 93       	push	r17
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	8c 01       	movw	r16, r24
    1bf6:	e6 2e       	mov	r14, r22
    1bf8:	f4 2e       	mov	r15, r20
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	80 89       	ldd	r24, Z+16	; 0x10
    1bfe:	81 fd       	sbrc	r24, 1
    1c00:	12 c0       	rjmp	.+36     	; 0x1c26 <segled_set+0x3e>
    1c02:	c0 e0       	ldi	r28, 0x00	; 0
    1c04:	d0 e0       	ldi	r29, 0x00	; 0
    1c06:	f8 01       	movw	r30, r16
    1c08:	ec 0f       	add	r30, r28
    1c0a:	fd 1f       	adc	r31, r29
    1c0c:	80 81       	ld	r24, Z
    1c0e:	91 81       	ldd	r25, Z+1	; 0x01
    1c10:	60 e0       	ldi	r22, 0x00	; 0
    1c12:	0e 94 76 0b 	call	0x16ec	; 0x16ec <pin_make_output>
    1c16:	22 96       	adiw	r28, 0x02	; 2
    1c18:	c0 31       	cpi	r28, 0x10	; 16
    1c1a:	d1 05       	cpc	r29, r1
    1c1c:	a1 f7       	brne	.-24     	; 0x1c06 <segled_set+0x1e>
    1c1e:	f8 01       	movw	r30, r16
    1c20:	80 89       	ldd	r24, Z+16	; 0x10
    1c22:	82 60       	ori	r24, 0x02	; 2
    1c24:	80 8b       	std	Z+16, r24	; 0x10
    1c26:	f8 01       	movw	r30, r16
    1c28:	80 89       	ldd	r24, Z+16	; 0x10
    1c2a:	80 fd       	sbrc	r24, 0
    1c2c:	06 c0       	rjmp	.+12     	; 0x1c3a <segled_set+0x52>
    1c2e:	ff 20       	and	r15, r15
    1c30:	19 f4       	brne	.+6      	; 0x1c38 <segled_set+0x50>
    1c32:	ff 24       	eor	r15, r15
    1c34:	fa 94       	dec	r15
    1c36:	01 c0       	rjmp	.+2      	; 0x1c3a <segled_set+0x52>
    1c38:	ff 24       	eor	r15, r15
    1c3a:	ee 2d       	mov	r30, r14
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	ee 0f       	add	r30, r30
    1c40:	ff 1f       	adc	r31, r31
    1c42:	e0 0f       	add	r30, r16
    1c44:	f1 1f       	adc	r31, r17
    1c46:	80 81       	ld	r24, Z
    1c48:	91 81       	ldd	r25, Z+1	; 0x01
    1c4a:	6f 2d       	mov	r22, r15
    1c4c:	0e 94 01 12 	call	0x2402	; 0x2402 <pin_set>
    1c50:	df 91       	pop	r29
    1c52:	cf 91       	pop	r28
    1c54:	1f 91       	pop	r17
    1c56:	0f 91       	pop	r16
    1c58:	ff 90       	pop	r15
    1c5a:	ef 90       	pop	r14
    1c5c:	08 95       	ret

00001c5e <segled8_get_mask>:
    1c5e:	e8 2f       	mov	r30, r24
    1c60:	81 54       	subi	r24, 0x41	; 65
    1c62:	8a 31       	cpi	r24, 0x1A	; 26
    1c64:	28 f4       	brcc	.+10     	; 0x1c70 <segled8_get_mask+0x12>
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	e5 5a       	subi	r30, 0xA5	; 165
    1c6a:	fc 4f       	sbci	r31, 0xFC	; 252
    1c6c:	84 91       	lpm	r24, Z+
    1c6e:	08 95       	ret
    1c70:	8e 2f       	mov	r24, r30
    1c72:	81 56       	subi	r24, 0x61	; 97
    1c74:	8a 31       	cpi	r24, 0x1A	; 26
    1c76:	28 f4       	brcc	.+10     	; 0x1c82 <segled8_get_mask+0x24>
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	e5 5c       	subi	r30, 0xC5	; 197
    1c7c:	fc 4f       	sbci	r31, 0xFC	; 252
    1c7e:	84 91       	lpm	r24, Z+
    1c80:	08 95       	ret
    1c82:	8e 2f       	mov	r24, r30
    1c84:	80 53       	subi	r24, 0x30	; 48
    1c86:	8a 30       	cpi	r24, 0x0A	; 10
    1c88:	28 f4       	brcc	.+10     	; 0x1c94 <segled8_get_mask+0x36>
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	ea 57       	subi	r30, 0x7A	; 122
    1c8e:	fc 4f       	sbci	r31, 0xFC	; 252
    1c90:	84 91       	lpm	r24, Z+
    1c92:	08 95       	ret
    1c94:	ea 30       	cpi	r30, 0x0A	; 10
    1c96:	28 f4       	brcc	.+10     	; 0x1ca2 <segled8_get_mask+0x44>
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	ea 54       	subi	r30, 0x4A	; 74
    1c9c:	fc 4f       	sbci	r31, 0xFC	; 252
    1c9e:	84 91       	lpm	r24, Z+
    1ca0:	08 95       	ret
    1ca2:	ed 32       	cpi	r30, 0x2D	; 45
    1ca4:	11 f4       	brne	.+4      	; 0x1caa <segled8_get_mask+0x4c>
    1ca6:	82 e0       	ldi	r24, 0x02	; 2
    1ca8:	08 95       	ret
    1caa:	eb 35       	cpi	r30, 0x5B	; 91
    1cac:	79 f0       	breq	.+30     	; 0x1ccc <segled8_get_mask+0x6e>
    1cae:	eb 37       	cpi	r30, 0x7B	; 123
    1cb0:	69 f0       	breq	.+26     	; 0x1ccc <segled8_get_mask+0x6e>
    1cb2:	e8 32       	cpi	r30, 0x28	; 40
    1cb4:	59 f0       	breq	.+22     	; 0x1ccc <segled8_get_mask+0x6e>
    1cb6:	ed 35       	cpi	r30, 0x5D	; 93
    1cb8:	59 f0       	breq	.+22     	; 0x1cd0 <segled8_get_mask+0x72>
    1cba:	ed 37       	cpi	r30, 0x7D	; 125
    1cbc:	49 f0       	breq	.+18     	; 0x1cd0 <segled8_get_mask+0x72>
    1cbe:	e9 32       	cpi	r30, 0x29	; 41
    1cc0:	39 f0       	breq	.+14     	; 0x1cd0 <segled8_get_mask+0x72>
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	ee 32       	cpi	r30, 0x2E	; 46
    1cc6:	29 f4       	brne	.+10     	; 0x1cd2 <segled8_get_mask+0x74>
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	08 95       	ret
    1ccc:	8c e9       	ldi	r24, 0x9C	; 156
    1cce:	08 95       	ret
    1cd0:	80 ef       	ldi	r24, 0xF0	; 240
    1cd2:	08 95       	ret

00001cd4 <compareFromIOPin>:
    1cd4:	bf 92       	push	r11
    1cd6:	cf 92       	push	r12
    1cd8:	df 92       	push	r13
    1cda:	ef 92       	push	r14
    1cdc:	ff 92       	push	r15
    1cde:	0f 93       	push	r16
    1ce0:	1f 93       	push	r17
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	6c 01       	movw	r12, r24
    1ce8:	b0 90 b2 02 	lds	r11, 0x02B2
    1cec:	22 ef       	ldi	r18, 0xF2	; 242
    1cee:	31 e0       	ldi	r19, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	c0 e0       	ldi	r28, 0x00	; 0
    1cf4:	d0 e0       	ldi	r29, 0x00	; 0
    1cf6:	2d c0       	rjmp	.+90     	; 0x1d52 <compareFromIOPin+0x7e>
    1cf8:	28 5f       	subi	r18, 0xF8	; 248
    1cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfc:	f9 01       	movw	r30, r18
    1cfe:	e4 90       	lpm	r14, Z+
    1d00:	28 50       	subi	r18, 0x08	; 8
    1d02:	30 40       	sbci	r19, 0x00	; 0
    1d04:	f9 01       	movw	r30, r18
    1d06:	77 96       	adiw	r30, 0x17	; 23
    1d08:	2a 5f       	subi	r18, 0xFA	; 250
    1d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	a0 e0       	ldi	r26, 0x00	; 0
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	05 91       	lpm	r16, Z+
    1d14:	14 91       	lpm	r17, Z+
    1d16:	f9 01       	movw	r30, r18
    1d18:	f4 90       	lpm	r15, Z+
    1d1a:	26 50       	subi	r18, 0x06	; 6
    1d1c:	30 40       	sbci	r19, 0x00	; 0
    1d1e:	14 c0       	rjmp	.+40     	; 0x1d48 <compareFromIOPin+0x74>
    1d20:	b8 01       	movw	r22, r16
    1d22:	6a 0f       	add	r22, r26
    1d24:	7b 1f       	adc	r23, r27
    1d26:	fb 01       	movw	r30, r22
    1d28:	3e 96       	adiw	r30, 0x0e	; 14
    1d2a:	45 91       	lpm	r20, Z+
    1d2c:	54 91       	lpm	r21, Z+
    1d2e:	41 15       	cp	r20, r1
    1d30:	51 05       	cpc	r21, r1
    1d32:	41 f0       	breq	.+16     	; 0x1d44 <compareFromIOPin+0x70>
    1d34:	4c 15       	cp	r20, r12
    1d36:	5d 05       	cpc	r21, r13
    1d38:	29 f4       	brne	.+10     	; 0x1d44 <compareFromIOPin+0x70>
    1d3a:	ff 20       	and	r15, r15
    1d3c:	11 f0       	breq	.+4      	; 0x1d42 <compareFromIOPin+0x6e>
    1d3e:	eb 01       	movw	r28, r22
    1d40:	0a c0       	rjmp	.+20     	; 0x1d56 <compareFromIOPin+0x82>
    1d42:	eb 01       	movw	r28, r22
    1d44:	8f 5f       	subi	r24, 0xFF	; 255
    1d46:	50 96       	adiw	r26, 0x10	; 16
    1d48:	8e 15       	cp	r24, r14
    1d4a:	50 f3       	brcs	.-44     	; 0x1d20 <compareFromIOPin+0x4c>
    1d4c:	9f 5f       	subi	r25, 0xFF	; 255
    1d4e:	24 5d       	subi	r18, 0xD4	; 212
    1d50:	3f 4f       	sbci	r19, 0xFF	; 255
    1d52:	9b 15       	cp	r25, r11
    1d54:	88 f2       	brcs	.-94     	; 0x1cf8 <compareFromIOPin+0x24>
    1d56:	ce 01       	movw	r24, r28
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	ff 90       	pop	r15
    1d62:	ef 90       	pop	r14
    1d64:	df 90       	pop	r13
    1d66:	cf 90       	pop	r12
    1d68:	bf 90       	pop	r11
    1d6a:	08 95       	ret

00001d6c <compareSetOutputMode>:
    1d6c:	9c 01       	movw	r18, r24
    1d6e:	0b 96       	adiw	r24, 0x0b	; 11
    1d70:	fc 01       	movw	r30, r24
    1d72:	a5 91       	lpm	r26, Z+
    1d74:	b4 91       	lpm	r27, Z+
    1d76:	23 5f       	subi	r18, 0xF3	; 243
    1d78:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7a:	f9 01       	movw	r30, r18
    1d7c:	24 91       	lpm	r18, Z+
    1d7e:	70 e0       	ldi	r23, 0x00	; 0
    1d80:	02 2e       	mov	r0, r18
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <compareSetOutputMode+0x1c>
    1d84:	66 0f       	add	r22, r22
    1d86:	77 1f       	adc	r23, r23
    1d88:	0a 94       	dec	r0
    1d8a:	e2 f7       	brpl	.-8      	; 0x1d84 <compareSetOutputMode+0x18>
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <compareSetOutputMode+0x2a>
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	2a 95       	dec	r18
    1d98:	e2 f7       	brpl	.-8      	; 0x1d92 <compareSetOutputMode+0x26>
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	22 0f       	add	r18, r18
    1d9e:	28 2b       	or	r18, r24
    1da0:	9c 91       	ld	r25, X
    1da2:	82 2f       	mov	r24, r18
    1da4:	86 23       	and	r24, r22
    1da6:	20 95       	com	r18
    1da8:	29 23       	and	r18, r25
    1daa:	82 2b       	or	r24, r18
    1dac:	8c 93       	st	X, r24
    1dae:	08 95       	ret

00001db0 <compareSetThreshold>:
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	9c 01       	movw	r18, r24
    1db6:	2e 5f       	subi	r18, 0xFE	; 254
    1db8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dba:	f9 01       	movw	r30, r18
    1dbc:	84 91       	lpm	r24, Z+
    1dbe:	22 50       	subi	r18, 0x02	; 2
    1dc0:	30 40       	sbci	r19, 0x00	; 0
    1dc2:	9c e2       	ldi	r25, 0x2C	; 44
    1dc4:	89 9f       	mul	r24, r25
    1dc6:	a0 01       	movw	r20, r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	4e 50       	subi	r20, 0x0E	; 14
    1dcc:	5e 4f       	sbci	r21, 0xFE	; 254
    1dce:	48 5f       	subi	r20, 0xF8	; 248
    1dd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd2:	fa 01       	movw	r30, r20
    1dd4:	84 91       	lpm	r24, Z+
    1dd6:	48 50       	subi	r20, 0x08	; 8
    1dd8:	50 40       	sbci	r21, 0x00	; 0
    1dda:	88 23       	and	r24, r24
    1ddc:	c1 f0       	breq	.+48     	; 0x1e0e <compareSetThreshold+0x5e>
    1dde:	c9 01       	movw	r24, r18
    1de0:	06 96       	adiw	r24, 0x06	; 6
    1de2:	fc 01       	movw	r30, r24
    1de4:	c5 91       	lpm	r28, Z+
    1de6:	d4 91       	lpm	r29, Z+
    1de8:	fa 01       	movw	r30, r20
    1dea:	36 96       	adiw	r30, 0x06	; 6
    1dec:	e4 91       	lpm	r30, Z+
    1dee:	ee 23       	and	r30, r30
    1df0:	19 f0       	breq	.+6      	; 0x1df8 <compareSetThreshold+0x48>
    1df2:	79 83       	std	Y+1, r23	; 0x01
    1df4:	68 83       	st	Y, r22
    1df6:	0e c0       	rjmp	.+28     	; 0x1e14 <compareSetThreshold+0x64>
    1df8:	6f 3f       	cpi	r22, 0xFF	; 255
    1dfa:	71 05       	cpc	r23, r1
    1dfc:	31 f0       	breq	.+12     	; 0x1e0a <compareSetThreshold+0x5a>
    1dfe:	28 f0       	brcs	.+10     	; 0x1e0a <compareSetThreshold+0x5a>
    1e00:	8e ef       	ldi	r24, 0xFE	; 254
    1e02:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <setError>
    1e06:	6f ef       	ldi	r22, 0xFF	; 255
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	68 83       	st	Y, r22
    1e0c:	03 c0       	rjmp	.+6      	; 0x1e14 <compareSetThreshold+0x64>
    1e0e:	8d ef       	ldi	r24, 0xFD	; 253
    1e10:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <setError>
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	08 95       	ret

00001e1a <_uartSetBaudRate>:
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	19 96       	adiw	r26, 0x09	; 9
    1e1e:	8d 91       	ld	r24, X+
    1e20:	9c 91       	ld	r25, X
    1e22:	1a 97       	sbiw	r26, 0x0a	; 10
    1e24:	fc 01       	movw	r30, r24
    1e26:	25 91       	lpm	r18, Z+
    1e28:	34 91       	lpm	r19, Z+
    1e2a:	cd 01       	movw	r24, r26
    1e2c:	f9 01       	movw	r30, r18
    1e2e:	09 95       	icall
    1e30:	08 95       	ret

00001e32 <_uartInit>:
    1e32:	df 92       	push	r13
    1e34:	ef 92       	push	r14
    1e36:	ff 92       	push	r15
    1e38:	0f 93       	push	r16
    1e3a:	1f 93       	push	r17
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	ec 01       	movw	r28, r24
    1e42:	7a 01       	movw	r14, r20
    1e44:	8b 01       	movw	r16, r22
    1e46:	df b6       	in	r13, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e4c:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e50:	98 89       	ldd	r25, Y+16	; 0x10
    1e52:	28 17       	cp	r18, r24
    1e54:	39 07       	cpc	r19, r25
    1e56:	11 f0       	breq	.+4      	; 0x1e5c <_uartInit+0x2a>
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	01 c0       	rjmp	.+2      	; 0x1e5e <_uartInit+0x2c>
    1e5c:	8f ef       	ldi	r24, 0xFF	; 255
    1e5e:	8f 8b       	std	Y+23, r24	; 0x17
    1e60:	88 23       	and	r24, r24
    1e62:	81 f0       	breq	.+32     	; 0x1e84 <_uartInit+0x52>
    1e64:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e66:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e6a:	98 89       	ldd	r25, Y+16	; 0x10
    1e6c:	28 17       	cp	r18, r24
    1e6e:	39 07       	cpc	r19, r25
    1e70:	21 f0       	breq	.+8      	; 0x1e7a <_uartInit+0x48>
    1e72:	c9 01       	movw	r24, r18
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	0e 94 4f 0b 	call	0x169e	; 0x169e <pin_make_input>
    1e7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e7c:	98 89       	ldd	r25, Y+16	; 0x10
    1e7e:	6f ef       	ldi	r22, 0xFF	; 255
    1e80:	0e 94 4f 0b 	call	0x169e	; 0x169e <pin_make_input>
    1e84:	88 85       	ldd	r24, Y+8	; 0x08
    1e86:	81 60       	ori	r24, 0x01	; 1
    1e88:	88 87       	std	Y+8, r24	; 0x08
    1e8a:	88 85       	ldd	r24, Y+8	; 0x08
    1e8c:	8b 7f       	andi	r24, 0xFB	; 251
    1e8e:	88 87       	std	Y+8, r24	; 0x08
    1e90:	88 85       	ldd	r24, Y+8	; 0x08
    1e92:	8d 7f       	andi	r24, 0xFD	; 253
    1e94:	88 87       	std	Y+8, r24	; 0x08
    1e96:	89 85       	ldd	r24, Y+9	; 0x09
    1e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9a:	04 96       	adiw	r24, 0x04	; 4
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	25 91       	lpm	r18, Z+
    1ea0:	34 91       	lpm	r19, Z+
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	b8 01       	movw	r22, r16
    1ea6:	a7 01       	movw	r20, r14
    1ea8:	f9 01       	movw	r30, r18
    1eaa:	09 95       	icall
    1eac:	df be       	out	0x3f, r13	; 63
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	1f 91       	pop	r17
    1eb4:	0f 91       	pop	r16
    1eb6:	ff 90       	pop	r15
    1eb8:	ef 90       	pop	r14
    1eba:	df 90       	pop	r13
    1ebc:	08 95       	ret

00001ebe <__uartHWSetBaudRate>:
    1ebe:	bf 92       	push	r11
    1ec0:	cf 92       	push	r12
    1ec2:	df 92       	push	r13
    1ec4:	ef 92       	push	r14
    1ec6:	ff 92       	push	r15
    1ec8:	0f 93       	push	r16
    1eca:	1f 93       	push	r17
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	7a 01       	movw	r14, r20
    1ed2:	8b 01       	movw	r16, r22
    1ed4:	ec 01       	movw	r28, r24
    1ed6:	bf b6       	in	r11, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	4f 3f       	cpi	r20, 0xFF	; 255
    1edc:	8f ef       	ldi	r24, 0xFF	; 255
    1ede:	58 07       	cpc	r21, r24
    1ee0:	8f ef       	ldi	r24, 0xFF	; 255
    1ee2:	68 07       	cpc	r22, r24
    1ee4:	8f ef       	ldi	r24, 0xFF	; 255
    1ee6:	78 07       	cpc	r23, r24
    1ee8:	21 f4       	brne	.+8      	; 0x1ef2 <__uartHWSetBaudRate+0x34>
    1eea:	a1 e0       	ldi	r26, 0x01	; 1
    1eec:	ca 2e       	mov	r12, r26
    1eee:	d1 2c       	mov	r13, r1
    1ef0:	24 c0       	rjmp	.+72     	; 0x1f3a <__uartHWSetBaudRate+0x7c>
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	ba 01       	movw	r22, r20
    1ef6:	f3 e0       	ldi	r31, 0x03	; 3
    1ef8:	66 0f       	add	r22, r22
    1efa:	77 1f       	adc	r23, r23
    1efc:	88 1f       	adc	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	fa 95       	dec	r31
    1f02:	d1 f7       	brne	.-12     	; 0x1ef8 <__uartHWSetBaudRate+0x3a>
    1f04:	20 91 16 02 	lds	r18, 0x0216
    1f08:	30 91 17 02 	lds	r19, 0x0217
    1f0c:	40 91 18 02 	lds	r20, 0x0218
    1f10:	50 91 19 02 	lds	r21, 0x0219
    1f14:	62 0f       	add	r22, r18
    1f16:	73 1f       	adc	r23, r19
    1f18:	84 1f       	adc	r24, r20
    1f1a:	95 1f       	adc	r25, r21
    1f1c:	a8 01       	movw	r20, r16
    1f1e:	97 01       	movw	r18, r14
    1f20:	e4 e0       	ldi	r30, 0x04	; 4
    1f22:	22 0f       	add	r18, r18
    1f24:	33 1f       	adc	r19, r19
    1f26:	44 1f       	adc	r20, r20
    1f28:	55 1f       	adc	r21, r21
    1f2a:	ea 95       	dec	r30
    1f2c:	d1 f7       	brne	.-12     	; 0x1f22 <__uartHWSetBaudRate+0x64>
    1f2e:	0e 94 15 1a 	call	0x342a	; 0x342a <__udivmodsi4>
    1f32:	69 01       	movw	r12, r18
    1f34:	08 94       	sec
    1f36:	c1 08       	sbc	r12, r1
    1f38:	d1 08       	sbc	r13, r1
    1f3a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f3c:	99 23       	and	r25, r25
    1f3e:	c9 f1       	breq	.+114    	; 0x1fb2 <__uartHWSetBaudRate+0xf4>
    1f40:	ec a1       	ldd	r30, Y+36	; 0x24
    1f42:	fd a1       	ldd	r31, Y+37	; 0x25
    1f44:	80 81       	ld	r24, Z
    1f46:	90 95       	com	r25
    1f48:	89 23       	and	r24, r25
    1f4a:	80 83       	st	Z, r24
    1f4c:	8f ef       	ldi	r24, 0xFF	; 255
    1f4e:	e8 16       	cp	r14, r24
    1f50:	8f ef       	ldi	r24, 0xFF	; 255
    1f52:	f8 06       	cpc	r15, r24
    1f54:	8f ef       	ldi	r24, 0xFF	; 255
    1f56:	08 07       	cpc	r16, r24
    1f58:	8f ef       	ldi	r24, 0xFF	; 255
    1f5a:	18 07       	cpc	r17, r24
    1f5c:	19 f4       	brne	.+6      	; 0x1f64 <__uartHWSetBaudRate+0xa6>
    1f5e:	21 e0       	ldi	r18, 0x01	; 1
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	1d c0       	rjmp	.+58     	; 0x1f9e <__uartHWSetBaudRate+0xe0>
    1f64:	32 e0       	ldi	r19, 0x02	; 2
    1f66:	ee 0c       	add	r14, r14
    1f68:	ff 1c       	adc	r15, r15
    1f6a:	00 1f       	adc	r16, r16
    1f6c:	11 1f       	adc	r17, r17
    1f6e:	3a 95       	dec	r19
    1f70:	d1 f7       	brne	.-12     	; 0x1f66 <__uartHWSetBaudRate+0xa8>
    1f72:	60 91 16 02 	lds	r22, 0x0216
    1f76:	70 91 17 02 	lds	r23, 0x0217
    1f7a:	80 91 18 02 	lds	r24, 0x0218
    1f7e:	90 91 19 02 	lds	r25, 0x0219
    1f82:	6e 0d       	add	r22, r14
    1f84:	7f 1d       	adc	r23, r15
    1f86:	80 1f       	adc	r24, r16
    1f88:	91 1f       	adc	r25, r17
    1f8a:	ee 0c       	add	r14, r14
    1f8c:	ff 1c       	adc	r15, r15
    1f8e:	00 1f       	adc	r16, r16
    1f90:	11 1f       	adc	r17, r17
    1f92:	a8 01       	movw	r20, r16
    1f94:	97 01       	movw	r18, r14
    1f96:	0e 94 15 1a 	call	0x342a	; 0x342a <__udivmodsi4>
    1f9a:	21 50       	subi	r18, 0x01	; 1
    1f9c:	30 40       	sbci	r19, 0x00	; 0
    1f9e:	2c 15       	cp	r18, r12
    1fa0:	3d 05       	cpc	r19, r13
    1fa2:	38 f0       	brcs	.+14     	; 0x1fb2 <__uartHWSetBaudRate+0xf4>
    1fa4:	ec a1       	ldd	r30, Y+36	; 0x24
    1fa6:	fd a1       	ldd	r31, Y+37	; 0x25
    1fa8:	80 81       	ld	r24, Z
    1faa:	98 a9       	ldd	r25, Y+48	; 0x30
    1fac:	89 2b       	or	r24, r25
    1fae:	80 83       	st	Z, r24
    1fb0:	69 01       	movw	r12, r18
    1fb2:	e8 a5       	ldd	r30, Y+40	; 0x28
    1fb4:	f9 a5       	ldd	r31, Y+41	; 0x29
    1fb6:	c0 82       	st	Z, r12
    1fb8:	ea a5       	ldd	r30, Y+42	; 0x2a
    1fba:	fb a5       	ldd	r31, Y+43	; 0x2b
    1fbc:	d0 82       	st	Z, r13
    1fbe:	bf be       	out	0x3f, r11	; 63
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	1f 91       	pop	r17
    1fc6:	0f 91       	pop	r16
    1fc8:	ff 90       	pop	r15
    1fca:	ef 90       	pop	r14
    1fcc:	df 90       	pop	r13
    1fce:	cf 90       	pop	r12
    1fd0:	bf 90       	pop	r11
    1fd2:	08 95       	ret

00001fd4 <__uartHWOff>:
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	96 96       	adiw	r26, 0x26	; 38
    1fd8:	ed 91       	ld	r30, X+
    1fda:	fc 91       	ld	r31, X
    1fdc:	97 97       	sbiw	r26, 0x27	; 39
    1fde:	80 81       	ld	r24, Z
    1fe0:	87 72       	andi	r24, 0x27	; 39
    1fe2:	80 83       	st	Z, r24
    1fe4:	d0 96       	adiw	r26, 0x30	; 48
    1fe6:	9c 91       	ld	r25, X
    1fe8:	d0 97       	sbiw	r26, 0x30	; 48
    1fea:	99 23       	and	r25, r25
    1fec:	41 f0       	breq	.+16     	; 0x1ffe <__uartHWOff+0x2a>
    1fee:	94 96       	adiw	r26, 0x24	; 36
    1ff0:	ed 91       	ld	r30, X+
    1ff2:	fc 91       	ld	r31, X
    1ff4:	95 97       	sbiw	r26, 0x25	; 37
    1ff6:	80 81       	ld	r24, Z
    1ff8:	90 95       	com	r25
    1ffa:	89 23       	and	r24, r25
    1ffc:	80 83       	st	Z, r24
    1ffe:	08 95       	ret

00002000 <oneWireReceiveMode>:
    2000:	dc 01       	movw	r26, r24
    2002:	57 96       	adiw	r26, 0x17	; 23
    2004:	8c 91       	ld	r24, X
    2006:	57 97       	sbiw	r26, 0x17	; 23
    2008:	88 23       	and	r24, r24
    200a:	71 f0       	breq	.+28     	; 0x2028 <oneWireReceiveMode+0x28>
    200c:	96 96       	adiw	r26, 0x26	; 38
    200e:	ed 91       	ld	r30, X+
    2010:	fc 91       	ld	r31, X
    2012:	97 97       	sbiw	r26, 0x27	; 39
    2014:	80 81       	ld	r24, Z
    2016:	87 7b       	andi	r24, 0xB7	; 183
    2018:	80 83       	st	Z, r24
    201a:	96 96       	adiw	r26, 0x26	; 38
    201c:	ed 91       	ld	r30, X+
    201e:	fc 91       	ld	r31, X
    2020:	97 97       	sbiw	r26, 0x27	; 39
    2022:	80 81       	ld	r24, Z
    2024:	80 69       	ori	r24, 0x90	; 144
    2026:	80 83       	st	Z, r24
    2028:	08 95       	ret

0000202a <__uartHWStartXmit>:
    202a:	dc 01       	movw	r26, r24
    202c:	9c 96       	adiw	r26, 0x2c	; 44
    202e:	ed 91       	ld	r30, X+
    2030:	fc 91       	ld	r31, X
    2032:	9d 97       	sbiw	r26, 0x2d	; 45
    2034:	60 83       	st	Z, r22
    2036:	08 95       	ret

00002038 <startXmitMode>:
    2038:	dc 01       	movw	r26, r24
    203a:	57 96       	adiw	r26, 0x17	; 23
    203c:	8c 91       	ld	r24, X
    203e:	57 97       	sbiw	r26, 0x17	; 23
    2040:	88 23       	and	r24, r24
    2042:	71 f0       	breq	.+28     	; 0x2060 <startXmitMode+0x28>
    2044:	96 96       	adiw	r26, 0x26	; 38
    2046:	ed 91       	ld	r30, X+
    2048:	fc 91       	ld	r31, X
    204a:	97 97       	sbiw	r26, 0x27	; 39
    204c:	80 81       	ld	r24, Z
    204e:	8f 76       	andi	r24, 0x6F	; 111
    2050:	80 83       	st	Z, r24
    2052:	96 96       	adiw	r26, 0x26	; 38
    2054:	ed 91       	ld	r30, X+
    2056:	fc 91       	ld	r31, X
    2058:	97 97       	sbiw	r26, 0x27	; 39
    205a:	80 81       	ld	r24, Z
    205c:	88 64       	ori	r24, 0x48	; 72
    205e:	80 83       	st	Z, r24
    2060:	08 95       	ret

00002062 <__uartHWInit>:
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	ec 01       	movw	r28, r24
    2068:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <_uartSetBaudRate>
    206c:	8f 89       	ldd	r24, Y+23	; 0x17
    206e:	88 23       	and	r24, r24
    2070:	11 f0       	breq	.+4      	; 0x2076 <__uartHWInit+0x14>
    2072:	20 e9       	ldi	r18, 0x90	; 144
    2074:	0c c0       	rjmp	.+24     	; 0x208e <__uartHWInit+0x2c>
    2076:	8d 85       	ldd	r24, Y+13	; 0x0d
    2078:	9e 85       	ldd	r25, Y+14	; 0x0e
    207a:	89 2b       	or	r24, r25
    207c:	11 f0       	breq	.+4      	; 0x2082 <__uartHWInit+0x20>
    207e:	20 e9       	ldi	r18, 0x90	; 144
    2080:	01 c0       	rjmp	.+2      	; 0x2084 <__uartHWInit+0x22>
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	8f 85       	ldd	r24, Y+15	; 0x0f
    2086:	98 89       	ldd	r25, Y+16	; 0x10
    2088:	89 2b       	or	r24, r25
    208a:	09 f0       	breq	.+2      	; 0x208e <__uartHWInit+0x2c>
    208c:	28 64       	ori	r18, 0x48	; 72
    208e:	ee a1       	ldd	r30, Y+38	; 0x26
    2090:	ff a1       	ldd	r31, Y+39	; 0x27
    2092:	20 83       	st	Z, r18
    2094:	df 91       	pop	r29
    2096:	cf 91       	pop	r28
    2098:	08 95       	ret

0000209a <__uartReceiveService>:
    209a:	dc 01       	movw	r26, r24
    209c:	26 2f       	mov	r18, r22
    209e:	14 96       	adiw	r26, 0x04	; 4
    20a0:	8d 91       	ld	r24, X+
    20a2:	9c 91       	ld	r25, X
    20a4:	15 97       	sbiw	r26, 0x05	; 5
    20a6:	89 2b       	or	r24, r25
    20a8:	59 f0       	breq	.+22     	; 0x20c0 <__uartReceiveService+0x26>
    20aa:	14 96       	adiw	r26, 0x04	; 4
    20ac:	ed 91       	ld	r30, X+
    20ae:	fc 91       	ld	r31, X
    20b0:	15 97       	sbiw	r26, 0x05	; 5
    20b2:	16 96       	adiw	r26, 0x06	; 6
    20b4:	6d 91       	ld	r22, X+
    20b6:	7c 91       	ld	r23, X
    20b8:	17 97       	sbiw	r26, 0x07	; 7
    20ba:	82 2f       	mov	r24, r18
    20bc:	09 95       	icall
    20be:	08 95       	ret
    20c0:	90 96       	adiw	r26, 0x20	; 32
    20c2:	ed 91       	ld	r30, X+
    20c4:	fc 91       	ld	r31, X
    20c6:	91 97       	sbiw	r26, 0x21	; 33
    20c8:	cd 01       	movw	r24, r26
    20ca:	09 95       	icall
    20cc:	08 95       	ret

000020ce <__uartGetByte>:
    20ce:	fc 01       	movw	r30, r24
    20d0:	22 a1       	ldd	r18, Z+34	; 0x22
    20d2:	33 a1       	ldd	r19, Z+35	; 0x23
    20d4:	f9 01       	movw	r30, r18
    20d6:	09 95       	icall
    20d8:	08 95       	ret

000020da <__uartGetByteUnbuffered>:
    20da:	fc 01       	movw	r30, r24
    20dc:	4f b7       	in	r20, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	23 85       	ldd	r18, Z+11	; 0x0b
    20e2:	34 85       	ldd	r19, Z+12	; 0x0c
    20e4:	8f ef       	ldi	r24, 0xFF	; 255
    20e6:	9f ef       	ldi	r25, 0xFF	; 255
    20e8:	94 87       	std	Z+12, r25	; 0x0c
    20ea:	83 87       	std	Z+11, r24	; 0x0b
    20ec:	4f bf       	out	0x3f, r20	; 63
    20ee:	c9 01       	movw	r24, r18
    20f0:	08 95       	ret

000020f2 <__uartReceiveUnbuffered>:
    20f2:	fc 01       	movw	r30, r24
    20f4:	83 85       	ldd	r24, Z+11	; 0x0b
    20f6:	94 85       	ldd	r25, Z+12	; 0x0c
    20f8:	8f 5f       	subi	r24, 0xFF	; 255
    20fa:	9f 4f       	sbci	r25, 0xFF	; 255
    20fc:	29 f4       	brne	.+10     	; 0x2108 <__uartReceiveUnbuffered+0x16>
    20fe:	86 2f       	mov	r24, r22
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	94 87       	std	Z+12, r25	; 0x0c
    2104:	83 87       	std	Z+11, r24	; 0x0b
    2106:	08 95       	ret
    2108:	80 85       	ldd	r24, Z+8	; 0x08
    210a:	84 60       	ori	r24, 0x04	; 4
    210c:	80 87       	std	Z+8, r24	; 0x08
    210e:	85 ef       	ldi	r24, 0xF5	; 245
    2110:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <setError>
    2114:	08 95       	ret

00002116 <_uartStartXmit>:
    2116:	dc 01       	movw	r26, r24
    2118:	19 96       	adiw	r26, 0x09	; 9
    211a:	8d 91       	ld	r24, X+
    211c:	9c 91       	ld	r25, X
    211e:	1a 97       	sbiw	r26, 0x0a	; 10
    2120:	02 96       	adiw	r24, 0x02	; 2
    2122:	fc 01       	movw	r30, r24
    2124:	25 91       	lpm	r18, Z+
    2126:	34 91       	lpm	r19, Z+
    2128:	cd 01       	movw	r24, r26
    212a:	f9 01       	movw	r30, r18
    212c:	09 95       	icall
    212e:	08 95       	ret

00002130 <_uartTransmitBlockStart>:
    2130:	cf 93       	push	r28
    2132:	df 93       	push	r29
    2134:	ec 01       	movw	r28, r24
    2136:	88 85       	ldd	r24, Y+8	; 0x08
    2138:	8e 7f       	andi	r24, 0xFE	; 254
    213a:	88 87       	std	Y+8, r24	; 0x08
    213c:	e8 8d       	ldd	r30, Y+24	; 0x18
    213e:	f9 8d       	ldd	r31, Y+25	; 0x19
    2140:	30 97       	sbiw	r30, 0x00	; 0
    2142:	21 f0       	breq	.+8      	; 0x214c <_uartTransmitBlockStart+0x1c>
    2144:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2146:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2148:	6f ef       	ldi	r22, 0xFF	; 255
    214a:	09 95       	icall
    214c:	e9 85       	ldd	r30, Y+9	; 0x09
    214e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2150:	38 96       	adiw	r30, 0x08	; 8
    2152:	25 91       	lpm	r18, Z+
    2154:	34 91       	lpm	r19, Z+
    2156:	21 15       	cp	r18, r1
    2158:	31 05       	cpc	r19, r1
    215a:	19 f0       	breq	.+6      	; 0x2162 <_uartTransmitBlockStart+0x32>
    215c:	ce 01       	movw	r24, r28
    215e:	f9 01       	movw	r30, r18
    2160:	09 95       	icall
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	08 95       	ret

00002168 <_uartTransmitBlockEnd>:
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	ec 01       	movw	r28, r24
    216e:	88 85       	ldd	r24, Y+8	; 0x08
    2170:	81 60       	ori	r24, 0x01	; 1
    2172:	88 87       	std	Y+8, r24	; 0x08
    2174:	e9 85       	ldd	r30, Y+9	; 0x09
    2176:	fa 85       	ldd	r31, Y+10	; 0x0a
    2178:	3a 96       	adiw	r30, 0x0a	; 10
    217a:	25 91       	lpm	r18, Z+
    217c:	34 91       	lpm	r19, Z+
    217e:	21 15       	cp	r18, r1
    2180:	31 05       	cpc	r19, r1
    2182:	19 f0       	breq	.+6      	; 0x218a <_uartTransmitBlockEnd+0x22>
    2184:	ce 01       	movw	r24, r28
    2186:	f9 01       	movw	r30, r18
    2188:	09 95       	icall
    218a:	e8 8d       	ldd	r30, Y+24	; 0x18
    218c:	f9 8d       	ldd	r31, Y+25	; 0x19
    218e:	30 97       	sbiw	r30, 0x00	; 0
    2190:	21 f0       	breq	.+8      	; 0x219a <_uartTransmitBlockEnd+0x32>
    2192:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2194:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	09 95       	icall
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	08 95       	ret

000021a0 <_uartSendBuffer>:
    21a0:	ef 92       	push	r14
    21a2:	ff 92       	push	r15
    21a4:	0f 93       	push	r16
    21a6:	1f 93       	push	r17
    21a8:	cf 93       	push	r28
    21aa:	df 93       	push	r29
    21ac:	8c 01       	movw	r16, r24
    21ae:	7b 01       	movw	r14, r22
    21b0:	ea 01       	movw	r28, r20
    21b2:	0b c0       	rjmp	.+22     	; 0x21ca <_uartSendBuffer+0x2a>
    21b4:	d7 01       	movw	r26, r14
    21b6:	6d 91       	ld	r22, X+
    21b8:	7d 01       	movw	r14, r26
    21ba:	d8 01       	movw	r26, r16
    21bc:	5c 96       	adiw	r26, 0x1c	; 28
    21be:	ed 91       	ld	r30, X+
    21c0:	fc 91       	ld	r31, X
    21c2:	5d 97       	sbiw	r26, 0x1d	; 29
    21c4:	c8 01       	movw	r24, r16
    21c6:	09 95       	icall
    21c8:	21 97       	sbiw	r28, 0x01	; 1
    21ca:	20 97       	sbiw	r28, 0x00	; 0
    21cc:	99 f7       	brne	.-26     	; 0x21b4 <_uartSendBuffer+0x14>
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	ff 90       	pop	r15
    21d8:	ef 90       	pop	r14
    21da:	08 95       	ret

000021dc <_uartSendByte>:
    21dc:	1f 93       	push	r17
    21de:	fc 01       	movw	r30, r24
    21e0:	16 2f       	mov	r17, r22
    21e2:	24 8d       	ldd	r18, Z+28	; 0x1c
    21e4:	35 8d       	ldd	r19, Z+29	; 0x1d
    21e6:	f9 01       	movw	r30, r18
    21e8:	09 95       	icall
    21ea:	81 2f       	mov	r24, r17
    21ec:	1f 91       	pop	r17
    21ee:	08 95       	ret

000021f0 <__uartTransmitService>:
    21f0:	fc 01       	movw	r30, r24
    21f2:	26 8d       	ldd	r18, Z+30	; 0x1e
    21f4:	37 8d       	ldd	r19, Z+31	; 0x1f
    21f6:	f9 01       	movw	r30, r18
    21f8:	09 95       	icall
    21fa:	08 95       	ret

000021fc <__uartSendNextUnbuffered>:
    21fc:	1f 93       	push	r17
    21fe:	1f b7       	in	r17, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	0e 94 b4 10 	call	0x2168	; 0x2168 <_uartTransmitBlockEnd>
    2206:	1f bf       	out	0x3f, r17	; 63
    2208:	1f 91       	pop	r17
    220a:	08 95       	ret

0000220c <__uartSendUnbuffered>:
    220c:	0f 93       	push	r16
    220e:	1f 93       	push	r17
    2210:	cf 93       	push	r28
    2212:	df 93       	push	r29
    2214:	06 2f       	mov	r16, r22
    2216:	ec 01       	movw	r28, r24
    2218:	02 c0       	rjmp	.+4      	; 0x221e <__uartSendUnbuffered+0x12>
    221a:	0e 94 ad 11 	call	0x235a	; 0x235a <breathe>
    221e:	88 85       	ldd	r24, Y+8	; 0x08
    2220:	80 ff       	sbrs	r24, 0
    2222:	fb cf       	rjmp	.-10     	; 0x221a <__uartSendUnbuffered+0xe>
    2224:	1f b7       	in	r17, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	ce 01       	movw	r24, r28
    222a:	0e 94 98 10 	call	0x2130	; 0x2130 <_uartTransmitBlockStart>
    222e:	ce 01       	movw	r24, r28
    2230:	60 2f       	mov	r22, r16
    2232:	0e 94 8b 10 	call	0x2116	; 0x2116 <_uartStartXmit>
    2236:	1f bf       	out	0x3f, r17	; 63
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	1f 91       	pop	r17
    223e:	0f 91       	pop	r16
    2240:	08 95       	ret

00002242 <uartReceivePollingMode>:
    2242:	dc 01       	movw	r26, r24
    2244:	96 96       	adiw	r26, 0x26	; 38
    2246:	ed 91       	ld	r30, X+
    2248:	fc 91       	ld	r31, X
    224a:	97 97       	sbiw	r26, 0x27	; 39
    224c:	66 23       	and	r22, r22
    224e:	19 f0       	breq	.+6      	; 0x2256 <uartReceivePollingMode+0x14>
    2250:	80 81       	ld	r24, Z
    2252:	8f 77       	andi	r24, 0x7F	; 127
    2254:	02 c0       	rjmp	.+4      	; 0x225a <uartReceivePollingMode+0x18>
    2256:	80 81       	ld	r24, Z
    2258:	80 68       	ori	r24, 0x80	; 128
    225a:	80 83       	st	Z, r24
    225c:	08 95       	ret

0000225e <uartPollByte>:
    225e:	dc 01       	movw	r26, r24
    2260:	94 96       	adiw	r26, 0x24	; 36
    2262:	ed 91       	ld	r30, X+
    2264:	fc 91       	ld	r31, X
    2266:	95 97       	sbiw	r26, 0x25	; 37
    2268:	80 81       	ld	r24, Z
    226a:	87 fd       	sbrc	r24, 7
    226c:	03 c0       	rjmp	.+6      	; 0x2274 <uartPollByte+0x16>
    226e:	2f ef       	ldi	r18, 0xFF	; 255
    2270:	3f ef       	ldi	r19, 0xFF	; 255
    2272:	07 c0       	rjmp	.+14     	; 0x2282 <uartPollByte+0x24>
    2274:	9c 96       	adiw	r26, 0x2c	; 44
    2276:	ed 91       	ld	r30, X+
    2278:	fc 91       	ld	r31, X
    227a:	9d 97       	sbiw	r26, 0x2d	; 45
    227c:	80 81       	ld	r24, Z
    227e:	28 2f       	mov	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	c9 01       	movw	r24, r18
    2284:	08 95       	ret

00002286 <__uartReceiveBufferIsEmpty>:
    2286:	dc 01       	movw	r26, r24
    2288:	ed 91       	ld	r30, X+
    228a:	fc 91       	ld	r31, X
    228c:	11 97       	sbiw	r26, 0x01	; 1
    228e:	30 97       	sbiw	r30, 0x00	; 0
    2290:	59 f0       	breq	.+22     	; 0x22a8 <__uartReceiveBufferIsEmpty+0x22>
    2292:	2f b7       	in	r18, 0x3f	; 63
    2294:	f8 94       	cli
    2296:	84 81       	ldd	r24, Z+4	; 0x04
    2298:	95 81       	ldd	r25, Z+5	; 0x05
    229a:	89 2b       	or	r24, r25
    229c:	11 f0       	breq	.+4      	; 0x22a2 <__uartReceiveBufferIsEmpty+0x1c>
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	01 c0       	rjmp	.+2      	; 0x22a4 <__uartReceiveBufferIsEmpty+0x1e>
    22a2:	8f ef       	ldi	r24, 0xFF	; 255
    22a4:	2f bf       	out	0x3f, r18	; 63
    22a6:	08 95       	ret
    22a8:	2f b7       	in	r18, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	1b 96       	adiw	r26, 0x0b	; 11
    22ae:	8d 91       	ld	r24, X+
    22b0:	9c 91       	ld	r25, X
    22b2:	1c 97       	sbiw	r26, 0x0c	; 12
    22b4:	8f 5f       	subi	r24, 0xFF	; 255
    22b6:	9f 4f       	sbci	r25, 0xFF	; 255
    22b8:	11 f0       	breq	.+4      	; 0x22be <__uartReceiveBufferIsEmpty+0x38>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	01 c0       	rjmp	.+2      	; 0x22c0 <__uartReceiveBufferIsEmpty+0x3a>
    22be:	8f ef       	ldi	r24, 0xFF	; 255
    22c0:	2f bf       	out	0x3f, r18	; 63
    22c2:	08 95       	ret

000022c4 <clockHasElapsed>:
    22c4:	0f 93       	push	r16
    22c6:	1f 93       	push	r17
    22c8:	00 e0       	ldi	r16, 0x00	; 0
    22ca:	10 e0       	ldi	r17, 0x00	; 0
    22cc:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <clockHasElapsedGetOverflow>
    22d0:	1f 91       	pop	r17
    22d2:	0f 91       	pop	r16
    22d4:	08 95       	ret

000022d6 <clockHasElapsedGetOverflow>:
    22d6:	8f 92       	push	r8
    22d8:	9f 92       	push	r9
    22da:	af 92       	push	r10
    22dc:	bf 92       	push	r11
    22de:	cf 92       	push	r12
    22e0:	df 92       	push	r13
    22e2:	ef 92       	push	r14
    22e4:	ff 92       	push	r15
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	6b 01       	movw	r12, r22
    22f0:	7c 01       	movw	r14, r24
    22f2:	49 01       	movw	r8, r18
    22f4:	5a 01       	movw	r10, r20
    22f6:	e8 01       	movw	r28, r16
    22f8:	0e 94 79 07 	call	0xef2	; 0xef2 <clockGetus>
    22fc:	6c 19       	sub	r22, r12
    22fe:	7d 09       	sbc	r23, r13
    2300:	8e 09       	sbc	r24, r14
    2302:	9f 09       	sbc	r25, r15
    2304:	68 15       	cp	r22, r8
    2306:	79 05       	cpc	r23, r9
    2308:	8a 05       	cpc	r24, r10
    230a:	9b 05       	cpc	r25, r11
    230c:	68 f0       	brcs	.+26     	; 0x2328 <clockHasElapsedGetOverflow+0x52>
    230e:	01 15       	cp	r16, r1
    2310:	11 05       	cpc	r17, r1
    2312:	41 f0       	breq	.+16     	; 0x2324 <clockHasElapsedGetOverflow+0x4e>
    2314:	68 19       	sub	r22, r8
    2316:	79 09       	sbc	r23, r9
    2318:	8a 09       	sbc	r24, r10
    231a:	9b 09       	sbc	r25, r11
    231c:	68 83       	st	Y, r22
    231e:	79 83       	std	Y+1, r23	; 0x01
    2320:	8a 83       	std	Y+2, r24	; 0x02
    2322:	9b 83       	std	Y+3, r25	; 0x03
    2324:	8f ef       	ldi	r24, 0xFF	; 255
    2326:	0c c0       	rjmp	.+24     	; 0x2340 <clockHasElapsedGetOverflow+0x6a>
    2328:	01 15       	cp	r16, r1
    232a:	11 05       	cpc	r17, r1
    232c:	41 f0       	breq	.+16     	; 0x233e <clockHasElapsedGetOverflow+0x68>
    232e:	86 1a       	sub	r8, r22
    2330:	97 0a       	sbc	r9, r23
    2332:	a8 0a       	sbc	r10, r24
    2334:	b9 0a       	sbc	r11, r25
    2336:	88 82       	st	Y, r8
    2338:	99 82       	std	Y+1, r9	; 0x01
    233a:	aa 82       	std	Y+2, r10	; 0x02
    233c:	bb 82       	std	Y+3, r11	; 0x03
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	df 91       	pop	r29
    2342:	cf 91       	pop	r28
    2344:	1f 91       	pop	r17
    2346:	0f 91       	pop	r16
    2348:	ff 90       	pop	r15
    234a:	ef 90       	pop	r14
    234c:	df 90       	pop	r13
    234e:	cf 90       	pop	r12
    2350:	bf 90       	pop	r11
    2352:	af 90       	pop	r10
    2354:	9f 90       	pop	r9
    2356:	8f 90       	pop	r8
    2358:	08 95       	ret

0000235a <breathe>:
    235a:	8f b7       	in	r24, 0x3f	; 63
    235c:	78 94       	sei
	...
    236a:	00 00       	nop
    236c:	8f bf       	out	0x3f, r24	; 63
    236e:	08 95       	ret

00002370 <pin_low>:
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	9c 01       	movw	r18, r24
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	e9 f0       	breq	.+58     	; 0x23b4 <pin_low+0x44>
    237a:	fc 01       	movw	r30, r24
    237c:	85 91       	lpm	r24, Z+
    237e:	94 91       	lpm	r25, Z+
    2380:	fc 01       	movw	r30, r24
    2382:	a5 91       	lpm	r26, Z+
    2384:	b4 91       	lpm	r27, Z+
    2386:	02 96       	adiw	r24, 0x02	; 2
    2388:	fc 01       	movw	r30, r24
    238a:	c5 91       	lpm	r28, Z+
    238c:	d4 91       	lpm	r29, Z+
    238e:	2e 5f       	subi	r18, 0xFE	; 254
    2390:	3f 4f       	sbci	r19, 0xFF	; 255
    2392:	f9 01       	movw	r30, r18
    2394:	24 91       	lpm	r18, Z+
    2396:	88 81       	ld	r24, Y
    2398:	82 23       	and	r24, r18
    239a:	49 f0       	breq	.+18     	; 0x23ae <pin_low+0x3e>
    239c:	9f b7       	in	r25, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	8c 91       	ld	r24, X
    23a2:	20 95       	com	r18
    23a4:	82 23       	and	r24, r18
    23a6:	8c 93       	st	X, r24
    23a8:	9f bf       	out	0x3f, r25	; 63
    23aa:	00 00       	nop
    23ac:	03 c0       	rjmp	.+6      	; 0x23b4 <pin_low+0x44>
    23ae:	87 ef       	ldi	r24, 0xF7	; 247
    23b0:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <setError>
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	08 95       	ret

000023ba <pin_high>:
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
    23be:	9c 01       	movw	r18, r24
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	e1 f0       	breq	.+56     	; 0x23fc <pin_high+0x42>
    23c4:	fc 01       	movw	r30, r24
    23c6:	85 91       	lpm	r24, Z+
    23c8:	94 91       	lpm	r25, Z+
    23ca:	fc 01       	movw	r30, r24
    23cc:	a5 91       	lpm	r26, Z+
    23ce:	b4 91       	lpm	r27, Z+
    23d0:	02 96       	adiw	r24, 0x02	; 2
    23d2:	fc 01       	movw	r30, r24
    23d4:	c5 91       	lpm	r28, Z+
    23d6:	d4 91       	lpm	r29, Z+
    23d8:	2e 5f       	subi	r18, 0xFE	; 254
    23da:	3f 4f       	sbci	r19, 0xFF	; 255
    23dc:	f9 01       	movw	r30, r18
    23de:	24 91       	lpm	r18, Z+
    23e0:	88 81       	ld	r24, Y
    23e2:	82 23       	and	r24, r18
    23e4:	41 f0       	breq	.+16     	; 0x23f6 <pin_high+0x3c>
    23e6:	9f b7       	in	r25, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	8c 91       	ld	r24, X
    23ec:	82 2b       	or	r24, r18
    23ee:	8c 93       	st	X, r24
    23f0:	9f bf       	out	0x3f, r25	; 63
    23f2:	00 00       	nop
    23f4:	03 c0       	rjmp	.+6      	; 0x23fc <pin_high+0x42>
    23f6:	87 ef       	ldi	r24, 0xF7	; 247
    23f8:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <setError>
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	08 95       	ret

00002402 <pin_set>:
    2402:	66 23       	and	r22, r22
    2404:	19 f0       	breq	.+6      	; 0x240c <pin_set+0xa>
    2406:	0e 94 dd 11 	call	0x23ba	; 0x23ba <pin_high>
    240a:	08 95       	ret
    240c:	0e 94 b8 11 	call	0x2370	; 0x2370 <pin_low>
    2410:	08 95       	ret

00002412 <__scheduleUpdate>:
	uint16_t rtn = MIN(ticks,CLOCK_TOP);
	return rtn;
}

// called under compare interrupts when there is something in the queue
static void __scheduleUpdate(void){
    2412:	2f 92       	push	r2
    2414:	3f 92       	push	r3
    2416:	4f 92       	push	r4
    2418:	5f 92       	push	r5
    241a:	6f 92       	push	r6
    241c:	7f 92       	push	r7
    241e:	8f 92       	push	r8
    2420:	9f 92       	push	r9
    2422:	af 92       	push	r10
    2424:	bf 92       	push	r11
    2426:	cf 92       	push	r12
    2428:	df 92       	push	r13
    242a:	ef 92       	push	r14
    242c:	ff 92       	push	r15
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	27 97       	sbiw	r28, 0x07	; 7
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
	// Dont call me again - turn off compare interrupts
	SCHEDULER_INT_DISABLE;
    2446:	80 91 73 00 	lds	r24, 0x0073
    244a:	8b 7f       	andi	r24, 0xFB	; 251
    244c:	80 93 73 00 	sts	0x0073, r24

	// Turn interrupts back on
	INTERRUPTABLE_SECTION{
    2450:	2f b7       	in	r18, 0x3f	; 63
    2452:	2f 83       	std	Y+7, r18	; 0x07
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
    2454:	78 94       	sei
		__running = TRUE;
    2456:	8f ef       	ldi	r24, 0xFF	; 255
    2458:	80 93 19 04 	sts	0x0419, r24
		TICK_COUNT lowest;
		do{
			int slot;
			__recheck = FALSE;
    245c:	10 92 1a 04 	sts	0x041A, r1
			JOB* job;
			lowest=0;
			for(slot=maxJobs-1, job=&__queue[slot]; slot>=0; slot--, job--){
    2460:	80 91 e9 02 	lds	r24, 0x02E9
    2464:	a8 2f       	mov	r26, r24
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	11 97       	sbiw	r26, 0x01	; 1
    246a:	be 83       	std	Y+6, r27	; 0x06
    246c:	ad 83       	std	Y+5, r26	; 0x05
    246e:	ed e0       	ldi	r30, 0x0D	; 13
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	ae 9f       	mul	r26, r30
    2474:	50 01       	movw	r10, r0
    2476:	af 9f       	mul	r26, r31
    2478:	b0 0c       	add	r11, r0
    247a:	be 9f       	mul	r27, r30
    247c:	b0 0c       	add	r11, r0
    247e:	11 24       	eor	r1, r1
    2480:	2c e0       	ldi	r18, 0x0C	; 12
    2482:	34 e0       	ldi	r19, 0x04	; 4
    2484:	a2 0e       	add	r10, r18
    2486:	b3 1e       	adc	r11, r19
    2488:	66 24       	eor	r6, r6
    248a:	77 24       	eor	r7, r7
    248c:	43 01       	movw	r8, r6
    248e:	5a c0       	rjmp	.+180    	; 0x2544 <__scheduleUpdate+0x132>
				if(job->used){
    2490:	d5 01       	movw	r26, r10
    2492:	8c 91       	ld	r24, X
    2494:	88 23       	and	r24, r24
    2496:	09 f4       	brne	.+2      	; 0x249a <__scheduleUpdate+0x88>
    2498:	4c c0       	rjmp	.+152    	; 0x2532 <__scheduleUpdate+0x120>
					// check if time has elapsed
					TICK_COUNT overflow;	// how many us the timer has overshot when it should have happened
					TICK_COUNT start=job->start;
    249a:	19 96       	adiw	r26, 0x09	; 9
    249c:	2d 90       	ld	r2, X+
    249e:	3d 90       	ld	r3, X+
    24a0:	4d 90       	ld	r4, X+
    24a2:	5c 90       	ld	r5, X
    24a4:	1c 97       	sbiw	r26, 0x0c	; 12
					TICK_COUNT delay=job->delay;
    24a6:	15 96       	adiw	r26, 0x05	; 5
    24a8:	cd 90       	ld	r12, X+
    24aa:	dd 90       	ld	r13, X+
    24ac:	ed 90       	ld	r14, X+
    24ae:	fc 90       	ld	r15, X
    24b0:	18 97       	sbiw	r26, 0x08	; 8
					if(clockHasElapsedGetOverflow(start, delay, &overflow)){
    24b2:	c2 01       	movw	r24, r4
    24b4:	b1 01       	movw	r22, r2
    24b6:	a7 01       	movw	r20, r14
    24b8:	96 01       	movw	r18, r12
    24ba:	8e 01       	movw	r16, r28
    24bc:	0f 5f       	subi	r16, 0xFF	; 255
    24be:	1f 4f       	sbci	r17, 0xFF	; 255
    24c0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <clockHasElapsedGetOverflow>
    24c4:	88 23       	and	r24, r24
    24c6:	19 f1       	breq	.+70     	; 0x250e <__scheduleUpdate+0xfc>
						SchedulerCallback callback = job->callback;
    24c8:	d5 01       	movw	r26, r10
    24ca:	11 96       	adiw	r26, 0x01	; 1
    24cc:	ed 91       	ld	r30, X+
    24ce:	fc 91       	ld	r31, X
    24d0:	12 97       	sbiw	r26, 0x02	; 2
						SchedulerData data = job->data;
    24d2:	13 96       	adiw	r26, 0x03	; 3
    24d4:	8d 91       	ld	r24, X+
    24d6:	9c 91       	ld	r25, X
    24d8:	14 97       	sbiw	r26, 0x04	; 4

						// Mark this job as unused. No more references shoud be made to job->xxxx
						job->used = FALSE;
    24da:	1c 92       	st	X, r1
						--__numJobs;
    24dc:	20 91 1b 04 	lds	r18, 0x041B
    24e0:	30 91 1c 04 	lds	r19, 0x041C
    24e4:	21 50       	subi	r18, 0x01	; 1
    24e6:	30 40       	sbci	r19, 0x00	; 0
    24e8:	30 93 1c 04 	sts	0x041C, r19
    24ec:	20 93 1b 04 	sts	0x041B, r18

						// Run the job with interrupts enabled
						callback(data,start+delay,overflow);
    24f0:	c2 0c       	add	r12, r2
    24f2:	d3 1c       	adc	r13, r3
    24f4:	e4 1c       	adc	r14, r4
    24f6:	f5 1c       	adc	r15, r5
    24f8:	09 81       	ldd	r16, Y+1	; 0x01
    24fa:	1a 81       	ldd	r17, Y+2	; 0x02
    24fc:	2b 81       	ldd	r18, Y+3	; 0x03
    24fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2500:	b7 01       	movw	r22, r14
    2502:	a6 01       	movw	r20, r12
    2504:	09 95       	icall


						// Force another loop as the time taken may mean
						// something else can now run
						__recheck = TRUE;
    2506:	bf ef       	ldi	r27, 0xFF	; 255
    2508:	b0 93 1a 04 	sts	0x041A, r27
    250c:	12 c0       	rjmp	.+36     	; 0x2532 <__scheduleUpdate+0x120>
					}else{
					   // overflow has the remaining number of microseconds to wait
					   if(lowest==0 || overflow < lowest){
    250e:	61 14       	cp	r6, r1
    2510:	71 04       	cpc	r7, r1
    2512:	81 04       	cpc	r8, r1
    2514:	91 04       	cpc	r9, r1
    2516:	49 f0       	breq	.+18     	; 0x252a <__scheduleUpdate+0x118>
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	9a 81       	ldd	r25, Y+2	; 0x02
    251c:	ab 81       	ldd	r26, Y+3	; 0x03
    251e:	bc 81       	ldd	r27, Y+4	; 0x04
    2520:	86 15       	cp	r24, r6
    2522:	97 05       	cpc	r25, r7
    2524:	a8 05       	cpc	r26, r8
    2526:	b9 05       	cpc	r27, r9
    2528:	20 f4       	brcc	.+8      	; 0x2532 <__scheduleUpdate+0x120>
						   lowest = overflow;
    252a:	69 80       	ldd	r6, Y+1	; 0x01
    252c:	7a 80       	ldd	r7, Y+2	; 0x02
    252e:	8b 80       	ldd	r8, Y+3	; 0x03
    2530:	9c 80       	ldd	r9, Y+4	; 0x04
		do{
			int slot;
			__recheck = FALSE;
			JOB* job;
			lowest=0;
			for(slot=maxJobs-1, job=&__queue[slot]; slot>=0; slot--, job--){
    2532:	ed 81       	ldd	r30, Y+5	; 0x05
    2534:	fe 81       	ldd	r31, Y+6	; 0x06
    2536:	31 97       	sbiw	r30, 0x01	; 1
    2538:	fe 83       	std	Y+6, r31	; 0x06
    253a:	ed 83       	std	Y+5, r30	; 0x05
    253c:	23 ef       	ldi	r18, 0xF3	; 243
    253e:	3f ef       	ldi	r19, 0xFF	; 255
    2540:	a2 0e       	add	r10, r18
    2542:	b3 1e       	adc	r11, r19
    2544:	8d 81       	ldd	r24, Y+5	; 0x05
    2546:	9e 81       	ldd	r25, Y+6	; 0x06
    2548:	8f 5f       	subi	r24, 0xFF	; 255
    254a:	9f 4f       	sbci	r25, 0xFF	; 255
    254c:	09 f0       	breq	.+2      	; 0x2550 <__scheduleUpdate+0x13e>
    254e:	a0 cf       	rjmp	.-192    	; 0x2490 <__scheduleUpdate+0x7e>
						   lowest = overflow;
					   }
					}
				}
			}
		}while( __recheck);
    2550:	80 91 1a 04 	lds	r24, 0x041A
    2554:	88 23       	and	r24, r24
    2556:	09 f0       	breq	.+2      	; 0x255a <__scheduleUpdate+0x148>
    2558:	81 cf       	rjmp	.-254    	; 0x245c <__scheduleUpdate+0x4a>
		__running=FALSE;
    255a:	10 92 19 04 	sts	0x0419, r1

		if(__numJobs > 0){
    255e:	80 91 1b 04 	lds	r24, 0x041B
    2562:	90 91 1c 04 	lds	r25, 0x041C
    2566:	18 16       	cp	r1, r24
    2568:	19 06       	cpc	r1, r25
    256a:	4c f5       	brge	.+82     	; 0x25be <__scheduleUpdate+0x1ac>
			// Decide when we need to interrupt again
			uint16_t compare = calcTicks(lowest) + CLOCK_COUNTER;
    256c:	20 91 24 01 	lds	r18, 0x0124
    2570:	30 91 25 01 	lds	r19, 0x0125
    2574:	d4 01       	movw	r26, r8
    2576:	c3 01       	movw	r24, r6
    2578:	88 0f       	add	r24, r24
    257a:	99 1f       	adc	r25, r25
    257c:	aa 1f       	adc	r26, r26
    257e:	bb 1f       	adc	r27, r27
    2580:	81 30       	cpi	r24, 0x01	; 1
    2582:	ea ef       	ldi	r30, 0xFA	; 250
    2584:	9e 07       	cpc	r25, r30
    2586:	e0 e0       	ldi	r30, 0x00	; 0
    2588:	ae 07       	cpc	r26, r30
    258a:	e0 e0       	ldi	r30, 0x00	; 0
    258c:	be 07       	cpc	r27, r30
    258e:	20 f0       	brcs	.+8      	; 0x2598 <__scheduleUpdate+0x186>
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	9a ef       	ldi	r25, 0xFA	; 250
    2594:	a0 e0       	ldi	r26, 0x00	; 0
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	82 0f       	add	r24, r18
    259a:	93 1f       	adc	r25, r19
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <__scheduleUpdate+0x190>
			while(compare >= CLOCK_TOP){
				compare -= CLOCK_TOP;
    259e:	80 50       	subi	r24, 0x00	; 0
    25a0:	9a 4f       	sbci	r25, 0xFA	; 250
		__running=FALSE;

		if(__numJobs > 0){
			// Decide when we need to interrupt again
			uint16_t compare = calcTicks(lowest) + CLOCK_COUNTER;
			while(compare >= CLOCK_TOP){
    25a2:	fa ef       	ldi	r31, 0xFA	; 250
    25a4:	80 30       	cpi	r24, 0x00	; 0
    25a6:	9f 07       	cpc	r25, r31
    25a8:	d0 f7       	brcc	.-12     	; 0x259e <__scheduleUpdate+0x18c>
				compare -= CLOCK_TOP;
			}
			// Set when next interrupt should occur
			SCHEDULER_THRESHOLD = compare;
    25aa:	90 93 2b 01 	sts	0x012B, r25
    25ae:	80 93 2a 01 	sts	0x012A, r24
			// Clear any pending interrupt
			SCHEDULER_INT_CLEAR;
    25b2:	d2 9a       	sbi	0x1a, 2	; 26
			// Look for new interrupts
			SCHEDULER_INT_ENABLE;
    25b4:	80 91 73 00 	lds	r24, 0x0073
    25b8:	84 60       	ori	r24, 0x04	; 4
    25ba:	80 93 73 00 	sts	0x0073, r24
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    25be:	2f 81       	ldd	r18, Y+7	; 0x07
    25c0:	2f bf       	out	0x3f, r18	; 63
		}

	} // Restore previous interrupt enable
}
    25c2:	27 96       	adiw	r28, 0x07	; 7
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	1f 91       	pop	r17
    25d4:	0f 91       	pop	r16
    25d6:	ff 90       	pop	r15
    25d8:	ef 90       	pop	r14
    25da:	df 90       	pop	r13
    25dc:	cf 90       	pop	r12
    25de:	bf 90       	pop	r11
    25e0:	af 90       	pop	r10
    25e2:	9f 90       	pop	r9
    25e4:	8f 90       	pop	r8
    25e6:	7f 90       	pop	r7
    25e8:	6f 90       	pop	r6
    25ea:	5f 90       	pop	r5
    25ec:	4f 90       	pop	r4
    25ee:	3f 90       	pop	r3
    25f0:	2f 90       	pop	r2
    25f2:	08 95       	ret

000025f4 <__vector_48>:
}



// ISR for scheduler match - check if another job needs to run
ISR(TIMER5_COMPB_vect) {
    25f4:	1f 92       	push	r1
    25f6:	0f 92       	push	r0
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	0f 92       	push	r0
    25fc:	11 24       	eor	r1, r1
    25fe:	2f 93       	push	r18
    2600:	3f 93       	push	r19
    2602:	4f 93       	push	r20
    2604:	5f 93       	push	r21
    2606:	6f 93       	push	r22
    2608:	7f 93       	push	r23
    260a:	8f 93       	push	r24
    260c:	9f 93       	push	r25
    260e:	af 93       	push	r26
    2610:	bf 93       	push	r27
    2612:	ef 93       	push	r30
    2614:	ff 93       	push	r31
	__scheduleUpdate();
    2616:	0e 94 09 12 	call	0x2412	; 0x2412 <__scheduleUpdate>
}
    261a:	ff 91       	pop	r31
    261c:	ef 91       	pop	r30
    261e:	bf 91       	pop	r27
    2620:	af 91       	pop	r26
    2622:	9f 91       	pop	r25
    2624:	8f 91       	pop	r24
    2626:	7f 91       	pop	r23
    2628:	6f 91       	pop	r22
    262a:	5f 91       	pop	r21
    262c:	4f 91       	pop	r20
    262e:	3f 91       	pop	r19
    2630:	2f 91       	pop	r18
    2632:	0f 90       	pop	r0
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	0f 90       	pop	r0
    2638:	1f 90       	pop	r1
    263a:	18 95       	reti

0000263c <scheduleJob>:
// schedule a new job
// callback Is the function to be run at a later date
// data is a block of data to be passed into the callback
// start (in us) Is the start time of the delay
// delay (in us) Is the amount to delay by
void scheduleJob(SchedulerCallback callback, SchedulerData data, TICK_COUNT start, TICK_COUNT delay){
    263c:	2f 92       	push	r2
    263e:	3f 92       	push	r3
    2640:	4f 92       	push	r4
    2642:	5f 92       	push	r5
    2644:	6f 92       	push	r6
    2646:	7f 92       	push	r7
    2648:	8f 92       	push	r8
    264a:	9f 92       	push	r9
    264c:	af 92       	push	r10
    264e:	bf 92       	push	r11
    2650:	cf 92       	push	r12
    2652:	df 92       	push	r13
    2654:	ef 92       	push	r14
    2656:	ff 92       	push	r15
    2658:	0f 93       	push	r16
    265a:	1f 93       	push	r17
    265c:	df 93       	push	r29
    265e:	cf 93       	push	r28
    2660:	00 d0       	rcall	.+0      	; 0x2662 <scheduleJob+0x26>
    2662:	00 d0       	rcall	.+0      	; 0x2664 <scheduleJob+0x28>
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	1c 01       	movw	r2, r24
    266a:	2b 01       	movw	r4, r22
    266c:	49 01       	movw	r8, r18
    266e:	5a 01       	movw	r10, r20
    2670:	67 01       	movw	r12, r14
    2672:	78 01       	movw	r14, r16
	boolean doItNow = FALSE;

 	if(delay < 1000U){
    2674:	88 ee       	ldi	r24, 0xE8	; 232
    2676:	c8 16       	cp	r12, r24
    2678:	83 e0       	ldi	r24, 0x03	; 3
    267a:	d8 06       	cpc	r13, r24
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	e8 06       	cpc	r14, r24
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	f8 06       	cpc	r15, r24
    2684:	38 f4       	brcc	.+14     	; 0x2694 <scheduleJob+0x58>
		// it needs to happen now as the delay is less than the heartbeat timer interrupt of 1ms
		if(__running){
    2686:	80 91 19 04 	lds	r24, 0x0419
    268a:	88 23       	and	r24, r24
    268c:	c1 f1       	breq	.+112    	; 0x26fe <scheduleJob+0xc2>
			// make sure we do another loop of __scheduleUpdate to find it
			__recheck=TRUE;
    268e:	8f ef       	ldi	r24, 0xFF	; 255
    2690:	80 93 1a 04 	sts	0x041A, r24

	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
    2694:	6f b7       	in	r22, 0x3f	; 63
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
    2696:	f8 94       	cli
			for(slot=0; slot < maxJobs; slot++){
    2698:	80 91 e9 02 	lds	r24, 0x02E9
    269c:	48 2f       	mov	r20, r24
    269e:	50 e0       	ldi	r21, 0x00	; 0
    26a0:	ac e0       	ldi	r26, 0x0C	; 12
    26a2:	b4 e0       	ldi	r27, 0x04	; 4
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	20 c0       	rjmp	.+64     	; 0x26ea <scheduleJob+0xae>

	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
    26aa:	fd 01       	movw	r30, r26
			for(slot=0; slot < maxJobs; slot++){
				JOB* job = &__queue[slot];
				if(!job->used){
    26ac:	8c 91       	ld	r24, X
    26ae:	1d 96       	adiw	r26, 0x0d	; 13
    26b0:	88 23       	and	r24, r24
    26b2:	c9 f4       	brne	.+50     	; 0x26e6 <scheduleJob+0xaa>
					job->used = TRUE;
    26b4:	8f ef       	ldi	r24, 0xFF	; 255
    26b6:	80 83       	st	Z, r24
					job->callback = callback;
    26b8:	32 82       	std	Z+2, r3	; 0x02
    26ba:	21 82       	std	Z+1, r2	; 0x01
					job->data = data;
    26bc:	54 82       	std	Z+4, r5	; 0x04
    26be:	43 82       	std	Z+3, r4	; 0x03
					job->start=start;
    26c0:	81 86       	std	Z+9, r8	; 0x09
    26c2:	92 86       	std	Z+10, r9	; 0x0a
    26c4:	a3 86       	std	Z+11, r10	; 0x0b
    26c6:	b4 86       	std	Z+12, r11	; 0x0c
					job->delay=delay;
    26c8:	c5 82       	std	Z+5, r12	; 0x05
    26ca:	d6 82       	std	Z+6, r13	; 0x06
    26cc:	e7 82       	std	Z+7, r14	; 0x07
    26ce:	f0 86       	std	Z+8, r15	; 0x08
					found=TRUE;
					__numJobs++;
    26d0:	80 91 1b 04 	lds	r24, 0x041B
    26d4:	90 91 1c 04 	lds	r25, 0x041C
    26d8:	01 96       	adiw	r24, 0x01	; 1
    26da:	90 93 1c 04 	sts	0x041C, r25
    26de:	80 93 1b 04 	sts	0x041B, r24
    26e2:	8f ef       	ldi	r24, 0xFF	; 255
    26e4:	06 c0       	rjmp	.+12     	; 0x26f2 <scheduleJob+0xb6>
	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
			for(slot=0; slot < maxJobs; slot++){
    26e6:	2f 5f       	subi	r18, 0xFF	; 255
    26e8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ea:	24 17       	cp	r18, r20
    26ec:	35 07       	cpc	r19, r21
    26ee:	ec f2       	brlt	.-70     	; 0x26aa <scheduleJob+0x6e>
    26f0:	80 e0       	ldi	r24, 0x00	; 0
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    26f2:	6f bf       	out	0x3f, r22	; 63
					break;
				}
			}
		}

		if(!found){
    26f4:	88 23       	and	r24, r24
    26f6:	f1 f4       	brne	.+60     	; 0x2734 <scheduleJob+0xf8>
			// the queue is exhausted
			setError(SCHEDULER_EXHAUSTED);
    26f8:	8f ef       	ldi	r24, 0xFF	; 255
    26fa:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <setError>
	if(doItNow){
		// we need to do it now
		TICK_COUNT overflow;

		// wait for expiry
		while(!clockHasElapsedGetOverflow(start, delay, &overflow));
    26fe:	3e 01       	movw	r6, r28
    2700:	08 94       	sec
    2702:	61 1c       	adc	r6, r1
    2704:	71 1c       	adc	r7, r1
    2706:	c5 01       	movw	r24, r10
    2708:	b4 01       	movw	r22, r8
    270a:	a7 01       	movw	r20, r14
    270c:	96 01       	movw	r18, r12
    270e:	83 01       	movw	r16, r6
    2710:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <clockHasElapsedGetOverflow>
    2714:	88 23       	and	r24, r24
    2716:	b9 f3       	breq	.-18     	; 0x2706 <scheduleJob+0xca>

		// call the queued routine
		callback(data,start+delay,overflow);
    2718:	c8 0c       	add	r12, r8
    271a:	d9 1c       	adc	r13, r9
    271c:	ea 1c       	adc	r14, r10
    271e:	fb 1c       	adc	r15, r11
    2720:	09 81       	ldd	r16, Y+1	; 0x01
    2722:	1a 81       	ldd	r17, Y+2	; 0x02
    2724:	2b 81       	ldd	r18, Y+3	; 0x03
    2726:	3c 81       	ldd	r19, Y+4	; 0x04
    2728:	c2 01       	movw	r24, r4
    272a:	b7 01       	movw	r22, r14
    272c:	a6 01       	movw	r20, r12
    272e:	f1 01       	movw	r30, r2
    2730:	09 95       	icall
    2732:	06 c0       	rjmp	.+12     	; 0x2740 <scheduleJob+0x104>
	}else{
		if(!__running){
    2734:	80 91 19 04 	lds	r24, 0x0419
    2738:	88 23       	and	r24, r24
    273a:	11 f4       	brne	.+4      	; 0x2740 <scheduleJob+0x104>
			__scheduleUpdate();
    273c:	0e 94 09 12 	call	0x2412	; 0x2412 <__scheduleUpdate>
		}
	}
}
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	1f 91       	pop	r17
    274e:	0f 91       	pop	r16
    2750:	ff 90       	pop	r15
    2752:	ef 90       	pop	r14
    2754:	df 90       	pop	r13
    2756:	cf 90       	pop	r12
    2758:	bf 90       	pop	r11
    275a:	af 90       	pop	r10
    275c:	9f 90       	pop	r9
    275e:	8f 90       	pop	r8
    2760:	7f 90       	pop	r7
    2762:	6f 90       	pop	r6
    2764:	5f 90       	pop	r5
    2766:	4f 90       	pop	r4
    2768:	3f 90       	pop	r3
    276a:	2f 90       	pop	r2
    276c:	08 95       	ret

0000276e <vfprintf>:
    276e:	a1 e1       	ldi	r26, 0x11	; 17
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	ed eb       	ldi	r30, 0xBD	; 189
    2774:	f3 e1       	ldi	r31, 0x13	; 19
    2776:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__prologue_saves__>
    277a:	3c 01       	movw	r6, r24
    277c:	7f 87       	std	Y+15, r23	; 0x0f
    277e:	6e 87       	std	Y+14, r22	; 0x0e
    2780:	6a 01       	movw	r12, r20
    2782:	fc 01       	movw	r30, r24
    2784:	17 82       	std	Z+7, r1	; 0x07
    2786:	16 82       	std	Z+6, r1	; 0x06
    2788:	83 81       	ldd	r24, Z+3	; 0x03
    278a:	81 fd       	sbrc	r24, 1
    278c:	03 c0       	rjmp	.+6      	; 0x2794 <vfprintf+0x26>
    278e:	6f ef       	ldi	r22, 0xFF	; 255
    2790:	7f ef       	ldi	r23, 0xFF	; 255
    2792:	6f c3       	rjmp	.+1758   	; 0x2e72 <vfprintf+0x704>
    2794:	9e 01       	movw	r18, r28
    2796:	2f 5f       	subi	r18, 0xFF	; 255
    2798:	3f 4f       	sbci	r19, 0xFF	; 255
    279a:	39 8b       	std	Y+17, r19	; 0x11
    279c:	28 8b       	std	Y+16, r18	; 0x10
    279e:	f3 01       	movw	r30, r6
    27a0:	23 81       	ldd	r18, Z+3	; 0x03
    27a2:	ee 85       	ldd	r30, Y+14	; 0x0e
    27a4:	ff 85       	ldd	r31, Y+15	; 0x0f
    27a6:	23 fd       	sbrc	r18, 3
    27a8:	85 91       	lpm	r24, Z+
    27aa:	23 ff       	sbrs	r18, 3
    27ac:	81 91       	ld	r24, Z+
    27ae:	ff 87       	std	Y+15, r31	; 0x0f
    27b0:	ee 87       	std	Y+14, r30	; 0x0e
    27b2:	88 23       	and	r24, r24
    27b4:	09 f4       	brne	.+2      	; 0x27b8 <vfprintf+0x4a>
    27b6:	5a c3       	rjmp	.+1716   	; 0x2e6c <vfprintf+0x6fe>
    27b8:	85 32       	cpi	r24, 0x25	; 37
    27ba:	51 f4       	brne	.+20     	; 0x27d0 <vfprintf+0x62>
    27bc:	ee 85       	ldd	r30, Y+14	; 0x0e
    27be:	ff 85       	ldd	r31, Y+15	; 0x0f
    27c0:	23 fd       	sbrc	r18, 3
    27c2:	85 91       	lpm	r24, Z+
    27c4:	23 ff       	sbrs	r18, 3
    27c6:	81 91       	ld	r24, Z+
    27c8:	ff 87       	std	Y+15, r31	; 0x0f
    27ca:	ee 87       	std	Y+14, r30	; 0x0e
    27cc:	85 32       	cpi	r24, 0x25	; 37
    27ce:	29 f4       	brne	.+10     	; 0x27da <vfprintf+0x6c>
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	b3 01       	movw	r22, r6
    27d4:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    27d8:	e2 cf       	rjmp	.-60     	; 0x279e <vfprintf+0x30>
    27da:	98 2f       	mov	r25, r24
    27dc:	10 e0       	ldi	r17, 0x00	; 0
    27de:	88 24       	eor	r8, r8
    27e0:	99 24       	eor	r9, r9
    27e2:	10 32       	cpi	r17, 0x20	; 32
    27e4:	b0 f4       	brcc	.+44     	; 0x2812 <vfprintf+0xa4>
    27e6:	9b 32       	cpi	r25, 0x2B	; 43
    27e8:	69 f0       	breq	.+26     	; 0x2804 <vfprintf+0x96>
    27ea:	9c 32       	cpi	r25, 0x2C	; 44
    27ec:	28 f4       	brcc	.+10     	; 0x27f8 <vfprintf+0x8a>
    27ee:	90 32       	cpi	r25, 0x20	; 32
    27f0:	51 f0       	breq	.+20     	; 0x2806 <vfprintf+0x98>
    27f2:	93 32       	cpi	r25, 0x23	; 35
    27f4:	71 f4       	brne	.+28     	; 0x2812 <vfprintf+0xa4>
    27f6:	0b c0       	rjmp	.+22     	; 0x280e <vfprintf+0xa0>
    27f8:	9d 32       	cpi	r25, 0x2D	; 45
    27fa:	39 f0       	breq	.+14     	; 0x280a <vfprintf+0x9c>
    27fc:	90 33       	cpi	r25, 0x30	; 48
    27fe:	49 f4       	brne	.+18     	; 0x2812 <vfprintf+0xa4>
    2800:	11 60       	ori	r17, 0x01	; 1
    2802:	28 c0       	rjmp	.+80     	; 0x2854 <vfprintf+0xe6>
    2804:	12 60       	ori	r17, 0x02	; 2
    2806:	14 60       	ori	r17, 0x04	; 4
    2808:	25 c0       	rjmp	.+74     	; 0x2854 <vfprintf+0xe6>
    280a:	18 60       	ori	r17, 0x08	; 8
    280c:	23 c0       	rjmp	.+70     	; 0x2854 <vfprintf+0xe6>
    280e:	10 61       	ori	r17, 0x10	; 16
    2810:	21 c0       	rjmp	.+66     	; 0x2854 <vfprintf+0xe6>
    2812:	17 fd       	sbrc	r17, 7
    2814:	2a c0       	rjmp	.+84     	; 0x286a <vfprintf+0xfc>
    2816:	89 2f       	mov	r24, r25
    2818:	80 53       	subi	r24, 0x30	; 48
    281a:	8a 30       	cpi	r24, 0x0A	; 10
    281c:	78 f4       	brcc	.+30     	; 0x283c <vfprintf+0xce>
    281e:	16 ff       	sbrs	r17, 6
    2820:	06 c0       	rjmp	.+12     	; 0x282e <vfprintf+0xc0>
    2822:	fa e0       	ldi	r31, 0x0A	; 10
    2824:	9f 9e       	mul	r9, r31
    2826:	90 2c       	mov	r9, r0
    2828:	11 24       	eor	r1, r1
    282a:	98 0e       	add	r9, r24
    282c:	13 c0       	rjmp	.+38     	; 0x2854 <vfprintf+0xe6>
    282e:	3a e0       	ldi	r19, 0x0A	; 10
    2830:	83 9e       	mul	r8, r19
    2832:	80 2c       	mov	r8, r0
    2834:	11 24       	eor	r1, r1
    2836:	88 0e       	add	r8, r24
    2838:	10 62       	ori	r17, 0x20	; 32
    283a:	0c c0       	rjmp	.+24     	; 0x2854 <vfprintf+0xe6>
    283c:	9e 32       	cpi	r25, 0x2E	; 46
    283e:	21 f4       	brne	.+8      	; 0x2848 <vfprintf+0xda>
    2840:	16 fd       	sbrc	r17, 6
    2842:	14 c3       	rjmp	.+1576   	; 0x2e6c <vfprintf+0x6fe>
    2844:	10 64       	ori	r17, 0x40	; 64
    2846:	06 c0       	rjmp	.+12     	; 0x2854 <vfprintf+0xe6>
    2848:	9c 36       	cpi	r25, 0x6C	; 108
    284a:	11 f4       	brne	.+4      	; 0x2850 <vfprintf+0xe2>
    284c:	10 68       	ori	r17, 0x80	; 128
    284e:	02 c0       	rjmp	.+4      	; 0x2854 <vfprintf+0xe6>
    2850:	98 36       	cpi	r25, 0x68	; 104
    2852:	59 f4       	brne	.+22     	; 0x286a <vfprintf+0xfc>
    2854:	ee 85       	ldd	r30, Y+14	; 0x0e
    2856:	ff 85       	ldd	r31, Y+15	; 0x0f
    2858:	23 fd       	sbrc	r18, 3
    285a:	95 91       	lpm	r25, Z+
    285c:	23 ff       	sbrs	r18, 3
    285e:	91 91       	ld	r25, Z+
    2860:	ff 87       	std	Y+15, r31	; 0x0f
    2862:	ee 87       	std	Y+14, r30	; 0x0e
    2864:	99 23       	and	r25, r25
    2866:	09 f0       	breq	.+2      	; 0x286a <vfprintf+0xfc>
    2868:	bc cf       	rjmp	.-136    	; 0x27e2 <vfprintf+0x74>
    286a:	89 2f       	mov	r24, r25
    286c:	85 54       	subi	r24, 0x45	; 69
    286e:	83 30       	cpi	r24, 0x03	; 3
    2870:	20 f4       	brcc	.+8      	; 0x287a <vfprintf+0x10c>
    2872:	81 2f       	mov	r24, r17
    2874:	80 61       	ori	r24, 0x10	; 16
    2876:	90 5e       	subi	r25, 0xE0	; 224
    2878:	07 c0       	rjmp	.+14     	; 0x2888 <vfprintf+0x11a>
    287a:	89 2f       	mov	r24, r25
    287c:	85 56       	subi	r24, 0x65	; 101
    287e:	83 30       	cpi	r24, 0x03	; 3
    2880:	08 f0       	brcs	.+2      	; 0x2884 <vfprintf+0x116>
    2882:	9f c1       	rjmp	.+830    	; 0x2bc2 <vfprintf+0x454>
    2884:	81 2f       	mov	r24, r17
    2886:	8f 7e       	andi	r24, 0xEF	; 239
    2888:	86 fd       	sbrc	r24, 6
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <vfprintf+0x122>
    288c:	76 e0       	ldi	r23, 0x06	; 6
    288e:	97 2e       	mov	r9, r23
    2890:	6f e3       	ldi	r22, 0x3F	; 63
    2892:	f6 2e       	mov	r15, r22
    2894:	f8 22       	and	r15, r24
    2896:	95 36       	cpi	r25, 0x65	; 101
    2898:	19 f4       	brne	.+6      	; 0x28a0 <vfprintf+0x132>
    289a:	f0 e4       	ldi	r31, 0x40	; 64
    289c:	ff 2a       	or	r15, r31
    289e:	07 c0       	rjmp	.+14     	; 0x28ae <vfprintf+0x140>
    28a0:	96 36       	cpi	r25, 0x66	; 102
    28a2:	19 f4       	brne	.+6      	; 0x28aa <vfprintf+0x13c>
    28a4:	20 e8       	ldi	r18, 0x80	; 128
    28a6:	f2 2a       	or	r15, r18
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <vfprintf+0x140>
    28aa:	91 10       	cpse	r9, r1
    28ac:	9a 94       	dec	r9
    28ae:	f7 fe       	sbrs	r15, 7
    28b0:	0a c0       	rjmp	.+20     	; 0x28c6 <vfprintf+0x158>
    28b2:	3b e3       	ldi	r19, 0x3B	; 59
    28b4:	39 15       	cp	r19, r9
    28b6:	18 f4       	brcc	.+6      	; 0x28be <vfprintf+0x150>
    28b8:	5c e3       	ldi	r21, 0x3C	; 60
    28ba:	b5 2e       	mov	r11, r21
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <vfprintf+0x154>
    28be:	b9 2c       	mov	r11, r9
    28c0:	b3 94       	inc	r11
    28c2:	27 e0       	ldi	r18, 0x07	; 7
    28c4:	09 c0       	rjmp	.+18     	; 0x28d8 <vfprintf+0x16a>
    28c6:	47 e0       	ldi	r20, 0x07	; 7
    28c8:	49 15       	cp	r20, r9
    28ca:	20 f4       	brcc	.+8      	; 0x28d4 <vfprintf+0x166>
    28cc:	bb 24       	eor	r11, r11
    28ce:	47 e0       	ldi	r20, 0x07	; 7
    28d0:	94 2e       	mov	r9, r20
    28d2:	f7 cf       	rjmp	.-18     	; 0x28c2 <vfprintf+0x154>
    28d4:	29 2d       	mov	r18, r9
    28d6:	bb 24       	eor	r11, r11
    28d8:	c6 01       	movw	r24, r12
    28da:	04 96       	adiw	r24, 0x04	; 4
    28dc:	9d 87       	std	Y+13, r25	; 0x0d
    28de:	8c 87       	std	Y+12, r24	; 0x0c
    28e0:	f6 01       	movw	r30, r12
    28e2:	60 81       	ld	r22, Z
    28e4:	71 81       	ldd	r23, Z+1	; 0x01
    28e6:	82 81       	ldd	r24, Z+2	; 0x02
    28e8:	93 81       	ldd	r25, Z+3	; 0x03
    28ea:	ae 01       	movw	r20, r28
    28ec:	4f 5f       	subi	r20, 0xFF	; 255
    28ee:	5f 4f       	sbci	r21, 0xFF	; 255
    28f0:	0b 2d       	mov	r16, r11
    28f2:	0e 94 46 18 	call	0x308c	; 0x308c <__ftoa_engine>
    28f6:	6c 01       	movw	r12, r24
    28f8:	09 81       	ldd	r16, Y+1	; 0x01
    28fa:	20 2e       	mov	r2, r16
    28fc:	33 24       	eor	r3, r3
    28fe:	00 ff       	sbrs	r16, 0
    2900:	04 c0       	rjmp	.+8      	; 0x290a <vfprintf+0x19c>
    2902:	03 fd       	sbrc	r16, 3
    2904:	02 c0       	rjmp	.+4      	; 0x290a <vfprintf+0x19c>
    2906:	1d e2       	ldi	r17, 0x2D	; 45
    2908:	09 c0       	rjmp	.+18     	; 0x291c <vfprintf+0x1ae>
    290a:	f1 fe       	sbrs	r15, 1
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <vfprintf+0x1a4>
    290e:	1b e2       	ldi	r17, 0x2B	; 43
    2910:	05 c0       	rjmp	.+10     	; 0x291c <vfprintf+0x1ae>
    2912:	f2 fc       	sbrc	r15, 2
    2914:	02 c0       	rjmp	.+4      	; 0x291a <vfprintf+0x1ac>
    2916:	10 e0       	ldi	r17, 0x00	; 0
    2918:	01 c0       	rjmp	.+2      	; 0x291c <vfprintf+0x1ae>
    291a:	10 e2       	ldi	r17, 0x20	; 32
    291c:	c1 01       	movw	r24, r2
    291e:	8c 70       	andi	r24, 0x0C	; 12
    2920:	90 70       	andi	r25, 0x00	; 0
    2922:	89 2b       	or	r24, r25
    2924:	b9 f1       	breq	.+110    	; 0x2994 <vfprintf+0x226>
    2926:	11 23       	and	r17, r17
    2928:	11 f4       	brne	.+4      	; 0x292e <vfprintf+0x1c0>
    292a:	83 e0       	ldi	r24, 0x03	; 3
    292c:	01 c0       	rjmp	.+2      	; 0x2930 <vfprintf+0x1c2>
    292e:	84 e0       	ldi	r24, 0x04	; 4
    2930:	88 15       	cp	r24, r8
    2932:	10 f0       	brcs	.+4      	; 0x2938 <vfprintf+0x1ca>
    2934:	88 24       	eor	r8, r8
    2936:	0a c0       	rjmp	.+20     	; 0x294c <vfprintf+0x1de>
    2938:	88 1a       	sub	r8, r24
    293a:	f3 fc       	sbrc	r15, 3
    293c:	07 c0       	rjmp	.+14     	; 0x294c <vfprintf+0x1de>
    293e:	80 e2       	ldi	r24, 0x20	; 32
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	b3 01       	movw	r22, r6
    2944:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2948:	8a 94       	dec	r8
    294a:	c9 f7       	brne	.-14     	; 0x293e <vfprintf+0x1d0>
    294c:	11 23       	and	r17, r17
    294e:	29 f0       	breq	.+10     	; 0x295a <vfprintf+0x1ec>
    2950:	81 2f       	mov	r24, r17
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	b3 01       	movw	r22, r6
    2956:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    295a:	23 fe       	sbrs	r2, 3
    295c:	03 c0       	rjmp	.+6      	; 0x2964 <vfprintf+0x1f6>
    295e:	04 ee       	ldi	r16, 0xE4	; 228
    2960:	10 e0       	ldi	r17, 0x00	; 0
    2962:	0e c0       	rjmp	.+28     	; 0x2980 <vfprintf+0x212>
    2964:	08 ee       	ldi	r16, 0xE8	; 232
    2966:	10 e0       	ldi	r17, 0x00	; 0
    2968:	0b c0       	rjmp	.+22     	; 0x2980 <vfprintf+0x212>
    296a:	e1 14       	cp	r14, r1
    296c:	f1 04       	cpc	r15, r1
    296e:	09 f0       	breq	.+2      	; 0x2972 <vfprintf+0x204>
    2970:	80 52       	subi	r24, 0x20	; 32
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	b3 01       	movw	r22, r6
    2976:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    297a:	0f 5f       	subi	r16, 0xFF	; 255
    297c:	1f 4f       	sbci	r17, 0xFF	; 255
    297e:	05 c0       	rjmp	.+10     	; 0x298a <vfprintf+0x21c>
    2980:	ef 2c       	mov	r14, r15
    2982:	ff 24       	eor	r15, r15
    2984:	f0 e1       	ldi	r31, 0x10	; 16
    2986:	ef 22       	and	r14, r31
    2988:	ff 24       	eor	r15, r15
    298a:	f8 01       	movw	r30, r16
    298c:	84 91       	lpm	r24, Z+
    298e:	88 23       	and	r24, r24
    2990:	61 f7       	brne	.-40     	; 0x296a <vfprintf+0x1fc>
    2992:	14 c1       	rjmp	.+552    	; 0x2bbc <vfprintf+0x44e>
    2994:	f7 fe       	sbrs	r15, 7
    2996:	12 c0       	rjmp	.+36     	; 0x29bc <vfprintf+0x24e>
    2998:	bc 0c       	add	r11, r12
    299a:	24 fe       	sbrs	r2, 4
    299c:	04 c0       	rjmp	.+8      	; 0x29a6 <vfprintf+0x238>
    299e:	8a 81       	ldd	r24, Y+2	; 0x02
    29a0:	81 33       	cpi	r24, 0x31	; 49
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <vfprintf+0x238>
    29a4:	ba 94       	dec	r11
    29a6:	1b 14       	cp	r1, r11
    29a8:	1c f0       	brlt	.+6      	; 0x29b0 <vfprintf+0x242>
    29aa:	bb 24       	eor	r11, r11
    29ac:	b3 94       	inc	r11
    29ae:	2d c0       	rjmp	.+90     	; 0x2a0a <vfprintf+0x29c>
    29b0:	f8 e0       	ldi	r31, 0x08	; 8
    29b2:	fb 15       	cp	r31, r11
    29b4:	50 f5       	brcc	.+84     	; 0x2a0a <vfprintf+0x29c>
    29b6:	38 e0       	ldi	r19, 0x08	; 8
    29b8:	b3 2e       	mov	r11, r19
    29ba:	27 c0       	rjmp	.+78     	; 0x2a0a <vfprintf+0x29c>
    29bc:	f6 fc       	sbrc	r15, 6
    29be:	25 c0       	rjmp	.+74     	; 0x2a0a <vfprintf+0x29c>
    29c0:	89 2d       	mov	r24, r9
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	8c 15       	cp	r24, r12
    29c6:	9d 05       	cpc	r25, r13
    29c8:	4c f0       	brlt	.+18     	; 0x29dc <vfprintf+0x26e>
    29ca:	2c ef       	ldi	r18, 0xFC	; 252
    29cc:	c2 16       	cp	r12, r18
    29ce:	2f ef       	ldi	r18, 0xFF	; 255
    29d0:	d2 06       	cpc	r13, r18
    29d2:	24 f0       	brlt	.+8      	; 0x29dc <vfprintf+0x26e>
    29d4:	30 e8       	ldi	r19, 0x80	; 128
    29d6:	f3 2a       	or	r15, r19
    29d8:	01 c0       	rjmp	.+2      	; 0x29dc <vfprintf+0x26e>
    29da:	9a 94       	dec	r9
    29dc:	99 20       	and	r9, r9
    29de:	49 f0       	breq	.+18     	; 0x29f2 <vfprintf+0x284>
    29e0:	e2 e0       	ldi	r30, 0x02	; 2
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	ec 0f       	add	r30, r28
    29e6:	fd 1f       	adc	r31, r29
    29e8:	e9 0d       	add	r30, r9
    29ea:	f1 1d       	adc	r31, r1
    29ec:	80 81       	ld	r24, Z
    29ee:	80 33       	cpi	r24, 0x30	; 48
    29f0:	a1 f3       	breq	.-24     	; 0x29da <vfprintf+0x26c>
    29f2:	f7 fe       	sbrs	r15, 7
    29f4:	0a c0       	rjmp	.+20     	; 0x2a0a <vfprintf+0x29c>
    29f6:	b9 2c       	mov	r11, r9
    29f8:	b3 94       	inc	r11
    29fa:	89 2d       	mov	r24, r9
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	c8 16       	cp	r12, r24
    2a00:	d9 06       	cpc	r13, r25
    2a02:	14 f0       	brlt	.+4      	; 0x2a08 <vfprintf+0x29a>
    2a04:	99 24       	eor	r9, r9
    2a06:	01 c0       	rjmp	.+2      	; 0x2a0a <vfprintf+0x29c>
    2a08:	9c 18       	sub	r9, r12
    2a0a:	f7 fc       	sbrc	r15, 7
    2a0c:	03 c0       	rjmp	.+6      	; 0x2a14 <vfprintf+0x2a6>
    2a0e:	25 e0       	ldi	r18, 0x05	; 5
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	09 c0       	rjmp	.+18     	; 0x2a26 <vfprintf+0x2b8>
    2a14:	1c 14       	cp	r1, r12
    2a16:	1d 04       	cpc	r1, r13
    2a18:	1c f0       	brlt	.+6      	; 0x2a20 <vfprintf+0x2b2>
    2a1a:	21 e0       	ldi	r18, 0x01	; 1
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	03 c0       	rjmp	.+6      	; 0x2a26 <vfprintf+0x2b8>
    2a20:	96 01       	movw	r18, r12
    2a22:	2f 5f       	subi	r18, 0xFF	; 255
    2a24:	3f 4f       	sbci	r19, 0xFF	; 255
    2a26:	11 23       	and	r17, r17
    2a28:	11 f0       	breq	.+4      	; 0x2a2e <vfprintf+0x2c0>
    2a2a:	2f 5f       	subi	r18, 0xFF	; 255
    2a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2e:	99 20       	and	r9, r9
    2a30:	29 f0       	breq	.+10     	; 0x2a3c <vfprintf+0x2ce>
    2a32:	89 2d       	mov	r24, r9
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	01 96       	adiw	r24, 0x01	; 1
    2a38:	28 0f       	add	r18, r24
    2a3a:	39 1f       	adc	r19, r25
    2a3c:	88 2d       	mov	r24, r8
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	28 17       	cp	r18, r24
    2a42:	39 07       	cpc	r19, r25
    2a44:	14 f0       	brlt	.+4      	; 0x2a4a <vfprintf+0x2dc>
    2a46:	88 24       	eor	r8, r8
    2a48:	01 c0       	rjmp	.+2      	; 0x2a4c <vfprintf+0x2de>
    2a4a:	82 1a       	sub	r8, r18
    2a4c:	4f 2c       	mov	r4, r15
    2a4e:	55 24       	eor	r5, r5
    2a50:	c2 01       	movw	r24, r4
    2a52:	89 70       	andi	r24, 0x09	; 9
    2a54:	90 70       	andi	r25, 0x00	; 0
    2a56:	89 2b       	or	r24, r25
    2a58:	39 f0       	breq	.+14     	; 0x2a68 <vfprintf+0x2fa>
    2a5a:	08 c0       	rjmp	.+16     	; 0x2a6c <vfprintf+0x2fe>
    2a5c:	80 e2       	ldi	r24, 0x20	; 32
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	b3 01       	movw	r22, r6
    2a62:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2a66:	8a 94       	dec	r8
    2a68:	88 20       	and	r8, r8
    2a6a:	c1 f7       	brne	.-16     	; 0x2a5c <vfprintf+0x2ee>
    2a6c:	11 23       	and	r17, r17
    2a6e:	29 f0       	breq	.+10     	; 0x2a7a <vfprintf+0x30c>
    2a70:	81 2f       	mov	r24, r17
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	b3 01       	movw	r22, r6
    2a76:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2a7a:	43 fe       	sbrs	r4, 3
    2a7c:	07 c0       	rjmp	.+14     	; 0x2a8c <vfprintf+0x31e>
    2a7e:	08 c0       	rjmp	.+16     	; 0x2a90 <vfprintf+0x322>
    2a80:	80 e3       	ldi	r24, 0x30	; 48
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	b3 01       	movw	r22, r6
    2a86:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2a8a:	8a 94       	dec	r8
    2a8c:	88 20       	and	r8, r8
    2a8e:	c1 f7       	brne	.-16     	; 0x2a80 <vfprintf+0x312>
    2a90:	f7 fe       	sbrs	r15, 7
    2a92:	46 c0       	rjmp	.+140    	; 0x2b20 <vfprintf+0x3b2>
    2a94:	86 01       	movw	r16, r12
    2a96:	d7 fe       	sbrs	r13, 7
    2a98:	02 c0       	rjmp	.+4      	; 0x2a9e <vfprintf+0x330>
    2a9a:	00 e0       	ldi	r16, 0x00	; 0
    2a9c:	10 e0       	ldi	r17, 0x00	; 0
    2a9e:	76 01       	movw	r14, r12
    2aa0:	08 94       	sec
    2aa2:	e1 1c       	adc	r14, r1
    2aa4:	f1 1c       	adc	r15, r1
    2aa6:	e0 1a       	sub	r14, r16
    2aa8:	f1 0a       	sbc	r15, r17
    2aaa:	41 e0       	ldi	r20, 0x01	; 1
    2aac:	50 e0       	ldi	r21, 0x00	; 0
    2aae:	4c 0f       	add	r20, r28
    2ab0:	5d 1f       	adc	r21, r29
    2ab2:	e4 0e       	add	r14, r20
    2ab4:	f5 1e       	adc	r15, r21
    2ab6:	26 01       	movw	r4, r12
    2ab8:	4b 18       	sub	r4, r11
    2aba:	51 08       	sbc	r5, r1
    2abc:	89 2d       	mov	r24, r9
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	aa 24       	eor	r10, r10
    2ac2:	bb 24       	eor	r11, r11
    2ac4:	a8 1a       	sub	r10, r24
    2ac6:	b9 0a       	sbc	r11, r25
    2ac8:	5f ef       	ldi	r21, 0xFF	; 255
    2aca:	0f 3f       	cpi	r16, 0xFF	; 255
    2acc:	15 07       	cpc	r17, r21
    2ace:	29 f4       	brne	.+10     	; 0x2ada <vfprintf+0x36c>
    2ad0:	8e e2       	ldi	r24, 0x2E	; 46
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	b3 01       	movw	r22, r6
    2ad6:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2ada:	c0 16       	cp	r12, r16
    2adc:	d1 06       	cpc	r13, r17
    2ade:	34 f0       	brlt	.+12     	; 0x2aec <vfprintf+0x37e>
    2ae0:	40 16       	cp	r4, r16
    2ae2:	51 06       	cpc	r5, r17
    2ae4:	1c f4       	brge	.+6      	; 0x2aec <vfprintf+0x37e>
    2ae6:	f7 01       	movw	r30, r14
    2ae8:	80 81       	ld	r24, Z
    2aea:	01 c0       	rjmp	.+2      	; 0x2aee <vfprintf+0x380>
    2aec:	80 e3       	ldi	r24, 0x30	; 48
    2aee:	01 50       	subi	r16, 0x01	; 1
    2af0:	10 40       	sbci	r17, 0x00	; 0
    2af2:	08 94       	sec
    2af4:	e1 1c       	adc	r14, r1
    2af6:	f1 1c       	adc	r15, r1
    2af8:	0a 15       	cp	r16, r10
    2afa:	1b 05       	cpc	r17, r11
    2afc:	2c f0       	brlt	.+10     	; 0x2b08 <vfprintf+0x39a>
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	b3 01       	movw	r22, r6
    2b02:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2b06:	e0 cf       	rjmp	.-64     	; 0x2ac8 <vfprintf+0x35a>
    2b08:	0c 15       	cp	r16, r12
    2b0a:	1d 05       	cpc	r17, r13
    2b0c:	39 f4       	brne	.+14     	; 0x2b1c <vfprintf+0x3ae>
    2b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b10:	96 33       	cpi	r25, 0x36	; 54
    2b12:	18 f4       	brcc	.+6      	; 0x2b1a <vfprintf+0x3ac>
    2b14:	95 33       	cpi	r25, 0x35	; 53
    2b16:	11 f4       	brne	.+4      	; 0x2b1c <vfprintf+0x3ae>
    2b18:	24 fe       	sbrs	r2, 4
    2b1a:	81 e3       	ldi	r24, 0x31	; 49
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	4b c0       	rjmp	.+150    	; 0x2bb6 <vfprintf+0x448>
    2b20:	8a 81       	ldd	r24, Y+2	; 0x02
    2b22:	81 33       	cpi	r24, 0x31	; 49
    2b24:	09 f0       	breq	.+2      	; 0x2b28 <vfprintf+0x3ba>
    2b26:	0f 7e       	andi	r16, 0xEF	; 239
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	b3 01       	movw	r22, r6
    2b2c:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2b30:	99 20       	and	r9, r9
    2b32:	a1 f0       	breq	.+40     	; 0x2b5c <vfprintf+0x3ee>
    2b34:	8e e2       	ldi	r24, 0x2E	; 46
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	b3 01       	movw	r22, r6
    2b3a:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2b3e:	12 e0       	ldi	r17, 0x02	; 2
    2b40:	e1 e0       	ldi	r30, 0x01	; 1
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	ec 0f       	add	r30, r28
    2b46:	fd 1f       	adc	r31, r29
    2b48:	e1 0f       	add	r30, r17
    2b4a:	f1 1d       	adc	r31, r1
    2b4c:	1f 5f       	subi	r17, 0xFF	; 255
    2b4e:	80 81       	ld	r24, Z
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	b3 01       	movw	r22, r6
    2b54:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2b58:	9a 94       	dec	r9
    2b5a:	91 f7       	brne	.-28     	; 0x2b40 <vfprintf+0x3d2>
    2b5c:	44 fc       	sbrc	r4, 4
    2b5e:	03 c0       	rjmp	.+6      	; 0x2b66 <vfprintf+0x3f8>
    2b60:	85 e6       	ldi	r24, 0x65	; 101
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	02 c0       	rjmp	.+4      	; 0x2b6a <vfprintf+0x3fc>
    2b66:	85 e4       	ldi	r24, 0x45	; 69
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	b3 01       	movw	r22, r6
    2b6c:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2b70:	d7 fc       	sbrc	r13, 7
    2b72:	05 c0       	rjmp	.+10     	; 0x2b7e <vfprintf+0x410>
    2b74:	c1 14       	cp	r12, r1
    2b76:	d1 04       	cpc	r13, r1
    2b78:	41 f4       	brne	.+16     	; 0x2b8a <vfprintf+0x41c>
    2b7a:	04 ff       	sbrs	r16, 4
    2b7c:	06 c0       	rjmp	.+12     	; 0x2b8a <vfprintf+0x41c>
    2b7e:	d0 94       	com	r13
    2b80:	c1 94       	neg	r12
    2b82:	d1 08       	sbc	r13, r1
    2b84:	d3 94       	inc	r13
    2b86:	8d e2       	ldi	r24, 0x2D	; 45
    2b88:	01 c0       	rjmp	.+2      	; 0x2b8c <vfprintf+0x41e>
    2b8a:	8b e2       	ldi	r24, 0x2B	; 43
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	b3 01       	movw	r22, r6
    2b90:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2b94:	80 e3       	ldi	r24, 0x30	; 48
    2b96:	05 c0       	rjmp	.+10     	; 0x2ba2 <vfprintf+0x434>
    2b98:	8f 5f       	subi	r24, 0xFF	; 255
    2b9a:	26 ef       	ldi	r18, 0xF6	; 246
    2b9c:	3f ef       	ldi	r19, 0xFF	; 255
    2b9e:	c2 0e       	add	r12, r18
    2ba0:	d3 1e       	adc	r13, r19
    2ba2:	3a e0       	ldi	r19, 0x0A	; 10
    2ba4:	c3 16       	cp	r12, r19
    2ba6:	d1 04       	cpc	r13, r1
    2ba8:	bc f7       	brge	.-18     	; 0x2b98 <vfprintf+0x42a>
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	b3 01       	movw	r22, r6
    2bae:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2bb2:	c6 01       	movw	r24, r12
    2bb4:	c0 96       	adiw	r24, 0x30	; 48
    2bb6:	b3 01       	movw	r22, r6
    2bb8:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2bbc:	cc 84       	ldd	r12, Y+12	; 0x0c
    2bbe:	dd 84       	ldd	r13, Y+13	; 0x0d
    2bc0:	52 c1       	rjmp	.+676    	; 0x2e66 <vfprintf+0x6f8>
    2bc2:	93 36       	cpi	r25, 0x63	; 99
    2bc4:	31 f0       	breq	.+12     	; 0x2bd2 <vfprintf+0x464>
    2bc6:	93 37       	cpi	r25, 0x73	; 115
    2bc8:	99 f0       	breq	.+38     	; 0x2bf0 <vfprintf+0x482>
    2bca:	93 35       	cpi	r25, 0x53	; 83
    2bcc:	09 f0       	breq	.+2      	; 0x2bd0 <vfprintf+0x462>
    2bce:	59 c0       	rjmp	.+178    	; 0x2c82 <vfprintf+0x514>
    2bd0:	23 c0       	rjmp	.+70     	; 0x2c18 <vfprintf+0x4aa>
    2bd2:	f6 01       	movw	r30, r12
    2bd4:	80 81       	ld	r24, Z
    2bd6:	89 83       	std	Y+1, r24	; 0x01
    2bd8:	5e 01       	movw	r10, r28
    2bda:	08 94       	sec
    2bdc:	a1 1c       	adc	r10, r1
    2bde:	b1 1c       	adc	r11, r1
    2be0:	22 e0       	ldi	r18, 0x02	; 2
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	c2 0e       	add	r12, r18
    2be6:	d3 1e       	adc	r13, r19
    2be8:	21 e0       	ldi	r18, 0x01	; 1
    2bea:	e2 2e       	mov	r14, r18
    2bec:	f1 2c       	mov	r15, r1
    2bee:	12 c0       	rjmp	.+36     	; 0x2c14 <vfprintf+0x4a6>
    2bf0:	f6 01       	movw	r30, r12
    2bf2:	a0 80       	ld	r10, Z
    2bf4:	b1 80       	ldd	r11, Z+1	; 0x01
    2bf6:	16 fd       	sbrc	r17, 6
    2bf8:	03 c0       	rjmp	.+6      	; 0x2c00 <vfprintf+0x492>
    2bfa:	6f ef       	ldi	r22, 0xFF	; 255
    2bfc:	7f ef       	ldi	r23, 0xFF	; 255
    2bfe:	02 c0       	rjmp	.+4      	; 0x2c04 <vfprintf+0x496>
    2c00:	69 2d       	mov	r22, r9
    2c02:	70 e0       	ldi	r23, 0x00	; 0
    2c04:	22 e0       	ldi	r18, 0x02	; 2
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	c2 0e       	add	r12, r18
    2c0a:	d3 1e       	adc	r13, r19
    2c0c:	c5 01       	movw	r24, r10
    2c0e:	0e 94 30 19 	call	0x3260	; 0x3260 <strnlen>
    2c12:	7c 01       	movw	r14, r24
    2c14:	1f 77       	andi	r17, 0x7F	; 127
    2c16:	13 c0       	rjmp	.+38     	; 0x2c3e <vfprintf+0x4d0>
    2c18:	f6 01       	movw	r30, r12
    2c1a:	a0 80       	ld	r10, Z
    2c1c:	b1 80       	ldd	r11, Z+1	; 0x01
    2c1e:	16 fd       	sbrc	r17, 6
    2c20:	03 c0       	rjmp	.+6      	; 0x2c28 <vfprintf+0x4ba>
    2c22:	6f ef       	ldi	r22, 0xFF	; 255
    2c24:	7f ef       	ldi	r23, 0xFF	; 255
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <vfprintf+0x4be>
    2c28:	69 2d       	mov	r22, r9
    2c2a:	70 e0       	ldi	r23, 0x00	; 0
    2c2c:	22 e0       	ldi	r18, 0x02	; 2
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	c2 0e       	add	r12, r18
    2c32:	d3 1e       	adc	r13, r19
    2c34:	c5 01       	movw	r24, r10
    2c36:	0e 94 1e 19 	call	0x323c	; 0x323c <strnlen_P>
    2c3a:	7c 01       	movw	r14, r24
    2c3c:	10 68       	ori	r17, 0x80	; 128
    2c3e:	13 ff       	sbrs	r17, 3
    2c40:	07 c0       	rjmp	.+14     	; 0x2c50 <vfprintf+0x4e2>
    2c42:	1b c0       	rjmp	.+54     	; 0x2c7a <vfprintf+0x50c>
    2c44:	80 e2       	ldi	r24, 0x20	; 32
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	b3 01       	movw	r22, r6
    2c4a:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2c4e:	8a 94       	dec	r8
    2c50:	88 2d       	mov	r24, r8
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	e8 16       	cp	r14, r24
    2c56:	f9 06       	cpc	r15, r25
    2c58:	a8 f3       	brcs	.-22     	; 0x2c44 <vfprintf+0x4d6>
    2c5a:	0f c0       	rjmp	.+30     	; 0x2c7a <vfprintf+0x50c>
    2c5c:	f5 01       	movw	r30, r10
    2c5e:	17 fd       	sbrc	r17, 7
    2c60:	85 91       	lpm	r24, Z+
    2c62:	17 ff       	sbrs	r17, 7
    2c64:	81 91       	ld	r24, Z+
    2c66:	5f 01       	movw	r10, r30
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	b3 01       	movw	r22, r6
    2c6c:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2c70:	81 10       	cpse	r8, r1
    2c72:	8a 94       	dec	r8
    2c74:	08 94       	sec
    2c76:	e1 08       	sbc	r14, r1
    2c78:	f1 08       	sbc	r15, r1
    2c7a:	e1 14       	cp	r14, r1
    2c7c:	f1 04       	cpc	r15, r1
    2c7e:	71 f7       	brne	.-36     	; 0x2c5c <vfprintf+0x4ee>
    2c80:	f2 c0       	rjmp	.+484    	; 0x2e66 <vfprintf+0x6f8>
    2c82:	94 36       	cpi	r25, 0x64	; 100
    2c84:	11 f0       	breq	.+4      	; 0x2c8a <vfprintf+0x51c>
    2c86:	99 36       	cpi	r25, 0x69	; 105
    2c88:	89 f5       	brne	.+98     	; 0x2cec <vfprintf+0x57e>
    2c8a:	17 ff       	sbrs	r17, 7
    2c8c:	08 c0       	rjmp	.+16     	; 0x2c9e <vfprintf+0x530>
    2c8e:	f6 01       	movw	r30, r12
    2c90:	20 81       	ld	r18, Z
    2c92:	31 81       	ldd	r19, Z+1	; 0x01
    2c94:	42 81       	ldd	r20, Z+2	; 0x02
    2c96:	53 81       	ldd	r21, Z+3	; 0x03
    2c98:	84 e0       	ldi	r24, 0x04	; 4
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	0a c0       	rjmp	.+20     	; 0x2cb2 <vfprintf+0x544>
    2c9e:	f6 01       	movw	r30, r12
    2ca0:	80 81       	ld	r24, Z
    2ca2:	91 81       	ldd	r25, Z+1	; 0x01
    2ca4:	9c 01       	movw	r18, r24
    2ca6:	44 27       	eor	r20, r20
    2ca8:	37 fd       	sbrc	r19, 7
    2caa:	40 95       	com	r20
    2cac:	54 2f       	mov	r21, r20
    2cae:	82 e0       	ldi	r24, 0x02	; 2
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	c8 0e       	add	r12, r24
    2cb4:	d9 1e       	adc	r13, r25
    2cb6:	9f e6       	ldi	r25, 0x6F	; 111
    2cb8:	f9 2e       	mov	r15, r25
    2cba:	f1 22       	and	r15, r17
    2cbc:	57 ff       	sbrs	r21, 7
    2cbe:	09 c0       	rjmp	.+18     	; 0x2cd2 <vfprintf+0x564>
    2cc0:	50 95       	com	r21
    2cc2:	40 95       	com	r20
    2cc4:	30 95       	com	r19
    2cc6:	21 95       	neg	r18
    2cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cca:	4f 4f       	sbci	r20, 0xFF	; 255
    2ccc:	5f 4f       	sbci	r21, 0xFF	; 255
    2cce:	90 e8       	ldi	r25, 0x80	; 128
    2cd0:	f9 2a       	or	r15, r25
    2cd2:	ca 01       	movw	r24, r20
    2cd4:	b9 01       	movw	r22, r18
    2cd6:	ae 01       	movw	r20, r28
    2cd8:	4f 5f       	subi	r20, 0xFF	; 255
    2cda:	5f 4f       	sbci	r21, 0xFF	; 255
    2cdc:	2a e0       	ldi	r18, 0x0A	; 10
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	0e 94 84 19 	call	0x3308	; 0x3308 <__ultoa_invert>
    2ce4:	e8 2e       	mov	r14, r24
    2ce6:	e8 89       	ldd	r30, Y+16	; 0x10
    2ce8:	ee 1a       	sub	r14, r30
    2cea:	41 c0       	rjmp	.+130    	; 0x2d6e <vfprintf+0x600>
    2cec:	95 37       	cpi	r25, 0x75	; 117
    2cee:	21 f4       	brne	.+8      	; 0x2cf8 <vfprintf+0x58a>
    2cf0:	1f 7e       	andi	r17, 0xEF	; 239
    2cf2:	2a e0       	ldi	r18, 0x0A	; 10
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	1c c0       	rjmp	.+56     	; 0x2d30 <vfprintf+0x5c2>
    2cf8:	19 7f       	andi	r17, 0xF9	; 249
    2cfa:	9f 36       	cpi	r25, 0x6F	; 111
    2cfc:	61 f0       	breq	.+24     	; 0x2d16 <vfprintf+0x5a8>
    2cfe:	90 37       	cpi	r25, 0x70	; 112
    2d00:	20 f4       	brcc	.+8      	; 0x2d0a <vfprintf+0x59c>
    2d02:	98 35       	cpi	r25, 0x58	; 88
    2d04:	09 f0       	breq	.+2      	; 0x2d08 <vfprintf+0x59a>
    2d06:	b2 c0       	rjmp	.+356    	; 0x2e6c <vfprintf+0x6fe>
    2d08:	0f c0       	rjmp	.+30     	; 0x2d28 <vfprintf+0x5ba>
    2d0a:	90 37       	cpi	r25, 0x70	; 112
    2d0c:	39 f0       	breq	.+14     	; 0x2d1c <vfprintf+0x5ae>
    2d0e:	98 37       	cpi	r25, 0x78	; 120
    2d10:	09 f0       	breq	.+2      	; 0x2d14 <vfprintf+0x5a6>
    2d12:	ac c0       	rjmp	.+344    	; 0x2e6c <vfprintf+0x6fe>
    2d14:	04 c0       	rjmp	.+8      	; 0x2d1e <vfprintf+0x5b0>
    2d16:	28 e0       	ldi	r18, 0x08	; 8
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	0a c0       	rjmp	.+20     	; 0x2d30 <vfprintf+0x5c2>
    2d1c:	10 61       	ori	r17, 0x10	; 16
    2d1e:	14 fd       	sbrc	r17, 4
    2d20:	14 60       	ori	r17, 0x04	; 4
    2d22:	20 e1       	ldi	r18, 0x10	; 16
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	04 c0       	rjmp	.+8      	; 0x2d30 <vfprintf+0x5c2>
    2d28:	14 fd       	sbrc	r17, 4
    2d2a:	16 60       	ori	r17, 0x06	; 6
    2d2c:	20 e1       	ldi	r18, 0x10	; 16
    2d2e:	32 e0       	ldi	r19, 0x02	; 2
    2d30:	17 ff       	sbrs	r17, 7
    2d32:	08 c0       	rjmp	.+16     	; 0x2d44 <vfprintf+0x5d6>
    2d34:	f6 01       	movw	r30, r12
    2d36:	60 81       	ld	r22, Z
    2d38:	71 81       	ldd	r23, Z+1	; 0x01
    2d3a:	82 81       	ldd	r24, Z+2	; 0x02
    2d3c:	93 81       	ldd	r25, Z+3	; 0x03
    2d3e:	44 e0       	ldi	r20, 0x04	; 4
    2d40:	50 e0       	ldi	r21, 0x00	; 0
    2d42:	08 c0       	rjmp	.+16     	; 0x2d54 <vfprintf+0x5e6>
    2d44:	f6 01       	movw	r30, r12
    2d46:	80 81       	ld	r24, Z
    2d48:	91 81       	ldd	r25, Z+1	; 0x01
    2d4a:	bc 01       	movw	r22, r24
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	42 e0       	ldi	r20, 0x02	; 2
    2d52:	50 e0       	ldi	r21, 0x00	; 0
    2d54:	c4 0e       	add	r12, r20
    2d56:	d5 1e       	adc	r13, r21
    2d58:	ae 01       	movw	r20, r28
    2d5a:	4f 5f       	subi	r20, 0xFF	; 255
    2d5c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d5e:	0e 94 84 19 	call	0x3308	; 0x3308 <__ultoa_invert>
    2d62:	e8 2e       	mov	r14, r24
    2d64:	58 89       	ldd	r21, Y+16	; 0x10
    2d66:	e5 1a       	sub	r14, r21
    2d68:	8f e7       	ldi	r24, 0x7F	; 127
    2d6a:	f8 2e       	mov	r15, r24
    2d6c:	f1 22       	and	r15, r17
    2d6e:	f6 fe       	sbrs	r15, 6
    2d70:	0b c0       	rjmp	.+22     	; 0x2d88 <vfprintf+0x61a>
    2d72:	8e ef       	ldi	r24, 0xFE	; 254
    2d74:	f8 22       	and	r15, r24
    2d76:	e9 14       	cp	r14, r9
    2d78:	38 f4       	brcc	.+14     	; 0x2d88 <vfprintf+0x61a>
    2d7a:	f4 fe       	sbrs	r15, 4
    2d7c:	07 c0       	rjmp	.+14     	; 0x2d8c <vfprintf+0x61e>
    2d7e:	f2 fc       	sbrc	r15, 2
    2d80:	05 c0       	rjmp	.+10     	; 0x2d8c <vfprintf+0x61e>
    2d82:	9f ee       	ldi	r25, 0xEF	; 239
    2d84:	f9 22       	and	r15, r25
    2d86:	02 c0       	rjmp	.+4      	; 0x2d8c <vfprintf+0x61e>
    2d88:	1e 2d       	mov	r17, r14
    2d8a:	01 c0       	rjmp	.+2      	; 0x2d8e <vfprintf+0x620>
    2d8c:	19 2d       	mov	r17, r9
    2d8e:	f4 fe       	sbrs	r15, 4
    2d90:	0d c0       	rjmp	.+26     	; 0x2dac <vfprintf+0x63e>
    2d92:	fe 01       	movw	r30, r28
    2d94:	ee 0d       	add	r30, r14
    2d96:	f1 1d       	adc	r31, r1
    2d98:	80 81       	ld	r24, Z
    2d9a:	80 33       	cpi	r24, 0x30	; 48
    2d9c:	19 f4       	brne	.+6      	; 0x2da4 <vfprintf+0x636>
    2d9e:	e9 ee       	ldi	r30, 0xE9	; 233
    2da0:	fe 22       	and	r15, r30
    2da2:	08 c0       	rjmp	.+16     	; 0x2db4 <vfprintf+0x646>
    2da4:	1f 5f       	subi	r17, 0xFF	; 255
    2da6:	f2 fe       	sbrs	r15, 2
    2da8:	05 c0       	rjmp	.+10     	; 0x2db4 <vfprintf+0x646>
    2daa:	03 c0       	rjmp	.+6      	; 0x2db2 <vfprintf+0x644>
    2dac:	8f 2d       	mov	r24, r15
    2dae:	86 78       	andi	r24, 0x86	; 134
    2db0:	09 f0       	breq	.+2      	; 0x2db4 <vfprintf+0x646>
    2db2:	1f 5f       	subi	r17, 0xFF	; 255
    2db4:	0f 2d       	mov	r16, r15
    2db6:	f3 fc       	sbrc	r15, 3
    2db8:	14 c0       	rjmp	.+40     	; 0x2de2 <vfprintf+0x674>
    2dba:	f0 fe       	sbrs	r15, 0
    2dbc:	0f c0       	rjmp	.+30     	; 0x2ddc <vfprintf+0x66e>
    2dbe:	18 15       	cp	r17, r8
    2dc0:	10 f0       	brcs	.+4      	; 0x2dc6 <vfprintf+0x658>
    2dc2:	9e 2c       	mov	r9, r14
    2dc4:	0b c0       	rjmp	.+22     	; 0x2ddc <vfprintf+0x66e>
    2dc6:	9e 2c       	mov	r9, r14
    2dc8:	98 0c       	add	r9, r8
    2dca:	91 1a       	sub	r9, r17
    2dcc:	18 2d       	mov	r17, r8
    2dce:	06 c0       	rjmp	.+12     	; 0x2ddc <vfprintf+0x66e>
    2dd0:	80 e2       	ldi	r24, 0x20	; 32
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	b3 01       	movw	r22, r6
    2dd6:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2dda:	1f 5f       	subi	r17, 0xFF	; 255
    2ddc:	18 15       	cp	r17, r8
    2dde:	c0 f3       	brcs	.-16     	; 0x2dd0 <vfprintf+0x662>
    2de0:	04 c0       	rjmp	.+8      	; 0x2dea <vfprintf+0x67c>
    2de2:	18 15       	cp	r17, r8
    2de4:	10 f4       	brcc	.+4      	; 0x2dea <vfprintf+0x67c>
    2de6:	81 1a       	sub	r8, r17
    2de8:	01 c0       	rjmp	.+2      	; 0x2dec <vfprintf+0x67e>
    2dea:	88 24       	eor	r8, r8
    2dec:	04 ff       	sbrs	r16, 4
    2dee:	0f c0       	rjmp	.+30     	; 0x2e0e <vfprintf+0x6a0>
    2df0:	80 e3       	ldi	r24, 0x30	; 48
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	b3 01       	movw	r22, r6
    2df6:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2dfa:	02 ff       	sbrs	r16, 2
    2dfc:	1d c0       	rjmp	.+58     	; 0x2e38 <vfprintf+0x6ca>
    2dfe:	01 fd       	sbrc	r16, 1
    2e00:	03 c0       	rjmp	.+6      	; 0x2e08 <vfprintf+0x69a>
    2e02:	88 e7       	ldi	r24, 0x78	; 120
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	0e c0       	rjmp	.+28     	; 0x2e24 <vfprintf+0x6b6>
    2e08:	88 e5       	ldi	r24, 0x58	; 88
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	0b c0       	rjmp	.+22     	; 0x2e24 <vfprintf+0x6b6>
    2e0e:	80 2f       	mov	r24, r16
    2e10:	86 78       	andi	r24, 0x86	; 134
    2e12:	91 f0       	breq	.+36     	; 0x2e38 <vfprintf+0x6ca>
    2e14:	01 ff       	sbrs	r16, 1
    2e16:	02 c0       	rjmp	.+4      	; 0x2e1c <vfprintf+0x6ae>
    2e18:	8b e2       	ldi	r24, 0x2B	; 43
    2e1a:	01 c0       	rjmp	.+2      	; 0x2e1e <vfprintf+0x6b0>
    2e1c:	80 e2       	ldi	r24, 0x20	; 32
    2e1e:	f7 fc       	sbrc	r15, 7
    2e20:	8d e2       	ldi	r24, 0x2D	; 45
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	b3 01       	movw	r22, r6
    2e26:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2e2a:	06 c0       	rjmp	.+12     	; 0x2e38 <vfprintf+0x6ca>
    2e2c:	80 e3       	ldi	r24, 0x30	; 48
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	b3 01       	movw	r22, r6
    2e32:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2e36:	9a 94       	dec	r9
    2e38:	e9 14       	cp	r14, r9
    2e3a:	c0 f3       	brcs	.-16     	; 0x2e2c <vfprintf+0x6be>
    2e3c:	ea 94       	dec	r14
    2e3e:	e1 e0       	ldi	r30, 0x01	; 1
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	ec 0f       	add	r30, r28
    2e44:	fd 1f       	adc	r31, r29
    2e46:	ee 0d       	add	r30, r14
    2e48:	f1 1d       	adc	r31, r1
    2e4a:	80 81       	ld	r24, Z
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	b3 01       	movw	r22, r6
    2e50:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2e54:	ee 20       	and	r14, r14
    2e56:	91 f7       	brne	.-28     	; 0x2e3c <vfprintf+0x6ce>
    2e58:	06 c0       	rjmp	.+12     	; 0x2e66 <vfprintf+0x6f8>
    2e5a:	80 e2       	ldi	r24, 0x20	; 32
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	b3 01       	movw	r22, r6
    2e60:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2e64:	8a 94       	dec	r8
    2e66:	88 20       	and	r8, r8
    2e68:	c1 f7       	brne	.-16     	; 0x2e5a <vfprintf+0x6ec>
    2e6a:	99 cc       	rjmp	.-1742   	; 0x279e <vfprintf+0x30>
    2e6c:	f3 01       	movw	r30, r6
    2e6e:	66 81       	ldd	r22, Z+6	; 0x06
    2e70:	77 81       	ldd	r23, Z+7	; 0x07
    2e72:	cb 01       	movw	r24, r22
    2e74:	61 96       	adiw	r28, 0x11	; 17
    2e76:	e2 e1       	ldi	r30, 0x12	; 18
    2e78:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__epilogue_restores__>

00002e7c <malloc>:
    2e7c:	cf 93       	push	r28
    2e7e:	df 93       	push	r29
    2e80:	bc 01       	movw	r22, r24
    2e82:	82 30       	cpi	r24, 0x02	; 2
    2e84:	91 05       	cpc	r25, r1
    2e86:	10 f4       	brcc	.+4      	; 0x2e8c <malloc+0x10>
    2e88:	62 e0       	ldi	r22, 0x02	; 2
    2e8a:	70 e0       	ldi	r23, 0x00	; 0
    2e8c:	a0 91 27 04 	lds	r26, 0x0427
    2e90:	b0 91 28 04 	lds	r27, 0x0428
    2e94:	ed 01       	movw	r28, r26
    2e96:	e0 e0       	ldi	r30, 0x00	; 0
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	40 e0       	ldi	r20, 0x00	; 0
    2e9c:	50 e0       	ldi	r21, 0x00	; 0
    2e9e:	21 c0       	rjmp	.+66     	; 0x2ee2 <malloc+0x66>
    2ea0:	88 81       	ld	r24, Y
    2ea2:	99 81       	ldd	r25, Y+1	; 0x01
    2ea4:	86 17       	cp	r24, r22
    2ea6:	97 07       	cpc	r25, r23
    2ea8:	69 f4       	brne	.+26     	; 0x2ec4 <malloc+0x48>
    2eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2eac:	9b 81       	ldd	r25, Y+3	; 0x03
    2eae:	30 97       	sbiw	r30, 0x00	; 0
    2eb0:	19 f0       	breq	.+6      	; 0x2eb8 <malloc+0x3c>
    2eb2:	93 83       	std	Z+3, r25	; 0x03
    2eb4:	82 83       	std	Z+2, r24	; 0x02
    2eb6:	04 c0       	rjmp	.+8      	; 0x2ec0 <malloc+0x44>
    2eb8:	90 93 28 04 	sts	0x0428, r25
    2ebc:	80 93 27 04 	sts	0x0427, r24
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	34 c0       	rjmp	.+104    	; 0x2f2c <malloc+0xb0>
    2ec4:	68 17       	cp	r22, r24
    2ec6:	79 07       	cpc	r23, r25
    2ec8:	38 f4       	brcc	.+14     	; 0x2ed8 <malloc+0x5c>
    2eca:	41 15       	cp	r20, r1
    2ecc:	51 05       	cpc	r21, r1
    2ece:	19 f0       	breq	.+6      	; 0x2ed6 <malloc+0x5a>
    2ed0:	84 17       	cp	r24, r20
    2ed2:	95 07       	cpc	r25, r21
    2ed4:	08 f4       	brcc	.+2      	; 0x2ed8 <malloc+0x5c>
    2ed6:	ac 01       	movw	r20, r24
    2ed8:	fe 01       	movw	r30, r28
    2eda:	8a 81       	ldd	r24, Y+2	; 0x02
    2edc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ede:	9c 01       	movw	r18, r24
    2ee0:	e9 01       	movw	r28, r18
    2ee2:	20 97       	sbiw	r28, 0x00	; 0
    2ee4:	e9 f6       	brne	.-70     	; 0x2ea0 <malloc+0x24>
    2ee6:	41 15       	cp	r20, r1
    2ee8:	51 05       	cpc	r21, r1
    2eea:	a9 f1       	breq	.+106    	; 0x2f56 <malloc+0xda>
    2eec:	ca 01       	movw	r24, r20
    2eee:	86 1b       	sub	r24, r22
    2ef0:	97 0b       	sbc	r25, r23
    2ef2:	04 97       	sbiw	r24, 0x04	; 4
    2ef4:	08 f4       	brcc	.+2      	; 0x2ef8 <malloc+0x7c>
    2ef6:	ba 01       	movw	r22, r20
    2ef8:	e0 e0       	ldi	r30, 0x00	; 0
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	2a c0       	rjmp	.+84     	; 0x2f52 <malloc+0xd6>
    2efe:	8d 91       	ld	r24, X+
    2f00:	9c 91       	ld	r25, X
    2f02:	11 97       	sbiw	r26, 0x01	; 1
    2f04:	84 17       	cp	r24, r20
    2f06:	95 07       	cpc	r25, r21
    2f08:	f9 f4       	brne	.+62     	; 0x2f48 <malloc+0xcc>
    2f0a:	64 17       	cp	r22, r20
    2f0c:	75 07       	cpc	r23, r21
    2f0e:	81 f4       	brne	.+32     	; 0x2f30 <malloc+0xb4>
    2f10:	12 96       	adiw	r26, 0x02	; 2
    2f12:	8d 91       	ld	r24, X+
    2f14:	9c 91       	ld	r25, X
    2f16:	13 97       	sbiw	r26, 0x03	; 3
    2f18:	30 97       	sbiw	r30, 0x00	; 0
    2f1a:	19 f0       	breq	.+6      	; 0x2f22 <malloc+0xa6>
    2f1c:	93 83       	std	Z+3, r25	; 0x03
    2f1e:	82 83       	std	Z+2, r24	; 0x02
    2f20:	04 c0       	rjmp	.+8      	; 0x2f2a <malloc+0xae>
    2f22:	90 93 28 04 	sts	0x0428, r25
    2f26:	80 93 27 04 	sts	0x0427, r24
    2f2a:	fd 01       	movw	r30, r26
    2f2c:	32 96       	adiw	r30, 0x02	; 2
    2f2e:	4f c0       	rjmp	.+158    	; 0x2fce <malloc+0x152>
    2f30:	ca 01       	movw	r24, r20
    2f32:	86 1b       	sub	r24, r22
    2f34:	97 0b       	sbc	r25, r23
    2f36:	fd 01       	movw	r30, r26
    2f38:	e8 0f       	add	r30, r24
    2f3a:	f9 1f       	adc	r31, r25
    2f3c:	61 93       	st	Z+, r22
    2f3e:	71 93       	st	Z+, r23
    2f40:	02 97       	sbiw	r24, 0x02	; 2
    2f42:	8d 93       	st	X+, r24
    2f44:	9c 93       	st	X, r25
    2f46:	43 c0       	rjmp	.+134    	; 0x2fce <malloc+0x152>
    2f48:	fd 01       	movw	r30, r26
    2f4a:	82 81       	ldd	r24, Z+2	; 0x02
    2f4c:	93 81       	ldd	r25, Z+3	; 0x03
    2f4e:	9c 01       	movw	r18, r24
    2f50:	d9 01       	movw	r26, r18
    2f52:	10 97       	sbiw	r26, 0x00	; 0
    2f54:	a1 f6       	brne	.-88     	; 0x2efe <malloc+0x82>
    2f56:	80 91 25 04 	lds	r24, 0x0425
    2f5a:	90 91 26 04 	lds	r25, 0x0426
    2f5e:	89 2b       	or	r24, r25
    2f60:	41 f4       	brne	.+16     	; 0x2f72 <malloc+0xf6>
    2f62:	80 91 ec 02 	lds	r24, 0x02EC
    2f66:	90 91 ed 02 	lds	r25, 0x02ED
    2f6a:	90 93 26 04 	sts	0x0426, r25
    2f6e:	80 93 25 04 	sts	0x0425, r24
    2f72:	40 91 ee 02 	lds	r20, 0x02EE
    2f76:	50 91 ef 02 	lds	r21, 0x02EF
    2f7a:	41 15       	cp	r20, r1
    2f7c:	51 05       	cpc	r21, r1
    2f7e:	41 f4       	brne	.+16     	; 0x2f90 <malloc+0x114>
    2f80:	4d b7       	in	r20, 0x3d	; 61
    2f82:	5e b7       	in	r21, 0x3e	; 62
    2f84:	80 91 ea 02 	lds	r24, 0x02EA
    2f88:	90 91 eb 02 	lds	r25, 0x02EB
    2f8c:	48 1b       	sub	r20, r24
    2f8e:	59 0b       	sbc	r21, r25
    2f90:	20 91 25 04 	lds	r18, 0x0425
    2f94:	30 91 26 04 	lds	r19, 0x0426
    2f98:	24 17       	cp	r18, r20
    2f9a:	35 07       	cpc	r19, r21
    2f9c:	b0 f4       	brcc	.+44     	; 0x2fca <malloc+0x14e>
    2f9e:	ca 01       	movw	r24, r20
    2fa0:	82 1b       	sub	r24, r18
    2fa2:	93 0b       	sbc	r25, r19
    2fa4:	86 17       	cp	r24, r22
    2fa6:	97 07       	cpc	r25, r23
    2fa8:	80 f0       	brcs	.+32     	; 0x2fca <malloc+0x14e>
    2faa:	ab 01       	movw	r20, r22
    2fac:	4e 5f       	subi	r20, 0xFE	; 254
    2fae:	5f 4f       	sbci	r21, 0xFF	; 255
    2fb0:	84 17       	cp	r24, r20
    2fb2:	95 07       	cpc	r25, r21
    2fb4:	50 f0       	brcs	.+20     	; 0x2fca <malloc+0x14e>
    2fb6:	42 0f       	add	r20, r18
    2fb8:	53 1f       	adc	r21, r19
    2fba:	50 93 26 04 	sts	0x0426, r21
    2fbe:	40 93 25 04 	sts	0x0425, r20
    2fc2:	f9 01       	movw	r30, r18
    2fc4:	61 93       	st	Z+, r22
    2fc6:	71 93       	st	Z+, r23
    2fc8:	02 c0       	rjmp	.+4      	; 0x2fce <malloc+0x152>
    2fca:	e0 e0       	ldi	r30, 0x00	; 0
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	cf 01       	movw	r24, r30
    2fd0:	df 91       	pop	r29
    2fd2:	cf 91       	pop	r28
    2fd4:	08 95       	ret

00002fd6 <free>:
    2fd6:	cf 93       	push	r28
    2fd8:	df 93       	push	r29
    2fda:	00 97       	sbiw	r24, 0x00	; 0
    2fdc:	09 f4       	brne	.+2      	; 0x2fe0 <free+0xa>
    2fde:	50 c0       	rjmp	.+160    	; 0x3080 <free+0xaa>
    2fe0:	ec 01       	movw	r28, r24
    2fe2:	22 97       	sbiw	r28, 0x02	; 2
    2fe4:	1b 82       	std	Y+3, r1	; 0x03
    2fe6:	1a 82       	std	Y+2, r1	; 0x02
    2fe8:	a0 91 27 04 	lds	r26, 0x0427
    2fec:	b0 91 28 04 	lds	r27, 0x0428
    2ff0:	10 97       	sbiw	r26, 0x00	; 0
    2ff2:	09 f1       	breq	.+66     	; 0x3036 <free+0x60>
    2ff4:	40 e0       	ldi	r20, 0x00	; 0
    2ff6:	50 e0       	ldi	r21, 0x00	; 0
    2ff8:	ac 17       	cp	r26, r28
    2ffa:	bd 07       	cpc	r27, r29
    2ffc:	08 f1       	brcs	.+66     	; 0x3040 <free+0x6a>
    2ffe:	bb 83       	std	Y+3, r27	; 0x03
    3000:	aa 83       	std	Y+2, r26	; 0x02
    3002:	fe 01       	movw	r30, r28
    3004:	21 91       	ld	r18, Z+
    3006:	31 91       	ld	r19, Z+
    3008:	e2 0f       	add	r30, r18
    300a:	f3 1f       	adc	r31, r19
    300c:	ae 17       	cp	r26, r30
    300e:	bf 07       	cpc	r27, r31
    3010:	79 f4       	brne	.+30     	; 0x3030 <free+0x5a>
    3012:	8d 91       	ld	r24, X+
    3014:	9c 91       	ld	r25, X
    3016:	11 97       	sbiw	r26, 0x01	; 1
    3018:	28 0f       	add	r18, r24
    301a:	39 1f       	adc	r19, r25
    301c:	2e 5f       	subi	r18, 0xFE	; 254
    301e:	3f 4f       	sbci	r19, 0xFF	; 255
    3020:	39 83       	std	Y+1, r19	; 0x01
    3022:	28 83       	st	Y, r18
    3024:	12 96       	adiw	r26, 0x02	; 2
    3026:	8d 91       	ld	r24, X+
    3028:	9c 91       	ld	r25, X
    302a:	13 97       	sbiw	r26, 0x03	; 3
    302c:	9b 83       	std	Y+3, r25	; 0x03
    302e:	8a 83       	std	Y+2, r24	; 0x02
    3030:	41 15       	cp	r20, r1
    3032:	51 05       	cpc	r21, r1
    3034:	71 f4       	brne	.+28     	; 0x3052 <free+0x7c>
    3036:	d0 93 28 04 	sts	0x0428, r29
    303a:	c0 93 27 04 	sts	0x0427, r28
    303e:	20 c0       	rjmp	.+64     	; 0x3080 <free+0xaa>
    3040:	12 96       	adiw	r26, 0x02	; 2
    3042:	8d 91       	ld	r24, X+
    3044:	9c 91       	ld	r25, X
    3046:	13 97       	sbiw	r26, 0x03	; 3
    3048:	ad 01       	movw	r20, r26
    304a:	00 97       	sbiw	r24, 0x00	; 0
    304c:	11 f0       	breq	.+4      	; 0x3052 <free+0x7c>
    304e:	dc 01       	movw	r26, r24
    3050:	d3 cf       	rjmp	.-90     	; 0x2ff8 <free+0x22>
    3052:	fa 01       	movw	r30, r20
    3054:	d3 83       	std	Z+3, r29	; 0x03
    3056:	c2 83       	std	Z+2, r28	; 0x02
    3058:	21 91       	ld	r18, Z+
    305a:	31 91       	ld	r19, Z+
    305c:	e2 0f       	add	r30, r18
    305e:	f3 1f       	adc	r31, r19
    3060:	ce 17       	cp	r28, r30
    3062:	df 07       	cpc	r29, r31
    3064:	69 f4       	brne	.+26     	; 0x3080 <free+0xaa>
    3066:	88 81       	ld	r24, Y
    3068:	99 81       	ldd	r25, Y+1	; 0x01
    306a:	28 0f       	add	r18, r24
    306c:	39 1f       	adc	r19, r25
    306e:	2e 5f       	subi	r18, 0xFE	; 254
    3070:	3f 4f       	sbci	r19, 0xFF	; 255
    3072:	fa 01       	movw	r30, r20
    3074:	31 83       	std	Z+1, r19	; 0x01
    3076:	20 83       	st	Z, r18
    3078:	8a 81       	ldd	r24, Y+2	; 0x02
    307a:	9b 81       	ldd	r25, Y+3	; 0x03
    307c:	93 83       	std	Z+3, r25	; 0x03
    307e:	82 83       	std	Z+2, r24	; 0x02
    3080:	df 91       	pop	r29
    3082:	cf 91       	pop	r28
    3084:	08 95       	ret

00003086 <exit>:
    3086:	f8 94       	cli
    3088:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <_exit>

0000308c <__ftoa_engine>:
    308c:	28 30       	cpi	r18, 0x08	; 8
    308e:	08 f0       	brcs	.+2      	; 0x3092 <__ftoa_engine+0x6>
    3090:	27 e0       	ldi	r18, 0x07	; 7
    3092:	33 27       	eor	r19, r19
    3094:	da 01       	movw	r26, r20
    3096:	99 0f       	add	r25, r25
    3098:	31 1d       	adc	r19, r1
    309a:	87 fd       	sbrc	r24, 7
    309c:	91 60       	ori	r25, 0x01	; 1
    309e:	00 96       	adiw	r24, 0x00	; 0
    30a0:	61 05       	cpc	r22, r1
    30a2:	71 05       	cpc	r23, r1
    30a4:	39 f4       	brne	.+14     	; 0x30b4 <__ftoa_engine+0x28>
    30a6:	32 60       	ori	r19, 0x02	; 2
    30a8:	2e 5f       	subi	r18, 0xFE	; 254
    30aa:	3d 93       	st	X+, r19
    30ac:	30 e3       	ldi	r19, 0x30	; 48
    30ae:	2a 95       	dec	r18
    30b0:	e1 f7       	brne	.-8      	; 0x30aa <__ftoa_engine+0x1e>
    30b2:	08 95       	ret
    30b4:	9f 3f       	cpi	r25, 0xFF	; 255
    30b6:	30 f0       	brcs	.+12     	; 0x30c4 <__ftoa_engine+0x38>
    30b8:	80 38       	cpi	r24, 0x80	; 128
    30ba:	71 05       	cpc	r23, r1
    30bc:	61 05       	cpc	r22, r1
    30be:	09 f0       	breq	.+2      	; 0x30c2 <__ftoa_engine+0x36>
    30c0:	3c 5f       	subi	r19, 0xFC	; 252
    30c2:	3c 5f       	subi	r19, 0xFC	; 252
    30c4:	3d 93       	st	X+, r19
    30c6:	91 30       	cpi	r25, 0x01	; 1
    30c8:	08 f0       	brcs	.+2      	; 0x30cc <__ftoa_engine+0x40>
    30ca:	80 68       	ori	r24, 0x80	; 128
    30cc:	91 1d       	adc	r25, r1
    30ce:	df 93       	push	r29
    30d0:	cf 93       	push	r28
    30d2:	1f 93       	push	r17
    30d4:	0f 93       	push	r16
    30d6:	ff 92       	push	r15
    30d8:	ef 92       	push	r14
    30da:	19 2f       	mov	r17, r25
    30dc:	98 7f       	andi	r25, 0xF8	; 248
    30de:	96 95       	lsr	r25
    30e0:	e9 2f       	mov	r30, r25
    30e2:	96 95       	lsr	r25
    30e4:	96 95       	lsr	r25
    30e6:	e9 0f       	add	r30, r25
    30e8:	ff 27       	eor	r31, r31
    30ea:	ea 5d       	subi	r30, 0xDA	; 218
    30ec:	fb 4f       	sbci	r31, 0xFB	; 251
    30ee:	99 27       	eor	r25, r25
    30f0:	33 27       	eor	r19, r19
    30f2:	ee 24       	eor	r14, r14
    30f4:	ff 24       	eor	r15, r15
    30f6:	a7 01       	movw	r20, r14
    30f8:	e7 01       	movw	r28, r14
    30fa:	05 90       	lpm	r0, Z+
    30fc:	08 94       	sec
    30fe:	07 94       	ror	r0
    3100:	28 f4       	brcc	.+10     	; 0x310c <__ftoa_engine+0x80>
    3102:	36 0f       	add	r19, r22
    3104:	e7 1e       	adc	r14, r23
    3106:	f8 1e       	adc	r15, r24
    3108:	49 1f       	adc	r20, r25
    310a:	51 1d       	adc	r21, r1
    310c:	66 0f       	add	r22, r22
    310e:	77 1f       	adc	r23, r23
    3110:	88 1f       	adc	r24, r24
    3112:	99 1f       	adc	r25, r25
    3114:	06 94       	lsr	r0
    3116:	a1 f7       	brne	.-24     	; 0x3100 <__ftoa_engine+0x74>
    3118:	05 90       	lpm	r0, Z+
    311a:	07 94       	ror	r0
    311c:	28 f4       	brcc	.+10     	; 0x3128 <__ftoa_engine+0x9c>
    311e:	e7 0e       	add	r14, r23
    3120:	f8 1e       	adc	r15, r24
    3122:	49 1f       	adc	r20, r25
    3124:	56 1f       	adc	r21, r22
    3126:	c1 1d       	adc	r28, r1
    3128:	77 0f       	add	r23, r23
    312a:	88 1f       	adc	r24, r24
    312c:	99 1f       	adc	r25, r25
    312e:	66 1f       	adc	r22, r22
    3130:	06 94       	lsr	r0
    3132:	a1 f7       	brne	.-24     	; 0x311c <__ftoa_engine+0x90>
    3134:	05 90       	lpm	r0, Z+
    3136:	07 94       	ror	r0
    3138:	28 f4       	brcc	.+10     	; 0x3144 <__ftoa_engine+0xb8>
    313a:	f8 0e       	add	r15, r24
    313c:	49 1f       	adc	r20, r25
    313e:	56 1f       	adc	r21, r22
    3140:	c7 1f       	adc	r28, r23
    3142:	d1 1d       	adc	r29, r1
    3144:	88 0f       	add	r24, r24
    3146:	99 1f       	adc	r25, r25
    3148:	66 1f       	adc	r22, r22
    314a:	77 1f       	adc	r23, r23
    314c:	06 94       	lsr	r0
    314e:	a1 f7       	brne	.-24     	; 0x3138 <__ftoa_engine+0xac>
    3150:	05 90       	lpm	r0, Z+
    3152:	07 94       	ror	r0
    3154:	20 f4       	brcc	.+8      	; 0x315e <__ftoa_engine+0xd2>
    3156:	49 0f       	add	r20, r25
    3158:	56 1f       	adc	r21, r22
    315a:	c7 1f       	adc	r28, r23
    315c:	d8 1f       	adc	r29, r24
    315e:	99 0f       	add	r25, r25
    3160:	66 1f       	adc	r22, r22
    3162:	77 1f       	adc	r23, r23
    3164:	88 1f       	adc	r24, r24
    3166:	06 94       	lsr	r0
    3168:	a9 f7       	brne	.-22     	; 0x3154 <__ftoa_engine+0xc8>
    316a:	84 91       	lpm	r24, Z+
    316c:	10 95       	com	r17
    316e:	17 70       	andi	r17, 0x07	; 7
    3170:	41 f0       	breq	.+16     	; 0x3182 <__ftoa_engine+0xf6>
    3172:	d6 95       	lsr	r29
    3174:	c7 95       	ror	r28
    3176:	57 95       	ror	r21
    3178:	47 95       	ror	r20
    317a:	f7 94       	ror	r15
    317c:	e7 94       	ror	r14
    317e:	1a 95       	dec	r17
    3180:	c1 f7       	brne	.-16     	; 0x3172 <__ftoa_engine+0xe6>
    3182:	ec ec       	ldi	r30, 0xCC	; 204
    3184:	f3 e0       	ldi	r31, 0x03	; 3
    3186:	68 94       	set
    3188:	15 90       	lpm	r1, Z+
    318a:	15 91       	lpm	r17, Z+
    318c:	35 91       	lpm	r19, Z+
    318e:	65 91       	lpm	r22, Z+
    3190:	95 91       	lpm	r25, Z+
    3192:	05 90       	lpm	r0, Z+
    3194:	7f e2       	ldi	r23, 0x2F	; 47
    3196:	73 95       	inc	r23
    3198:	e1 18       	sub	r14, r1
    319a:	f1 0a       	sbc	r15, r17
    319c:	43 0b       	sbc	r20, r19
    319e:	56 0b       	sbc	r21, r22
    31a0:	c9 0b       	sbc	r28, r25
    31a2:	d0 09       	sbc	r29, r0
    31a4:	c0 f7       	brcc	.-16     	; 0x3196 <__ftoa_engine+0x10a>
    31a6:	e1 0c       	add	r14, r1
    31a8:	f1 1e       	adc	r15, r17
    31aa:	43 1f       	adc	r20, r19
    31ac:	56 1f       	adc	r21, r22
    31ae:	c9 1f       	adc	r28, r25
    31b0:	d0 1d       	adc	r29, r0
    31b2:	7e f4       	brtc	.+30     	; 0x31d2 <__ftoa_engine+0x146>
    31b4:	70 33       	cpi	r23, 0x30	; 48
    31b6:	11 f4       	brne	.+4      	; 0x31bc <__ftoa_engine+0x130>
    31b8:	8a 95       	dec	r24
    31ba:	e6 cf       	rjmp	.-52     	; 0x3188 <__ftoa_engine+0xfc>
    31bc:	e8 94       	clt
    31be:	01 50       	subi	r16, 0x01	; 1
    31c0:	30 f0       	brcs	.+12     	; 0x31ce <__ftoa_engine+0x142>
    31c2:	08 0f       	add	r16, r24
    31c4:	0a f4       	brpl	.+2      	; 0x31c8 <__ftoa_engine+0x13c>
    31c6:	00 27       	eor	r16, r16
    31c8:	02 17       	cp	r16, r18
    31ca:	08 f4       	brcc	.+2      	; 0x31ce <__ftoa_engine+0x142>
    31cc:	20 2f       	mov	r18, r16
    31ce:	23 95       	inc	r18
    31d0:	02 2f       	mov	r16, r18
    31d2:	7a 33       	cpi	r23, 0x3A	; 58
    31d4:	28 f0       	brcs	.+10     	; 0x31e0 <__ftoa_engine+0x154>
    31d6:	79 e3       	ldi	r23, 0x39	; 57
    31d8:	7d 93       	st	X+, r23
    31da:	2a 95       	dec	r18
    31dc:	e9 f7       	brne	.-6      	; 0x31d8 <__ftoa_engine+0x14c>
    31de:	10 c0       	rjmp	.+32     	; 0x3200 <__ftoa_engine+0x174>
    31e0:	7d 93       	st	X+, r23
    31e2:	2a 95       	dec	r18
    31e4:	89 f6       	brne	.-94     	; 0x3188 <__ftoa_engine+0xfc>
    31e6:	06 94       	lsr	r0
    31e8:	97 95       	ror	r25
    31ea:	67 95       	ror	r22
    31ec:	37 95       	ror	r19
    31ee:	17 95       	ror	r17
    31f0:	17 94       	ror	r1
    31f2:	e1 18       	sub	r14, r1
    31f4:	f1 0a       	sbc	r15, r17
    31f6:	43 0b       	sbc	r20, r19
    31f8:	56 0b       	sbc	r21, r22
    31fa:	c9 0b       	sbc	r28, r25
    31fc:	d0 09       	sbc	r29, r0
    31fe:	98 f0       	brcs	.+38     	; 0x3226 <__ftoa_engine+0x19a>
    3200:	23 95       	inc	r18
    3202:	7e 91       	ld	r23, -X
    3204:	73 95       	inc	r23
    3206:	7a 33       	cpi	r23, 0x3A	; 58
    3208:	08 f0       	brcs	.+2      	; 0x320c <__ftoa_engine+0x180>
    320a:	70 e3       	ldi	r23, 0x30	; 48
    320c:	7c 93       	st	X, r23
    320e:	20 13       	cpse	r18, r16
    3210:	b8 f7       	brcc	.-18     	; 0x3200 <__ftoa_engine+0x174>
    3212:	7e 91       	ld	r23, -X
    3214:	70 61       	ori	r23, 0x10	; 16
    3216:	7d 93       	st	X+, r23
    3218:	30 f0       	brcs	.+12     	; 0x3226 <__ftoa_engine+0x19a>
    321a:	83 95       	inc	r24
    321c:	71 e3       	ldi	r23, 0x31	; 49
    321e:	7d 93       	st	X+, r23
    3220:	70 e3       	ldi	r23, 0x30	; 48
    3222:	2a 95       	dec	r18
    3224:	e1 f7       	brne	.-8      	; 0x321e <__ftoa_engine+0x192>
    3226:	11 24       	eor	r1, r1
    3228:	ef 90       	pop	r14
    322a:	ff 90       	pop	r15
    322c:	0f 91       	pop	r16
    322e:	1f 91       	pop	r17
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	99 27       	eor	r25, r25
    3236:	87 fd       	sbrc	r24, 7
    3238:	90 95       	com	r25
    323a:	08 95       	ret

0000323c <strnlen_P>:
    323c:	fc 01       	movw	r30, r24
    323e:	05 90       	lpm	r0, Z+
    3240:	61 50       	subi	r22, 0x01	; 1
    3242:	70 40       	sbci	r23, 0x00	; 0
    3244:	01 10       	cpse	r0, r1
    3246:	d8 f7       	brcc	.-10     	; 0x323e <strnlen_P+0x2>
    3248:	80 95       	com	r24
    324a:	90 95       	com	r25
    324c:	8e 0f       	add	r24, r30
    324e:	9f 1f       	adc	r25, r31
    3250:	08 95       	ret

00003252 <memset>:
    3252:	dc 01       	movw	r26, r24
    3254:	01 c0       	rjmp	.+2      	; 0x3258 <memset+0x6>
    3256:	6d 93       	st	X+, r22
    3258:	41 50       	subi	r20, 0x01	; 1
    325a:	50 40       	sbci	r21, 0x00	; 0
    325c:	e0 f7       	brcc	.-8      	; 0x3256 <memset+0x4>
    325e:	08 95       	ret

00003260 <strnlen>:
    3260:	fc 01       	movw	r30, r24
    3262:	61 50       	subi	r22, 0x01	; 1
    3264:	70 40       	sbci	r23, 0x00	; 0
    3266:	01 90       	ld	r0, Z+
    3268:	01 10       	cpse	r0, r1
    326a:	d8 f7       	brcc	.-10     	; 0x3262 <strnlen+0x2>
    326c:	80 95       	com	r24
    326e:	90 95       	com	r25
    3270:	8e 0f       	add	r24, r30
    3272:	9f 1f       	adc	r25, r31
    3274:	08 95       	ret

00003276 <fprintf_P>:
    3276:	a0 e0       	ldi	r26, 0x00	; 0
    3278:	b0 e0       	ldi	r27, 0x00	; 0
    327a:	e1 e4       	ldi	r30, 0x41	; 65
    327c:	f9 e1       	ldi	r31, 0x19	; 25
    327e:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <__prologue_saves__+0x1c>
    3282:	0f 81       	ldd	r16, Y+7	; 0x07
    3284:	18 85       	ldd	r17, Y+8	; 0x08
    3286:	9e 01       	movw	r18, r28
    3288:	25 5f       	subi	r18, 0xF5	; 245
    328a:	3f 4f       	sbci	r19, 0xFF	; 255
    328c:	f8 01       	movw	r30, r16
    328e:	83 81       	ldd	r24, Z+3	; 0x03
    3290:	88 60       	ori	r24, 0x08	; 8
    3292:	83 83       	std	Z+3, r24	; 0x03
    3294:	c8 01       	movw	r24, r16
    3296:	69 85       	ldd	r22, Y+9	; 0x09
    3298:	7a 85       	ldd	r23, Y+10	; 0x0a
    329a:	a9 01       	movw	r20, r18
    329c:	0e 94 b7 13 	call	0x276e	; 0x276e <vfprintf>
    32a0:	f8 01       	movw	r30, r16
    32a2:	23 81       	ldd	r18, Z+3	; 0x03
    32a4:	27 7f       	andi	r18, 0xF7	; 247
    32a6:	23 83       	std	Z+3, r18	; 0x03
    32a8:	20 96       	adiw	r28, 0x00	; 0
    32aa:	e4 e0       	ldi	r30, 0x04	; 4
    32ac:	0c 94 7c 1a 	jmp	0x34f8	; 0x34f8 <__epilogue_restores__+0x1c>

000032b0 <fputc>:
    32b0:	0f 93       	push	r16
    32b2:	1f 93       	push	r17
    32b4:	cf 93       	push	r28
    32b6:	df 93       	push	r29
    32b8:	8c 01       	movw	r16, r24
    32ba:	eb 01       	movw	r28, r22
    32bc:	8b 81       	ldd	r24, Y+3	; 0x03
    32be:	81 ff       	sbrs	r24, 1
    32c0:	1b c0       	rjmp	.+54     	; 0x32f8 <fputc+0x48>
    32c2:	82 ff       	sbrs	r24, 2
    32c4:	0d c0       	rjmp	.+26     	; 0x32e0 <fputc+0x30>
    32c6:	2e 81       	ldd	r18, Y+6	; 0x06
    32c8:	3f 81       	ldd	r19, Y+7	; 0x07
    32ca:	8c 81       	ldd	r24, Y+4	; 0x04
    32cc:	9d 81       	ldd	r25, Y+5	; 0x05
    32ce:	28 17       	cp	r18, r24
    32d0:	39 07       	cpc	r19, r25
    32d2:	64 f4       	brge	.+24     	; 0x32ec <fputc+0x3c>
    32d4:	e8 81       	ld	r30, Y
    32d6:	f9 81       	ldd	r31, Y+1	; 0x01
    32d8:	01 93       	st	Z+, r16
    32da:	f9 83       	std	Y+1, r31	; 0x01
    32dc:	e8 83       	st	Y, r30
    32de:	06 c0       	rjmp	.+12     	; 0x32ec <fputc+0x3c>
    32e0:	e8 85       	ldd	r30, Y+8	; 0x08
    32e2:	f9 85       	ldd	r31, Y+9	; 0x09
    32e4:	80 2f       	mov	r24, r16
    32e6:	09 95       	icall
    32e8:	89 2b       	or	r24, r25
    32ea:	31 f4       	brne	.+12     	; 0x32f8 <fputc+0x48>
    32ec:	8e 81       	ldd	r24, Y+6	; 0x06
    32ee:	9f 81       	ldd	r25, Y+7	; 0x07
    32f0:	01 96       	adiw	r24, 0x01	; 1
    32f2:	9f 83       	std	Y+7, r25	; 0x07
    32f4:	8e 83       	std	Y+6, r24	; 0x06
    32f6:	02 c0       	rjmp	.+4      	; 0x32fc <fputc+0x4c>
    32f8:	0f ef       	ldi	r16, 0xFF	; 255
    32fa:	1f ef       	ldi	r17, 0xFF	; 255
    32fc:	c8 01       	movw	r24, r16
    32fe:	df 91       	pop	r29
    3300:	cf 91       	pop	r28
    3302:	1f 91       	pop	r17
    3304:	0f 91       	pop	r16
    3306:	08 95       	ret

00003308 <__ultoa_invert>:
    3308:	fa 01       	movw	r30, r20
    330a:	aa 27       	eor	r26, r26
    330c:	28 30       	cpi	r18, 0x08	; 8
    330e:	51 f1       	breq	.+84     	; 0x3364 <__ultoa_invert+0x5c>
    3310:	20 31       	cpi	r18, 0x10	; 16
    3312:	81 f1       	breq	.+96     	; 0x3374 <__ultoa_invert+0x6c>
    3314:	e8 94       	clt
    3316:	6f 93       	push	r22
    3318:	6e 7f       	andi	r22, 0xFE	; 254
    331a:	6e 5f       	subi	r22, 0xFE	; 254
    331c:	7f 4f       	sbci	r23, 0xFF	; 255
    331e:	8f 4f       	sbci	r24, 0xFF	; 255
    3320:	9f 4f       	sbci	r25, 0xFF	; 255
    3322:	af 4f       	sbci	r26, 0xFF	; 255
    3324:	b1 e0       	ldi	r27, 0x01	; 1
    3326:	3e d0       	rcall	.+124    	; 0x33a4 <__ultoa_invert+0x9c>
    3328:	b4 e0       	ldi	r27, 0x04	; 4
    332a:	3c d0       	rcall	.+120    	; 0x33a4 <__ultoa_invert+0x9c>
    332c:	67 0f       	add	r22, r23
    332e:	78 1f       	adc	r23, r24
    3330:	89 1f       	adc	r24, r25
    3332:	9a 1f       	adc	r25, r26
    3334:	a1 1d       	adc	r26, r1
    3336:	68 0f       	add	r22, r24
    3338:	79 1f       	adc	r23, r25
    333a:	8a 1f       	adc	r24, r26
    333c:	91 1d       	adc	r25, r1
    333e:	a1 1d       	adc	r26, r1
    3340:	6a 0f       	add	r22, r26
    3342:	71 1d       	adc	r23, r1
    3344:	81 1d       	adc	r24, r1
    3346:	91 1d       	adc	r25, r1
    3348:	a1 1d       	adc	r26, r1
    334a:	20 d0       	rcall	.+64     	; 0x338c <__ultoa_invert+0x84>
    334c:	09 f4       	brne	.+2      	; 0x3350 <__ultoa_invert+0x48>
    334e:	68 94       	set
    3350:	3f 91       	pop	r19
    3352:	2a e0       	ldi	r18, 0x0A	; 10
    3354:	26 9f       	mul	r18, r22
    3356:	11 24       	eor	r1, r1
    3358:	30 19       	sub	r19, r0
    335a:	30 5d       	subi	r19, 0xD0	; 208
    335c:	31 93       	st	Z+, r19
    335e:	de f6       	brtc	.-74     	; 0x3316 <__ultoa_invert+0xe>
    3360:	cf 01       	movw	r24, r30
    3362:	08 95       	ret
    3364:	46 2f       	mov	r20, r22
    3366:	47 70       	andi	r20, 0x07	; 7
    3368:	40 5d       	subi	r20, 0xD0	; 208
    336a:	41 93       	st	Z+, r20
    336c:	b3 e0       	ldi	r27, 0x03	; 3
    336e:	0f d0       	rcall	.+30     	; 0x338e <__ultoa_invert+0x86>
    3370:	c9 f7       	brne	.-14     	; 0x3364 <__ultoa_invert+0x5c>
    3372:	f6 cf       	rjmp	.-20     	; 0x3360 <__ultoa_invert+0x58>
    3374:	46 2f       	mov	r20, r22
    3376:	4f 70       	andi	r20, 0x0F	; 15
    3378:	40 5d       	subi	r20, 0xD0	; 208
    337a:	4a 33       	cpi	r20, 0x3A	; 58
    337c:	18 f0       	brcs	.+6      	; 0x3384 <__ultoa_invert+0x7c>
    337e:	49 5d       	subi	r20, 0xD9	; 217
    3380:	31 fd       	sbrc	r19, 1
    3382:	40 52       	subi	r20, 0x20	; 32
    3384:	41 93       	st	Z+, r20
    3386:	02 d0       	rcall	.+4      	; 0x338c <__ultoa_invert+0x84>
    3388:	a9 f7       	brne	.-22     	; 0x3374 <__ultoa_invert+0x6c>
    338a:	ea cf       	rjmp	.-44     	; 0x3360 <__ultoa_invert+0x58>
    338c:	b4 e0       	ldi	r27, 0x04	; 4
    338e:	a6 95       	lsr	r26
    3390:	97 95       	ror	r25
    3392:	87 95       	ror	r24
    3394:	77 95       	ror	r23
    3396:	67 95       	ror	r22
    3398:	ba 95       	dec	r27
    339a:	c9 f7       	brne	.-14     	; 0x338e <__ultoa_invert+0x86>
    339c:	00 97       	sbiw	r24, 0x00	; 0
    339e:	61 05       	cpc	r22, r1
    33a0:	71 05       	cpc	r23, r1
    33a2:	08 95       	ret
    33a4:	9b 01       	movw	r18, r22
    33a6:	ac 01       	movw	r20, r24
    33a8:	0a 2e       	mov	r0, r26
    33aa:	06 94       	lsr	r0
    33ac:	57 95       	ror	r21
    33ae:	47 95       	ror	r20
    33b0:	37 95       	ror	r19
    33b2:	27 95       	ror	r18
    33b4:	ba 95       	dec	r27
    33b6:	c9 f7       	brne	.-14     	; 0x33aa <__ultoa_invert+0xa2>
    33b8:	62 0f       	add	r22, r18
    33ba:	73 1f       	adc	r23, r19
    33bc:	84 1f       	adc	r24, r20
    33be:	95 1f       	adc	r25, r21
    33c0:	a0 1d       	adc	r26, r0
    33c2:	08 95       	ret

000033c4 <__mulsi3>:
    33c4:	62 9f       	mul	r22, r18
    33c6:	d0 01       	movw	r26, r0
    33c8:	73 9f       	mul	r23, r19
    33ca:	f0 01       	movw	r30, r0
    33cc:	82 9f       	mul	r24, r18
    33ce:	e0 0d       	add	r30, r0
    33d0:	f1 1d       	adc	r31, r1
    33d2:	64 9f       	mul	r22, r20
    33d4:	e0 0d       	add	r30, r0
    33d6:	f1 1d       	adc	r31, r1
    33d8:	92 9f       	mul	r25, r18
    33da:	f0 0d       	add	r31, r0
    33dc:	83 9f       	mul	r24, r19
    33de:	f0 0d       	add	r31, r0
    33e0:	74 9f       	mul	r23, r20
    33e2:	f0 0d       	add	r31, r0
    33e4:	65 9f       	mul	r22, r21
    33e6:	f0 0d       	add	r31, r0
    33e8:	99 27       	eor	r25, r25
    33ea:	72 9f       	mul	r23, r18
    33ec:	b0 0d       	add	r27, r0
    33ee:	e1 1d       	adc	r30, r1
    33f0:	f9 1f       	adc	r31, r25
    33f2:	63 9f       	mul	r22, r19
    33f4:	b0 0d       	add	r27, r0
    33f6:	e1 1d       	adc	r30, r1
    33f8:	f9 1f       	adc	r31, r25
    33fa:	bd 01       	movw	r22, r26
    33fc:	cf 01       	movw	r24, r30
    33fe:	11 24       	eor	r1, r1
    3400:	08 95       	ret

00003402 <__udivmodhi4>:
    3402:	aa 1b       	sub	r26, r26
    3404:	bb 1b       	sub	r27, r27
    3406:	51 e1       	ldi	r21, 0x11	; 17
    3408:	07 c0       	rjmp	.+14     	; 0x3418 <__udivmodhi4_ep>

0000340a <__udivmodhi4_loop>:
    340a:	aa 1f       	adc	r26, r26
    340c:	bb 1f       	adc	r27, r27
    340e:	a6 17       	cp	r26, r22
    3410:	b7 07       	cpc	r27, r23
    3412:	10 f0       	brcs	.+4      	; 0x3418 <__udivmodhi4_ep>
    3414:	a6 1b       	sub	r26, r22
    3416:	b7 0b       	sbc	r27, r23

00003418 <__udivmodhi4_ep>:
    3418:	88 1f       	adc	r24, r24
    341a:	99 1f       	adc	r25, r25
    341c:	5a 95       	dec	r21
    341e:	a9 f7       	brne	.-22     	; 0x340a <__udivmodhi4_loop>
    3420:	80 95       	com	r24
    3422:	90 95       	com	r25
    3424:	bc 01       	movw	r22, r24
    3426:	cd 01       	movw	r24, r26
    3428:	08 95       	ret

0000342a <__udivmodsi4>:
    342a:	a1 e2       	ldi	r26, 0x21	; 33
    342c:	1a 2e       	mov	r1, r26
    342e:	aa 1b       	sub	r26, r26
    3430:	bb 1b       	sub	r27, r27
    3432:	fd 01       	movw	r30, r26
    3434:	0d c0       	rjmp	.+26     	; 0x3450 <__udivmodsi4_ep>

00003436 <__udivmodsi4_loop>:
    3436:	aa 1f       	adc	r26, r26
    3438:	bb 1f       	adc	r27, r27
    343a:	ee 1f       	adc	r30, r30
    343c:	ff 1f       	adc	r31, r31
    343e:	a2 17       	cp	r26, r18
    3440:	b3 07       	cpc	r27, r19
    3442:	e4 07       	cpc	r30, r20
    3444:	f5 07       	cpc	r31, r21
    3446:	20 f0       	brcs	.+8      	; 0x3450 <__udivmodsi4_ep>
    3448:	a2 1b       	sub	r26, r18
    344a:	b3 0b       	sbc	r27, r19
    344c:	e4 0b       	sbc	r30, r20
    344e:	f5 0b       	sbc	r31, r21

00003450 <__udivmodsi4_ep>:
    3450:	66 1f       	adc	r22, r22
    3452:	77 1f       	adc	r23, r23
    3454:	88 1f       	adc	r24, r24
    3456:	99 1f       	adc	r25, r25
    3458:	1a 94       	dec	r1
    345a:	69 f7       	brne	.-38     	; 0x3436 <__udivmodsi4_loop>
    345c:	60 95       	com	r22
    345e:	70 95       	com	r23
    3460:	80 95       	com	r24
    3462:	90 95       	com	r25
    3464:	9b 01       	movw	r18, r22
    3466:	ac 01       	movw	r20, r24
    3468:	bd 01       	movw	r22, r26
    346a:	cf 01       	movw	r24, r30
    346c:	08 95       	ret

0000346e <__divmodsi4>:
    346e:	97 fb       	bst	r25, 7
    3470:	09 2e       	mov	r0, r25
    3472:	05 26       	eor	r0, r21
    3474:	0e d0       	rcall	.+28     	; 0x3492 <__divmodsi4_neg1>
    3476:	57 fd       	sbrc	r21, 7
    3478:	04 d0       	rcall	.+8      	; 0x3482 <__divmodsi4_neg2>
    347a:	d7 df       	rcall	.-82     	; 0x342a <__udivmodsi4>
    347c:	0a d0       	rcall	.+20     	; 0x3492 <__divmodsi4_neg1>
    347e:	00 1c       	adc	r0, r0
    3480:	38 f4       	brcc	.+14     	; 0x3490 <__divmodsi4_exit>

00003482 <__divmodsi4_neg2>:
    3482:	50 95       	com	r21
    3484:	40 95       	com	r20
    3486:	30 95       	com	r19
    3488:	21 95       	neg	r18
    348a:	3f 4f       	sbci	r19, 0xFF	; 255
    348c:	4f 4f       	sbci	r20, 0xFF	; 255
    348e:	5f 4f       	sbci	r21, 0xFF	; 255

00003490 <__divmodsi4_exit>:
    3490:	08 95       	ret

00003492 <__divmodsi4_neg1>:
    3492:	f6 f7       	brtc	.-4      	; 0x3490 <__divmodsi4_exit>
    3494:	90 95       	com	r25
    3496:	80 95       	com	r24
    3498:	70 95       	com	r23
    349a:	61 95       	neg	r22
    349c:	7f 4f       	sbci	r23, 0xFF	; 255
    349e:	8f 4f       	sbci	r24, 0xFF	; 255
    34a0:	9f 4f       	sbci	r25, 0xFF	; 255
    34a2:	08 95       	ret

000034a4 <__prologue_saves__>:
    34a4:	2f 92       	push	r2
    34a6:	3f 92       	push	r3
    34a8:	4f 92       	push	r4
    34aa:	5f 92       	push	r5
    34ac:	6f 92       	push	r6
    34ae:	7f 92       	push	r7
    34b0:	8f 92       	push	r8
    34b2:	9f 92       	push	r9
    34b4:	af 92       	push	r10
    34b6:	bf 92       	push	r11
    34b8:	cf 92       	push	r12
    34ba:	df 92       	push	r13
    34bc:	ef 92       	push	r14
    34be:	ff 92       	push	r15
    34c0:	0f 93       	push	r16
    34c2:	1f 93       	push	r17
    34c4:	cf 93       	push	r28
    34c6:	df 93       	push	r29
    34c8:	cd b7       	in	r28, 0x3d	; 61
    34ca:	de b7       	in	r29, 0x3e	; 62
    34cc:	ca 1b       	sub	r28, r26
    34ce:	db 0b       	sbc	r29, r27
    34d0:	0f b6       	in	r0, 0x3f	; 63
    34d2:	f8 94       	cli
    34d4:	de bf       	out	0x3e, r29	; 62
    34d6:	0f be       	out	0x3f, r0	; 63
    34d8:	cd bf       	out	0x3d, r28	; 61
    34da:	09 94       	ijmp

000034dc <__epilogue_restores__>:
    34dc:	2a 88       	ldd	r2, Y+18	; 0x12
    34de:	39 88       	ldd	r3, Y+17	; 0x11
    34e0:	48 88       	ldd	r4, Y+16	; 0x10
    34e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    34e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    34e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    34e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    34ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    34ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    34ee:	b9 84       	ldd	r11, Y+9	; 0x09
    34f0:	c8 84       	ldd	r12, Y+8	; 0x08
    34f2:	df 80       	ldd	r13, Y+7	; 0x07
    34f4:	ee 80       	ldd	r14, Y+6	; 0x06
    34f6:	fd 80       	ldd	r15, Y+5	; 0x05
    34f8:	0c 81       	ldd	r16, Y+4	; 0x04
    34fa:	1b 81       	ldd	r17, Y+3	; 0x03
    34fc:	aa 81       	ldd	r26, Y+2	; 0x02
    34fe:	b9 81       	ldd	r27, Y+1	; 0x01
    3500:	ce 0f       	add	r28, r30
    3502:	d1 1d       	adc	r29, r1
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	de bf       	out	0x3e, r29	; 62
    350a:	0f be       	out	0x3f, r0	; 63
    350c:	cd bf       	out	0x3d, r28	; 61
    350e:	ed 01       	movw	r28, r26
    3510:	08 95       	ret

00003512 <__tablejump2__>:
    3512:	ee 0f       	add	r30, r30
    3514:	ff 1f       	adc	r31, r31

00003516 <__tablejump__>:
    3516:	05 90       	lpm	r0, Z+
    3518:	f4 91       	lpm	r31, Z+
    351a:	e0 2d       	mov	r30, r0
    351c:	09 94       	ijmp

0000351e <_exit>:
    351e:	f8 94       	cli

00003520 <__stop_program>:
    3520:	ff cf       	rjmp	.-2      	; 0x3520 <__stop_program>
