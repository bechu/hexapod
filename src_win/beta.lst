
beta.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ee  00800200  00003646  000036da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003646  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013d  008002ee  008002ee  000037c8  2**0
                  ALLOC
  3 .debug_aranges 000004a0  00000000  00000000  000037c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000d2b  00000000  00000000  00003c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00011641  00000000  00000000  00004993  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000043b8  00000000  00000000  00015fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000040fe  00000000  00000000  0001a38c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000900  00000000  00000000  0001e48c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000022ef  00000000  00000000  0001ed8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000216f  00000000  00000000  0002107b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000231ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__ctors_end>
       4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
       8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
       c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      10:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      14:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      18:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      1c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      20:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      24:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      28:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      2c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      30:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      34:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      38:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      3c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      40:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      44:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      48:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      4c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      50:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      54:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      58:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      5c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      60:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      64:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      68:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      6c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      70:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      74:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      78:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      7c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      80:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      84:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      88:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      8c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      90:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__vector_36>
      94:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      98:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__vector_38>
      9c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      a0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      a4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      a8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      ac:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      b0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      b4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      b8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      bc:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__vector_47>
      c0:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__vector_48>
      c4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      c8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      cc:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      d0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      d4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      d8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      dc:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      e0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>

000000e4 <__c.1790>:
      e4:	6e 61 6e 00                                         nan.

000000e8 <__c.1788>:
      e8:	69 6e 66 00                                         inf.

000000ec <marquee_list>:
      ec:	3c 02                                               <.

000000ee <bank1_list>:
      ee:	64 02 7a 02 90 02                                   d.z...

000000f4 <__timer0Compare>:
      f4:	26 03 00 6e 00 02 47 00 35 00 02 44 00 06 05 03     &..n..G.5..D....
     104:	2a 03 00 6e 00 04 48 00 35 00 04 44 00 04 35 03     *..n..H.5..D..5.

00000114 <__timer1Compare>:
     114:	2e 03 01 6f 00 02 88 00 36 00 02 80 00 06 ff 02     ...o....6.......
     124:	32 03 01 6f 00 04 8a 00 36 00 04 80 00 04 02 03     2..o....6.......
     134:	36 03 01 6f 00 08 8c 00 36 00 08 80 00 02 05 03     6..o....6.......

00000144 <__timer2Compare>:
     144:	3a 03 02 70 00 02 b3 00 37 00 02 b0 00 06 fc 02     :..p....7.......
     154:	3e 03 02 70 00 04 b4 00 37 00 04 b0 00 04 41 03     >..p....7.....A.

00000164 <__timer3Compare>:
     164:	42 03 03 71 00 02 98 00 38 00 02 90 00 06 29 03     B..q....8.....).
     174:	46 03 03 71 00 04 9a 00 38 00 04 90 00 04 2c 03     F..q....8.....,.
     184:	4a 03 03 71 00 08 9c 00 38 00 08 90 00 02 2f 03     J..q....8...../.

00000194 <__timer4Compare>:
     194:	4e 03 04 72 00 02 a8 00 39 00 02 a0 00 06 38 03     N..r....9.....8.
     1a4:	52 03 04 72 00 04 aa 00 39 00 04 a0 00 04 3b 03     R..r....9.....;.
     1b4:	56 03 04 72 00 08 ac 00 39 00 08 a0 00 02 3e 03     V..r....9.....>.

000001c4 <__timer5Compare>:
     1c4:	5a 03 05 73 00 02 28 01 3a 00 02 20 01 06 4a 03     Z..s..(.:.. ..J.
     1d4:	5e 03 05 73 00 04 2a 01 3a 00 04 20 01 04 4d 03     ^..s..*.:.. ..M.
     1e4:	62 03 05 73 00 08 2c 01 3a 00 08 20 01 02 50 03     b..s..,.:.. ..P.

000001f4 <pgm_Timers>:
     1f4:	66 03 46 00 45 00 00 00 02 33 88 44 00 01 44 00     f.F.E....3.D..D.
     204:	02 45 00 08 00 00 01 f4 00 6e 00 01 35 00 01 00     .E.......n..5...
     214:	00 00 00 01 00 00 01 00 00 01 00 00 71 03 84 00     ............q...
     224:	81 00 ff 00 03 ff df 80 00 01 80 00 02 81 00 08     ................
     234:	81 00 10 14 01 6f 00 01 36 00 01 86 00 6f 00 20     .....o..6....o. 
     244:	36 00 20 81 00 40 00 00 7c 03 b2 00 b1 00 00 ff     6. ..@..|.......
     254:	02 33 88 b0 00 01 b0 00 02 b1 00 08 00 00 01 44     .3.............D
     264:	01 70 00 01 37 00 01 00 00 00 00 01 00 00 01 00     .p..7...........
     274:	00 01 00 00 87 03 94 00 91 00 ff 00 03 ff df 90     ................
     284:	00 01 90 00 02 91 00 08 91 00 10 64 01 71 00 01     ...........d.q..
     294:	38 00 01 96 00 71 00 20 38 00 20 91 00 40 32 03     8....q. 8. ..@2.
     2a4:	92 03 a4 00 a1 00 ff 00 03 ff df a0 00 01 a0 00     ................
     2b4:	02 a1 00 08 a1 00 10 94 01 72 00 01 39 00 01 a6     .........r..9...
     2c4:	00 72 00 20 39 00 20 a1 00 40 44 03 9d 03 24 01     .r. 9. ..@D...$.
     2d4:	21 01 ff 00 03 ff df 20 01 01 20 01 02 21 01 08     !...... .. ..!..
     2e4:	21 01 10 c4 01 73 00 01 3a 00 01 26 01 73 00 20     !....s..:..&.s. 
     2f4:	3a 00 20 21 01 40 47 03                             :. !.@G.

000002fc <_B4>:
     2fc:	55 03 10                                            U..

000002ff <_B5>:
     2ff:	55 03 20                                            U. 

00000302 <_B6>:
     302:	55 03 40                                            U.@

00000305 <_B7>:
     305:	55 03 80                                            U..

00000308 <_C0>:
     308:	5b 03 01                                            [..

0000030b <_C1>:
     30b:	5b 03 02                                            [..

0000030e <_C2>:
     30e:	5b 03 04                                            [..

00000311 <_C3>:
     311:	5b 03 08                                            [..

00000314 <_C4>:
     314:	5b 03 10                                            [..

00000317 <_C5>:
     317:	5b 03 20                                            [. 

0000031a <_D2>:
     31a:	61 03 04                                            a..

0000031d <_D3>:
     31d:	61 03 08                                            a..

00000320 <_D5>:
     320:	61 03 20                                            a. 

00000323 <_D6>:
     323:	61 03 40                                            a.@

00000326 <_D7>:
     326:	61 03 80                                            a..

00000329 <_E3>:
     329:	67 03 08                                            g..

0000032c <_E4>:
     32c:	67 03 10                                            g..

0000032f <_E5>:
     32f:	67 03 20                                            g. 

00000332 <_E7>:
     332:	67 03 80                                            g..

00000335 <_G5>:
     335:	6d 03 20                                            m. 

00000338 <_H3>:
     338:	73 03 08                                            s..

0000033b <_H4>:
     33b:	73 03 10                                            s..

0000033e <_H5>:
     33e:	73 03 20                                            s. 

00000341 <_H6>:
     341:	73 03 40                                            s.@

00000344 <_L0>:
     344:	79 03 01                                            y..

00000347 <_L1>:
     347:	79 03 02                                            y..

0000034a <_L3>:
     34a:	79 03 08                                            y..

0000034d <_L4>:
     34d:	79 03 10                                            y..

00000350 <_L5>:
     350:	79 03 20                                            y. 

00000353 <AVcc_MV>:
     353:	88 13                                               ..

00000355 <_PORTB>:
     355:	25 00 24 00 23 00                                   %.$.#.

0000035b <_PORTC>:
     35b:	28 00 27 00 26 00                                   (.'.&.

00000361 <_PORTD>:
     361:	2b 00 2a 00 29 00                                   +.*.).

00000367 <_PORTE>:
     367:	2e 00 2d 00 2c 00                                   ..-.,.

0000036d <_PORTG>:
     36d:	34 00 33 00 32 00                                   4.3.2.

00000373 <_PORTH>:
     373:	02 01 01 01 00 01                                   ......

00000379 <_PORTL>:
     379:	0b 01 0a 01 09 01                                   ......

0000037f <c_servoPWM>:
     37f:	ff 09 f7 09                                         ....

00000383 <__c.1911>:
     383:	20 45 72 72 6f 72 3a 25 64 0d 0a 00                  Error:%d...

0000038f <__c.1909>:
     38f:	55 73 65 72 00                                      User.

00000394 <__c.1907>:
     394:	57 65 62 62 6f 74 4c 69 62 00                       WebbotLib.

0000039e <atoz>:
     39e:	ee 3e 9c 7a 9e 8e f6 2e 0c 78 ae 1c aa 2a 3a ce     .>.z.....x...*:.
     3ae:	e6 0a b6 1e 38 7c b8 6e 76 da                       ....8|.nv.

000003b8 <digits>:
     3b8:	fc 60 da f2 66 b6 3e e0 fe e6                       .`..f.>...

000003c2 <c_hw_uart>:
     3c2:	cc 0f 82 10 9e 10 57 10 89 10 6d 10 00 40 7a 10     ......W...m..@z.
     3d2:	f3 5a 00 a0 72 4e 18 09 00 10 a5 d4 e8 00 00 e8     .Z..rN..........
     3e2:	76 48 17 00 00 e4 0b 54 02 00 00 ca 9a 3b 00 00     vH.....T.....;..
     3f2:	00 e1 f5 05 00 00 80 96 98 00 00 00 40 42 0f 00     ............@B..
     402:	00 00 a0 86 01 00 00 00 10 27 00 00 00 00 e8 03     .........'......
     412:	00 00 00 00 64 00 00 00 00 00 0a 00 00 00 00 00     ....d...........
     422:	01 00 00 00 00 00 2c 76 d8 88 dc 67 4f 08 23 df     ......,v...gO.#.
     432:	c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51     ...Y.......S.:.Q
     442:	99 76 96 e8 e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c     .v.....&....b.@|
     452:	6f fc ef bc 9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a     o.....@...o....Z
     462:	2a f7 5c 93 6b 6c f9 67 6d c1 1b fc e0 e4 0d 47     *.\.kl.gm......G
     472:	fe f5 20 e6 b5 00 d0 ed 90 2e 03 00 94 35 77 05     .. ..........5w.
     482:	00 80 84 1e 08 00 00 20 4e 0a 00 00 00 c8 0c 33     ....... N......3
     492:	33 33 33 0f 98 6e 12 83 11 41 ef 8d 21 14 89 3b     333..n...A..!..;
     4a2:	e6 55 16 cf fe e6 db 18 d1 84 4b 38 1b f7 7c 1d     .U........K8..|.
     4b2:	90 1d a4 bb e4 24 20 32 84 72 5e 22 81 00 c9 f1     .....$ 2.r^"....
     4c2:	24 ec a1 e5 3d 27                                   $...='

000004c8 <__ctors_start>:
     4c8:	b8 02       	muls	r27, r24
     4ca:	7b 08       	sbc	r7, r11
     4cc:	7d 08       	sbc	r7, r13

000004ce <__ctors_end>:
     4ce:	11 24       	eor	r1, r1
     4d0:	1f be       	out	0x3f, r1	; 63
     4d2:	cf ef       	ldi	r28, 0xFF	; 255
     4d4:	d1 e2       	ldi	r29, 0x21	; 33
     4d6:	de bf       	out	0x3e, r29	; 62
     4d8:	cd bf       	out	0x3d, r28	; 61

000004da <__do_copy_data>:
     4da:	12 e0       	ldi	r17, 0x02	; 2
     4dc:	a0 e0       	ldi	r26, 0x00	; 0
     4de:	b2 e0       	ldi	r27, 0x02	; 2
     4e0:	e6 e4       	ldi	r30, 0x46	; 70
     4e2:	f6 e3       	ldi	r31, 0x36	; 54
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <.do_copy_data_start>

000004e6 <.do_copy_data_loop>:
     4e6:	05 90       	lpm	r0, Z+
     4e8:	0d 92       	st	X+, r0

000004ea <.do_copy_data_start>:
     4ea:	ae 3e       	cpi	r26, 0xEE	; 238
     4ec:	b1 07       	cpc	r27, r17
     4ee:	d9 f7       	brne	.-10     	; 0x4e6 <.do_copy_data_loop>

000004f0 <__do_clear_bss>:
     4f0:	14 e0       	ldi	r17, 0x04	; 4
     4f2:	ae ee       	ldi	r26, 0xEE	; 238
     4f4:	b2 e0       	ldi	r27, 0x02	; 2
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <.do_clear_bss_start>

000004f8 <.do_clear_bss_loop>:
     4f8:	1d 92       	st	X+, r1

000004fa <.do_clear_bss_start>:
     4fa:	ab 32       	cpi	r26, 0x2B	; 43
     4fc:	b1 07       	cpc	r27, r17
     4fe:	e1 f7       	brne	.-8      	; 0x4f8 <.do_clear_bss_loop>

00000500 <__do_global_ctors>:
     500:	14 e0       	ldi	r17, 0x04	; 4
     502:	ce ec       	ldi	r28, 0xCE	; 206
     504:	d4 e0       	ldi	r29, 0x04	; 4
     506:	04 c0       	rjmp	.+8      	; 0x510 <.do_global_ctors_start>

00000508 <.do_global_ctors_loop>:
     508:	22 97       	sbiw	r28, 0x02	; 2
     50a:	fe 01       	movw	r30, r28
     50c:	0e 94 1d 1b 	call	0x363a	; 0x363a <__tablejump__>

00000510 <.do_global_ctors_start>:
     510:	c8 3c       	cpi	r28, 0xC8	; 200
     512:	d1 07       	cpc	r29, r17
     514:	c9 f7       	brne	.-14     	; 0x508 <.do_global_ctors_loop>
     516:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <main>
     51a:	0c 94 91 18 	jmp	0x3122	; 0x3122 <exit>

0000051e <__bad_interrupt>:
     51e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000522 <_Z41__static_initialization_and_destruction_0ii>:
			test_motor.set_position(p.pos, 1000);
		}
	}
	test_motor.compute();
  	return HEXAPOD_LOOP_DURATION;
}
     522:	df 93       	push	r29
     524:	cf 93       	push	r28
     526:	00 d0       	rcall	.+0      	; 0x528 <_Z41__static_initialization_and_destruction_0ii+0x6>
     528:	00 d0       	rcall	.+0      	; 0x52a <_Z41__static_initialization_and_destruction_0ii+0x8>
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	9a 83       	std	Y+2, r25	; 0x02
     530:	89 83       	std	Y+1, r24	; 0x01
     532:	7c 83       	std	Y+4, r23	; 0x04
     534:	6b 83       	std	Y+3, r22	; 0x03
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	9a 81       	ldd	r25, Y+2	; 0x02
     53a:	81 30       	cpi	r24, 0x01	; 1
     53c:	91 05       	cpc	r25, r1
     53e:	89 f4       	brne	.+34     	; 0x562 <_Z41__static_initialization_and_destruction_0ii+0x40>
     540:	8b 81       	ldd	r24, Y+3	; 0x03
     542:	9c 81       	ldd	r25, Y+4	; 0x04
     544:	2f ef       	ldi	r18, 0xFF	; 255
     546:	8f 3f       	cpi	r24, 0xFF	; 255
     548:	92 07       	cpc	r25, r18
     54a:	59 f4       	brne	.+22     	; 0x562 <_Z41__static_initialization_and_destruction_0ii+0x40>
#include "hardware.h"
#include "protocol.h"
#include "smart_motor.h"


Protocol test;
     54c:	8e ee       	ldi	r24, 0xEE	; 238
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	0e 94 9c 04 	call	0x938	; 0x938 <_ZN8ProtocolC1Ev>

SmartMotor test_motor(servo1);
     554:	8b e1       	ldi	r24, 0x1B	; 27
     556:	93 e0       	ldi	r25, 0x03	; 3
     558:	25 ec       	ldi	r18, 0xC5	; 197
     55a:	33 e0       	ldi	r19, 0x03	; 3
     55c:	b9 01       	movw	r22, r18
     55e:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN10SmartMotorC1ER5Servo>
			test_motor.set_position(p.pos, 1000);
		}
	}
	test_motor.compute();
  	return HEXAPOD_LOOP_DURATION;
}
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	cf 91       	pop	r28
     56c:	df 91       	pop	r29
     56e:	08 95       	ret

00000570 <_GLOBAL__I_test>:
     570:	df 93       	push	r29
     572:	cf 93       	push	r28
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	6f ef       	ldi	r22, 0xFF	; 255
     57e:	7f ef       	ldi	r23, 0xFF	; 255
     580:	0e 94 91 02 	call	0x522	; 0x522 <_Z41__static_initialization_and_destruction_0ii>
     584:	cf 91       	pop	r28
     586:	df 91       	pop	r29
     588:	08 95       	ret

0000058a <appControl>:
	return 0;
}


// This is the main loop
TICK_COUNT appControl(LOOP_COUNT loopCount, TICK_COUNT loopStart) {
     58a:	df 93       	push	r29
     58c:	cf 93       	push	r28
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
     592:	2d 97       	sbiw	r28, 0x0d	; 13
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	6d 83       	std	Y+5, r22	; 0x05
     5a0:	7e 83       	std	Y+6, r23	; 0x06
     5a2:	8f 83       	std	Y+7, r24	; 0x07
     5a4:	98 87       	std	Y+8, r25	; 0x08
     5a6:	29 87       	std	Y+9, r18	; 0x09
     5a8:	3a 87       	std	Y+10, r19	; 0x0a
     5aa:	4b 87       	std	Y+11, r20	; 0x0b
     5ac:	5c 87       	std	Y+12, r21	; 0x0c
	Packet p;
     5ae:	ce 01       	movw	r24, r28
     5b0:	03 96       	adiw	r24, 0x03	; 3
     5b2:	0e 94 5f 03 	call	0x6be	; 0x6be <_ZN6PacketC1Ev>
	int success;
	if(test.treatIO(p) == 1)
     5b6:	8e ee       	ldi	r24, 0xEE	; 238
     5b8:	92 e0       	ldi	r25, 0x02	; 2
     5ba:	9e 01       	movw	r18, r28
     5bc:	2d 5f       	subi	r18, 0xFD	; 253
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	b9 01       	movw	r22, r18
     5c2:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8Protocol7treatIOER6Packet>
     5c6:	1d 86       	std	Y+13, r1	; 0x0d
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	91 05       	cpc	r25, r1
     5cc:	11 f4       	brne	.+4      	; 0x5d2 <appControl+0x48>
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	8d 87       	std	Y+13, r24	; 0x0d
     5d2:	8d 85       	ldd	r24, Y+13	; 0x0d
     5d4:	88 23       	and	r24, r24
     5d6:	61 f0       	breq	.+24     	; 0x5f0 <appControl+0x66>
	{
		if(p.motor == 1)
     5d8:	8b 81       	ldd	r24, Y+3	; 0x03
     5da:	81 30       	cpi	r24, 0x01	; 1
     5dc:	49 f4       	brne	.+18     	; 0x5f0 <appControl+0x66>
		{
			test_motor.set_position(p.pos, 1000);
     5de:	8c 81       	ldd	r24, Y+4	; 0x04
     5e0:	28 2f       	mov	r18, r24
     5e2:	8b e1       	ldi	r24, 0x1B	; 27
     5e4:	93 e0       	ldi	r25, 0x03	; 3
     5e6:	62 2f       	mov	r22, r18
     5e8:	48 ee       	ldi	r20, 0xE8	; 232
     5ea:	53 e0       	ldi	r21, 0x03	; 3
     5ec:	0e 94 81 05 	call	0xb02	; 0xb02 <_ZN10SmartMotor12set_positionEai>
		}
	}
	test_motor.compute();
     5f0:	8b e1       	ldi	r24, 0x1B	; 27
     5f2:	93 e0       	ldi	r25, 0x03	; 3
     5f4:	0e 94 15 06 	call	0xc2a	; 0xc2a <_ZN10SmartMotor7computeEv>
  	return HEXAPOD_LOOP_DURATION;
     5f8:	80 ea       	ldi	r24, 0xA0	; 160
     5fa:	96 e8       	ldi	r25, 0x86	; 134
     5fc:	a1 e0       	ldi	r26, 0x01	; 1
     5fe:	b0 e0       	ldi	r27, 0x00	; 0
}
     600:	bc 01       	movw	r22, r24
     602:	cd 01       	movw	r24, r26
     604:	2d 96       	adiw	r28, 0x0d	; 13
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	cd bf       	out	0x3d, r28	; 61
     610:	cf 91       	pop	r28
     612:	df 91       	pop	r29
     614:	08 95       	ret

00000616 <_ZN8Actuator8setSpeedEa>:
class Actuator{
public:
	Actuator(__ACTUATOR* cstr){
		m_cstr = cstr;
	}
	void setSpeed(DRIVE_SPEED speed){
     616:	df 93       	push	r29
     618:	cf 93       	push	r28
     61a:	00 d0       	rcall	.+0      	; 0x61c <_ZN8Actuator8setSpeedEa+0x6>
     61c:	0f 92       	push	r0
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	9a 83       	std	Y+2, r25	; 0x02
     624:	89 83       	std	Y+1, r24	; 0x01
     626:	6b 83       	std	Y+3, r22	; 0x03
		__act_setSpeed(m_cstr,speed);
     628:	e9 81       	ldd	r30, Y+1	; 0x01
     62a:	fa 81       	ldd	r31, Y+2	; 0x02
     62c:	80 81       	ld	r24, Z
     62e:	91 81       	ldd	r25, Z+1	; 0x01
     630:	6b 81       	ldd	r22, Y+3	; 0x03
     632:	0e 94 9e 0a 	call	0x153c	; 0x153c <__act_setSpeed>
	}
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	cf 91       	pop	r28
     63e:	df 91       	pop	r29
     640:	08 95       	ret

00000642 <appInitSoftware>:
	initHardware();
}


// Initialise the software
TICK_COUNT appInitSoftware(TICK_COUNT loopStart) {
     642:	df 93       	push	r29
     644:	cf 93       	push	r28
     646:	00 d0       	rcall	.+0      	; 0x648 <appInitSoftware+0x6>
     648:	00 d0       	rcall	.+0      	; 0x64a <appInitSoftware+0x8>
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	69 83       	std	Y+1, r22	; 0x01
     650:	7a 83       	std	Y+2, r23	; 0x02
     652:	8b 83       	std	Y+3, r24	; 0x03
     654:	9c 83       	std	Y+4, r25	; 0x04

	test.init(&uart1);
     656:	8e ee       	ldi	r24, 0xEE	; 238
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	23 ed       	ldi	r18, 0xD3	; 211
     65c:	33 e0       	ldi	r19, 0x03	; 3
     65e:	b9 01       	movw	r22, r18
     660:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZN8Protocol4initEP6UartHW>

	servo1.setSpeed(0);
     664:	85 ec       	ldi	r24, 0xC5	; 197
     666:	93 e0       	ldi	r25, 0x03	; 3
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN8Actuator8setSpeedEa>

	return 0;
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	a0 e0       	ldi	r26, 0x00	; 0
     674:	b0 e0       	ldi	r27, 0x00	; 0
}
     676:	bc 01       	movw	r22, r24
     678:	cd 01       	movw	r24, r26
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	cf 91       	pop	r28
     684:	df 91       	pop	r29
     686:	08 95       	ret

00000688 <appInitHardware>:

SmartMotor test_motor(servo1);


// Initialise the hardware
void appInitHardware(void) {
     688:	df 93       	push	r29
     68a:	cf 93       	push	r28
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
	initHardware();
     690:	0e 94 00 07 	call	0xe00	; 0xe00 <initHardware>
}
     694:	cf 91       	pop	r28
     696:	df 91       	pop	r29
     698:	08 95       	ret

0000069a <_ZN6PacketC2Ev>:
#include <stdio.h>
#include <string.h>
#include "protocol.h"

Packet::Packet()
     69a:	df 93       	push	r29
     69c:	cf 93       	push	r28
     69e:	00 d0       	rcall	.+0      	; 0x6a0 <_ZN6PacketC2Ev+0x6>
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
     6a4:	9a 83       	std	Y+2, r25	; 0x02
     6a6:	89 83       	std	Y+1, r24	; 0x01
{
	motor = 0;
     6a8:	e9 81       	ldd	r30, Y+1	; 0x01
     6aa:	fa 81       	ldd	r31, Y+2	; 0x02
     6ac:	10 82       	st	Z, r1
	pos = 0;
     6ae:	e9 81       	ldd	r30, Y+1	; 0x01
     6b0:	fa 81       	ldd	r31, Y+2	; 0x02
     6b2:	11 82       	std	Z+1, r1	; 0x01
}
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	cf 91       	pop	r28
     6ba:	df 91       	pop	r29
     6bc:	08 95       	ret

000006be <_ZN6PacketC1Ev>:
#include <stdio.h>
#include <string.h>
#include "protocol.h"

Packet::Packet()
     6be:	df 93       	push	r29
     6c0:	cf 93       	push	r28
     6c2:	00 d0       	rcall	.+0      	; 0x6c4 <_ZN6PacketC1Ev+0x6>
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	9a 83       	std	Y+2, r25	; 0x02
     6ca:	89 83       	std	Y+1, r24	; 0x01
{
	motor = 0;
     6cc:	e9 81       	ldd	r30, Y+1	; 0x01
     6ce:	fa 81       	ldd	r31, Y+2	; 0x02
     6d0:	10 82       	st	Z, r1
	pos = 0;
     6d2:	e9 81       	ldd	r30, Y+1	; 0x01
     6d4:	fa 81       	ldd	r31, Y+2	; 0x02
     6d6:	11 82       	std	Z+1, r1	; 0x01
}
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	cf 91       	pop	r28
     6de:	df 91       	pop	r29
     6e0:	08 95       	ret

000006e2 <_ZN8Protocol6_writeEPhi>:

//////////////////////////////////////////
//
// PRIVATE
//////////////////////////////////////////////
void Protocol::_write(uint8_t *data, int size)
     6e2:	df 93       	push	r29
     6e4:	cf 93       	push	r28
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
     6ea:	28 97       	sbiw	r28, 0x08	; 8
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	f8 94       	cli
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	cd bf       	out	0x3d, r28	; 61
     6f6:	9c 83       	std	Y+4, r25	; 0x04
     6f8:	8b 83       	std	Y+3, r24	; 0x03
     6fa:	7e 83       	std	Y+6, r23	; 0x06
     6fc:	6d 83       	std	Y+5, r22	; 0x05
     6fe:	58 87       	std	Y+8, r21	; 0x08
     700:	4f 83       	std	Y+7, r20	; 0x07
{
	uint8_t *p = data;
     702:	8d 81       	ldd	r24, Y+5	; 0x05
     704:	9e 81       	ldd	r25, Y+6	; 0x06
     706:	9a 83       	std	Y+2, r25	; 0x02
     708:	89 83       	std	Y+1, r24	; 0x01
     70a:	19 c0       	rjmp	.+50     	; 0x73e <_ZN8Protocol6_writeEPhi+0x5c>
	while(p-data < size)
	{
		_uart->write(*p);
     70c:	eb 81       	ldd	r30, Y+3	; 0x03
     70e:	fc 81       	ldd	r31, Y+4	; 0x04
     710:	01 90       	ld	r0, Z+
     712:	f0 81       	ld	r31, Z
     714:	e0 2d       	mov	r30, r0
     716:	01 90       	ld	r0, Z+
     718:	f0 81       	ld	r31, Z
     71a:	e0 2d       	mov	r30, r0
     71c:	40 81       	ld	r20, Z
     71e:	51 81       	ldd	r21, Z+1	; 0x01
     720:	eb 81       	ldd	r30, Y+3	; 0x03
     722:	fc 81       	ldd	r31, Y+4	; 0x04
     724:	80 81       	ld	r24, Z
     726:	91 81       	ldd	r25, Z+1	; 0x01
     728:	e9 81       	ldd	r30, Y+1	; 0x01
     72a:	fa 81       	ldd	r31, Y+2	; 0x02
     72c:	20 81       	ld	r18, Z
     72e:	62 2f       	mov	r22, r18
     730:	fa 01       	movw	r30, r20
     732:	09 95       	icall
		p++;
     734:	89 81       	ldd	r24, Y+1	; 0x01
     736:	9a 81       	ldd	r25, Y+2	; 0x02
     738:	01 96       	adiw	r24, 0x01	; 1
     73a:	9a 83       	std	Y+2, r25	; 0x02
     73c:	89 83       	std	Y+1, r24	; 0x01
// PRIVATE
//////////////////////////////////////////////
void Protocol::_write(uint8_t *data, int size)
{
	uint8_t *p = data;
	while(p-data < size)
     73e:	29 81       	ldd	r18, Y+1	; 0x01
     740:	3a 81       	ldd	r19, Y+2	; 0x02
     742:	8d 81       	ldd	r24, Y+5	; 0x05
     744:	9e 81       	ldd	r25, Y+6	; 0x06
     746:	28 1b       	sub	r18, r24
     748:	39 0b       	sbc	r19, r25
     74a:	8f 81       	ldd	r24, Y+7	; 0x07
     74c:	98 85       	ldd	r25, Y+8	; 0x08
     74e:	28 17       	cp	r18, r24
     750:	39 07       	cpc	r19, r25
     752:	e4 f2       	brlt	.-72     	; 0x70c <_ZN8Protocol6_writeEPhi+0x2a>
	{
		_uart->write(*p);
		p++;
	}
}
     754:	28 96       	adiw	r28, 0x08	; 8
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	cf 91       	pop	r28
     762:	df 91       	pop	r29
     764:	08 95       	ret

00000766 <_ZN8Protocol5_readEv>:

uint8_t Protocol::_read()
     766:	df 93       	push	r29
     768:	cf 93       	push	r28
     76a:	00 d0       	rcall	.+0      	; 0x76c <_ZN8Protocol5_readEv+0x6>
     76c:	00 d0       	rcall	.+0      	; 0x76e <_ZN8Protocol5_readEv+0x8>
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	9c 83       	std	Y+4, r25	; 0x04
     774:	8b 83       	std	Y+3, r24	; 0x03
{
	int c = -1;
     776:	8f ef       	ldi	r24, 0xFF	; 255
     778:	9f ef       	ldi	r25, 0xFF	; 255
     77a:	9a 83       	std	Y+2, r25	; 0x02
     77c:	89 83       	std	Y+1, r24	; 0x01
     77e:	39 c0       	rjmp	.+114    	; 0x7f2 <_ZN8Protocol5_readEv+0x8c>
	//CRITICAL_SECTION{
	while(in_offset < Protocol::BUFFER_SIZE )
	{
		c = _uart->read();
     780:	eb 81       	ldd	r30, Y+3	; 0x03
     782:	fc 81       	ldd	r31, Y+4	; 0x04
     784:	01 90       	ld	r0, Z+
     786:	f0 81       	ld	r31, Z
     788:	e0 2d       	mov	r30, r0
     78a:	80 81       	ld	r24, Z
     78c:	91 81       	ldd	r25, Z+1	; 0x01
     78e:	fc 01       	movw	r30, r24
     790:	32 96       	adiw	r30, 0x02	; 2
     792:	20 81       	ld	r18, Z
     794:	31 81       	ldd	r19, Z+1	; 0x01
     796:	eb 81       	ldd	r30, Y+3	; 0x03
     798:	fc 81       	ldd	r31, Y+4	; 0x04
     79a:	80 81       	ld	r24, Z
     79c:	91 81       	ldd	r25, Z+1	; 0x01
     79e:	f9 01       	movw	r30, r18
     7a0:	09 95       	icall
     7a2:	9a 83       	std	Y+2, r25	; 0x02
     7a4:	89 83       	std	Y+1, r24	; 0x01
		if(c == -1)
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	9a 81       	ldd	r25, Y+2	; 0x02
     7aa:	2f ef       	ldi	r18, 0xFF	; 255
     7ac:	8f 3f       	cpi	r24, 0xFF	; 255
     7ae:	92 07       	cpc	r25, r18
     7b0:	29 f1       	breq	.+74     	; 0x7fc <_ZN8Protocol5_readEv+0x96>
			break;
		in[in_offset] = 0;
     7b2:	eb 81       	ldd	r30, Y+3	; 0x03
     7b4:	fc 81       	ldd	r31, Y+4	; 0x04
     7b6:	82 a5       	ldd	r24, Z+42	; 0x2a
     7b8:	28 2f       	mov	r18, r24
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	8b 81       	ldd	r24, Y+3	; 0x03
     7be:	9c 81       	ldd	r25, Y+4	; 0x04
     7c0:	82 0f       	add	r24, r18
     7c2:	93 1f       	adc	r25, r19
     7c4:	fc 01       	movw	r30, r24
     7c6:	32 96       	adiw	r30, 0x02	; 2
     7c8:	10 82       	st	Z, r1
		in[in_offset] = (uint8_t)(c & 0xFF);
     7ca:	eb 81       	ldd	r30, Y+3	; 0x03
     7cc:	fc 81       	ldd	r31, Y+4	; 0x04
     7ce:	82 a5       	ldd	r24, Z+42	; 0x2a
     7d0:	28 2f       	mov	r18, r24
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	49 81       	ldd	r20, Y+1	; 0x01
     7d6:	8b 81       	ldd	r24, Y+3	; 0x03
     7d8:	9c 81       	ldd	r25, Y+4	; 0x04
     7da:	82 0f       	add	r24, r18
     7dc:	93 1f       	adc	r25, r19
     7de:	fc 01       	movw	r30, r24
     7e0:	32 96       	adiw	r30, 0x02	; 2
     7e2:	40 83       	st	Z, r20
		in_offset++;
     7e4:	eb 81       	ldd	r30, Y+3	; 0x03
     7e6:	fc 81       	ldd	r31, Y+4	; 0x04
     7e8:	82 a5       	ldd	r24, Z+42	; 0x2a
     7ea:	8f 5f       	subi	r24, 0xFF	; 255
     7ec:	eb 81       	ldd	r30, Y+3	; 0x03
     7ee:	fc 81       	ldd	r31, Y+4	; 0x04
     7f0:	82 a7       	std	Z+42, r24	; 0x2a

uint8_t Protocol::_read()
{
	int c = -1;
	//CRITICAL_SECTION{
	while(in_offset < Protocol::BUFFER_SIZE )
     7f2:	eb 81       	ldd	r30, Y+3	; 0x03
     7f4:	fc 81       	ldd	r31, Y+4	; 0x04
     7f6:	82 a5       	ldd	r24, Z+42	; 0x2a
     7f8:	84 31       	cpi	r24, 0x14	; 20
     7fa:	10 f2       	brcs	.-124    	; 0x780 <_ZN8Protocol5_readEv+0x1a>
		in[in_offset] = 0;
		in[in_offset] = (uint8_t)(c & 0xFF);
		in_offset++;
	}
	//}
	return 0;
     7fc:	80 e0       	ldi	r24, 0x00	; 0
}
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	cf 91       	pop	r28
     808:	df 91       	pop	r29
     80a:	08 95       	ret

0000080c <_ZN8Protocol7treatIOER6Packet>:
	_uart = uart;
	_uart->setPollingMode(false);
}


int Protocol::treatIO(Packet &p)
     80c:	df 93       	push	r29
     80e:	cf 93       	push	r28
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	27 97       	sbiw	r28, 0x07	; 7
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	9b 83       	std	Y+3, r25	; 0x03
     822:	8a 83       	std	Y+2, r24	; 0x02
     824:	7d 83       	std	Y+5, r23	; 0x05
     826:	6c 83       	std	Y+4, r22	; 0x04
{	
	_read();
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	9b 81       	ldd	r25, Y+3	; 0x03
     82c:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN8Protocol5_readEv>
	if(in_offset>=2)
     830:	ea 81       	ldd	r30, Y+2	; 0x02
     832:	fb 81       	ldd	r31, Y+3	; 0x03
     834:	82 a5       	ldd	r24, Z+42	; 0x2a
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	d0 f1       	brcs	.+116    	; 0x8ae <_ZN8Protocol7treatIOER6Packet+0xa2>
	{
		p.motor = in[0];
     83a:	ea 81       	ldd	r30, Y+2	; 0x02
     83c:	fb 81       	ldd	r31, Y+3	; 0x03
     83e:	82 81       	ldd	r24, Z+2	; 0x02
     840:	ec 81       	ldd	r30, Y+4	; 0x04
     842:	fd 81       	ldd	r31, Y+5	; 0x05
     844:	80 83       	st	Z, r24
		p.pos = in[1];
     846:	ea 81       	ldd	r30, Y+2	; 0x02
     848:	fb 81       	ldd	r31, Y+3	; 0x03
     84a:	83 81       	ldd	r24, Z+3	; 0x03
     84c:	ec 81       	ldd	r30, Y+4	; 0x04
     84e:	fd 81       	ldd	r31, Y+5	; 0x05
     850:	81 83       	std	Z+1, r24	; 0x01
		in_offset-=2;
     852:	ea 81       	ldd	r30, Y+2	; 0x02
     854:	fb 81       	ldd	r31, Y+3	; 0x03
     856:	82 a5       	ldd	r24, Z+42	; 0x2a
     858:	82 50       	subi	r24, 0x02	; 2
     85a:	ea 81       	ldd	r30, Y+2	; 0x02
     85c:	fb 81       	ldd	r31, Y+3	; 0x03
     85e:	82 a7       	std	Z+42, r24	; 0x2a
		for(uint8_t i=0;i<in_offset;i++)
     860:	19 82       	std	Y+1, r1	; 0x01
     862:	1a c0       	rjmp	.+52     	; 0x898 <_ZN8Protocol7treatIOER6Packet+0x8c>
		{
			in[i] = in[i+2];
     864:	89 81       	ldd	r24, Y+1	; 0x01
     866:	48 2f       	mov	r20, r24
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	88 2f       	mov	r24, r24
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	9c 01       	movw	r18, r24
     872:	2e 5f       	subi	r18, 0xFE	; 254
     874:	3f 4f       	sbci	r19, 0xFF	; 255
     876:	8a 81       	ldd	r24, Y+2	; 0x02
     878:	9b 81       	ldd	r25, Y+3	; 0x03
     87a:	82 0f       	add	r24, r18
     87c:	93 1f       	adc	r25, r19
     87e:	fc 01       	movw	r30, r24
     880:	32 96       	adiw	r30, 0x02	; 2
     882:	20 81       	ld	r18, Z
     884:	8a 81       	ldd	r24, Y+2	; 0x02
     886:	9b 81       	ldd	r25, Y+3	; 0x03
     888:	84 0f       	add	r24, r20
     88a:	95 1f       	adc	r25, r21
     88c:	fc 01       	movw	r30, r24
     88e:	32 96       	adiw	r30, 0x02	; 2
     890:	20 83       	st	Z, r18
	if(in_offset>=2)
	{
		p.motor = in[0];
		p.pos = in[1];
		in_offset-=2;
		for(uint8_t i=0;i<in_offset;i++)
     892:	89 81       	ldd	r24, Y+1	; 0x01
     894:	8f 5f       	subi	r24, 0xFF	; 255
     896:	89 83       	std	Y+1, r24	; 0x01
     898:	ea 81       	ldd	r30, Y+2	; 0x02
     89a:	fb 81       	ldd	r31, Y+3	; 0x03
     89c:	92 a5       	ldd	r25, Z+42	; 0x2a
     89e:	89 81       	ldd	r24, Y+1	; 0x01
     8a0:	89 17       	cp	r24, r25
     8a2:	00 f3       	brcs	.-64     	; 0x864 <_ZN8Protocol7treatIOER6Packet+0x58>
		{
			in[i] = in[i+2];
		}
		return 1;
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	9f 83       	std	Y+7, r25	; 0x07
     8aa:	8e 83       	std	Y+6, r24	; 0x06
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <_ZN8Protocol7treatIOER6Packet+0xa6>
	}
	return 0;
     8ae:	1f 82       	std	Y+7, r1	; 0x07
     8b0:	1e 82       	std	Y+6, r1	; 0x06
     8b2:	8e 81       	ldd	r24, Y+6	; 0x06
     8b4:	9f 81       	ldd	r25, Y+7	; 0x07
}
     8b6:	27 96       	adiw	r28, 0x07	; 7
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	cd bf       	out	0x3d, r28	; 61
     8c2:	cf 91       	pop	r28
     8c4:	df 91       	pop	r29
     8c6:	08 95       	ret

000008c8 <_ZN6UartHW14setPollingModeEa>:

		return ch;
	}

	// Put the receiver in polling mode (TRUE) or interrupt mode (FALSE)
	void setPollingMode(boolean polling){
     8c8:	df 93       	push	r29
     8ca:	cf 93       	push	r28
     8cc:	00 d0       	rcall	.+0      	; 0x8ce <_ZN6UartHW14setPollingModeEa+0x6>
     8ce:	0f 92       	push	r0
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	9a 83       	std	Y+2, r25	; 0x02
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	6b 83       	std	Y+3, r22	; 0x03
		uartReceivePollingMode(m_hw, polling);
     8da:	e9 81       	ldd	r30, Y+1	; 0x01
     8dc:	fa 81       	ldd	r31, Y+2	; 0x02
     8de:	86 89       	ldd	r24, Z+22	; 0x16
     8e0:	97 89       	ldd	r25, Z+23	; 0x17
     8e2:	6b 81       	ldd	r22, Y+3	; 0x03
     8e4:	0e 94 8e 11 	call	0x231c	; 0x231c <uartReceivePollingMode>
		m_polling = polling;
     8e8:	e9 81       	ldd	r30, Y+1	; 0x01
     8ea:	fa 81       	ldd	r31, Y+2	; 0x02
     8ec:	8b 81       	ldd	r24, Y+3	; 0x03
     8ee:	80 8f       	std	Z+24, r24	; 0x18
	}
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	cf 91       	pop	r28
     8f8:	df 91       	pop	r29
     8fa:	08 95       	ret

000008fc <_ZN8Protocol4initEP6UartHW>:
	memset(in, 0, Protocol::BUFFER_SIZE);
	memset(out, 0, Protocol::BUFFER_SIZE);
	haveMessage = false;
}

void Protocol::init(UartHW *uart)
     8fc:	df 93       	push	r29
     8fe:	cf 93       	push	r28
     900:	00 d0       	rcall	.+0      	; 0x902 <_ZN8Protocol4initEP6UartHW+0x6>
     902:	00 d0       	rcall	.+0      	; 0x904 <_ZN8Protocol4initEP6UartHW+0x8>
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
     908:	9a 83       	std	Y+2, r25	; 0x02
     90a:	89 83       	std	Y+1, r24	; 0x01
     90c:	7c 83       	std	Y+4, r23	; 0x04
     90e:	6b 83       	std	Y+3, r22	; 0x03
{
	_uart = uart;
     910:	e9 81       	ldd	r30, Y+1	; 0x01
     912:	fa 81       	ldd	r31, Y+2	; 0x02
     914:	8b 81       	ldd	r24, Y+3	; 0x03
     916:	9c 81       	ldd	r25, Y+4	; 0x04
     918:	91 83       	std	Z+1, r25	; 0x01
     91a:	80 83       	st	Z, r24
	_uart->setPollingMode(false);
     91c:	e9 81       	ldd	r30, Y+1	; 0x01
     91e:	fa 81       	ldd	r31, Y+2	; 0x02
     920:	80 81       	ld	r24, Z
     922:	91 81       	ldd	r25, Z+1	; 0x01
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN6UartHW14setPollingModeEa>
}
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	cf 91       	pop	r28
     934:	df 91       	pop	r29
     936:	08 95       	ret

00000938 <_ZN8ProtocolC1Ev>:
{
	motor = 0;
	pos = 0;
}

Protocol::Protocol()
     938:	df 93       	push	r29
     93a:	cf 93       	push	r28
     93c:	00 d0       	rcall	.+0      	; 0x93e <_ZN8ProtocolC1Ev+0x6>
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	9a 83       	std	Y+2, r25	; 0x02
     944:	89 83       	std	Y+1, r24	; 0x01
{
	_uart = NULL;
     946:	e9 81       	ldd	r30, Y+1	; 0x01
     948:	fa 81       	ldd	r31, Y+2	; 0x02
     94a:	11 82       	std	Z+1, r1	; 0x01
     94c:	10 82       	st	Z, r1
	in_offset = 0;
     94e:	e9 81       	ldd	r30, Y+1	; 0x01
     950:	fa 81       	ldd	r31, Y+2	; 0x02
     952:	12 a6       	std	Z+42, r1	; 0x2a
	out_offset = 0;
     954:	e9 81       	ldd	r30, Y+1	; 0x01
     956:	fa 81       	ldd	r31, Y+2	; 0x02
     958:	13 a6       	std	Z+43, r1	; 0x2b
	memset(in, 0, Protocol::BUFFER_SIZE);
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	9a 81       	ldd	r25, Y+2	; 0x02
     95e:	02 96       	adiw	r24, 0x02	; 2
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	44 e1       	ldi	r20, 0x14	; 20
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	0e 94 77 19 	call	0x32ee	; 0x32ee <memset>
	memset(out, 0, Protocol::BUFFER_SIZE);
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	9a 81       	ldd	r25, Y+2	; 0x02
     970:	46 96       	adiw	r24, 0x16	; 22
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	44 e1       	ldi	r20, 0x14	; 20
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	0e 94 77 19 	call	0x32ee	; 0x32ee <memset>
	haveMessage = false;
     97e:	e9 81       	ldd	r30, Y+1	; 0x01
     980:	fa 81       	ldd	r31, Y+2	; 0x02
     982:	14 a6       	std	Z+44, r1	; 0x2c
}
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	cf 91       	pop	r28
     98a:	df 91       	pop	r29
     98c:	08 95       	ret

0000098e <_ZN8ProtocolC2Ev>:
{
	motor = 0;
	pos = 0;
}

Protocol::Protocol()
     98e:	df 93       	push	r29
     990:	cf 93       	push	r28
     992:	00 d0       	rcall	.+0      	; 0x994 <_ZN8ProtocolC2Ev+0x6>
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	9a 83       	std	Y+2, r25	; 0x02
     99a:	89 83       	std	Y+1, r24	; 0x01
{
	_uart = NULL;
     99c:	e9 81       	ldd	r30, Y+1	; 0x01
     99e:	fa 81       	ldd	r31, Y+2	; 0x02
     9a0:	11 82       	std	Z+1, r1	; 0x01
     9a2:	10 82       	st	Z, r1
	in_offset = 0;
     9a4:	e9 81       	ldd	r30, Y+1	; 0x01
     9a6:	fa 81       	ldd	r31, Y+2	; 0x02
     9a8:	12 a6       	std	Z+42, r1	; 0x2a
	out_offset = 0;
     9aa:	e9 81       	ldd	r30, Y+1	; 0x01
     9ac:	fa 81       	ldd	r31, Y+2	; 0x02
     9ae:	13 a6       	std	Z+43, r1	; 0x2b
	memset(in, 0, Protocol::BUFFER_SIZE);
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	9a 81       	ldd	r25, Y+2	; 0x02
     9b4:	02 96       	adiw	r24, 0x02	; 2
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	44 e1       	ldi	r20, 0x14	; 20
     9bc:	50 e0       	ldi	r21, 0x00	; 0
     9be:	0e 94 77 19 	call	0x32ee	; 0x32ee <memset>
	memset(out, 0, Protocol::BUFFER_SIZE);
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	9a 81       	ldd	r25, Y+2	; 0x02
     9c6:	46 96       	adiw	r24, 0x16	; 22
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	44 e1       	ldi	r20, 0x14	; 20
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	0e 94 77 19 	call	0x32ee	; 0x32ee <memset>
	haveMessage = false;
     9d4:	e9 81       	ldd	r30, Y+1	; 0x01
     9d6:	fa 81       	ldd	r31, Y+2	; 0x02
     9d8:	14 a6       	std	Z+44, r1	; 0x2c
}
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	cf 91       	pop	r28
     9e0:	df 91       	pop	r29
     9e2:	08 95       	ret

000009e4 <_ZN10SmartMotorC2ER5Servo>:
#include "smart_motor.h"


SmartMotor::SmartMotor(Servo &servo)
     9e4:	df 93       	push	r29
     9e6:	cf 93       	push	r28
     9e8:	00 d0       	rcall	.+0      	; 0x9ea <_ZN10SmartMotorC2ER5Servo+0x6>
     9ea:	00 d0       	rcall	.+0      	; 0x9ec <_ZN10SmartMotorC2ER5Servo+0x8>
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
     9f0:	9a 83       	std	Y+2, r25	; 0x02
     9f2:	89 83       	std	Y+1, r24	; 0x01
     9f4:	7c 83       	std	Y+4, r23	; 0x04
     9f6:	6b 83       	std	Y+3, r22	; 0x03
{
	_servo = &servo;
     9f8:	e9 81       	ldd	r30, Y+1	; 0x01
     9fa:	fa 81       	ldd	r31, Y+2	; 0x02
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	9c 81       	ldd	r25, Y+4	; 0x04
     a00:	91 83       	std	Z+1, r25	; 0x01
     a02:	80 83       	st	Z, r24

	_limit_min = DRIVE_SPEED_MIN;
     a04:	e9 81       	ldd	r30, Y+1	; 0x01
     a06:	fa 81       	ldd	r31, Y+2	; 0x02
     a08:	81 e8       	ldi	r24, 0x81	; 129
     a0a:	82 83       	std	Z+2, r24	; 0x02
	_limit_max = DRIVE_SPEED_MAX;
     a0c:	e9 81       	ldd	r30, Y+1	; 0x01
     a0e:	fa 81       	ldd	r31, Y+2	; 0x02
     a10:	8f e7       	ldi	r24, 0x7F	; 127
     a12:	83 83       	std	Z+3, r24	; 0x03

	_position = 0;
     a14:	e9 81       	ldd	r30, Y+1	; 0x01
     a16:	fa 81       	ldd	r31, Y+2	; 0x02
     a18:	15 82       	std	Z+5, r1	; 0x05
     a1a:	14 82       	std	Z+4, r1	; 0x04
	_step_size = 0;
     a1c:	e9 81       	ldd	r30, Y+1	; 0x01
     a1e:	fa 81       	ldd	r31, Y+2	; 0x02
     a20:	17 82       	std	Z+7, r1	; 0x07
     a22:	16 82       	std	Z+6, r1	; 0x06
	_step_count = 0;
     a24:	e9 81       	ldd	r30, Y+1	; 0x01
     a26:	fa 81       	ldd	r31, Y+2	; 0x02
     a28:	11 86       	std	Z+9, r1	; 0x09
     a2a:	10 86       	std	Z+8, r1	; 0x08

	_firsttime = true;
     a2c:	e9 81       	ldd	r30, Y+1	; 0x01
     a2e:	fa 81       	ldd	r31, Y+2	; 0x02
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	82 87       	std	Z+10, r24	; 0x0a
}
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	cf 91       	pop	r28
     a3e:	df 91       	pop	r29
     a40:	08 95       	ret

00000a42 <_ZN10SmartMotorC1ER5Servo>:
#include "smart_motor.h"


SmartMotor::SmartMotor(Servo &servo)
     a42:	df 93       	push	r29
     a44:	cf 93       	push	r28
     a46:	00 d0       	rcall	.+0      	; 0xa48 <_ZN10SmartMotorC1ER5Servo+0x6>
     a48:	00 d0       	rcall	.+0      	; 0xa4a <_ZN10SmartMotorC1ER5Servo+0x8>
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	9a 83       	std	Y+2, r25	; 0x02
     a50:	89 83       	std	Y+1, r24	; 0x01
     a52:	7c 83       	std	Y+4, r23	; 0x04
     a54:	6b 83       	std	Y+3, r22	; 0x03
{
	_servo = &servo;
     a56:	e9 81       	ldd	r30, Y+1	; 0x01
     a58:	fa 81       	ldd	r31, Y+2	; 0x02
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	9c 81       	ldd	r25, Y+4	; 0x04
     a5e:	91 83       	std	Z+1, r25	; 0x01
     a60:	80 83       	st	Z, r24

	_limit_min = DRIVE_SPEED_MIN;
     a62:	e9 81       	ldd	r30, Y+1	; 0x01
     a64:	fa 81       	ldd	r31, Y+2	; 0x02
     a66:	81 e8       	ldi	r24, 0x81	; 129
     a68:	82 83       	std	Z+2, r24	; 0x02
	_limit_max = DRIVE_SPEED_MAX;
     a6a:	e9 81       	ldd	r30, Y+1	; 0x01
     a6c:	fa 81       	ldd	r31, Y+2	; 0x02
     a6e:	8f e7       	ldi	r24, 0x7F	; 127
     a70:	83 83       	std	Z+3, r24	; 0x03

	_position = 0;
     a72:	e9 81       	ldd	r30, Y+1	; 0x01
     a74:	fa 81       	ldd	r31, Y+2	; 0x02
     a76:	15 82       	std	Z+5, r1	; 0x05
     a78:	14 82       	std	Z+4, r1	; 0x04
	_step_size = 0;
     a7a:	e9 81       	ldd	r30, Y+1	; 0x01
     a7c:	fa 81       	ldd	r31, Y+2	; 0x02
     a7e:	17 82       	std	Z+7, r1	; 0x07
     a80:	16 82       	std	Z+6, r1	; 0x06
	_step_count = 0;
     a82:	e9 81       	ldd	r30, Y+1	; 0x01
     a84:	fa 81       	ldd	r31, Y+2	; 0x02
     a86:	11 86       	std	Z+9, r1	; 0x09
     a88:	10 86       	std	Z+8, r1	; 0x08

	_firsttime = true;
     a8a:	e9 81       	ldd	r30, Y+1	; 0x01
     a8c:	fa 81       	ldd	r31, Y+2	; 0x02
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	82 87       	std	Z+10, r24	; 0x0a
}
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	cf 91       	pop	r28
     a9c:	df 91       	pop	r29
     a9e:	08 95       	ret

00000aa0 <_ZN10SmartMotor9set_limitEaa>:


void SmartMotor::set_limit(DRIVE_SPEED min, DRIVE_SPEED max)
     aa0:	df 93       	push	r29
     aa2:	cf 93       	push	r28
     aa4:	00 d0       	rcall	.+0      	; 0xaa6 <_ZN10SmartMotor9set_limitEaa+0x6>
     aa6:	00 d0       	rcall	.+0      	; 0xaa8 <_ZN10SmartMotor9set_limitEaa+0x8>
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	9a 83       	std	Y+2, r25	; 0x02
     aae:	89 83       	std	Y+1, r24	; 0x01
     ab0:	6b 83       	std	Y+3, r22	; 0x03
     ab2:	4c 83       	std	Y+4, r20	; 0x04
{
	_limit_min = min;
     ab4:	e9 81       	ldd	r30, Y+1	; 0x01
     ab6:	fa 81       	ldd	r31, Y+2	; 0x02
     ab8:	8b 81       	ldd	r24, Y+3	; 0x03
     aba:	82 83       	std	Z+2, r24	; 0x02
	_limit_max = max;
     abc:	e9 81       	ldd	r30, Y+1	; 0x01
     abe:	fa 81       	ldd	r31, Y+2	; 0x02
     ac0:	8c 81       	ldd	r24, Y+4	; 0x04
     ac2:	83 83       	std	Z+3, r24	; 0x03
}
     ac4:	0f 90       	pop	r0
     ac6:	0f 90       	pop	r0
     ac8:	0f 90       	pop	r0
     aca:	0f 90       	pop	r0
     acc:	cf 91       	pop	r28
     ace:	df 91       	pop	r29
     ad0:	08 95       	ret

00000ad2 <_ZN10SmartMotor9is_movingEv>:

	_step_size = ((pos - _position) / t) * (HEXAPOD_LOOP_DURATION / 1000);
	_step_count = (pos - _position) / _step_size;	
}

bool SmartMotor::is_moving()
     ad2:	df 93       	push	r29
     ad4:	cf 93       	push	r28
     ad6:	00 d0       	rcall	.+0      	; 0xad8 <_ZN10SmartMotor9is_movingEv+0x6>
     ad8:	0f 92       	push	r0
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	9a 83       	std	Y+2, r25	; 0x02
     ae0:	89 83       	std	Y+1, r24	; 0x01
{
	return _step_count != 0;
     ae2:	e9 81       	ldd	r30, Y+1	; 0x01
     ae4:	fa 81       	ldd	r31, Y+2	; 0x02
     ae6:	80 85       	ldd	r24, Z+8	; 0x08
     ae8:	91 85       	ldd	r25, Z+9	; 0x09
     aea:	1b 82       	std	Y+3, r1	; 0x03
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	11 f0       	breq	.+4      	; 0xaf4 <_ZN10SmartMotor9is_movingEv+0x22>
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	8b 83       	std	Y+3, r24	; 0x03
     af4:	8b 81       	ldd	r24, Y+3	; 0x03
}
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	cf 91       	pop	r28
     afe:	df 91       	pop	r29
     b00:	08 95       	ret

00000b02 <_ZN10SmartMotor12set_positionEai>:
	_limit_min = min;
	_limit_max = max;
}


void SmartMotor::set_position(DRIVE_SPEED position, int16_t t)
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	df 93       	push	r29
     b08:	cf 93       	push	r28
     b0a:	cd b7       	in	r28, 0x3d	; 61
     b0c:	de b7       	in	r29, 0x3e	; 62
     b0e:	29 97       	sbiw	r28, 0x09	; 9
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	f8 94       	cli
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	cd bf       	out	0x3d, r28	; 61
     b1a:	9c 83       	std	Y+4, r25	; 0x04
     b1c:	8b 83       	std	Y+3, r24	; 0x03
     b1e:	6d 83       	std	Y+5, r22	; 0x05
     b20:	5f 83       	std	Y+7, r21	; 0x07
     b22:	4e 83       	std	Y+6, r20	; 0x06
{
	position = (position < _limit_min)? _limit_min : position;
     b24:	eb 81       	ldd	r30, Y+3	; 0x03
     b26:	fc 81       	ldd	r31, Y+4	; 0x04
     b28:	92 81       	ldd	r25, Z+2	; 0x02
     b2a:	8d 81       	ldd	r24, Y+5	; 0x05
     b2c:	89 17       	cp	r24, r25
     b2e:	2c f4       	brge	.+10     	; 0xb3a <_ZN10SmartMotor12set_positionEai+0x38>
     b30:	eb 81       	ldd	r30, Y+3	; 0x03
     b32:	fc 81       	ldd	r31, Y+4	; 0x04
     b34:	82 81       	ldd	r24, Z+2	; 0x02
     b36:	89 87       	std	Y+9, r24	; 0x09
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <_ZN10SmartMotor12set_positionEai+0x3c>
     b3a:	8d 81       	ldd	r24, Y+5	; 0x05
     b3c:	89 87       	std	Y+9, r24	; 0x09
     b3e:	89 85       	ldd	r24, Y+9	; 0x09
     b40:	8d 83       	std	Y+5, r24	; 0x05
	position = (position > _limit_max)? _limit_max : position;
     b42:	eb 81       	ldd	r30, Y+3	; 0x03
     b44:	fc 81       	ldd	r31, Y+4	; 0x04
     b46:	93 81       	ldd	r25, Z+3	; 0x03
     b48:	8d 81       	ldd	r24, Y+5	; 0x05
     b4a:	98 17       	cp	r25, r24
     b4c:	2c f4       	brge	.+10     	; 0xb58 <_ZN10SmartMotor12set_positionEai+0x56>
     b4e:	eb 81       	ldd	r30, Y+3	; 0x03
     b50:	fc 81       	ldd	r31, Y+4	; 0x04
     b52:	83 81       	ldd	r24, Z+3	; 0x03
     b54:	88 87       	std	Y+8, r24	; 0x08
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <_ZN10SmartMotor12set_positionEai+0x5a>
     b58:	8d 81       	ldd	r24, Y+5	; 0x05
     b5a:	88 87       	std	Y+8, r24	; 0x08
     b5c:	88 85       	ldd	r24, Y+8	; 0x08
     b5e:	8d 83       	std	Y+5, r24	; 0x05

	int16_t pos = interpolate(position, DRIVE_SPEED_MIN, DRIVE_SPEED_MAX, -SMART_SPEED, SMART_SPEED);
     b60:	8d 81       	ldd	r24, Y+5	; 0x05
     b62:	99 27       	eor	r25, r25
     b64:	87 fd       	sbrc	r24, 7
     b66:	90 95       	com	r25
     b68:	61 e8       	ldi	r22, 0x81	; 129
     b6a:	7f ef       	ldi	r23, 0xFF	; 255
     b6c:	4f e7       	ldi	r20, 0x7F	; 127
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	28 e6       	ldi	r18, 0x68	; 104
     b72:	35 ec       	ldi	r19, 0xC5	; 197
     b74:	08 e9       	ldi	r16, 0x98	; 152
     b76:	1a e3       	ldi	r17, 0x3A	; 58
     b78:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <interpolate>
     b7c:	9a 83       	std	Y+2, r25	; 0x02
     b7e:	89 83       	std	Y+1, r24	; 0x01
	

	_step_size = ((pos - _position) / t) * (HEXAPOD_LOOP_DURATION / 1000);
     b80:	eb 81       	ldd	r30, Y+3	; 0x03
     b82:	fc 81       	ldd	r31, Y+4	; 0x04
     b84:	24 81       	ldd	r18, Z+4	; 0x04
     b86:	35 81       	ldd	r19, Z+5	; 0x05
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	9a 81       	ldd	r25, Y+2	; 0x02
     b8c:	82 1b       	sub	r24, r18
     b8e:	93 0b       	sbc	r25, r19
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	b9 01       	movw	r22, r18
     b96:	0e 94 94 1a 	call	0x3528	; 0x3528 <__divmodhi4>
     b9a:	cb 01       	movw	r24, r22
     b9c:	aa 27       	eor	r26, r26
     b9e:	97 fd       	sbrc	r25, 7
     ba0:	a0 95       	com	r26
     ba2:	ba 2f       	mov	r27, r26
     ba4:	24 e6       	ldi	r18, 0x64	; 100
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	50 e0       	ldi	r21, 0x00	; 0
     bac:	bc 01       	movw	r22, r24
     bae:	cd 01       	movw	r24, r26
     bb0:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__mulsi3>
     bb4:	dc 01       	movw	r26, r24
     bb6:	cb 01       	movw	r24, r22
     bb8:	eb 81       	ldd	r30, Y+3	; 0x03
     bba:	fc 81       	ldd	r31, Y+4	; 0x04
     bbc:	97 83       	std	Z+7, r25	; 0x07
     bbe:	86 83       	std	Z+6, r24	; 0x06
	_step_count = (pos - _position) / _step_size;	
     bc0:	eb 81       	ldd	r30, Y+3	; 0x03
     bc2:	fc 81       	ldd	r31, Y+4	; 0x04
     bc4:	24 81       	ldd	r18, Z+4	; 0x04
     bc6:	35 81       	ldd	r19, Z+5	; 0x05
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	9a 81       	ldd	r25, Y+2	; 0x02
     bcc:	82 1b       	sub	r24, r18
     bce:	93 0b       	sbc	r25, r19
     bd0:	eb 81       	ldd	r30, Y+3	; 0x03
     bd2:	fc 81       	ldd	r31, Y+4	; 0x04
     bd4:	26 81       	ldd	r18, Z+6	; 0x06
     bd6:	37 81       	ldd	r19, Z+7	; 0x07
     bd8:	b9 01       	movw	r22, r18
     bda:	0e 94 94 1a 	call	0x3528	; 0x3528 <__divmodhi4>
     bde:	cb 01       	movw	r24, r22
     be0:	eb 81       	ldd	r30, Y+3	; 0x03
     be2:	fc 81       	ldd	r31, Y+4	; 0x04
     be4:	91 87       	std	Z+9, r25	; 0x09
     be6:	80 87       	std	Z+8, r24	; 0x08
}
     be8:	29 96       	adiw	r28, 0x09	; 9
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	08 95       	ret
class Actuator{
public:
	Actuator(__ACTUATOR* cstr){
		m_cstr = cstr;
	}
	void setSpeed(DRIVE_SPEED speed){
     bfe:	df 93       	push	r29
     c00:	cf 93       	push	r28
     c02:	00 d0       	rcall	.+0      	; 0xc04 <_ZN10SmartMotor12set_positionEai+0x102>
     c04:	0f 92       	push	r0
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	9a 83       	std	Y+2, r25	; 0x02
     c0c:	89 83       	std	Y+1, r24	; 0x01
     c0e:	6b 83       	std	Y+3, r22	; 0x03
		__act_setSpeed(m_cstr,speed);
     c10:	e9 81       	ldd	r30, Y+1	; 0x01
     c12:	fa 81       	ldd	r31, Y+2	; 0x02
     c14:	80 81       	ld	r24, Z
     c16:	91 81       	ldd	r25, Z+1	; 0x01
     c18:	6b 81       	ldd	r22, Y+3	; 0x03
     c1a:	0e 94 9e 0a 	call	0x153c	; 0x153c <__act_setSpeed>
	}
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	cf 91       	pop	r28
     c26:	df 91       	pop	r29
     c28:	08 95       	ret

00000c2a <_ZN10SmartMotor7computeEv>:
		} 
			uart1.write('\r');
			uart1.write('\n');
}

void SmartMotor::compute()
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	00 d0       	rcall	.+0      	; 0xc34 <_ZN10SmartMotor7computeEv+0xa>
     c34:	00 d0       	rcall	.+0      	; 0xc36 <_ZN10SmartMotor7computeEv+0xc>
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	9c 83       	std	Y+4, r25	; 0x04
     c3c:	8b 83       	std	Y+3, r24	; 0x03
{
	if(_firsttime == true)
     c3e:	eb 81       	ldd	r30, Y+3	; 0x03
     c40:	fc 81       	ldd	r31, Y+4	; 0x04
     c42:	82 85       	ldd	r24, Z+10	; 0x0a
     c44:	88 2f       	mov	r24, r24
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	2f ef       	ldi	r18, 0xFF	; 255
     c4a:	8f 3f       	cpi	r24, 0xFF	; 255
     c4c:	92 07       	cpc	r25, r18
     c4e:	51 f4       	brne	.+20     	; 0xc64 <_ZN10SmartMotor7computeEv+0x3a>
	{
		_servo->setSpeed(0);
     c50:	eb 81       	ldd	r30, Y+3	; 0x03
     c52:	fc 81       	ldd	r31, Y+4	; 0x04
     c54:	80 81       	ld	r24, Z
     c56:	91 81       	ldd	r25, Z+1	; 0x01
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN8Actuator8setSpeedEa>
		_firsttime = false;
     c5e:	eb 81       	ldd	r30, Y+3	; 0x03
     c60:	fc 81       	ldd	r31, Y+4	; 0x04
     c62:	12 86       	std	Z+10, r1	; 0x0a
	}
	if(_step_count > 0)
     c64:	eb 81       	ldd	r30, Y+3	; 0x03
     c66:	fc 81       	ldd	r31, Y+4	; 0x04
     c68:	80 85       	ldd	r24, Z+8	; 0x08
     c6a:	91 85       	ldd	r25, Z+9	; 0x09
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	79 f1       	breq	.+94     	; 0xcce <_ZN10SmartMotor7computeEv+0xa4>
	{
		_position = _position + _step_size;
     c70:	eb 81       	ldd	r30, Y+3	; 0x03
     c72:	fc 81       	ldd	r31, Y+4	; 0x04
     c74:	24 81       	ldd	r18, Z+4	; 0x04
     c76:	35 81       	ldd	r19, Z+5	; 0x05
     c78:	eb 81       	ldd	r30, Y+3	; 0x03
     c7a:	fc 81       	ldd	r31, Y+4	; 0x04
     c7c:	86 81       	ldd	r24, Z+6	; 0x06
     c7e:	97 81       	ldd	r25, Z+7	; 0x07
     c80:	82 0f       	add	r24, r18
     c82:	93 1f       	adc	r25, r19
     c84:	eb 81       	ldd	r30, Y+3	; 0x03
     c86:	fc 81       	ldd	r31, Y+4	; 0x04
     c88:	95 83       	std	Z+5, r25	; 0x05
     c8a:	84 83       	std	Z+4, r24	; 0x04
		int16_t i = interpolate(_position, -SMART_SPEED, SMART_SPEED, DRIVE_SPEED_MIN, DRIVE_SPEED_MAX);
     c8c:	eb 81       	ldd	r30, Y+3	; 0x03
     c8e:	fc 81       	ldd	r31, Y+4	; 0x04
     c90:	84 81       	ldd	r24, Z+4	; 0x04
     c92:	95 81       	ldd	r25, Z+5	; 0x05
     c94:	68 e6       	ldi	r22, 0x68	; 104
     c96:	75 ec       	ldi	r23, 0xC5	; 197
     c98:	48 e9       	ldi	r20, 0x98	; 152
     c9a:	5a e3       	ldi	r21, 0x3A	; 58
     c9c:	21 e8       	ldi	r18, 0x81	; 129
     c9e:	3f ef       	ldi	r19, 0xFF	; 255
     ca0:	0f e7       	ldi	r16, 0x7F	; 127
     ca2:	10 e0       	ldi	r17, 0x00	; 0
     ca4:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <interpolate>
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
		_servo->setSpeed(i);
     cac:	eb 81       	ldd	r30, Y+3	; 0x03
     cae:	fc 81       	ldd	r31, Y+4	; 0x04
     cb0:	80 81       	ld	r24, Z
     cb2:	91 81       	ldd	r25, Z+1	; 0x01
     cb4:	29 81       	ldd	r18, Y+1	; 0x01
     cb6:	62 2f       	mov	r22, r18
     cb8:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN8Actuator8setSpeedEa>
		//print(i);
		_step_count--;
     cbc:	eb 81       	ldd	r30, Y+3	; 0x03
     cbe:	fc 81       	ldd	r31, Y+4	; 0x04
     cc0:	80 85       	ldd	r24, Z+8	; 0x08
     cc2:	91 85       	ldd	r25, Z+9	; 0x09
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	eb 81       	ldd	r30, Y+3	; 0x03
     cc8:	fc 81       	ldd	r31, Y+4	; 0x04
     cca:	91 87       	std	Z+9, r25	; 0x09
     ccc:	80 87       	std	Z+8, r24	; 0x08
	}

}
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	08 95       	ret

00000ce0 <_ZN4Uart5writeEh>:
	operator UART*() const{
		return m_cstr;
	}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <_ZN4Uart5writeEh+0x6>
     ce6:	0f 92       	push	r0
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	9a 83       	std	Y+2, r25	; 0x02
     cee:	89 83       	std	Y+1, r24	; 0x01
     cf0:	6b 83       	std	Y+3, r22	; 0x03
		return _uartSendByte(m_cstr, data);
     cf2:	e9 81       	ldd	r30, Y+1	; 0x01
     cf4:	fa 81       	ldd	r31, Y+2	; 0x02
     cf6:	80 89       	ldd	r24, Z+16	; 0x10
     cf8:	91 89       	ldd	r25, Z+17	; 0x11
     cfa:	6b 81       	ldd	r22, Y+3	; 0x03
     cfc:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <_uartSendByte>
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
	}
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <_ZN10SmartMotor5printEi>:
bool SmartMotor::is_moving()
{
	return _step_count != 0;
}

void SmartMotor::print(int16_t i)
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	64 97       	sbiw	r28, 0x14	; 20
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	9a 8b       	std	Y+18, r25	; 0x12
     d26:	89 8b       	std	Y+17, r24	; 0x11
     d28:	7c 8b       	std	Y+20, r23	; 0x14
     d2a:	6b 8b       	std	Y+19, r22	; 0x13
{
		char str[10];
		for(int j=0;j<10;j++)
     d2c:	1c 82       	std	Y+4, r1	; 0x04
     d2e:	1b 82       	std	Y+3, r1	; 0x03
     d30:	0d c0       	rjmp	.+26     	; 0xd4c <_ZN10SmartMotor5printEi+0x3c>
			str[j] = 0;
     d32:	2b 81       	ldd	r18, Y+3	; 0x03
     d34:	3c 81       	ldd	r19, Y+4	; 0x04
     d36:	ce 01       	movw	r24, r28
     d38:	07 96       	adiw	r24, 0x07	; 7
     d3a:	fc 01       	movw	r30, r24
     d3c:	e2 0f       	add	r30, r18
     d3e:	f3 1f       	adc	r31, r19
     d40:	10 82       	st	Z, r1
}

void SmartMotor::print(int16_t i)
{
		char str[10];
		for(int j=0;j<10;j++)
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	9c 81       	ldd	r25, Y+4	; 0x04
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	9c 83       	std	Y+4, r25	; 0x04
     d4a:	8b 83       	std	Y+3, r24	; 0x03
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	9c 81       	ldd	r25, Y+4	; 0x04
     d50:	8a 30       	cpi	r24, 0x0A	; 10
     d52:	91 05       	cpc	r25, r1
     d54:	74 f3       	brlt	.-36     	; 0xd32 <_ZN10SmartMotor5printEi+0x22>
			str[j] = 0;
		char *p = str;
     d56:	ce 01       	movw	r24, r28
     d58:	07 96       	adiw	r24, 0x07	; 7
     d5a:	9e 83       	std	Y+6, r25	; 0x06
     d5c:	8d 83       	std	Y+5, r24	; 0x05
		p=itoa(i, (char*)str, 10);
     d5e:	8b 89       	ldd	r24, Y+19	; 0x13
     d60:	9c 89       	ldd	r25, Y+20	; 0x14
     d62:	9e 01       	movw	r18, r28
     d64:	29 5f       	subi	r18, 0xF9	; 249
     d66:	3f 4f       	sbci	r19, 0xFF	; 255
     d68:	b9 01       	movw	r22, r18
     d6a:	4a e0       	ldi	r20, 0x0A	; 10
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	0e 94 89 19 	call	0x3312	; 0x3312 <itoa>
     d72:	9e 83       	std	Y+6, r25	; 0x06
     d74:	8d 83       	std	Y+5, r24	; 0x05
		for(int j=0;j<10;j++)
     d76:	1a 82       	std	Y+2, r1	; 0x02
     d78:	19 82       	std	Y+1, r1	; 0x01
     d7a:	12 c0       	rjmp	.+36     	; 0xda0 <_ZN10SmartMotor5printEi+0x90>
		{
			uart1.write(p[j]);
     d7c:	29 81       	ldd	r18, Y+1	; 0x01
     d7e:	3a 81       	ldd	r19, Y+2	; 0x02
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	fc 01       	movw	r30, r24
     d86:	e2 0f       	add	r30, r18
     d88:	f3 1f       	adc	r31, r19
     d8a:	20 81       	ld	r18, Z
     d8c:	83 ed       	ldi	r24, 0xD3	; 211
     d8e:	93 e0       	ldi	r25, 0x03	; 3
     d90:	62 2f       	mov	r22, r18
     d92:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN4Uart5writeEh>
		char str[10];
		for(int j=0;j<10;j++)
			str[j] = 0;
		char *p = str;
		p=itoa(i, (char*)str, 10);
		for(int j=0;j<10;j++)
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	9a 83       	std	Y+2, r25	; 0x02
     d9e:	89 83       	std	Y+1, r24	; 0x01
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	8a 30       	cpi	r24, 0x0A	; 10
     da6:	91 05       	cpc	r25, r1
     da8:	4c f3       	brlt	.-46     	; 0xd7c <_ZN10SmartMotor5printEi+0x6c>
		{
			uart1.write(p[j]);
		} 
			uart1.write('\r');
     daa:	83 ed       	ldi	r24, 0xD3	; 211
     dac:	93 e0       	ldi	r25, 0x03	; 3
     dae:	6d e0       	ldi	r22, 0x0D	; 13
     db0:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN4Uart5writeEh>
			uart1.write('\n');
     db4:	83 ed       	ldi	r24, 0xD3	; 211
     db6:	93 e0       	ldi	r25, 0x03	; 3
     db8:	6a e0       	ldi	r22, 0x0A	; 10
     dba:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN4Uart5writeEh>
}
     dbe:	64 96       	adiw	r28, 0x14	; 20
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <marquee_put_char>:
static MAKE_WRITER(marquee_put_char); /* Fwd Def */
MARQUEE _marquee_ = MAKE_MARQUEE(marquee_list,500000,2000000,&marquee_put_char);
// Create a Writer to write to marquee
// Do NOT call it directly instead, to write the char 'A' use:
// 	marqueeGetWriter(&marquee)('A');
static MAKE_WRITER(marquee_put_char){ /* createWriter */
     dd0:	68 2f       	mov	r22, r24
	return marqueeSendByte(&_marquee_,byte);
     dd2:	8d e4       	ldi	r24, 0x4D	; 77
     dd4:	92 e0       	ldi	r25, 0x02	; 2
     dd6:	0e 94 b9 0c 	call	0x1972	; 0x1972 <marqueeSendByte>
}
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	08 95       	ret

00000dde <registerLED>:
static __inline__ void LED_off(LED* led){
	LED_set(led,FALSE);
}

static __inline__ void statusLEDregister(const IOPin* pin, boolean activeHigh){
	statusLED.pin = pin;
     dde:	8b e0       	ldi	r24, 0x0B	; 11
     de0:	93 e0       	ldi	r25, 0x03	; 3
     de2:	90 93 1f 04 	sts	0x041F, r25
     de6:	80 93 1e 04 	sts	0x041E, r24
	statusLED.activeHigh = activeHigh;
     dea:	80 91 20 04 	lds	r24, 0x0420
	statusLED.initialised=FALSE;
     dee:	8c 7f       	andi	r24, 0xFC	; 252
     df0:	80 93 20 04 	sts	0x0420, r24


void LED_set(LED* led,	boolean value);

static __inline__ void LED_on(LED* led){
	LED_set(led,TRUE);
     df4:	8e e1       	ldi	r24, 0x1E	; 30
     df6:	94 e0       	ldi	r25, 0x04	; 4
     df8:	6f ef       	ldi	r22, 0xFF	; 255
     dfa:	0e 94 2f 0c 	call	0x185e	; 0x185e <LED_set>
void initHardware(void){
	servoPWMInit(&_bank1_);
}
void registerLED(void){
	statusLEDregister(C1,false);
}
     dfe:	08 95       	ret

00000e00 <initHardware>:
	//segled_init(&_led_display_);
}

// ----------- Initialise my added devices ------
void initHardware(void){
	servoPWMInit(&_bank1_);
     e00:	86 ea       	ldi	r24, 0xA6	; 166
     e02:	92 e0       	ldi	r25, 0x02	; 2
     e04:	0e 94 81 09 	call	0x1302	; 0x1302 <servoPWMInit>
}
     e08:	08 95       	ret

00000e0a <sysInitHardware>:
static __inline__ boolean SWITCH_released(SWITCH* sw){
	return pin_is_high(sw->pin);
}

static __inline__ void SWITCH_init(SWITCH *sw){
	pin_make_input(sw->pin,TRUE);
     e0a:	80 91 3a 02 	lds	r24, 0x023A
     e0e:	90 91 3b 02 	lds	r25, 0x023B
     e12:	6f ef       	ldi	r22, 0xFF	; 255
     e14:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <pin_make_input>
// ----------- Initialise built in devices ------
void sysInitHardware(void){
	SWITCH_init(&_button_);
//	setErrorLog(&uart1SendByte);
	//rprintfInit(&uart1SendByte);
	uartInit(_C_uart1,115200);
     e18:	88 e0       	ldi	r24, 0x08	; 8
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	52 ec       	ldi	r21, 0xC2	; 194
     e20:	61 e0       	ldi	r22, 0x01	; 1
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_uartInit>
// ----------- Register the statusLED -----------
	//segled_init(&_led_display_);
}
     e28:	08 95       	ret

00000e2a <__vector_36>:
#endif

#ifndef USART1_RX_vect
# error Uart1 Rx complete vector undefined
#else
ISR(USART1_RX_vect){
     e2a:	1f 92       	push	r1
     e2c:	0f 92       	push	r0
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	0f 92       	push	r0
     e32:	11 24       	eor	r1, r1
     e34:	2f 93       	push	r18
     e36:	3f 93       	push	r19
     e38:	4f 93       	push	r20
     e3a:	5f 93       	push	r21
     e3c:	6f 93       	push	r22
     e3e:	7f 93       	push	r23
     e40:	8f 93       	push	r24
     e42:	9f 93       	push	r25
     e44:	af 93       	push	r26
     e46:	bf 93       	push	r27
     e48:	ef 93       	push	r30
     e4a:	ff 93       	push	r31
	uartReceiveService(_C_uart1);
     e4c:	e0 91 34 02 	lds	r30, 0x0234
     e50:	f0 91 35 02 	lds	r31, 0x0235
     e54:	60 81       	ld	r22, Z
     e56:	88 e0       	ldi	r24, 0x08	; 8
     e58:	92 e0       	ldi	r25, 0x02	; 2
     e5a:	0e 94 ba 10 	call	0x2174	; 0x2174 <__uartReceiveService>
}
     e5e:	ff 91       	pop	r31
     e60:	ef 91       	pop	r30
     e62:	bf 91       	pop	r27
     e64:	af 91       	pop	r26
     e66:	9f 91       	pop	r25
     e68:	8f 91       	pop	r24
     e6a:	7f 91       	pop	r23
     e6c:	6f 91       	pop	r22
     e6e:	5f 91       	pop	r21
     e70:	4f 91       	pop	r20
     e72:	3f 91       	pop	r19
     e74:	2f 91       	pop	r18
     e76:	0f 90       	pop	r0
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	0f 90       	pop	r0
     e7c:	1f 90       	pop	r1
     e7e:	18 95       	reti

00000e80 <__vector_38>:
HW_UART __C_uart1 = MAKE_UART_BUFFERED(null,null,UCSR1A,UCSR1B,UBRR1L,UBRR1H,UDR1,null,BV(U2X1),D2,D3,&uart1GetByte,&uart1SendByte);

#ifndef USART1_TX_vect
# error Uart1 Tx complete vector undefined
#else
ISR(USART1_TX_vect){
     e80:	1f 92       	push	r1
     e82:	0f 92       	push	r0
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	0f 92       	push	r0
     e88:	11 24       	eor	r1, r1
     e8a:	2f 93       	push	r18
     e8c:	3f 93       	push	r19
     e8e:	4f 93       	push	r20
     e90:	5f 93       	push	r21
     e92:	6f 93       	push	r22
     e94:	7f 93       	push	r23
     e96:	8f 93       	push	r24
     e98:	9f 93       	push	r25
     e9a:	af 93       	push	r26
     e9c:	bf 93       	push	r27
     e9e:	ef 93       	push	r30
     ea0:	ff 93       	push	r31
	uartTransmitService(_C_uart1);
     ea2:	88 e0       	ldi	r24, 0x08	; 8
     ea4:	92 e0       	ldi	r25, 0x02	; 2
     ea6:	0e 94 65 11 	call	0x22ca	; 0x22ca <__uartTransmitService>
}
     eaa:	ff 91       	pop	r31
     eac:	ef 91       	pop	r30
     eae:	bf 91       	pop	r27
     eb0:	af 91       	pop	r26
     eb2:	9f 91       	pop	r25
     eb4:	8f 91       	pop	r24
     eb6:	7f 91       	pop	r23
     eb8:	6f 91       	pop	r22
     eba:	5f 91       	pop	r21
     ebc:	4f 91       	pop	r20
     ebe:	3f 91       	pop	r19
     ec0:	2f 91       	pop	r18
     ec2:	0f 90       	pop	r0
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	0f 90       	pop	r0
     ec8:	1f 90       	pop	r1
     eca:	18 95       	reti

00000ecc <uart1GetByte>:
}

// Create a routine to read a byte from uart1
// Returns -1 if there was no data
MAKE_READER( uart1GetByte){
	return uartGetByte(_C_uart1);
     ecc:	88 e0       	ldi	r24, 0x08	; 8
     ece:	92 e0       	ldi	r25, 0x02	; 2
     ed0:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__uartGetByte>
}
     ed4:	08 95       	ret

00000ed6 <uart1SendByte>:

// ------------------- uart1 -------------------

// Create a routine to write bytes to uart1
// You can set rprintf to use it by calling rprintfInit(&uart1SendByte)
MAKE_WRITER(uart1SendByte){
     ed6:	68 2f       	mov	r22, r24
	return uartSendByte(_C_uart1,byte);
     ed8:	88 e0       	ldi	r24, 0x08	; 8
     eda:	92 e0       	ldi	r25, 0x02	; 2
     edc:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <_uartSendByte>
}
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	08 95       	ret

00000ee4 <clockGetSnapshot>:
#define STATUS_LED_DDR   DDRC		
#define STATUS_LED_PIN   PC1		
static uint8_t counter;
		

void clockGetSnapshot(TIMER_SNAPSHOT* snapshot){
     ee4:	fc 01       	movw	r30, r24
	// Clock timer uses TIMER_MODE_CTC_OCR which generate compare interrupts on channel A
	CRITICAL_SECTION{
     ee6:	6f b7       	in	r22, 0x3f	; 63
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
     ee8:	f8 94       	cli
		// get the current ticks from the timer
		uint16_t tcnt = TCNT5;
     eea:	80 91 24 01 	lds	r24, 0x0124
     eee:	90 91 25 01 	lds	r25, 0x0125
		// get the number of whole ticks
		snapshot->whole  = wholeTicks;
     ef2:	20 91 a8 03 	lds	r18, 0x03A8
     ef6:	30 91 a9 03 	lds	r19, 0x03A9
     efa:	40 91 aa 03 	lds	r20, 0x03AA
     efe:	50 91 ab 03 	lds	r21, 0x03AB
     f02:	20 83       	st	Z, r18
     f04:	31 83       	std	Z+1, r19	; 0x01
     f06:	42 83       	std	Z+2, r20	; 0x02
     f08:	53 83       	std	Z+3, r21	; 0x03
		// get the current ticks again
		snapshot->part   = TCNT5;
     f0a:	20 91 24 01 	lds	r18, 0x0124
     f0e:	30 91 25 01 	lds	r19, 0x0125
     f12:	35 83       	std	Z+5, r19	; 0x05
     f14:	24 83       	std	Z+4, r18	; 0x04
		// If the second reading of tcnt has gone down then there must have been an overflow
		// since reading the 'rtn' value. Or there may be a pending interrupt which may be
		// because interrupts are currently turned off. In either case increment the 'rtn' value
		// as if the interrupt has happened
		if(snapshot->part < tcnt || CLOCK_INT_PENDING ){
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	10 f0       	brcs	.+4      	; 0xf20 <clockGetSnapshot+0x3c>
     f1c:	d1 9b       	sbis	0x1a, 1	; 26
     f1e:	12 c0       	rjmp	.+36     	; 0xf44 <clockGetSnapshot+0x60>
			snapshot->whole += usPerTop;
     f20:	80 81       	ld	r24, Z
     f22:	91 81       	ldd	r25, Z+1	; 0x01
     f24:	a2 81       	ldd	r26, Z+2	; 0x02
     f26:	b3 81       	ldd	r27, Z+3	; 0x03
     f28:	80 50       	subi	r24, 0x00	; 0
     f2a:	93 48       	sbci	r25, 0x83	; 131
     f2c:	af 4f       	sbci	r26, 0xFF	; 255
     f2e:	bf 4f       	sbci	r27, 0xFF	; 255
     f30:	80 83       	st	Z, r24
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	a2 83       	std	Z+2, r26	; 0x02
     f36:	b3 83       	std	Z+3, r27	; 0x03
			// get the current ticks again
			snapshot->part = TCNT5;
     f38:	80 91 24 01 	lds	r24, 0x0124
     f3c:	90 91 25 01 	lds	r25, 0x0125
     f40:	95 83       	std	Z+5, r25	; 0x05
     f42:	84 83       	std	Z+4, r24	; 0x04
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
     f44:	6f bf       	out	0x3f, r22	; 63
		}
	}
}
     f46:	08 95       	ret

00000f48 <clockSnapshotToTicks>:

TICK_COUNT clockSnapshotToTicks(const TIMER_SNAPSHOT* snapshot){
     f48:	ef 92       	push	r14
     f4a:	ff 92       	push	r15
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	fc 01       	movw	r30, r24
	TICK_COUNT rtn = snapshot->whole;
     f52:	e0 80       	ld	r14, Z
     f54:	f1 80       	ldd	r15, Z+1	; 0x01
     f56:	02 81       	ldd	r16, Z+2	; 0x02
     f58:	13 81       	ldd	r17, Z+3	; 0x03

	// top = usPerTop
	// part     x
	TICK_COUNT frac  = snapshot->part;
     f5a:	64 81       	ldd	r22, Z+4	; 0x04
     f5c:	75 81       	ldd	r23, Z+5	; 0x05
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
	frac *= usPerTop;
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	3d e7       	ldi	r19, 0x7D	; 125
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__mulsi3>
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	3a ef       	ldi	r19, 0xFA	; 250
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	0e 94 a7 1a 	call	0x354e	; 0x354e <__udivmodsi4>
     f7a:	2e 0d       	add	r18, r14
     f7c:	3f 1d       	adc	r19, r15
     f7e:	40 1f       	adc	r20, r16
     f80:	51 1f       	adc	r21, r17
	frac /= CLOCK_TOP;

	rtn += frac;

	return rtn;
}
     f82:	b9 01       	movw	r22, r18
     f84:	ca 01       	movw	r24, r20
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	ff 90       	pop	r15
     f8c:	ef 90       	pop	r14
     f8e:	08 95       	ret

00000f90 <clockGetus>:

// Get the current clock time in uS
TICK_COUNT clockGetus(void){
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <clockGetus+0xa>
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <clockGetus+0xc>
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <clockGetus+0xe>
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
	TIMER_SNAPSHOT snapshot;
	clockGetSnapshot(&snapshot);
     fa2:	8e 01       	movw	r16, r28
     fa4:	0f 5f       	subi	r16, 0xFF	; 255
     fa6:	1f 4f       	sbci	r17, 0xFF	; 255
     fa8:	c8 01       	movw	r24, r16
     faa:	0e 94 72 07 	call	0xee4	; 0xee4 <clockGetSnapshot>

	return clockSnapshotToTicks(&snapshot);
     fae:	c8 01       	movw	r24, r16
     fb0:	0e 94 a4 07 	call	0xf48	; 0xf48 <clockSnapshotToTicks>
}
     fb4:	26 96       	adiw	r28, 0x06	; 6
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	08 95       	ret

00000fca <__clockInit>:

// Initialise the clock timer and turn it on
void __clockInit(void){
	// Set interrupt pending = false
	CLOCK_INT_CLEAR;
     fca:	d1 9a       	sbi	0x1a, 1	; 26
	
	// Enable interrupts
	CLOCK_INT_ENABLE;
     fcc:	e3 e7       	ldi	r30, 0x73	; 115
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	82 60       	ori	r24, 0x02	; 2
     fd4:	80 83       	st	Z, r24
}
     fd6:	08 95       	ret

00000fd8 <__vector_47>:

// ISR for clock overflow. Occurs every msPerTop
ISR(TIMER5_COMPA_vect) {
     fd8:	1f 92       	push	r1
     fda:	0f 92       	push	r0
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	0f 92       	push	r0
     fe0:	11 24       	eor	r1, r1
     fe2:	2f 93       	push	r18
     fe4:	8f 93       	push	r24
     fe6:	9f 93       	push	r25
     fe8:	af 93       	push	r26
     fea:	bf 93       	push	r27
	wholeTicks += usPerTop;
     fec:	80 91 a8 03 	lds	r24, 0x03A8
     ff0:	90 91 a9 03 	lds	r25, 0x03A9
     ff4:	a0 91 aa 03 	lds	r26, 0x03AA
     ff8:	b0 91 ab 03 	lds	r27, 0x03AB
     ffc:	80 50       	subi	r24, 0x00	; 0
     ffe:	93 48       	sbci	r25, 0x83	; 131
    1000:	af 4f       	sbci	r26, 0xFF	; 255
    1002:	bf 4f       	sbci	r27, 0xFF	; 255
    1004:	80 93 a8 03 	sts	0x03A8, r24
    1008:	90 93 a9 03 	sts	0x03A9, r25
    100c:	a0 93 aa 03 	sts	0x03AA, r26
    1010:	b0 93 ab 03 	sts	0x03AB, r27

	
	// Flash the status led if there is an error
	ERROR* err = &__error;
	if(err->errorCode && bit_is_set(STATUS_LED_DDR,STATUS_LED_PIN)){
    1014:	20 91 19 04 	lds	r18, 0x0419
    1018:	22 23       	and	r18, r18
    101a:	b9 f1       	breq	.+110    	; 0x108a <__vector_47+0xb2>
    101c:	39 9b       	sbis	0x07, 1	; 7
    101e:	35 c0       	rjmp	.+106    	; 0x108a <__vector_47+0xb2>
		// There is an error and status led pin is an output

		// Decrement any counter
		if(counter){
    1020:	80 91 ac 03 	lds	r24, 0x03AC
    1024:	88 23       	and	r24, r24
    1026:	19 f0       	breq	.+6      	; 0x102e <__vector_47+0x56>
			counter--;
    1028:	81 50       	subi	r24, 0x01	; 1
    102a:	80 93 ac 03 	sts	0x03AC, r24
		}
		if(counter==0){
    102e:	80 91 ac 03 	lds	r24, 0x03AC
    1032:	88 23       	and	r24, r24
    1034:	51 f5       	brne	.+84     	; 0x108a <__vector_47+0xb2>
			// Its time to do something
			if(err->remaining==0){
    1036:	80 91 1a 04 	lds	r24, 0x041A
    103a:	88 23       	and	r24, r24
    103c:	59 f4       	brne	.+22     	; 0x1054 <__vector_47+0x7c>
				err->remaining = ABS(err->errorCode);
    103e:	82 2f       	mov	r24, r18
    1040:	99 27       	eor	r25, r25
    1042:	87 fd       	sbrc	r24, 7
    1044:	90 95       	com	r25
    1046:	97 ff       	sbrs	r25, 7
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <__vector_47+0x78>
    104a:	90 95       	com	r25
    104c:	81 95       	neg	r24
    104e:	9f 4f       	sbci	r25, 0xFF	; 255
    1050:	80 93 1a 04 	sts	0x041A, r24
			}

			uint8_t delay = (err->errorCode < 0 ) ? 250/msPerTop : 500/msPerTop;
    1054:	27 fd       	sbrc	r18, 7
    1056:	02 c0       	rjmp	.+4      	; 0x105c <__vector_47+0x84>
    1058:	9f e0       	ldi	r25, 0x0F	; 15
    105a:	01 c0       	rjmp	.+2      	; 0x105e <__vector_47+0x86>
    105c:	97 e0       	ldi	r25, 0x07	; 7
			if(err->phase){
    105e:	20 91 1b 04 	lds	r18, 0x041B
    1062:	22 23       	and	r18, r18
    1064:	41 f0       	breq	.+16     	; 0x1076 <__vector_47+0x9e>
				// turn led off
				if(-- err->remaining == 0){
    1066:	80 91 1a 04 	lds	r24, 0x041A
    106a:	81 50       	subi	r24, 0x01	; 1
    106c:	80 93 1a 04 	sts	0x041A, r24
    1070:	88 23       	and	r24, r24
    1072:	09 f4       	brne	.+2      	; 0x1076 <__vector_47+0x9e>
    1074:	9e e3       	ldi	r25, 0x3E	; 62
					delay = 2000/msPerTop;
				}
			}else{
				// turn led on
			}
			err->phase = !err->phase;
    1076:	10 92 1b 04 	sts	0x041B, r1
    107a:	22 23       	and	r18, r18
    107c:	19 f4       	brne	.+6      	; 0x1084 <__vector_47+0xac>
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	80 93 1b 04 	sts	0x041B, r24
			counter = delay;
    1084:	90 93 ac 03 	sts	0x03AC, r25
			// toggle the LED
			sbi(STATUS_LED_INPUT,STATUS_LED_PIN);
    1088:	31 9a       	sbi	0x06, 1	; 6
		}
	}
	
}
    108a:	bf 91       	pop	r27
    108c:	af 91       	pop	r26
    108e:	9f 91       	pop	r25
    1090:	8f 91       	pop	r24
    1092:	2f 91       	pop	r18
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <_ZN6Stream4_putEcP6__file>:
	/* function to write one char to device
	 * Called directly from the C FILE code
	 * when using commands from stdio.h
	 * This is passed on to the write of our C++ object
	 */
	static int	_put(char c, STREAM *s){
    109e:	28 2f       	mov	r18, r24
		Stream* str = (Stream*)s;
    10a0:	61 15       	cp	r22, r1
    10a2:	71 05       	cpc	r23, r1
    10a4:	19 f4       	brne	.+6      	; 0x10ac <_ZN6Stream4_putEcP6__file+0xe>
    10a6:	a0 e0       	ldi	r26, 0x00	; 0
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <_ZN6Stream4_putEcP6__file+0x12>
    10ac:	db 01       	movw	r26, r22
    10ae:	12 97       	sbiw	r26, 0x02	; 2
		return str->write((uint8_t)c);
    10b0:	ed 91       	ld	r30, X+
    10b2:	fc 91       	ld	r31, X
    10b4:	11 97       	sbiw	r26, 0x01	; 1
    10b6:	01 90       	ld	r0, Z+
    10b8:	f0 81       	ld	r31, Z
    10ba:	e0 2d       	mov	r30, r0
    10bc:	cd 01       	movw	r24, r26
    10be:	62 2f       	mov	r22, r18
    10c0:	09 95       	icall
	}
    10c2:	08 95       	ret

000010c4 <_ZN6Stream4_getEP6__file>:
	 * Called directly from the C FILE code
	 * when using commands from stdio.h
	 * This is passed on to the read of our C++ object
	 */
	static int	_get(STREAM *s){
		Stream* str = (Stream*)s;
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	19 f4       	brne	.+6      	; 0x10ce <_ZN6Stream4_getEP6__file+0xa>
    10c8:	a0 e0       	ldi	r26, 0x00	; 0
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <_ZN6Stream4_getEP6__file+0xe>
    10ce:	dc 01       	movw	r26, r24
    10d0:	12 97       	sbiw	r26, 0x02	; 2
		return str->read();
    10d2:	ed 91       	ld	r30, X+
    10d4:	fc 91       	ld	r31, X
    10d6:	11 97       	sbiw	r26, 0x01	; 1
    10d8:	02 80       	ldd	r0, Z+2	; 0x02
    10da:	f3 81       	ldd	r31, Z+3	; 0x03
    10dc:	e0 2d       	mov	r30, r0
    10de:	cd 01       	movw	r24, r26
    10e0:	09 95       	icall
	}
    10e2:	08 95       	ret

000010e4 <_ZN10NullStream5writeEh>:
// A type of stream that just throws away output and returns EOF for input
class NullStream : public Stream{
public:
	NullStream(void) : Stream(){};
protected:
	virtual int write(uint8_t c) { return c;};
    10e4:	86 2f       	mov	r24, r22
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	08 95       	ret

000010ea <_ZN10NullStream4readEv>:
	virtual int read(void) {return EOF;};
    10ea:	8f ef       	ldi	r24, 0xFF	; 255
    10ec:	9f ef       	ldi	r25, 0xFF	; 255
    10ee:	08 95       	ret

000010f0 <_ZN7Marquee4readEv>:
public:
	Marquee(MARQUEE* cstr) {m_cstr = cstr;}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){return marqueeSendByte(m_cstr,data);}
	virtual int read(void){return EOF;}
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	9f ef       	ldi	r25, 0xFF	; 255
    10f4:	08 95       	ret

000010f6 <_Z10_cpp_Init_v>:
NullStream nullStream;

void __attribute__ ((constructor)) _cpp_Init_(void){
//	stdin = stdout = uart1;
//	stderr = uart1;
}
    10f6:	08 95       	ret

000010f8 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void){
    10f8:	ff cf       	rjmp	.-2      	; 0x10f8 <__cxa_pure_virtual>

000010fa <_GLOBAL__I_statusLed>:
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class Led {
public:
	Led(LED * cstr){m_cstr = cstr;};
    10fa:	8e e1       	ldi	r24, 0x1E	; 30
    10fc:	94 e0       	ldi	r25, 0x04	; 4
    10fe:	90 93 b0 03 	sts	0x03B0, r25
    1102:	80 93 af 03 	sts	0x03AF, r24
	LED* m_cstr;
};

class StatusLed : public Led {
public:
	StatusLed(LED * cstr) : Led(cstr){
    1106:	87 eb       	ldi	r24, 0xB7	; 183
    1108:	92 e0       	ldi	r25, 0x02	; 2
    110a:	90 93 ae 03 	sts	0x03AE, r25
    110e:	80 93 ad 03 	sts	0x03AD, r24
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class Switch {
public:
	Switch(SWITCH * cstr){m_cstr = cstr;};
    1112:	8a e3       	ldi	r24, 0x3A	; 58
    1114:	92 e0       	ldi	r25, 0x02	; 2
    1116:	90 93 b2 03 	sts	0x03B2, r25
    111a:	80 93 b1 03 	sts	0x03B1, r24

class Stream : STREAM{

public:
	Stream(void){
		fdev_setup_stream(this, &_put, &_get, _FDEV_SETUP_RW);
    111e:	6f e4       	ldi	r22, 0x4F	; 79
    1120:	78 e0       	ldi	r23, 0x08	; 8
    1122:	70 93 be 03 	sts	0x03BE, r23
    1126:	60 93 bd 03 	sts	0x03BD, r22
    112a:	42 e6       	ldi	r20, 0x62	; 98
    112c:	58 e0       	ldi	r21, 0x08	; 8
    112e:	50 93 c0 03 	sts	0x03C0, r21
    1132:	40 93 bf 03 	sts	0x03BF, r20
    1136:	a3 e0       	ldi	r26, 0x03	; 3
    1138:	a0 93 b8 03 	sts	0x03B8, r26
    113c:	10 92 c2 03 	sts	0x03C2, r1
    1140:	10 92 c1 03 	sts	0x03C1, r1
};


class Marquee : public Stream {
public:
	Marquee(MARQUEE* cstr) {m_cstr = cstr;}
    1144:	83 ec       	ldi	r24, 0xC3	; 195
    1146:	92 e0       	ldi	r25, 0x02	; 2
    1148:	90 93 b4 03 	sts	0x03B4, r25
    114c:	80 93 b3 03 	sts	0x03B3, r24
    1150:	8d e4       	ldi	r24, 0x4D	; 77
    1152:	92 e0       	ldi	r25, 0x02	; 2
    1154:	90 93 c4 03 	sts	0x03C4, r25
    1158:	80 93 c3 03 	sts	0x03C3, r24
#ifdef __cplusplus
}
class Actuator{
public:
	Actuator(__ACTUATOR* cstr){
		m_cstr = cstr;
    115c:	84 e6       	ldi	r24, 0x64	; 100
    115e:	92 e0       	ldi	r25, 0x02	; 2
    1160:	90 93 c6 03 	sts	0x03C6, r25
    1164:	80 93 c5 03 	sts	0x03C5, r24
#ifdef __cplusplus
}
class Servo : public Actuator{
public:
	Servo(SERVO* cstr) : Actuator(&cstr->actuator){
		m_cstr = cstr;
    1168:	90 93 c8 03 	sts	0x03C8, r25
    116c:	80 93 c7 03 	sts	0x03C7, r24
    1170:	8a e7       	ldi	r24, 0x7A	; 122
    1172:	92 e0       	ldi	r25, 0x02	; 2
    1174:	90 93 ca 03 	sts	0x03CA, r25
    1178:	80 93 c9 03 	sts	0x03C9, r24
    117c:	90 93 cc 03 	sts	0x03CC, r25
    1180:	80 93 cb 03 	sts	0x03CB, r24
    1184:	80 e9       	ldi	r24, 0x90	; 144
    1186:	92 e0       	ldi	r25, 0x02	; 2
    1188:	90 93 ce 03 	sts	0x03CE, r25
    118c:	80 93 cd 03 	sts	0x03CD, r24
    1190:	90 93 d0 03 	sts	0x03D0, r25
    1194:	80 93 cf 03 	sts	0x03CF, r24
};

class ServoDriver{
public:
	ServoDriver(SERVO_DRIVER* cstr){
		driver = cstr;
    1198:	86 ea       	ldi	r24, 0xA6	; 166
    119a:	92 e0       	ldi	r25, 0x02	; 2
    119c:	90 93 d2 03 	sts	0x03D2, r25
    11a0:	80 93 d1 03 	sts	0x03D1, r24
    11a4:	70 93 de 03 	sts	0x03DE, r23
    11a8:	60 93 dd 03 	sts	0x03DD, r22
    11ac:	50 93 e0 03 	sts	0x03E0, r21
    11b0:	40 93 df 03 	sts	0x03DF, r20
    11b4:	a0 93 d8 03 	sts	0x03D8, r26
    11b8:	10 92 e2 03 	sts	0x03E2, r1
    11bc:	10 92 e1 03 	sts	0x03E1, r1
/* ===================== C++ Wrapper Code ===============================================*/
#include "Stream/Stream.h"
class Uart : public Stream {
public:
	Uart(UART * cstr): Stream(){
		m_cstr = cstr;
    11c0:	28 e0       	ldi	r18, 0x08	; 8
    11c2:	32 e0       	ldi	r19, 0x02	; 2
    11c4:	30 93 e4 03 	sts	0x03E4, r19
    11c8:	20 93 e3 03 	sts	0x03E3, r18
		cstr->cpp = this;
    11cc:	e3 ed       	ldi	r30, 0xD3	; 211
    11ce:	f3 e0       	ldi	r31, 0x03	; 3
    11d0:	f0 93 1e 02 	sts	0x021E, r31
    11d4:	e0 93 1d 02 	sts	0x021D, r30
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class UartHW : public Uart {
public:
	UartHW(HW_UART* uart) : Uart(&uart->_uart_){
    11d8:	83 ed       	ldi	r24, 0xD3	; 211
    11da:	92 e0       	ldi	r25, 0x02	; 2
    11dc:	91 83       	std	Z+1, r25	; 0x01
    11de:	80 83       	st	Z, r24
		m_hw = uart;
    11e0:	30 93 ea 03 	sts	0x03EA, r19
    11e4:	20 93 e9 03 	sts	0x03E9, r18
		m_polling = FALSE;
    11e8:	10 92 eb 03 	sts	0x03EB, r1
    11ec:	70 93 f7 03 	sts	0x03F7, r23
    11f0:	60 93 f6 03 	sts	0x03F6, r22
    11f4:	50 93 f9 03 	sts	0x03F9, r21
    11f8:	40 93 f8 03 	sts	0x03F8, r20
    11fc:	a0 93 f1 03 	sts	0x03F1, r26
    1200:	10 92 fb 03 	sts	0x03FB, r1
    1204:	10 92 fa 03 	sts	0x03FA, r1
};

// A type of stream that just throws away output and returns EOF for input
class NullStream : public Stream{
public:
	NullStream(void) : Stream(){};
    1208:	83 ee       	ldi	r24, 0xE3	; 227
    120a:	92 e0       	ldi	r25, 0x02	; 2
    120c:	90 93 ed 03 	sts	0x03ED, r25
    1210:	80 93 ec 03 	sts	0x03EC, r24
	while(1);
}
    1214:	08 95       	ret

00001216 <_ZNK9StatusLed3setEa>:
	}

	virtual void set(boolean value) const{
    1216:	1f 93       	push	r17
    1218:	16 2f       	mov	r17, r22
		LED_off(&statusLED);
	}
}

static __inline__ void statusLED_set(boolean value){
	if(pin_is_output(statusLED.pin)){
    121a:	80 91 1e 04 	lds	r24, 0x041E
    121e:	90 91 1f 04 	lds	r25, 0x041F
    1222:	0e 94 cc 0b 	call	0x1798	; 0x1798 <pin_is_output>
    1226:	88 23       	and	r24, r24
    1228:	29 f0       	breq	.+10     	; 0x1234 <_ZNK9StatusLed3setEa+0x1e>
		LED_set(&statusLED, value);
    122a:	8e e1       	ldi	r24, 0x1E	; 30
    122c:	94 e0       	ldi	r25, 0x04	; 4
    122e:	61 2f       	mov	r22, r17
    1230:	0e 94 2f 0c 	call	0x185e	; 0x185e <LED_set>
	StatusLed(LED * cstr) : Led(cstr){
	}

	virtual void set(boolean value) const{
		statusLED_set(value);
	}
    1234:	1f 91       	pop	r17
    1236:	08 95       	ret

00001238 <_ZNK3Led3setEa>:
	}
	void off(void) const{
		set(FALSE);
	}
	virtual void set(boolean value) const{
		LED_set(m_cstr,value);
    1238:	fc 01       	movw	r30, r24
    123a:	82 81       	ldd	r24, Z+2	; 0x02
    123c:	93 81       	ldd	r25, Z+3	; 0x03
    123e:	0e 94 2f 0c 	call	0x185e	; 0x185e <LED_set>
	}
    1242:	08 95       	ret

00001244 <_ZN7Marquee5writeEh>:

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){return marqueeSendByte(m_cstr,data);}
    1244:	fc 01       	movw	r30, r24
    1246:	80 89       	ldd	r24, Z+16	; 0x10
    1248:	91 89       	ldd	r25, Z+17	; 0x11
    124a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <marqueeSendByte>
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	08 95       	ret

00001252 <_ZN6UartHW4readEv>:
	};

	virtual int read(void){
    1252:	fc 01       	movw	r30, r24
		int ch;

		if(m_polling){
    1254:	80 8d       	ldd	r24, Z+24	; 0x18
    1256:	88 23       	and	r24, r24
    1258:	29 f0       	breq	.+10     	; 0x1264 <_ZN6UartHW4readEv+0x12>
			ch = uartPollByte(m_hw);
    125a:	86 89       	ldd	r24, Z+22	; 0x16
    125c:	97 89       	ldd	r25, Z+23	; 0x17
    125e:	0e 94 9c 11 	call	0x2338	; 0x2338 <uartPollByte>
    1262:	08 95       	ret
		}else{
			ch = __uartGetByte(m_cstr);
    1264:	80 89       	ldd	r24, Z+16	; 0x10
    1266:	91 89       	ldd	r25, Z+17	; 0x11
    1268:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__uartGetByte>
		}

		return ch;
	}
    126c:	08 95       	ret

0000126e <_ZN4Uart4readEv>:
	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
		return _uartSendByte(m_cstr, data);
	}
	virtual int read(void){
		return __uartGetByte(m_cstr);
    126e:	fc 01       	movw	r30, r24
    1270:	80 89       	ldd	r24, Z+16	; 0x10
    1272:	91 89       	ldd	r25, Z+17	; 0x11
    1274:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__uartGetByte>
	}
    1278:	08 95       	ret
		return m_cstr;
	}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
		return _uartSendByte(m_cstr, data);
    127a:	fc 01       	movw	r30, r24
    127c:	80 89       	ldd	r24, Z+16	; 0x10
    127e:	91 89       	ldd	r25, Z+17	; 0x11
    1280:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <_uartSendByte>
	}
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	08 95       	ret

00001288 <__initTimers>:
// Private methods

//int __timerPrescalerIndex(const Timer* timer, uint16_t prescaler);

static __inline__ TimerData* timerGetData(const Timer* timer){
	return (TimerData*)pgm_read_word(&timer->pgm_data);
    1288:	24 ea       	ldi	r18, 0xA4	; 164
    128a:	32 e0       	ldi	r19, 0x02	; 2
    128c:	f9 01       	movw	r30, r18
    128e:	a5 91       	lpm	r26, Z+
    1290:	b4 91       	lpm	r27, Z+
 
// Set Timer4 to the following:-
//		Mode 	 = TIMER_MODE_PWM_FAST_ICR
//		Prescale = 8
	// Save the timer mode
	timerGetData(&pgm_Timers[4])->mode = TIMER_MODE_PWM_FAST_ICR;
    1292:	8e e0       	ldi	r24, 0x0E	; 14
    1294:	1a 96       	adiw	r26, 0x0a	; 10
    1296:	8c 93       	st	X, r24
    1298:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR4A,WGM40);
	} 
		
			
	if(14 & 2){
		sbi(TCCR4A,WGM41);
    129a:	e0 ea       	ldi	r30, 0xA0	; 160
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	82 60       	ori	r24, 0x02	; 2
    12a2:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 4){
		sbi(TCCR4B,WGM42);
    12a4:	e1 ea       	ldi	r30, 0xA1	; 161
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	88 60       	ori	r24, 0x08	; 8
    12ac:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 8){
		sbi(TCCR4B,WGM43);
    12ae:	80 81       	ld	r24, Z
    12b0:	80 61       	ori	r24, 0x10	; 16
    12b2:	80 83       	st	Z, r24
	} 
		
	// Top is stored in ICR register
	ICR4 = 40000;			
    12b4:	80 e4       	ldi	r24, 0x40	; 64
    12b6:	9c e9       	ldi	r25, 0x9C	; 156
    12b8:	90 93 a7 00 	sts	0x00A7, r25
    12bc:	80 93 a6 00 	sts	0x00A6, r24
			
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[4])->prescale_value = 8;
    12c0:	48 e0       	ldi	r20, 0x08	; 8
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	4d 93       	st	X+, r20
    12c6:	5c 93       	st	X, r21
	TCCR4B |= 2;
    12c8:	80 81       	ld	r24, Z
    12ca:	82 60       	ori	r24, 0x02	; 2
    12cc:	80 83       	st	Z, r24
    12ce:	24 5d       	subi	r18, 0xD4	; 212
    12d0:	3f 4f       	sbci	r19, 0xFF	; 255
    12d2:	f9 01       	movw	r30, r18
    12d4:	a5 91       	lpm	r26, Z+
    12d6:	b4 91       	lpm	r27, Z+
	 
// Set Timer5 to the following:-
//		Mode 	 = TIMER_MODE_CTC_OCR
//		Prescale = 8
	// Save the timer mode
	timerGetData(&pgm_Timers[5])->mode = TIMER_MODE_CTC_OCR;
    12d8:	84 e0       	ldi	r24, 0x04	; 4
    12da:	1a 96       	adiw	r26, 0x0a	; 10
    12dc:	8c 93       	st	X, r24
    12de:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR5A,WGM51);
	} 
		
			
	if(4 & 4){
		sbi(TCCR5B,WGM52);
    12e0:	e1 e2       	ldi	r30, 0x21	; 33
    12e2:	f1 e0       	ldi	r31, 0x01	; 1
    12e4:	80 81       	ld	r24, Z
    12e6:	88 60       	ori	r24, 0x08	; 8
    12e8:	80 83       	st	Z, r24
	if(4 & 8){
		sbi(TCCR5B,WGM53);
	} 
		
	// Top is stored in Compare A OCR
				OCR5A = 64000;			
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	9a ef       	ldi	r25, 0xFA	; 250
    12ee:	90 93 29 01 	sts	0x0129, r25
    12f2:	80 93 28 01 	sts	0x0128, r24
				
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[5])->prescale_value = 8;
    12f6:	4d 93       	st	X+, r20
    12f8:	5c 93       	st	X, r21
	TCCR5B |= 2;
    12fa:	80 81       	ld	r24, Z
    12fc:	82 60       	ori	r24, 0x02	; 2
    12fe:	80 83       	st	Z, r24
	}
    1300:	08 95       	ret

00001302 <servoPWMInit>:
    1302:	8f 92       	push	r8
    1304:	9f 92       	push	r9
    1306:	af 92       	push	r10
    1308:	bf 92       	push	r11
    130a:	cf 92       	push	r12
    130c:	df 92       	push	r13
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	6c 01       	movw	r12, r24
    131c:	dc 01       	movw	r26, r24
    131e:	12 96       	adiw	r26, 0x02	; 2
    1320:	8c 91       	ld	r24, X
    1322:	c8 2f       	mov	r28, r24
    1324:	d0 e0       	ldi	r29, 0x00	; 0
    1326:	21 97       	sbiw	r28, 0x01	; 1
    1328:	7e 01       	movw	r14, r28
    132a:	ee 0c       	add	r14, r14
    132c:	ff 1c       	adc	r15, r15
    132e:	9f e7       	ldi	r25, 0x7F	; 127
    1330:	89 2e       	mov	r8, r25
    1332:	93 e0       	ldi	r25, 0x03	; 3
    1334:	99 2e       	mov	r9, r25
    1336:	8c e2       	ldi	r24, 0x2C	; 44
    1338:	a8 2e       	mov	r10, r24
    133a:	47 c0       	rjmp	.+142    	; 0x13ca <servoPWMInit+0xc8>
    133c:	d6 01       	movw	r26, r12
    133e:	ed 91       	ld	r30, X+
    1340:	fc 91       	ld	r31, X
    1342:	ee 0d       	add	r30, r14
    1344:	ff 1d       	adc	r31, r15
    1346:	05 91       	lpm	r16, Z+
    1348:	14 91       	lpm	r17, Z+
    134a:	f8 01       	movw	r30, r16
    134c:	d5 82       	std	Z+5, r13	; 0x05
    134e:	c4 82       	std	Z+4, r12	; 0x04
    1350:	86 81       	ldd	r24, Z+6	; 0x06
    1352:	97 81       	ldd	r25, Z+7	; 0x07
    1354:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <compareFromIOPin>
    1358:	fc 01       	movw	r30, r24
    135a:	d8 01       	movw	r26, r16
    135c:	55 96       	adiw	r26, 0x15	; 21
    135e:	9c 93       	st	X, r25
    1360:	8e 93       	st	-X, r24
    1362:	54 97       	sbiw	r26, 0x14	; 20
    1364:	32 96       	adiw	r30, 0x02	; 2
    1366:	b4 90       	lpm	r11, Z+
    1368:	11 96       	adiw	r26, 0x01	; 1
    136a:	9c 92       	st	X, r9
    136c:	8e 92       	st	-X, r8
    136e:	16 96       	adiw	r26, 0x06	; 6
    1370:	8d 91       	ld	r24, X+
    1372:	9c 91       	ld	r25, X
    1374:	17 97       	sbiw	r26, 0x07	; 7
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	0e 94 08 0c 	call	0x1810	; 0x1810 <pin_make_output>
    137c:	ba 9c       	mul	r11, r10
    137e:	c0 01       	movw	r24, r0
    1380:	11 24       	eor	r1, r1
    1382:	8d 5e       	subi	r24, 0xED	; 237
    1384:	9d 4f       	sbci	r25, 0xFD	; 253
    1386:	fc 01       	movw	r30, r24
    1388:	a5 91       	lpm	r26, Z+
    138a:	b4 91       	lpm	r27, Z+
    138c:	8d 91       	ld	r24, X+
    138e:	9c 91       	ld	r25, X
    1390:	d8 01       	movw	r26, r16
    1392:	53 96       	adiw	r26, 0x13	; 19
    1394:	9c 93       	st	X, r25
    1396:	8e 93       	st	-X, r24
    1398:	52 97       	sbiw	r26, 0x12	; 18
    139a:	18 96       	adiw	r26, 0x08	; 8
    139c:	6d 91       	ld	r22, X+
    139e:	7c 91       	ld	r23, X
    13a0:	19 97       	sbiw	r26, 0x09	; 9
    13a2:	1a 96       	adiw	r26, 0x0a	; 10
    13a4:	4d 91       	ld	r20, X+
    13a6:	5c 91       	ld	r21, X
    13a8:	1b 97       	sbiw	r26, 0x0b	; 11
    13aa:	c8 01       	movw	r24, r16
    13ac:	0e 94 1d 0a 	call	0x143a	; 0x143a <servoSetConfig>
    13b0:	c8 01       	movw	r24, r16
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	0e 94 9e 0a 	call	0x153c	; 0x153c <__act_setSpeed>
    13b8:	c8 01       	movw	r24, r16
    13ba:	6f ef       	ldi	r22, 0xFF	; 255
    13bc:	0e 94 be 0a 	call	0x157c	; 0x157c <__act_setConnected>
    13c0:	21 97       	sbiw	r28, 0x01	; 1
    13c2:	ee ef       	ldi	r30, 0xFE	; 254
    13c4:	ff ef       	ldi	r31, 0xFF	; 255
    13c6:	ee 0e       	add	r14, r30
    13c8:	ff 1e       	adc	r15, r31
    13ca:	ff ef       	ldi	r31, 0xFF	; 255
    13cc:	cf 3f       	cpi	r28, 0xFF	; 255
    13ce:	df 07       	cpc	r29, r31
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <servoPWMInit+0xd2>
    13d2:	b4 cf       	rjmp	.-152    	; 0x133c <servoPWMInit+0x3a>
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	1f 91       	pop	r17
    13da:	0f 91       	pop	r16
    13dc:	ff 90       	pop	r15
    13de:	ef 90       	pop	r14
    13e0:	df 90       	pop	r13
    13e2:	cf 90       	pop	r12
    13e4:	bf 90       	pop	r11
    13e6:	af 90       	pop	r10
    13e8:	9f 90       	pop	r9
    13ea:	8f 90       	pop	r8
    13ec:	08 95       	ret

000013ee <setConnected>:
    13ee:	fc 01       	movw	r30, r24
    13f0:	84 89       	ldd	r24, Z+20	; 0x14
    13f2:	95 89       	ldd	r25, Z+21	; 0x15
    13f4:	61 11       	cpse	r22, r1
    13f6:	62 e0       	ldi	r22, 0x02	; 2
    13f8:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <compareSetOutputMode>
    13fc:	08 95       	ret

000013fe <setSpeed>:
    13fe:	ef 92       	push	r14
    1400:	ff 92       	push	r15
    1402:	0f 93       	push	r16
    1404:	1f 93       	push	r17
    1406:	fc 01       	movw	r30, r24
    1408:	e4 88       	ldd	r14, Z+20	; 0x14
    140a:	f5 88       	ldd	r15, Z+21	; 0x15
    140c:	24 85       	ldd	r18, Z+12	; 0x0c
    140e:	35 85       	ldd	r19, Z+13	; 0x0d
    1410:	06 85       	ldd	r16, Z+14	; 0x0e
    1412:	17 85       	ldd	r17, Z+15	; 0x0f
    1414:	86 2f       	mov	r24, r22
    1416:	99 27       	eor	r25, r25
    1418:	87 fd       	sbrc	r24, 7
    141a:	90 95       	com	r25
    141c:	61 e8       	ldi	r22, 0x81	; 129
    141e:	7f ef       	ldi	r23, 0xFF	; 255
    1420:	4f e7       	ldi	r20, 0x7F	; 127
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	0e 94 20 0b 	call	0x1640	; 0x1640 <interpolateU>
    1428:	bc 01       	movw	r22, r24
    142a:	c7 01       	movw	r24, r14
    142c:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <compareSetThreshold>
    1430:	1f 91       	pop	r17
    1432:	0f 91       	pop	r16
    1434:	ff 90       	pop	r15
    1436:	ef 90       	pop	r14
    1438:	08 95       	ret

0000143a <servoSetConfig>:
    143a:	9f 92       	push	r9
    143c:	af 92       	push	r10
    143e:	bf 92       	push	r11
    1440:	cf 92       	push	r12
    1442:	df 92       	push	r13
    1444:	ef 92       	push	r14
    1446:	ff 92       	push	r15
    1448:	0f 93       	push	r16
    144a:	1f 93       	push	r17
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	ec 01       	movw	r28, r24
    1452:	7b 01       	movw	r14, r22
    1454:	8a 01       	movw	r16, r20
    1456:	79 87       	std	Y+9, r23	; 0x09
    1458:	68 87       	std	Y+8, r22	; 0x08
    145a:	5b 87       	std	Y+11, r21	; 0x0b
    145c:	4a 87       	std	Y+10, r20	; 0x0a
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	89 2b       	or	r24, r25
    1464:	09 f4       	brne	.+2      	; 0x1468 <servoSetConfig+0x2e>
    1466:	5e c0       	rjmp	.+188    	; 0x1524 <servoSetConfig+0xea>
    1468:	9f b6       	in	r9, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	8a 89       	ldd	r24, Y+18	; 0x12
    146e:	9b 89       	ldd	r25, Y+19	; 0x13
    1470:	68 ee       	ldi	r22, 0xE8	; 232
    1472:	73 e0       	ldi	r23, 0x03	; 3
    1474:	0e 94 80 1a 	call	0x3500	; 0x3500 <__udivmodhi4>
    1478:	5b 01       	movw	r10, r22
    147a:	cc 24       	eor	r12, r12
    147c:	dd 24       	eor	r13, r13
    147e:	b7 01       	movw	r22, r14
    1480:	60 1b       	sub	r22, r16
    1482:	71 0b       	sbc	r23, r17
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	a6 01       	movw	r20, r12
    148a:	95 01       	movw	r18, r10
    148c:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__mulsi3>
    1490:	24 e1       	ldi	r18, 0x14	; 20
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	0e 94 a7 1a 	call	0x354e	; 0x354e <__udivmodsi4>
    149c:	c9 01       	movw	r24, r18
    149e:	da 01       	movw	r26, r20
    14a0:	9c 01       	movw	r18, r24
    14a2:	ad 01       	movw	r20, r26
    14a4:	da 01       	movw	r26, r20
    14a6:	c9 01       	movw	r24, r18
    14a8:	80 70       	andi	r24, 0x00	; 0
    14aa:	90 70       	andi	r25, 0x00	; 0
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	a1 05       	cpc	r26, r1
    14b0:	b1 05       	cpc	r27, r1
    14b2:	39 f0       	breq	.+14     	; 0x14c2 <servoSetConfig+0x88>
    14b4:	86 ee       	ldi	r24, 0xE6	; 230
    14b6:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <setError>
    14ba:	2f ef       	ldi	r18, 0xFF	; 255
    14bc:	3f ef       	ldi	r19, 0xFF	; 255
    14be:	40 e0       	ldi	r20, 0x00	; 0
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	3d 87       	std	Y+13, r19	; 0x0d
    14c4:	2c 87       	std	Y+12, r18	; 0x0c
    14c6:	0e 0d       	add	r16, r14
    14c8:	1f 1d       	adc	r17, r15
    14ca:	b8 01       	movw	r22, r16
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	a6 01       	movw	r20, r12
    14d2:	95 01       	movw	r18, r10
    14d4:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__mulsi3>
    14d8:	24 e1       	ldi	r18, 0x14	; 20
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e0       	ldi	r20, 0x00	; 0
    14de:	50 e0       	ldi	r21, 0x00	; 0
    14e0:	0e 94 a7 1a 	call	0x354e	; 0x354e <__udivmodsi4>
    14e4:	c9 01       	movw	r24, r18
    14e6:	da 01       	movw	r26, r20
    14e8:	9c 01       	movw	r18, r24
    14ea:	ad 01       	movw	r20, r26
    14ec:	da 01       	movw	r26, r20
    14ee:	c9 01       	movw	r24, r18
    14f0:	80 70       	andi	r24, 0x00	; 0
    14f2:	90 70       	andi	r25, 0x00	; 0
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	a1 05       	cpc	r26, r1
    14f8:	b1 05       	cpc	r27, r1
    14fa:	39 f0       	breq	.+14     	; 0x150a <servoSetConfig+0xd0>
    14fc:	86 ee       	ldi	r24, 0xE6	; 230
    14fe:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <setError>
    1502:	2f ef       	ldi	r18, 0xFF	; 255
    1504:	3f ef       	ldi	r19, 0xFF	; 255
    1506:	40 e0       	ldi	r20, 0x00	; 0
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	3f 87       	std	Y+15, r19	; 0x0f
    150c:	2e 87       	std	Y+14, r18	; 0x0e
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	80 ff       	sbrs	r24, 0
    1512:	07 c0       	rjmp	.+14     	; 0x1522 <servoSetConfig+0xe8>
    1514:	6a 81       	ldd	r22, Y+2	; 0x02
    1516:	61 50       	subi	r22, 0x01	; 1
    1518:	6a 83       	std	Y+2, r22	; 0x02
    151a:	6f 5f       	subi	r22, 0xFF	; 255
    151c:	ce 01       	movw	r24, r28
    151e:	0e 94 9e 0a 	call	0x153c	; 0x153c <__act_setSpeed>
    1522:	9f be       	out	0x3f, r9	; 63
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	ff 90       	pop	r15
    152e:	ef 90       	pop	r14
    1530:	df 90       	pop	r13
    1532:	cf 90       	pop	r12
    1534:	bf 90       	pop	r11
    1536:	af 90       	pop	r10
    1538:	9f 90       	pop	r9
    153a:	08 95       	ret

0000153c <__act_setSpeed>:
    153c:	1f 93       	push	r17
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	ec 01       	movw	r28, r24
    1544:	16 2f       	mov	r17, r22
    1546:	61 38       	cpi	r22, 0x81	; 129
    1548:	0c f4       	brge	.+2      	; 0x154c <__act_setSpeed+0x10>
    154a:	11 e8       	ldi	r17, 0x81	; 129
    154c:	e8 81       	ld	r30, Y
    154e:	f9 81       	ldd	r31, Y+1	; 0x01
    1550:	30 97       	sbiw	r30, 0x00	; 0
    1552:	79 f0       	breq	.+30     	; 0x1572 <__act_setSpeed+0x36>
    1554:	25 91       	lpm	r18, Z+
    1556:	34 91       	lpm	r19, Z+
    1558:	21 15       	cp	r18, r1
    155a:	31 05       	cpc	r19, r1
    155c:	51 f0       	breq	.+20     	; 0x1572 <__act_setSpeed+0x36>
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	81 fd       	sbrc	r24, 1
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <__act_setSpeed+0x2c>
    1564:	61 2f       	mov	r22, r17
    1566:	02 c0       	rjmp	.+4      	; 0x156c <__act_setSpeed+0x30>
    1568:	61 2f       	mov	r22, r17
    156a:	61 95       	neg	r22
    156c:	ce 01       	movw	r24, r28
    156e:	f9 01       	movw	r30, r18
    1570:	09 95       	icall
    1572:	1a 83       	std	Y+2, r17	; 0x02
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	08 95       	ret

0000157c <__act_setConnected>:
    157c:	dc 01       	movw	r26, r24
    157e:	96 2f       	mov	r25, r22
    1580:	91 70       	andi	r25, 0x01	; 1
    1582:	13 96       	adiw	r26, 0x03	; 3
    1584:	8c 91       	ld	r24, X
    1586:	13 97       	sbiw	r26, 0x03	; 3
    1588:	8e 7f       	andi	r24, 0xFE	; 254
    158a:	89 2b       	or	r24, r25
    158c:	13 96       	adiw	r26, 0x03	; 3
    158e:	8c 93       	st	X, r24
    1590:	13 97       	sbiw	r26, 0x03	; 3
    1592:	8d 91       	ld	r24, X+
    1594:	9c 91       	ld	r25, X
    1596:	11 97       	sbiw	r26, 0x01	; 1
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	51 f0       	breq	.+20     	; 0x15b0 <__act_setConnected+0x34>
    159c:	fc 01       	movw	r30, r24
    159e:	32 96       	adiw	r30, 0x02	; 2
    15a0:	25 91       	lpm	r18, Z+
    15a2:	34 91       	lpm	r19, Z+
    15a4:	21 15       	cp	r18, r1
    15a6:	31 05       	cpc	r19, r1
    15a8:	19 f0       	breq	.+6      	; 0x15b0 <__act_setConnected+0x34>
    15aa:	cd 01       	movw	r24, r26
    15ac:	f9 01       	movw	r30, r18
    15ae:	09 95       	icall
    15b0:	08 95       	ret

000015b2 <interpolate>:
    15b2:	4f 92       	push	r4
    15b4:	5f 92       	push	r5
    15b6:	6f 92       	push	r6
    15b8:	7f 92       	push	r7
    15ba:	8f 92       	push	r8
    15bc:	9f 92       	push	r9
    15be:	af 92       	push	r10
    15c0:	bf 92       	push	r11
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	2b 01       	movw	r4, r22
    15d0:	3a 01       	movw	r6, r20
    15d2:	59 01       	movw	r10, r18
    15d4:	78 01       	movw	r14, r16
    15d6:	e2 1a       	sub	r14, r18
    15d8:	f3 0a       	sbc	r15, r19
    15da:	00 27       	eor	r16, r16
    15dc:	f7 fc       	sbrc	r15, 7
    15de:	00 95       	com	r16
    15e0:	10 2f       	mov	r17, r16
    15e2:	9c 01       	movw	r18, r24
    15e4:	26 1b       	sub	r18, r22
    15e6:	37 0b       	sbc	r19, r23
    15e8:	44 27       	eor	r20, r20
    15ea:	37 fd       	sbrc	r19, 7
    15ec:	40 95       	com	r20
    15ee:	54 2f       	mov	r21, r20
    15f0:	c8 01       	movw	r24, r16
    15f2:	b7 01       	movw	r22, r14
    15f4:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__mulsi3>
    15f8:	64 18       	sub	r6, r4
    15fa:	75 08       	sbc	r7, r5
    15fc:	88 24       	eor	r8, r8
    15fe:	77 fc       	sbrc	r7, 7
    1600:	80 94       	com	r8
    1602:	98 2c       	mov	r9, r8
    1604:	a4 01       	movw	r20, r8
    1606:	93 01       	movw	r18, r6
    1608:	0e 94 c9 1a 	call	0x3592	; 0x3592 <__divmodsi4>
    160c:	c9 01       	movw	r24, r18
    160e:	da 01       	movw	r26, r20
    1610:	cc 24       	eor	r12, r12
    1612:	b7 fc       	sbrc	r11, 7
    1614:	c0 94       	com	r12
    1616:	dc 2c       	mov	r13, r12
    1618:	a8 0e       	add	r10, r24
    161a:	b9 1e       	adc	r11, r25
    161c:	ca 1e       	adc	r12, r26
    161e:	db 1e       	adc	r13, r27
    1620:	c5 01       	movw	r24, r10
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	ff 90       	pop	r15
    1628:	ef 90       	pop	r14
    162a:	df 90       	pop	r13
    162c:	cf 90       	pop	r12
    162e:	bf 90       	pop	r11
    1630:	af 90       	pop	r10
    1632:	9f 90       	pop	r9
    1634:	8f 90       	pop	r8
    1636:	7f 90       	pop	r7
    1638:	6f 90       	pop	r6
    163a:	5f 90       	pop	r5
    163c:	4f 90       	pop	r4
    163e:	08 95       	ret

00001640 <interpolateU>:
    1640:	4f 92       	push	r4
    1642:	5f 92       	push	r5
    1644:	6f 92       	push	r6
    1646:	7f 92       	push	r7
    1648:	8f 92       	push	r8
    164a:	9f 92       	push	r9
    164c:	af 92       	push	r10
    164e:	bf 92       	push	r11
    1650:	cf 92       	push	r12
    1652:	df 92       	push	r13
    1654:	ef 92       	push	r14
    1656:	ff 92       	push	r15
    1658:	0f 93       	push	r16
    165a:	1f 93       	push	r17
    165c:	2b 01       	movw	r4, r22
    165e:	5a 01       	movw	r10, r20
    1660:	39 01       	movw	r6, r18
    1662:	78 01       	movw	r14, r16
    1664:	e2 1a       	sub	r14, r18
    1666:	f3 0a       	sbc	r15, r19
    1668:	00 e0       	ldi	r16, 0x00	; 0
    166a:	10 e0       	ldi	r17, 0x00	; 0
    166c:	9c 01       	movw	r18, r24
    166e:	26 1b       	sub	r18, r22
    1670:	37 0b       	sbc	r19, r23
    1672:	44 27       	eor	r20, r20
    1674:	37 fd       	sbrc	r19, 7
    1676:	40 95       	com	r20
    1678:	54 2f       	mov	r21, r20
    167a:	c8 01       	movw	r24, r16
    167c:	b7 01       	movw	r22, r14
    167e:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__mulsi3>
    1682:	a4 18       	sub	r10, r4
    1684:	b5 08       	sbc	r11, r5
    1686:	cc 24       	eor	r12, r12
    1688:	b7 fc       	sbrc	r11, 7
    168a:	c0 94       	com	r12
    168c:	dc 2c       	mov	r13, r12
    168e:	a6 01       	movw	r20, r12
    1690:	95 01       	movw	r18, r10
    1692:	0e 94 c9 1a 	call	0x3592	; 0x3592 <__divmodsi4>
    1696:	88 24       	eor	r8, r8
    1698:	99 24       	eor	r9, r9
    169a:	26 0d       	add	r18, r6
    169c:	37 1d       	adc	r19, r7
    169e:	48 1d       	adc	r20, r8
    16a0:	59 1d       	adc	r21, r9
    16a2:	c9 01       	movw	r24, r18
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
    16ac:	df 90       	pop	r13
    16ae:	cf 90       	pop	r12
    16b0:	bf 90       	pop	r11
    16b2:	af 90       	pop	r10
    16b4:	9f 90       	pop	r9
    16b6:	8f 90       	pop	r8
    16b8:	7f 90       	pop	r7
    16ba:	6f 90       	pop	r6
    16bc:	5f 90       	pop	r5
    16be:	4f 90       	pop	r4
    16c0:	08 95       	ret

000016c2 <getError>:
    16c2:	80 91 19 04 	lds	r24, 0x0419
    16c6:	08 95       	ret

000016c8 <setErrorLog>:
    16c8:	90 93 1d 04 	sts	0x041D, r25
    16cc:	80 93 1c 04 	sts	0x041C, r24
    16d0:	08 95       	ret

000016d2 <setError>:
    16d2:	1f 93       	push	r17
    16d4:	18 2f       	mov	r17, r24
    16d6:	80 91 19 04 	lds	r24, 0x0419
    16da:	88 23       	and	r24, r24
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <setError+0xe>
    16de:	5a c0       	rjmp	.+180    	; 0x1794 <setError+0xc2>
    16e0:	10 93 19 04 	sts	0x0419, r17
    16e4:	80 91 1e 04 	lds	r24, 0x041E
    16e8:	90 91 1f 04 	lds	r25, 0x041F
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	49 f0       	breq	.+18     	; 0x1702 <setError+0x30>
    16f0:	0e 94 cc 0b 	call	0x1798	; 0x1798 <pin_is_output>
    16f4:	88 23       	and	r24, r24
    16f6:	29 f0       	breq	.+10     	; 0x1702 <setError+0x30>
    16f8:	8e e1       	ldi	r24, 0x1E	; 30
    16fa:	94 e0       	ldi	r25, 0x04	; 4
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	0e 94 2f 0c 	call	0x185e	; 0x185e <LED_set>
    1702:	80 91 29 04 	lds	r24, 0x0429
    1706:	90 91 2a 04 	lds	r25, 0x042A
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	09 f4       	brne	.+2      	; 0x1710 <setError+0x3e>
    170e:	42 c0       	rjmp	.+132    	; 0x1794 <setError+0xc2>
    1710:	17 ff       	sbrs	r17, 7
    1712:	12 c0       	rjmp	.+36     	; 0x1738 <setError+0x66>
    1714:	00 d0       	rcall	.+0      	; 0x1716 <setError+0x44>
    1716:	00 d0       	rcall	.+0      	; 0x1718 <setError+0x46>
    1718:	ad b7       	in	r26, 0x3d	; 61
    171a:	be b7       	in	r27, 0x3e	; 62
    171c:	12 96       	adiw	r26, 0x02	; 2
    171e:	9c 93       	st	X, r25
    1720:	8e 93       	st	-X, r24
    1722:	11 97       	sbiw	r26, 0x01	; 1
    1724:	84 e9       	ldi	r24, 0x94	; 148
    1726:	93 e0       	ldi	r25, 0x03	; 3
    1728:	14 96       	adiw	r26, 0x04	; 4
    172a:	9c 93       	st	X, r25
    172c:	8e 93       	st	-X, r24
    172e:	13 97       	sbiw	r26, 0x03	; 3
    1730:	0e 94 aa 19 	call	0x3354	; 0x3354 <fprintf_P>
    1734:	11 95       	neg	r17
    1736:	0c c0       	rjmp	.+24     	; 0x1750 <setError+0x7e>
    1738:	00 d0       	rcall	.+0      	; 0x173a <setError+0x68>
    173a:	00 d0       	rcall	.+0      	; 0x173c <setError+0x6a>
    173c:	ed b7       	in	r30, 0x3d	; 61
    173e:	fe b7       	in	r31, 0x3e	; 62
    1740:	92 83       	std	Z+2, r25	; 0x02
    1742:	81 83       	std	Z+1, r24	; 0x01
    1744:	8f e8       	ldi	r24, 0x8F	; 143
    1746:	93 e0       	ldi	r25, 0x03	; 3
    1748:	94 83       	std	Z+4, r25	; 0x04
    174a:	83 83       	std	Z+3, r24	; 0x03
    174c:	0e 94 aa 19 	call	0x3354	; 0x3354 <fprintf_P>
    1750:	00 d0       	rcall	.+0      	; 0x1752 <setError+0x80>
    1752:	ed b7       	in	r30, 0x3d	; 61
    1754:	fe b7       	in	r31, 0x3e	; 62
    1756:	31 96       	adiw	r30, 0x01	; 1
    1758:	80 91 29 04 	lds	r24, 0x0429
    175c:	90 91 2a 04 	lds	r25, 0x042A
    1760:	ad b7       	in	r26, 0x3d	; 61
    1762:	be b7       	in	r27, 0x3e	; 62
    1764:	12 96       	adiw	r26, 0x02	; 2
    1766:	9c 93       	st	X, r25
    1768:	8e 93       	st	-X, r24
    176a:	11 97       	sbiw	r26, 0x01	; 1
    176c:	83 e8       	ldi	r24, 0x83	; 131
    176e:	93 e0       	ldi	r25, 0x03	; 3
    1770:	93 83       	std	Z+3, r25	; 0x03
    1772:	82 83       	std	Z+2, r24	; 0x02
    1774:	81 2f       	mov	r24, r17
    1776:	99 27       	eor	r25, r25
    1778:	87 fd       	sbrc	r24, 7
    177a:	90 95       	com	r25
    177c:	95 83       	std	Z+5, r25	; 0x05
    177e:	84 83       	std	Z+4, r24	; 0x04
    1780:	0e 94 aa 19 	call	0x3354	; 0x3354 <fprintf_P>
    1784:	ed b7       	in	r30, 0x3d	; 61
    1786:	fe b7       	in	r31, 0x3e	; 62
    1788:	36 96       	adiw	r30, 0x06	; 6
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	fe bf       	out	0x3e, r31	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	ed bf       	out	0x3d, r30	; 61
    1794:	1f 91       	pop	r17
    1796:	08 95       	ret

00001798 <pin_is_output>:
    1798:	9c 01       	movw	r18, r24
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	81 f0       	breq	.+32     	; 0x17be <pin_is_output+0x26>
    179e:	fc 01       	movw	r30, r24
    17a0:	85 91       	lpm	r24, Z+
    17a2:	94 91       	lpm	r25, Z+
    17a4:	02 96       	adiw	r24, 0x02	; 2
    17a6:	fc 01       	movw	r30, r24
    17a8:	a5 91       	lpm	r26, Z+
    17aa:	b4 91       	lpm	r27, Z+
    17ac:	2e 5f       	subi	r18, 0xFE	; 254
    17ae:	3f 4f       	sbci	r19, 0xFF	; 255
    17b0:	f9 01       	movw	r30, r18
    17b2:	94 91       	lpm	r25, Z+
    17b4:	8c 91       	ld	r24, X
    17b6:	89 23       	and	r24, r25
    17b8:	11 f0       	breq	.+4      	; 0x17be <pin_is_output+0x26>
    17ba:	8f ef       	ldi	r24, 0xFF	; 255
    17bc:	08 95       	ret
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	08 95       	ret

000017c2 <pin_make_input>:
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	9c 01       	movw	r18, r24
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	f9 f0       	breq	.+62     	; 0x180a <pin_make_input+0x48>
    17cc:	fc 01       	movw	r30, r24
    17ce:	45 91       	lpm	r20, Z+
    17d0:	54 91       	lpm	r21, Z+
    17d2:	ca 01       	movw	r24, r20
    17d4:	02 96       	adiw	r24, 0x02	; 2
    17d6:	fc 01       	movw	r30, r24
    17d8:	a5 91       	lpm	r26, Z+
    17da:	b4 91       	lpm	r27, Z+
    17dc:	fa 01       	movw	r30, r20
    17de:	c5 91       	lpm	r28, Z+
    17e0:	d4 91       	lpm	r29, Z+
    17e2:	2e 5f       	subi	r18, 0xFE	; 254
    17e4:	3f 4f       	sbci	r19, 0xFF	; 255
    17e6:	f9 01       	movw	r30, r18
    17e8:	94 91       	lpm	r25, Z+
    17ea:	3f b7       	in	r19, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	8c 91       	ld	r24, X
    17f0:	29 2f       	mov	r18, r25
    17f2:	20 95       	com	r18
    17f4:	82 23       	and	r24, r18
    17f6:	8c 93       	st	X, r24
    17f8:	66 23       	and	r22, r22
    17fa:	19 f0       	breq	.+6      	; 0x1802 <pin_make_input+0x40>
    17fc:	88 81       	ld	r24, Y
    17fe:	89 2b       	or	r24, r25
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <pin_make_input+0x44>
    1802:	88 81       	ld	r24, Y
    1804:	82 23       	and	r24, r18
    1806:	88 83       	st	Y, r24
    1808:	3f bf       	out	0x3f, r19	; 63
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	08 95       	ret

00001810 <pin_make_output>:
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	9c 01       	movw	r18, r24
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	f9 f0       	breq	.+62     	; 0x1858 <pin_make_output+0x48>
    181a:	fc 01       	movw	r30, r24
    181c:	45 91       	lpm	r20, Z+
    181e:	54 91       	lpm	r21, Z+
    1820:	ca 01       	movw	r24, r20
    1822:	02 96       	adiw	r24, 0x02	; 2
    1824:	fc 01       	movw	r30, r24
    1826:	c5 91       	lpm	r28, Z+
    1828:	d4 91       	lpm	r29, Z+
    182a:	fa 01       	movw	r30, r20
    182c:	a5 91       	lpm	r26, Z+
    182e:	b4 91       	lpm	r27, Z+
    1830:	2e 5f       	subi	r18, 0xFE	; 254
    1832:	3f 4f       	sbci	r19, 0xFF	; 255
    1834:	f9 01       	movw	r30, r18
    1836:	24 91       	lpm	r18, Z+
    1838:	3f b7       	in	r19, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	66 23       	and	r22, r22
    183e:	19 f0       	breq	.+6      	; 0x1846 <pin_make_output+0x36>
    1840:	8c 91       	ld	r24, X
    1842:	82 2b       	or	r24, r18
    1844:	04 c0       	rjmp	.+8      	; 0x184e <pin_make_output+0x3e>
    1846:	8c 91       	ld	r24, X
    1848:	92 2f       	mov	r25, r18
    184a:	90 95       	com	r25
    184c:	89 23       	and	r24, r25
    184e:	8c 93       	st	X, r24
    1850:	88 81       	ld	r24, Y
    1852:	82 2b       	or	r24, r18
    1854:	88 83       	st	Y, r24
    1856:	3f bf       	out	0x3f, r19	; 63
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	08 95       	ret

0000185e <LED_set>:
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	ec 01       	movw	r28, r24
    1866:	16 2f       	mov	r17, r22
    1868:	88 81       	ld	r24, Y
    186a:	99 81       	ldd	r25, Y+1	; 0x01
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	a9 f0       	breq	.+42     	; 0x189a <LED_set+0x3c>
    1870:	3a 81       	ldd	r19, Y+2	; 0x02
    1872:	30 fd       	sbrc	r19, 0
    1874:	05 c0       	rjmp	.+10     	; 0x1880 <LED_set+0x22>
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	66 23       	and	r22, r22
    187a:	09 f4       	brne	.+2      	; 0x187e <LED_set+0x20>
    187c:	21 e0       	ldi	r18, 0x01	; 1
    187e:	12 2f       	mov	r17, r18
    1880:	31 fd       	sbrc	r19, 1
    1882:	06 c0       	rjmp	.+12     	; 0x1890 <LED_set+0x32>
    1884:	61 2f       	mov	r22, r17
    1886:	0e 94 08 0c 	call	0x1810	; 0x1810 <pin_make_output>
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	82 60       	ori	r24, 0x02	; 2
    188e:	8a 83       	std	Y+2, r24	; 0x02
    1890:	88 81       	ld	r24, Y
    1892:	99 81       	ldd	r25, Y+1	; 0x01
    1894:	61 2f       	mov	r22, r17
    1896:	0e 94 4f 12 	call	0x249e	; 0x249e <pin_set>
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	08 95       	ret

000018a2 <main>:
    18a2:	0e 94 ef 06 	call	0xdde	; 0xdde <registerLED>
    18a6:	0e 94 44 09 	call	0x1288	; 0x1288 <__initTimers>
    18aa:	0e 94 e5 07 	call	0xfca	; 0xfca <__clockInit>
    18ae:	78 94       	sei
    18b0:	0e 94 05 07 	call	0xe0a	; 0xe0a <sysInitHardware>
    18b4:	0e 94 44 03 	call	0x688	; 0x688 <appInitHardware>
    18b8:	0e 94 c8 07 	call	0xf90	; 0xf90 <clockGetus>
    18bc:	60 93 00 04 	sts	0x0400, r22
    18c0:	70 93 01 04 	sts	0x0401, r23
    18c4:	80 93 02 04 	sts	0x0402, r24
    18c8:	90 93 03 04 	sts	0x0403, r25
    18cc:	0e 94 21 03 	call	0x642	; 0x642 <appInitSoftware>
    18d0:	60 93 04 04 	sts	0x0404, r22
    18d4:	70 93 05 04 	sts	0x0405, r23
    18d8:	80 93 06 04 	sts	0x0406, r24
    18dc:	90 93 07 04 	sts	0x0407, r25
    18e0:	78 94       	sei
    18e2:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <breathe>
    18e6:	80 91 04 04 	lds	r24, 0x0404
    18ea:	90 91 05 04 	lds	r25, 0x0405
    18ee:	a0 91 06 04 	lds	r26, 0x0406
    18f2:	b0 91 07 04 	lds	r27, 0x0407
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	a1 05       	cpc	r26, r1
    18fa:	b1 05       	cpc	r27, r1
    18fc:	19 f4       	brne	.+6      	; 0x1904 <main+0x62>
    18fe:	16 c0       	rjmp	.+44     	; 0x192c <main+0x8a>
    1900:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <breathe>
    1904:	60 91 00 04 	lds	r22, 0x0400
    1908:	70 91 01 04 	lds	r23, 0x0401
    190c:	80 91 02 04 	lds	r24, 0x0402
    1910:	90 91 03 04 	lds	r25, 0x0403
    1914:	20 91 04 04 	lds	r18, 0x0404
    1918:	30 91 05 04 	lds	r19, 0x0405
    191c:	40 91 06 04 	lds	r20, 0x0406
    1920:	50 91 07 04 	lds	r21, 0x0407
    1924:	0e 94 b0 11 	call	0x2360	; 0x2360 <clockHasElapsed>
    1928:	88 23       	and	r24, r24
    192a:	51 f3       	breq	.-44     	; 0x1900 <main+0x5e>
    192c:	0e 94 c8 07 	call	0xf90	; 0xf90 <clockGetus>
    1930:	9b 01       	movw	r18, r22
    1932:	ac 01       	movw	r20, r24
    1934:	60 93 00 04 	sts	0x0400, r22
    1938:	70 93 01 04 	sts	0x0401, r23
    193c:	80 93 02 04 	sts	0x0402, r24
    1940:	90 93 03 04 	sts	0x0403, r25
    1944:	60 91 fc 03 	lds	r22, 0x03FC
    1948:	70 91 fd 03 	lds	r23, 0x03FD
    194c:	80 91 fe 03 	lds	r24, 0x03FE
    1950:	90 91 ff 03 	lds	r25, 0x03FF
    1954:	6f 5f       	subi	r22, 0xFF	; 255
    1956:	7f 4f       	sbci	r23, 0xFF	; 255
    1958:	8f 4f       	sbci	r24, 0xFF	; 255
    195a:	9f 4f       	sbci	r25, 0xFF	; 255
    195c:	60 93 fc 03 	sts	0x03FC, r22
    1960:	70 93 fd 03 	sts	0x03FD, r23
    1964:	80 93 fe 03 	sts	0x03FE, r24
    1968:	90 93 ff 03 	sts	0x03FF, r25
    196c:	0e 94 c5 02 	call	0x58a	; 0x58a <appControl>
    1970:	af cf       	rjmp	.-162    	; 0x18d0 <main+0x2e>

00001972 <marqueeSendByte>:
    1972:	cf 92       	push	r12
    1974:	df 92       	push	r13
    1976:	ef 92       	push	r14
    1978:	ff 92       	push	r15
    197a:	0f 93       	push	r16
    197c:	1f 93       	push	r17
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
    1982:	ec 01       	movw	r28, r24
    1984:	d6 2e       	mov	r13, r22
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	9d 81       	ldd	r25, Y+5	; 0x05
    198a:	89 2b       	or	r24, r25
    198c:	a9 f5       	brne	.+106    	; 0x19f8 <marqueeSendByte+0x86>
    198e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1990:	9b 85       	ldd	r25, Y+11	; 0x0b
    1992:	01 96       	adiw	r24, 0x01	; 1
    1994:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <malloc>
    1998:	9d 83       	std	Y+5, r25	; 0x05
    199a:	8c 83       	std	Y+4, r24	; 0x04
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	61 f1       	breq	.+88     	; 0x19f8 <marqueeSendByte+0x86>
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	07 c0       	rjmp	.+14     	; 0x19b4 <marqueeSendByte+0x42>
    19a6:	ec 81       	ldd	r30, Y+4	; 0x04
    19a8:	fd 81       	ldd	r31, Y+5	; 0x05
    19aa:	e2 0f       	add	r30, r18
    19ac:	f3 1f       	adc	r31, r19
    19ae:	10 82       	st	Z, r1
    19b0:	2f 5f       	subi	r18, 0xFF	; 255
    19b2:	3f 4f       	sbci	r19, 0xFF	; 255
    19b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    19b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    19b8:	82 17       	cp	r24, r18
    19ba:	93 07       	cpc	r25, r19
    19bc:	a0 f7       	brcc	.-24     	; 0x19a6 <marqueeSendByte+0x34>
    19be:	19 86       	std	Y+9, r1	; 0x09
    19c0:	18 86       	std	Y+8, r1	; 0x08
    19c2:	1f 82       	std	Y+7, r1	; 0x07
    19c4:	1e 82       	std	Y+6, r1	; 0x06
    19c6:	8c 89       	ldd	r24, Y+20	; 0x14
    19c8:	8e 7f       	andi	r24, 0xFE	; 254
    19ca:	8c 8b       	std	Y+20, r24	; 0x14
    19cc:	00 e0       	ldi	r16, 0x00	; 0
    19ce:	10 e0       	ldi	r17, 0x00	; 0
    19d0:	0e c0       	rjmp	.+28     	; 0x19ee <marqueeSendByte+0x7c>
    19d2:	c8 01       	movw	r24, r16
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	e8 81       	ld	r30, Y
    19da:	f9 81       	ldd	r31, Y+1	; 0x01
    19dc:	e8 0f       	add	r30, r24
    19de:	f9 1f       	adc	r31, r25
    19e0:	85 91       	lpm	r24, Z+
    19e2:	94 91       	lpm	r25, Z+
    19e4:	60 e2       	ldi	r22, 0x20	; 32
    19e6:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <segled_put_char>
    19ea:	0f 5f       	subi	r16, 0xFF	; 255
    19ec:	1f 4f       	sbci	r17, 0xFF	; 255
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	9b 81       	ldd	r25, Y+3	; 0x03
    19f2:	08 17       	cp	r16, r24
    19f4:	19 07       	cpc	r17, r25
    19f6:	68 f3       	brcs	.-38     	; 0x19d2 <marqueeSendByte+0x60>
    19f8:	ec 81       	ldd	r30, Y+4	; 0x04
    19fa:	fd 81       	ldd	r31, Y+5	; 0x05
    19fc:	30 97       	sbiw	r30, 0x00	; 0
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <marqueeSendByte+0x90>
    1a00:	3e c0       	rjmp	.+124    	; 0x1a7e <marqueeSendByte+0x10c>
    1a02:	8a e0       	ldi	r24, 0x0A	; 10
    1a04:	d8 16       	cp	r13, r24
    1a06:	19 f5       	brne	.+70     	; 0x1a4e <marqueeSendByte+0xdc>
    1a08:	88 85       	ldd	r24, Y+8	; 0x08
    1a0a:	99 85       	ldd	r25, Y+9	; 0x09
    1a0c:	e8 0f       	add	r30, r24
    1a0e:	f9 1f       	adc	r31, r25
    1a10:	10 82       	st	Z, r1
    1a12:	19 86       	std	Y+9, r1	; 0x09
    1a14:	18 86       	std	Y+8, r1	; 0x08
    1a16:	cf b6       	in	r12, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	8c 89       	ldd	r24, Y+20	; 0x14
    1a1c:	80 fd       	sbrc	r24, 0
    1a1e:	15 c0       	rjmp	.+42     	; 0x1a4a <marqueeSendByte+0xd8>
    1a20:	8c 89       	ldd	r24, Y+20	; 0x14
    1a22:	81 60       	ori	r24, 0x01	; 1
    1a24:	8c 8b       	std	Y+20, r24	; 0x14
    1a26:	8c 89       	ldd	r24, Y+20	; 0x14
    1a28:	8d 7f       	andi	r24, 0xFD	; 253
    1a2a:	8c 8b       	std	Y+20, r24	; 0x14
    1a2c:	1f 82       	std	Y+7, r1	; 0x07
    1a2e:	1e 82       	std	Y+6, r1	; 0x06
    1a30:	0e 94 c8 07 	call	0xf90	; 0xf90 <clockGetus>
    1a34:	9b 01       	movw	r18, r22
    1a36:	ac 01       	movw	r20, r24
    1a38:	ec 84       	ldd	r14, Y+12	; 0x0c
    1a3a:	fd 84       	ldd	r15, Y+13	; 0x0d
    1a3c:	0e 85       	ldd	r16, Y+14	; 0x0e
    1a3e:	1f 85       	ldd	r17, Y+15	; 0x0f
    1a40:	89 e4       	ldi	r24, 0x49	; 73
    1a42:	9d e0       	ldi	r25, 0x0D	; 13
    1a44:	be 01       	movw	r22, r28
    1a46:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <scheduleJob>
    1a4a:	cf be       	out	0x3f, r12	; 63
    1a4c:	18 c0       	rjmp	.+48     	; 0x1a7e <marqueeSendByte+0x10c>
    1a4e:	8d e0       	ldi	r24, 0x0D	; 13
    1a50:	d8 16       	cp	r13, r24
    1a52:	a9 f0       	breq	.+42     	; 0x1a7e <marqueeSendByte+0x10c>
    1a54:	28 85       	ldd	r18, Y+8	; 0x08
    1a56:	39 85       	ldd	r19, Y+9	; 0x09
    1a58:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a5c:	28 17       	cp	r18, r24
    1a5e:	39 07       	cpc	r19, r25
    1a60:	70 f4       	brcc	.+28     	; 0x1a7e <marqueeSendByte+0x10c>
    1a62:	e2 0f       	add	r30, r18
    1a64:	f3 1f       	adc	r31, r19
    1a66:	2f b7       	in	r18, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	d0 82       	st	Z, r13
    1a6c:	11 82       	std	Z+1, r1	; 0x01
    1a6e:	88 85       	ldd	r24, Y+8	; 0x08
    1a70:	99 85       	ldd	r25, Y+9	; 0x09
    1a72:	01 96       	adiw	r24, 0x01	; 1
    1a74:	99 87       	std	Y+9, r25	; 0x09
    1a76:	88 87       	std	Y+8, r24	; 0x08
    1a78:	1f 82       	std	Y+7, r1	; 0x07
    1a7a:	1e 82       	std	Y+6, r1	; 0x06
    1a7c:	2f bf       	out	0x3f, r18	; 63
    1a7e:	8d 2d       	mov	r24, r13
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	ff 90       	pop	r15
    1a8a:	ef 90       	pop	r14
    1a8c:	df 90       	pop	r13
    1a8e:	cf 90       	pop	r12
    1a90:	08 95       	ret

00001a92 <marqueeUpdate>:
    1a92:	2f 92       	push	r2
    1a94:	3f 92       	push	r3
    1a96:	4f 92       	push	r4
    1a98:	5f 92       	push	r5
    1a9a:	6f 92       	push	r6
    1a9c:	7f 92       	push	r7
    1a9e:	8f 92       	push	r8
    1aa0:	9f 92       	push	r9
    1aa2:	af 92       	push	r10
    1aa4:	bf 92       	push	r11
    1aa6:	cf 92       	push	r12
    1aa8:	df 92       	push	r13
    1aaa:	ef 92       	push	r14
    1aac:	ff 92       	push	r15
    1aae:	0f 93       	push	r16
    1ab0:	1f 93       	push	r17
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	38 2e       	mov	r3, r24
    1ab8:	29 2e       	mov	r2, r25
    1aba:	2a 01       	movw	r4, r20
    1abc:	3b 01       	movw	r6, r22
    1abe:	c8 2f       	mov	r28, r24
    1ac0:	d9 2f       	mov	r29, r25
    1ac2:	0c 81       	ldd	r16, Y+4	; 0x04
    1ac4:	1d 81       	ldd	r17, Y+5	; 0x05
    1ac6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac8:	9f 81       	ldd	r25, Y+7	; 0x07
    1aca:	08 0f       	add	r16, r24
    1acc:	19 1f       	adc	r17, r25
    1ace:	f8 01       	movw	r30, r16
    1ad0:	80 80       	ld	r8, Z
    1ad2:	8c 89       	ldd	r24, Y+20	; 0x14
    1ad4:	86 95       	lsr	r24
    1ad6:	81 70       	andi	r24, 0x01	; 1
    1ad8:	88 20       	and	r8, r8
    1ada:	29 f4       	brne	.+10     	; 0x1ae6 <marqueeUpdate+0x54>
    1adc:	a8 88       	ldd	r10, Y+16	; 0x10
    1ade:	b9 88       	ldd	r11, Y+17	; 0x11
    1ae0:	ca 88       	ldd	r12, Y+18	; 0x12
    1ae2:	db 88       	ldd	r13, Y+19	; 0x13
    1ae4:	04 c0       	rjmp	.+8      	; 0x1aee <marqueeUpdate+0x5c>
    1ae6:	ac 84       	ldd	r10, Y+12	; 0x0c
    1ae8:	bd 84       	ldd	r11, Y+13	; 0x0d
    1aea:	ce 84       	ldd	r12, Y+14	; 0x0e
    1aec:	df 84       	ldd	r13, Y+15	; 0x0f
    1aee:	88 23       	and	r24, r24
    1af0:	d1 f4       	brne	.+52     	; 0x1b26 <marqueeUpdate+0x94>
    1af2:	88 20       	and	r8, r8
    1af4:	c1 f0       	breq	.+48     	; 0x1b26 <marqueeUpdate+0x94>
    1af6:	f8 01       	movw	r30, r16
    1af8:	32 91       	ld	r19, -Z
    1afa:	8f 01       	movw	r16, r30
    1afc:	0f 5f       	subi	r16, 0xFF	; 255
    1afe:	1f 4f       	sbci	r17, 0xFF	; 255
    1b00:	4a 81       	ldd	r20, Y+2	; 0x02
    1b02:	5b 81       	ldd	r21, Y+3	; 0x03
    1b04:	f8 01       	movw	r30, r16
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	07 c0       	rjmp	.+14     	; 0x1b1a <marqueeUpdate+0x88>
    1b0c:	20 81       	ld	r18, Z
    1b0e:	22 23       	and	r18, r18
    1b10:	51 f0       	breq	.+20     	; 0x1b26 <marqueeUpdate+0x94>
    1b12:	23 17       	cp	r18, r19
    1b14:	41 f4       	brne	.+16     	; 0x1b26 <marqueeUpdate+0x94>
    1b16:	31 96       	adiw	r30, 0x01	; 1
    1b18:	01 96       	adiw	r24, 0x01	; 1
    1b1a:	84 17       	cp	r24, r20
    1b1c:	95 07       	cpc	r25, r21
    1b1e:	b0 f3       	brcs	.-20     	; 0x1b0c <marqueeUpdate+0x7a>
    1b20:	99 24       	eor	r9, r9
    1b22:	9a 94       	dec	r9
    1b24:	01 c0       	rjmp	.+2      	; 0x1b28 <marqueeUpdate+0x96>
    1b26:	99 24       	eor	r9, r9
    1b28:	8c 89       	ldd	r24, Y+20	; 0x14
    1b2a:	86 95       	lsr	r24
    1b2c:	81 70       	andi	r24, 0x01	; 1
    1b2e:	29 2d       	mov	r18, r9
    1b30:	33 27       	eor	r19, r19
    1b32:	27 fd       	sbrc	r18, 7
    1b34:	30 95       	com	r19
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	28 17       	cp	r18, r24
    1b3a:	39 07       	cpc	r19, r25
    1b3c:	c1 f0       	breq	.+48     	; 0x1b6e <marqueeUpdate+0xdc>
    1b3e:	a6 01       	movw	r20, r12
    1b40:	95 01       	movw	r18, r10
    1b42:	62 e0       	ldi	r22, 0x02	; 2
    1b44:	56 95       	lsr	r21
    1b46:	47 95       	ror	r20
    1b48:	37 95       	ror	r19
    1b4a:	27 95       	ror	r18
    1b4c:	6a 95       	dec	r22
    1b4e:	d1 f7       	brne	.-12     	; 0x1b44 <marqueeUpdate+0xb2>
    1b50:	99 2d       	mov	r25, r9
    1b52:	92 70       	andi	r25, 0x02	; 2
    1b54:	8c 89       	ldd	r24, Y+20	; 0x14
    1b56:	8d 7f       	andi	r24, 0xFD	; 253
    1b58:	89 2b       	or	r24, r25
    1b5a:	8c 8b       	std	Y+20, r24	; 0x14
    1b5c:	99 20       	and	r9, r9
    1b5e:	19 f0       	breq	.+6      	; 0x1b66 <marqueeUpdate+0xd4>
    1b60:	59 01       	movw	r10, r18
    1b62:	6a 01       	movw	r12, r20
    1b64:	04 c0       	rjmp	.+8      	; 0x1b6e <marqueeUpdate+0xdc>
    1b66:	a2 1a       	sub	r10, r18
    1b68:	b3 0a       	sbc	r11, r19
    1b6a:	c4 0a       	sbc	r12, r20
    1b6c:	d5 0a       	sbc	r13, r21
    1b6e:	ee 24       	eor	r14, r14
    1b70:	ff 24       	eor	r15, r15
    1b72:	18 c0       	rjmp	.+48     	; 0x1ba4 <marqueeUpdate+0x112>
    1b74:	c7 01       	movw	r24, r14
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	e8 81       	ld	r30, Y
    1b7c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b7e:	e8 0f       	add	r30, r24
    1b80:	f9 1f       	adc	r31, r25
    1b82:	85 91       	lpm	r24, Z+
    1b84:	94 91       	lpm	r25, Z+
    1b86:	99 20       	and	r9, r9
    1b88:	39 f4       	brne	.+14     	; 0x1b98 <marqueeUpdate+0x106>
    1b8a:	f8 01       	movw	r30, r16
    1b8c:	60 81       	ld	r22, Z
    1b8e:	66 23       	and	r22, r22
    1b90:	19 f0       	breq	.+6      	; 0x1b98 <marqueeUpdate+0x106>
    1b92:	0f 5f       	subi	r16, 0xFF	; 255
    1b94:	1f 4f       	sbci	r17, 0xFF	; 255
    1b96:	01 c0       	rjmp	.+2      	; 0x1b9a <marqueeUpdate+0x108>
    1b98:	60 e2       	ldi	r22, 0x20	; 32
    1b9a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <segled_put_char>
    1b9e:	08 94       	sec
    1ba0:	e1 1c       	adc	r14, r1
    1ba2:	f1 1c       	adc	r15, r1
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba8:	e8 16       	cp	r14, r24
    1baa:	f9 06       	cpc	r15, r25
    1bac:	18 f3       	brcs	.-58     	; 0x1b74 <marqueeUpdate+0xe2>
    1bae:	88 20       	and	r8, r8
    1bb0:	b1 f4       	brne	.+44     	; 0x1bde <marqueeUpdate+0x14c>
    1bb2:	1f 82       	std	Y+7, r1	; 0x07
    1bb4:	1e 82       	std	Y+6, r1	; 0x06
    1bb6:	88 89       	ldd	r24, Y+16	; 0x10
    1bb8:	99 89       	ldd	r25, Y+17	; 0x11
    1bba:	aa 89       	ldd	r26, Y+18	; 0x12
    1bbc:	bb 89       	ldd	r27, Y+19	; 0x13
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	a1 05       	cpc	r26, r1
    1bc2:	b1 05       	cpc	r27, r1
    1bc4:	29 f0       	breq	.+10     	; 0x1bd0 <marqueeUpdate+0x13e>
    1bc6:	ec 81       	ldd	r30, Y+4	; 0x04
    1bc8:	fd 81       	ldd	r31, Y+5	; 0x05
    1bca:	80 81       	ld	r24, Z
    1bcc:	88 23       	and	r24, r24
    1bce:	19 f4       	brne	.+6      	; 0x1bd6 <marqueeUpdate+0x144>
    1bd0:	8c 89       	ldd	r24, Y+20	; 0x14
    1bd2:	8e 7f       	andi	r24, 0xFE	; 254
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <marqueeUpdate+0x148>
    1bd6:	8c 89       	ldd	r24, Y+20	; 0x14
    1bd8:	8d 7f       	andi	r24, 0xFD	; 253
    1bda:	8c 8b       	std	Y+20, r24	; 0x14
    1bdc:	07 c0       	rjmp	.+14     	; 0x1bec <marqueeUpdate+0x15a>
    1bde:	99 20       	and	r9, r9
    1be0:	29 f4       	brne	.+10     	; 0x1bec <marqueeUpdate+0x15a>
    1be2:	8e 81       	ldd	r24, Y+6	; 0x06
    1be4:	9f 81       	ldd	r25, Y+7	; 0x07
    1be6:	01 96       	adiw	r24, 0x01	; 1
    1be8:	9f 83       	std	Y+7, r25	; 0x07
    1bea:	8e 83       	std	Y+6, r24	; 0x06
    1bec:	8c 89       	ldd	r24, Y+20	; 0x14
    1bee:	80 ff       	sbrs	r24, 0
    1bf0:	0a c0       	rjmp	.+20     	; 0x1c06 <marqueeUpdate+0x174>
    1bf2:	89 e4       	ldi	r24, 0x49	; 73
    1bf4:	9d e0       	ldi	r25, 0x0D	; 13
    1bf6:	63 2d       	mov	r22, r3
    1bf8:	72 2d       	mov	r23, r2
    1bfa:	a3 01       	movw	r20, r6
    1bfc:	92 01       	movw	r18, r4
    1bfe:	86 01       	movw	r16, r12
    1c00:	75 01       	movw	r14, r10
    1c02:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <scheduleJob>
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	0f 91       	pop	r16
    1c0e:	ff 90       	pop	r15
    1c10:	ef 90       	pop	r14
    1c12:	df 90       	pop	r13
    1c14:	cf 90       	pop	r12
    1c16:	bf 90       	pop	r11
    1c18:	af 90       	pop	r10
    1c1a:	9f 90       	pop	r9
    1c1c:	8f 90       	pop	r8
    1c1e:	7f 90       	pop	r7
    1c20:	6f 90       	pop	r6
    1c22:	5f 90       	pop	r5
    1c24:	4f 90       	pop	r4
    1c26:	3f 90       	pop	r3
    1c28:	2f 90       	pop	r2
    1c2a:	08 95       	ret

00001c2c <segled_put_char>:
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	8c 01       	movw	r16, r24
    1c3a:	e6 2e       	mov	r14, r22
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	80 89       	ldd	r24, Z+16	; 0x10
    1c40:	81 fd       	sbrc	r24, 1
    1c42:	12 c0       	rjmp	.+36     	; 0x1c68 <segled_put_char+0x3c>
    1c44:	c0 e0       	ldi	r28, 0x00	; 0
    1c46:	d0 e0       	ldi	r29, 0x00	; 0
    1c48:	f8 01       	movw	r30, r16
    1c4a:	ec 0f       	add	r30, r28
    1c4c:	fd 1f       	adc	r31, r29
    1c4e:	80 81       	ld	r24, Z
    1c50:	91 81       	ldd	r25, Z+1	; 0x01
    1c52:	60 e0       	ldi	r22, 0x00	; 0
    1c54:	0e 94 08 0c 	call	0x1810	; 0x1810 <pin_make_output>
    1c58:	22 96       	adiw	r28, 0x02	; 2
    1c5a:	c0 31       	cpi	r28, 0x10	; 16
    1c5c:	d1 05       	cpc	r29, r1
    1c5e:	a1 f7       	brne	.-24     	; 0x1c48 <segled_put_char+0x1c>
    1c60:	f8 01       	movw	r30, r16
    1c62:	80 89       	ldd	r24, Z+16	; 0x10
    1c64:	82 60       	ori	r24, 0x02	; 2
    1c66:	80 8b       	std	Z+16, r24	; 0x10
    1c68:	8e 2d       	mov	r24, r14
    1c6a:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <segled8_get_mask>
    1c6e:	f8 2e       	mov	r15, r24
    1c70:	80 ff       	sbrs	r24, 0
    1c72:	07 c0       	rjmp	.+14     	; 0x1c82 <segled_put_char+0x56>
    1c74:	f8 01       	movw	r30, r16
    1c76:	86 85       	ldd	r24, Z+14	; 0x0e
    1c78:	97 85       	ldd	r25, Z+15	; 0x0f
    1c7a:	89 2b       	or	r24, r25
    1c7c:	11 f4       	brne	.+4      	; 0x1c82 <segled_put_char+0x56>
    1c7e:	80 e1       	ldi	r24, 0x10	; 16
    1c80:	f8 2e       	mov	r15, r24
    1c82:	f8 01       	movw	r30, r16
    1c84:	80 89       	ldd	r24, Z+16	; 0x10
    1c86:	80 ff       	sbrs	r24, 0
    1c88:	f0 94       	com	r15
    1c8a:	c0 e0       	ldi	r28, 0x00	; 0
    1c8c:	d0 e0       	ldi	r29, 0x00	; 0
    1c8e:	f8 01       	movw	r30, r16
    1c90:	ec 0f       	add	r30, r28
    1c92:	fd 1f       	adc	r31, r29
    1c94:	80 81       	ld	r24, Z
    1c96:	91 81       	ldd	r25, Z+1	; 0x01
    1c98:	f7 fe       	sbrs	r15, 7
    1c9a:	03 c0       	rjmp	.+6      	; 0x1ca2 <segled_put_char+0x76>
    1c9c:	0e 94 2b 12 	call	0x2456	; 0x2456 <pin_high>
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <segled_put_char+0x7a>
    1ca2:	0e 94 06 12 	call	0x240c	; 0x240c <pin_low>
    1ca6:	22 96       	adiw	r28, 0x02	; 2
    1ca8:	c0 31       	cpi	r28, 0x10	; 16
    1caa:	d1 05       	cpc	r29, r1
    1cac:	11 f0       	breq	.+4      	; 0x1cb2 <segled_put_char+0x86>
    1cae:	ff 0c       	add	r15, r15
    1cb0:	ee cf       	rjmp	.-36     	; 0x1c8e <segled_put_char+0x62>
    1cb2:	8e 2d       	mov	r24, r14
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	1f 91       	pop	r17
    1cba:	0f 91       	pop	r16
    1cbc:	ff 90       	pop	r15
    1cbe:	ef 90       	pop	r14
    1cc0:	08 95       	ret

00001cc2 <segled_set>:
    1cc2:	ef 92       	push	r14
    1cc4:	ff 92       	push	r15
    1cc6:	0f 93       	push	r16
    1cc8:	1f 93       	push	r17
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	8c 01       	movw	r16, r24
    1cd0:	e6 2e       	mov	r14, r22
    1cd2:	f4 2e       	mov	r15, r20
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	80 89       	ldd	r24, Z+16	; 0x10
    1cd8:	81 fd       	sbrc	r24, 1
    1cda:	12 c0       	rjmp	.+36     	; 0x1d00 <segled_set+0x3e>
    1cdc:	c0 e0       	ldi	r28, 0x00	; 0
    1cde:	d0 e0       	ldi	r29, 0x00	; 0
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	ec 0f       	add	r30, r28
    1ce4:	fd 1f       	adc	r31, r29
    1ce6:	80 81       	ld	r24, Z
    1ce8:	91 81       	ldd	r25, Z+1	; 0x01
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	0e 94 08 0c 	call	0x1810	; 0x1810 <pin_make_output>
    1cf0:	22 96       	adiw	r28, 0x02	; 2
    1cf2:	c0 31       	cpi	r28, 0x10	; 16
    1cf4:	d1 05       	cpc	r29, r1
    1cf6:	a1 f7       	brne	.-24     	; 0x1ce0 <segled_set+0x1e>
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	80 89       	ldd	r24, Z+16	; 0x10
    1cfc:	82 60       	ori	r24, 0x02	; 2
    1cfe:	80 8b       	std	Z+16, r24	; 0x10
    1d00:	f8 01       	movw	r30, r16
    1d02:	80 89       	ldd	r24, Z+16	; 0x10
    1d04:	80 fd       	sbrc	r24, 0
    1d06:	06 c0       	rjmp	.+12     	; 0x1d14 <segled_set+0x52>
    1d08:	ff 20       	and	r15, r15
    1d0a:	19 f4       	brne	.+6      	; 0x1d12 <segled_set+0x50>
    1d0c:	ff 24       	eor	r15, r15
    1d0e:	fa 94       	dec	r15
    1d10:	01 c0       	rjmp	.+2      	; 0x1d14 <segled_set+0x52>
    1d12:	ff 24       	eor	r15, r15
    1d14:	ee 2d       	mov	r30, r14
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	ee 0f       	add	r30, r30
    1d1a:	ff 1f       	adc	r31, r31
    1d1c:	e0 0f       	add	r30, r16
    1d1e:	f1 1f       	adc	r31, r17
    1d20:	80 81       	ld	r24, Z
    1d22:	91 81       	ldd	r25, Z+1	; 0x01
    1d24:	6f 2d       	mov	r22, r15
    1d26:	0e 94 4f 12 	call	0x249e	; 0x249e <pin_set>
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	ff 90       	pop	r15
    1d34:	ef 90       	pop	r14
    1d36:	08 95       	ret

00001d38 <segled8_get_mask>:
    1d38:	e8 2f       	mov	r30, r24
    1d3a:	81 54       	subi	r24, 0x41	; 65
    1d3c:	8a 31       	cpi	r24, 0x1A	; 26
    1d3e:	28 f4       	brcc	.+10     	; 0x1d4a <segled8_get_mask+0x12>
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	e3 5a       	subi	r30, 0xA3	; 163
    1d44:	fc 4f       	sbci	r31, 0xFC	; 252
    1d46:	84 91       	lpm	r24, Z+
    1d48:	08 95       	ret
    1d4a:	8e 2f       	mov	r24, r30
    1d4c:	81 56       	subi	r24, 0x61	; 97
    1d4e:	8a 31       	cpi	r24, 0x1A	; 26
    1d50:	28 f4       	brcc	.+10     	; 0x1d5c <segled8_get_mask+0x24>
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	e3 5c       	subi	r30, 0xC3	; 195
    1d56:	fc 4f       	sbci	r31, 0xFC	; 252
    1d58:	84 91       	lpm	r24, Z+
    1d5a:	08 95       	ret
    1d5c:	8e 2f       	mov	r24, r30
    1d5e:	80 53       	subi	r24, 0x30	; 48
    1d60:	8a 30       	cpi	r24, 0x0A	; 10
    1d62:	28 f4       	brcc	.+10     	; 0x1d6e <segled8_get_mask+0x36>
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	e8 57       	subi	r30, 0x78	; 120
    1d68:	fc 4f       	sbci	r31, 0xFC	; 252
    1d6a:	84 91       	lpm	r24, Z+
    1d6c:	08 95       	ret
    1d6e:	ea 30       	cpi	r30, 0x0A	; 10
    1d70:	28 f4       	brcc	.+10     	; 0x1d7c <segled8_get_mask+0x44>
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	e8 54       	subi	r30, 0x48	; 72
    1d76:	fc 4f       	sbci	r31, 0xFC	; 252
    1d78:	84 91       	lpm	r24, Z+
    1d7a:	08 95       	ret
    1d7c:	ed 32       	cpi	r30, 0x2D	; 45
    1d7e:	11 f4       	brne	.+4      	; 0x1d84 <segled8_get_mask+0x4c>
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	08 95       	ret
    1d84:	eb 35       	cpi	r30, 0x5B	; 91
    1d86:	79 f0       	breq	.+30     	; 0x1da6 <segled8_get_mask+0x6e>
    1d88:	eb 37       	cpi	r30, 0x7B	; 123
    1d8a:	69 f0       	breq	.+26     	; 0x1da6 <segled8_get_mask+0x6e>
    1d8c:	e8 32       	cpi	r30, 0x28	; 40
    1d8e:	59 f0       	breq	.+22     	; 0x1da6 <segled8_get_mask+0x6e>
    1d90:	ed 35       	cpi	r30, 0x5D	; 93
    1d92:	59 f0       	breq	.+22     	; 0x1daa <segled8_get_mask+0x72>
    1d94:	ed 37       	cpi	r30, 0x7D	; 125
    1d96:	49 f0       	breq	.+18     	; 0x1daa <segled8_get_mask+0x72>
    1d98:	e9 32       	cpi	r30, 0x29	; 41
    1d9a:	39 f0       	breq	.+14     	; 0x1daa <segled8_get_mask+0x72>
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	ee 32       	cpi	r30, 0x2E	; 46
    1da0:	29 f4       	brne	.+10     	; 0x1dac <segled8_get_mask+0x74>
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	08 95       	ret
    1da6:	8c e9       	ldi	r24, 0x9C	; 156
    1da8:	08 95       	ret
    1daa:	80 ef       	ldi	r24, 0xF0	; 240
    1dac:	08 95       	ret

00001dae <compareFromIOPin>:
    1dae:	bf 92       	push	r11
    1db0:	cf 92       	push	r12
    1db2:	df 92       	push	r13
    1db4:	ef 92       	push	r14
    1db6:	ff 92       	push	r15
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	6c 01       	movw	r12, r24
    1dc2:	b0 90 b2 02 	lds	r11, 0x02B2
    1dc6:	24 ef       	ldi	r18, 0xF4	; 244
    1dc8:	31 e0       	ldi	r19, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	c0 e0       	ldi	r28, 0x00	; 0
    1dce:	d0 e0       	ldi	r29, 0x00	; 0
    1dd0:	2d c0       	rjmp	.+90     	; 0x1e2c <compareFromIOPin+0x7e>
    1dd2:	28 5f       	subi	r18, 0xF8	; 248
    1dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd6:	f9 01       	movw	r30, r18
    1dd8:	e4 90       	lpm	r14, Z+
    1dda:	28 50       	subi	r18, 0x08	; 8
    1ddc:	30 40       	sbci	r19, 0x00	; 0
    1dde:	f9 01       	movw	r30, r18
    1de0:	77 96       	adiw	r30, 0x17	; 23
    1de2:	2a 5f       	subi	r18, 0xFA	; 250
    1de4:	3f 4f       	sbci	r19, 0xFF	; 255
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	a0 e0       	ldi	r26, 0x00	; 0
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	05 91       	lpm	r16, Z+
    1dee:	14 91       	lpm	r17, Z+
    1df0:	f9 01       	movw	r30, r18
    1df2:	f4 90       	lpm	r15, Z+
    1df4:	26 50       	subi	r18, 0x06	; 6
    1df6:	30 40       	sbci	r19, 0x00	; 0
    1df8:	14 c0       	rjmp	.+40     	; 0x1e22 <compareFromIOPin+0x74>
    1dfa:	b8 01       	movw	r22, r16
    1dfc:	6a 0f       	add	r22, r26
    1dfe:	7b 1f       	adc	r23, r27
    1e00:	fb 01       	movw	r30, r22
    1e02:	3e 96       	adiw	r30, 0x0e	; 14
    1e04:	45 91       	lpm	r20, Z+
    1e06:	54 91       	lpm	r21, Z+
    1e08:	41 15       	cp	r20, r1
    1e0a:	51 05       	cpc	r21, r1
    1e0c:	41 f0       	breq	.+16     	; 0x1e1e <compareFromIOPin+0x70>
    1e0e:	4c 15       	cp	r20, r12
    1e10:	5d 05       	cpc	r21, r13
    1e12:	29 f4       	brne	.+10     	; 0x1e1e <compareFromIOPin+0x70>
    1e14:	ff 20       	and	r15, r15
    1e16:	11 f0       	breq	.+4      	; 0x1e1c <compareFromIOPin+0x6e>
    1e18:	eb 01       	movw	r28, r22
    1e1a:	0a c0       	rjmp	.+20     	; 0x1e30 <compareFromIOPin+0x82>
    1e1c:	eb 01       	movw	r28, r22
    1e1e:	8f 5f       	subi	r24, 0xFF	; 255
    1e20:	50 96       	adiw	r26, 0x10	; 16
    1e22:	8e 15       	cp	r24, r14
    1e24:	50 f3       	brcs	.-44     	; 0x1dfa <compareFromIOPin+0x4c>
    1e26:	9f 5f       	subi	r25, 0xFF	; 255
    1e28:	24 5d       	subi	r18, 0xD4	; 212
    1e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e2c:	9b 15       	cp	r25, r11
    1e2e:	88 f2       	brcs	.-94     	; 0x1dd2 <compareFromIOPin+0x24>
    1e30:	ce 01       	movw	r24, r28
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	1f 91       	pop	r17
    1e38:	0f 91       	pop	r16
    1e3a:	ff 90       	pop	r15
    1e3c:	ef 90       	pop	r14
    1e3e:	df 90       	pop	r13
    1e40:	cf 90       	pop	r12
    1e42:	bf 90       	pop	r11
    1e44:	08 95       	ret

00001e46 <compareSetOutputMode>:
    1e46:	9c 01       	movw	r18, r24
    1e48:	0b 96       	adiw	r24, 0x0b	; 11
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	a5 91       	lpm	r26, Z+
    1e4e:	b4 91       	lpm	r27, Z+
    1e50:	23 5f       	subi	r18, 0xF3	; 243
    1e52:	3f 4f       	sbci	r19, 0xFF	; 255
    1e54:	f9 01       	movw	r30, r18
    1e56:	24 91       	lpm	r18, Z+
    1e58:	70 e0       	ldi	r23, 0x00	; 0
    1e5a:	02 2e       	mov	r0, r18
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <compareSetOutputMode+0x1c>
    1e5e:	66 0f       	add	r22, r22
    1e60:	77 1f       	adc	r23, r23
    1e62:	0a 94       	dec	r0
    1e64:	e2 f7       	brpl	.-8      	; 0x1e5e <compareSetOutputMode+0x18>
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <compareSetOutputMode+0x2a>
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	2a 95       	dec	r18
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <compareSetOutputMode+0x26>
    1e74:	28 2f       	mov	r18, r24
    1e76:	22 0f       	add	r18, r18
    1e78:	28 2b       	or	r18, r24
    1e7a:	9c 91       	ld	r25, X
    1e7c:	82 2f       	mov	r24, r18
    1e7e:	86 23       	and	r24, r22
    1e80:	20 95       	com	r18
    1e82:	29 23       	and	r18, r25
    1e84:	82 2b       	or	r24, r18
    1e86:	8c 93       	st	X, r24
    1e88:	08 95       	ret

00001e8a <compareSetThreshold>:
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	9c 01       	movw	r18, r24
    1e90:	2e 5f       	subi	r18, 0xFE	; 254
    1e92:	3f 4f       	sbci	r19, 0xFF	; 255
    1e94:	f9 01       	movw	r30, r18
    1e96:	84 91       	lpm	r24, Z+
    1e98:	22 50       	subi	r18, 0x02	; 2
    1e9a:	30 40       	sbci	r19, 0x00	; 0
    1e9c:	9c e2       	ldi	r25, 0x2C	; 44
    1e9e:	89 9f       	mul	r24, r25
    1ea0:	a0 01       	movw	r20, r0
    1ea2:	11 24       	eor	r1, r1
    1ea4:	4c 50       	subi	r20, 0x0C	; 12
    1ea6:	5e 4f       	sbci	r21, 0xFE	; 254
    1ea8:	48 5f       	subi	r20, 0xF8	; 248
    1eaa:	5f 4f       	sbci	r21, 0xFF	; 255
    1eac:	fa 01       	movw	r30, r20
    1eae:	84 91       	lpm	r24, Z+
    1eb0:	48 50       	subi	r20, 0x08	; 8
    1eb2:	50 40       	sbci	r21, 0x00	; 0
    1eb4:	88 23       	and	r24, r24
    1eb6:	c1 f0       	breq	.+48     	; 0x1ee8 <compareSetThreshold+0x5e>
    1eb8:	c9 01       	movw	r24, r18
    1eba:	06 96       	adiw	r24, 0x06	; 6
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	c5 91       	lpm	r28, Z+
    1ec0:	d4 91       	lpm	r29, Z+
    1ec2:	fa 01       	movw	r30, r20
    1ec4:	36 96       	adiw	r30, 0x06	; 6
    1ec6:	e4 91       	lpm	r30, Z+
    1ec8:	ee 23       	and	r30, r30
    1eca:	19 f0       	breq	.+6      	; 0x1ed2 <compareSetThreshold+0x48>
    1ecc:	79 83       	std	Y+1, r23	; 0x01
    1ece:	68 83       	st	Y, r22
    1ed0:	0e c0       	rjmp	.+28     	; 0x1eee <compareSetThreshold+0x64>
    1ed2:	6f 3f       	cpi	r22, 0xFF	; 255
    1ed4:	71 05       	cpc	r23, r1
    1ed6:	31 f0       	breq	.+12     	; 0x1ee4 <compareSetThreshold+0x5a>
    1ed8:	28 f0       	brcs	.+10     	; 0x1ee4 <compareSetThreshold+0x5a>
    1eda:	8e ef       	ldi	r24, 0xFE	; 254
    1edc:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <setError>
    1ee0:	6f ef       	ldi	r22, 0xFF	; 255
    1ee2:	70 e0       	ldi	r23, 0x00	; 0
    1ee4:	68 83       	st	Y, r22
    1ee6:	03 c0       	rjmp	.+6      	; 0x1eee <compareSetThreshold+0x64>
    1ee8:	8d ef       	ldi	r24, 0xFD	; 253
    1eea:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <setError>
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	08 95       	ret

00001ef4 <_uartSetBaudRate>:
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	19 96       	adiw	r26, 0x09	; 9
    1ef8:	8d 91       	ld	r24, X+
    1efa:	9c 91       	ld	r25, X
    1efc:	1a 97       	sbiw	r26, 0x0a	; 10
    1efe:	fc 01       	movw	r30, r24
    1f00:	25 91       	lpm	r18, Z+
    1f02:	34 91       	lpm	r19, Z+
    1f04:	cd 01       	movw	r24, r26
    1f06:	f9 01       	movw	r30, r18
    1f08:	09 95       	icall
    1f0a:	08 95       	ret

00001f0c <_uartInit>:
    1f0c:	df 92       	push	r13
    1f0e:	ef 92       	push	r14
    1f10:	ff 92       	push	r15
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    1f16:	cf 93       	push	r28
    1f18:	df 93       	push	r29
    1f1a:	ec 01       	movw	r28, r24
    1f1c:	7a 01       	movw	r14, r20
    1f1e:	8b 01       	movw	r16, r22
    1f20:	df b6       	in	r13, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f26:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f2a:	98 89       	ldd	r25, Y+16	; 0x10
    1f2c:	28 17       	cp	r18, r24
    1f2e:	39 07       	cpc	r19, r25
    1f30:	11 f0       	breq	.+4      	; 0x1f36 <_uartInit+0x2a>
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	01 c0       	rjmp	.+2      	; 0x1f38 <_uartInit+0x2c>
    1f36:	8f ef       	ldi	r24, 0xFF	; 255
    1f38:	8f 8b       	std	Y+23, r24	; 0x17
    1f3a:	88 23       	and	r24, r24
    1f3c:	81 f0       	breq	.+32     	; 0x1f5e <_uartInit+0x52>
    1f3e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f40:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f44:	98 89       	ldd	r25, Y+16	; 0x10
    1f46:	28 17       	cp	r18, r24
    1f48:	39 07       	cpc	r19, r25
    1f4a:	21 f0       	breq	.+8      	; 0x1f54 <_uartInit+0x48>
    1f4c:	c9 01       	movw	r24, r18
    1f4e:	60 e0       	ldi	r22, 0x00	; 0
    1f50:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <pin_make_input>
    1f54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f56:	98 89       	ldd	r25, Y+16	; 0x10
    1f58:	6f ef       	ldi	r22, 0xFF	; 255
    1f5a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <pin_make_input>
    1f5e:	88 85       	ldd	r24, Y+8	; 0x08
    1f60:	81 60       	ori	r24, 0x01	; 1
    1f62:	88 87       	std	Y+8, r24	; 0x08
    1f64:	88 85       	ldd	r24, Y+8	; 0x08
    1f66:	8b 7f       	andi	r24, 0xFB	; 251
    1f68:	88 87       	std	Y+8, r24	; 0x08
    1f6a:	88 85       	ldd	r24, Y+8	; 0x08
    1f6c:	8d 7f       	andi	r24, 0xFD	; 253
    1f6e:	88 87       	std	Y+8, r24	; 0x08
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	04 96       	adiw	r24, 0x04	; 4
    1f76:	fc 01       	movw	r30, r24
    1f78:	25 91       	lpm	r18, Z+
    1f7a:	34 91       	lpm	r19, Z+
    1f7c:	ce 01       	movw	r24, r28
    1f7e:	b8 01       	movw	r22, r16
    1f80:	a7 01       	movw	r20, r14
    1f82:	f9 01       	movw	r30, r18
    1f84:	09 95       	icall
    1f86:	df be       	out	0x3f, r13	; 63
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	1f 91       	pop	r17
    1f8e:	0f 91       	pop	r16
    1f90:	ff 90       	pop	r15
    1f92:	ef 90       	pop	r14
    1f94:	df 90       	pop	r13
    1f96:	08 95       	ret

00001f98 <__uartHWSetBaudRate>:
    1f98:	bf 92       	push	r11
    1f9a:	cf 92       	push	r12
    1f9c:	df 92       	push	r13
    1f9e:	ef 92       	push	r14
    1fa0:	ff 92       	push	r15
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	7a 01       	movw	r14, r20
    1fac:	8b 01       	movw	r16, r22
    1fae:	ec 01       	movw	r28, r24
    1fb0:	bf b6       	in	r11, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	4f 3f       	cpi	r20, 0xFF	; 255
    1fb6:	8f ef       	ldi	r24, 0xFF	; 255
    1fb8:	58 07       	cpc	r21, r24
    1fba:	8f ef       	ldi	r24, 0xFF	; 255
    1fbc:	68 07       	cpc	r22, r24
    1fbe:	8f ef       	ldi	r24, 0xFF	; 255
    1fc0:	78 07       	cpc	r23, r24
    1fc2:	21 f4       	brne	.+8      	; 0x1fcc <__uartHWSetBaudRate+0x34>
    1fc4:	a1 e0       	ldi	r26, 0x01	; 1
    1fc6:	ca 2e       	mov	r12, r26
    1fc8:	d1 2c       	mov	r13, r1
    1fca:	24 c0       	rjmp	.+72     	; 0x2014 <__uartHWSetBaudRate+0x7c>
    1fcc:	cb 01       	movw	r24, r22
    1fce:	ba 01       	movw	r22, r20
    1fd0:	f3 e0       	ldi	r31, 0x03	; 3
    1fd2:	66 0f       	add	r22, r22
    1fd4:	77 1f       	adc	r23, r23
    1fd6:	88 1f       	adc	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	fa 95       	dec	r31
    1fdc:	d1 f7       	brne	.-12     	; 0x1fd2 <__uartHWSetBaudRate+0x3a>
    1fde:	20 91 00 02 	lds	r18, 0x0200
    1fe2:	30 91 01 02 	lds	r19, 0x0201
    1fe6:	40 91 02 02 	lds	r20, 0x0202
    1fea:	50 91 03 02 	lds	r21, 0x0203
    1fee:	62 0f       	add	r22, r18
    1ff0:	73 1f       	adc	r23, r19
    1ff2:	84 1f       	adc	r24, r20
    1ff4:	95 1f       	adc	r25, r21
    1ff6:	a8 01       	movw	r20, r16
    1ff8:	97 01       	movw	r18, r14
    1ffa:	e4 e0       	ldi	r30, 0x04	; 4
    1ffc:	22 0f       	add	r18, r18
    1ffe:	33 1f       	adc	r19, r19
    2000:	44 1f       	adc	r20, r20
    2002:	55 1f       	adc	r21, r21
    2004:	ea 95       	dec	r30
    2006:	d1 f7       	brne	.-12     	; 0x1ffc <__uartHWSetBaudRate+0x64>
    2008:	0e 94 a7 1a 	call	0x354e	; 0x354e <__udivmodsi4>
    200c:	69 01       	movw	r12, r18
    200e:	08 94       	sec
    2010:	c1 08       	sbc	r12, r1
    2012:	d1 08       	sbc	r13, r1
    2014:	98 a9       	ldd	r25, Y+48	; 0x30
    2016:	99 23       	and	r25, r25
    2018:	c9 f1       	breq	.+114    	; 0x208c <__uartHWSetBaudRate+0xf4>
    201a:	ec a1       	ldd	r30, Y+36	; 0x24
    201c:	fd a1       	ldd	r31, Y+37	; 0x25
    201e:	80 81       	ld	r24, Z
    2020:	90 95       	com	r25
    2022:	89 23       	and	r24, r25
    2024:	80 83       	st	Z, r24
    2026:	8f ef       	ldi	r24, 0xFF	; 255
    2028:	e8 16       	cp	r14, r24
    202a:	8f ef       	ldi	r24, 0xFF	; 255
    202c:	f8 06       	cpc	r15, r24
    202e:	8f ef       	ldi	r24, 0xFF	; 255
    2030:	08 07       	cpc	r16, r24
    2032:	8f ef       	ldi	r24, 0xFF	; 255
    2034:	18 07       	cpc	r17, r24
    2036:	19 f4       	brne	.+6      	; 0x203e <__uartHWSetBaudRate+0xa6>
    2038:	21 e0       	ldi	r18, 0x01	; 1
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	1d c0       	rjmp	.+58     	; 0x2078 <__uartHWSetBaudRate+0xe0>
    203e:	32 e0       	ldi	r19, 0x02	; 2
    2040:	ee 0c       	add	r14, r14
    2042:	ff 1c       	adc	r15, r15
    2044:	00 1f       	adc	r16, r16
    2046:	11 1f       	adc	r17, r17
    2048:	3a 95       	dec	r19
    204a:	d1 f7       	brne	.-12     	; 0x2040 <__uartHWSetBaudRate+0xa8>
    204c:	60 91 00 02 	lds	r22, 0x0200
    2050:	70 91 01 02 	lds	r23, 0x0201
    2054:	80 91 02 02 	lds	r24, 0x0202
    2058:	90 91 03 02 	lds	r25, 0x0203
    205c:	6e 0d       	add	r22, r14
    205e:	7f 1d       	adc	r23, r15
    2060:	80 1f       	adc	r24, r16
    2062:	91 1f       	adc	r25, r17
    2064:	ee 0c       	add	r14, r14
    2066:	ff 1c       	adc	r15, r15
    2068:	00 1f       	adc	r16, r16
    206a:	11 1f       	adc	r17, r17
    206c:	a8 01       	movw	r20, r16
    206e:	97 01       	movw	r18, r14
    2070:	0e 94 a7 1a 	call	0x354e	; 0x354e <__udivmodsi4>
    2074:	21 50       	subi	r18, 0x01	; 1
    2076:	30 40       	sbci	r19, 0x00	; 0
    2078:	2c 15       	cp	r18, r12
    207a:	3d 05       	cpc	r19, r13
    207c:	38 f0       	brcs	.+14     	; 0x208c <__uartHWSetBaudRate+0xf4>
    207e:	ec a1       	ldd	r30, Y+36	; 0x24
    2080:	fd a1       	ldd	r31, Y+37	; 0x25
    2082:	80 81       	ld	r24, Z
    2084:	98 a9       	ldd	r25, Y+48	; 0x30
    2086:	89 2b       	or	r24, r25
    2088:	80 83       	st	Z, r24
    208a:	69 01       	movw	r12, r18
    208c:	e8 a5       	ldd	r30, Y+40	; 0x28
    208e:	f9 a5       	ldd	r31, Y+41	; 0x29
    2090:	c0 82       	st	Z, r12
    2092:	ea a5       	ldd	r30, Y+42	; 0x2a
    2094:	fb a5       	ldd	r31, Y+43	; 0x2b
    2096:	d0 82       	st	Z, r13
    2098:	bf be       	out	0x3f, r11	; 63
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	1f 91       	pop	r17
    20a0:	0f 91       	pop	r16
    20a2:	ff 90       	pop	r15
    20a4:	ef 90       	pop	r14
    20a6:	df 90       	pop	r13
    20a8:	cf 90       	pop	r12
    20aa:	bf 90       	pop	r11
    20ac:	08 95       	ret

000020ae <__uartHWOff>:
    20ae:	dc 01       	movw	r26, r24
    20b0:	96 96       	adiw	r26, 0x26	; 38
    20b2:	ed 91       	ld	r30, X+
    20b4:	fc 91       	ld	r31, X
    20b6:	97 97       	sbiw	r26, 0x27	; 39
    20b8:	80 81       	ld	r24, Z
    20ba:	87 72       	andi	r24, 0x27	; 39
    20bc:	80 83       	st	Z, r24
    20be:	d0 96       	adiw	r26, 0x30	; 48
    20c0:	9c 91       	ld	r25, X
    20c2:	d0 97       	sbiw	r26, 0x30	; 48
    20c4:	99 23       	and	r25, r25
    20c6:	41 f0       	breq	.+16     	; 0x20d8 <__uartHWOff+0x2a>
    20c8:	94 96       	adiw	r26, 0x24	; 36
    20ca:	ed 91       	ld	r30, X+
    20cc:	fc 91       	ld	r31, X
    20ce:	95 97       	sbiw	r26, 0x25	; 37
    20d0:	80 81       	ld	r24, Z
    20d2:	90 95       	com	r25
    20d4:	89 23       	and	r24, r25
    20d6:	80 83       	st	Z, r24
    20d8:	08 95       	ret

000020da <oneWireReceiveMode>:
    20da:	dc 01       	movw	r26, r24
    20dc:	57 96       	adiw	r26, 0x17	; 23
    20de:	8c 91       	ld	r24, X
    20e0:	57 97       	sbiw	r26, 0x17	; 23
    20e2:	88 23       	and	r24, r24
    20e4:	71 f0       	breq	.+28     	; 0x2102 <oneWireReceiveMode+0x28>
    20e6:	96 96       	adiw	r26, 0x26	; 38
    20e8:	ed 91       	ld	r30, X+
    20ea:	fc 91       	ld	r31, X
    20ec:	97 97       	sbiw	r26, 0x27	; 39
    20ee:	80 81       	ld	r24, Z
    20f0:	87 7b       	andi	r24, 0xB7	; 183
    20f2:	80 83       	st	Z, r24
    20f4:	96 96       	adiw	r26, 0x26	; 38
    20f6:	ed 91       	ld	r30, X+
    20f8:	fc 91       	ld	r31, X
    20fa:	97 97       	sbiw	r26, 0x27	; 39
    20fc:	80 81       	ld	r24, Z
    20fe:	80 69       	ori	r24, 0x90	; 144
    2100:	80 83       	st	Z, r24
    2102:	08 95       	ret

00002104 <__uartHWStartXmit>:
    2104:	dc 01       	movw	r26, r24
    2106:	9c 96       	adiw	r26, 0x2c	; 44
    2108:	ed 91       	ld	r30, X+
    210a:	fc 91       	ld	r31, X
    210c:	9d 97       	sbiw	r26, 0x2d	; 45
    210e:	60 83       	st	Z, r22
    2110:	08 95       	ret

00002112 <startXmitMode>:
    2112:	dc 01       	movw	r26, r24
    2114:	57 96       	adiw	r26, 0x17	; 23
    2116:	8c 91       	ld	r24, X
    2118:	57 97       	sbiw	r26, 0x17	; 23
    211a:	88 23       	and	r24, r24
    211c:	71 f0       	breq	.+28     	; 0x213a <startXmitMode+0x28>
    211e:	96 96       	adiw	r26, 0x26	; 38
    2120:	ed 91       	ld	r30, X+
    2122:	fc 91       	ld	r31, X
    2124:	97 97       	sbiw	r26, 0x27	; 39
    2126:	80 81       	ld	r24, Z
    2128:	8f 76       	andi	r24, 0x6F	; 111
    212a:	80 83       	st	Z, r24
    212c:	96 96       	adiw	r26, 0x26	; 38
    212e:	ed 91       	ld	r30, X+
    2130:	fc 91       	ld	r31, X
    2132:	97 97       	sbiw	r26, 0x27	; 39
    2134:	80 81       	ld	r24, Z
    2136:	88 64       	ori	r24, 0x48	; 72
    2138:	80 83       	st	Z, r24
    213a:	08 95       	ret

0000213c <__uartHWInit>:
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	ec 01       	movw	r28, r24
    2142:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <_uartSetBaudRate>
    2146:	8f 89       	ldd	r24, Y+23	; 0x17
    2148:	88 23       	and	r24, r24
    214a:	11 f0       	breq	.+4      	; 0x2150 <__uartHWInit+0x14>
    214c:	20 e9       	ldi	r18, 0x90	; 144
    214e:	0c c0       	rjmp	.+24     	; 0x2168 <__uartHWInit+0x2c>
    2150:	8d 85       	ldd	r24, Y+13	; 0x0d
    2152:	9e 85       	ldd	r25, Y+14	; 0x0e
    2154:	89 2b       	or	r24, r25
    2156:	11 f0       	breq	.+4      	; 0x215c <__uartHWInit+0x20>
    2158:	20 e9       	ldi	r18, 0x90	; 144
    215a:	01 c0       	rjmp	.+2      	; 0x215e <__uartHWInit+0x22>
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2160:	98 89       	ldd	r25, Y+16	; 0x10
    2162:	89 2b       	or	r24, r25
    2164:	09 f0       	breq	.+2      	; 0x2168 <__uartHWInit+0x2c>
    2166:	28 64       	ori	r18, 0x48	; 72
    2168:	ee a1       	ldd	r30, Y+38	; 0x26
    216a:	ff a1       	ldd	r31, Y+39	; 0x27
    216c:	20 83       	st	Z, r18
    216e:	df 91       	pop	r29
    2170:	cf 91       	pop	r28
    2172:	08 95       	ret

00002174 <__uartReceiveService>:
    2174:	dc 01       	movw	r26, r24
    2176:	26 2f       	mov	r18, r22
    2178:	14 96       	adiw	r26, 0x04	; 4
    217a:	8d 91       	ld	r24, X+
    217c:	9c 91       	ld	r25, X
    217e:	15 97       	sbiw	r26, 0x05	; 5
    2180:	89 2b       	or	r24, r25
    2182:	59 f0       	breq	.+22     	; 0x219a <__uartReceiveService+0x26>
    2184:	14 96       	adiw	r26, 0x04	; 4
    2186:	ed 91       	ld	r30, X+
    2188:	fc 91       	ld	r31, X
    218a:	15 97       	sbiw	r26, 0x05	; 5
    218c:	16 96       	adiw	r26, 0x06	; 6
    218e:	6d 91       	ld	r22, X+
    2190:	7c 91       	ld	r23, X
    2192:	17 97       	sbiw	r26, 0x07	; 7
    2194:	82 2f       	mov	r24, r18
    2196:	09 95       	icall
    2198:	08 95       	ret
    219a:	90 96       	adiw	r26, 0x20	; 32
    219c:	ed 91       	ld	r30, X+
    219e:	fc 91       	ld	r31, X
    21a0:	91 97       	sbiw	r26, 0x21	; 33
    21a2:	cd 01       	movw	r24, r26
    21a4:	09 95       	icall
    21a6:	08 95       	ret

000021a8 <__uartGetByte>:
    21a8:	fc 01       	movw	r30, r24
    21aa:	22 a1       	ldd	r18, Z+34	; 0x22
    21ac:	33 a1       	ldd	r19, Z+35	; 0x23
    21ae:	f9 01       	movw	r30, r18
    21b0:	09 95       	icall
    21b2:	08 95       	ret

000021b4 <__uartGetByteUnbuffered>:
    21b4:	fc 01       	movw	r30, r24
    21b6:	4f b7       	in	r20, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	23 85       	ldd	r18, Z+11	; 0x0b
    21bc:	34 85       	ldd	r19, Z+12	; 0x0c
    21be:	8f ef       	ldi	r24, 0xFF	; 255
    21c0:	9f ef       	ldi	r25, 0xFF	; 255
    21c2:	94 87       	std	Z+12, r25	; 0x0c
    21c4:	83 87       	std	Z+11, r24	; 0x0b
    21c6:	4f bf       	out	0x3f, r20	; 63
    21c8:	c9 01       	movw	r24, r18
    21ca:	08 95       	ret

000021cc <__uartReceiveUnbuffered>:
    21cc:	fc 01       	movw	r30, r24
    21ce:	83 85       	ldd	r24, Z+11	; 0x0b
    21d0:	94 85       	ldd	r25, Z+12	; 0x0c
    21d2:	8f 5f       	subi	r24, 0xFF	; 255
    21d4:	9f 4f       	sbci	r25, 0xFF	; 255
    21d6:	29 f4       	brne	.+10     	; 0x21e2 <__uartReceiveUnbuffered+0x16>
    21d8:	86 2f       	mov	r24, r22
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	94 87       	std	Z+12, r25	; 0x0c
    21de:	83 87       	std	Z+11, r24	; 0x0b
    21e0:	08 95       	ret
    21e2:	80 85       	ldd	r24, Z+8	; 0x08
    21e4:	84 60       	ori	r24, 0x04	; 4
    21e6:	80 87       	std	Z+8, r24	; 0x08
    21e8:	85 ef       	ldi	r24, 0xF5	; 245
    21ea:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <setError>
    21ee:	08 95       	ret

000021f0 <_uartStartXmit>:
    21f0:	dc 01       	movw	r26, r24
    21f2:	19 96       	adiw	r26, 0x09	; 9
    21f4:	8d 91       	ld	r24, X+
    21f6:	9c 91       	ld	r25, X
    21f8:	1a 97       	sbiw	r26, 0x0a	; 10
    21fa:	02 96       	adiw	r24, 0x02	; 2
    21fc:	fc 01       	movw	r30, r24
    21fe:	25 91       	lpm	r18, Z+
    2200:	34 91       	lpm	r19, Z+
    2202:	cd 01       	movw	r24, r26
    2204:	f9 01       	movw	r30, r18
    2206:	09 95       	icall
    2208:	08 95       	ret

0000220a <_uartTransmitBlockStart>:
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	ec 01       	movw	r28, r24
    2210:	88 85       	ldd	r24, Y+8	; 0x08
    2212:	8e 7f       	andi	r24, 0xFE	; 254
    2214:	88 87       	std	Y+8, r24	; 0x08
    2216:	e8 8d       	ldd	r30, Y+24	; 0x18
    2218:	f9 8d       	ldd	r31, Y+25	; 0x19
    221a:	30 97       	sbiw	r30, 0x00	; 0
    221c:	21 f0       	breq	.+8      	; 0x2226 <_uartTransmitBlockStart+0x1c>
    221e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2220:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2222:	6f ef       	ldi	r22, 0xFF	; 255
    2224:	09 95       	icall
    2226:	e9 85       	ldd	r30, Y+9	; 0x09
    2228:	fa 85       	ldd	r31, Y+10	; 0x0a
    222a:	38 96       	adiw	r30, 0x08	; 8
    222c:	25 91       	lpm	r18, Z+
    222e:	34 91       	lpm	r19, Z+
    2230:	21 15       	cp	r18, r1
    2232:	31 05       	cpc	r19, r1
    2234:	19 f0       	breq	.+6      	; 0x223c <_uartTransmitBlockStart+0x32>
    2236:	ce 01       	movw	r24, r28
    2238:	f9 01       	movw	r30, r18
    223a:	09 95       	icall
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	08 95       	ret

00002242 <_uartTransmitBlockEnd>:
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	ec 01       	movw	r28, r24
    2248:	88 85       	ldd	r24, Y+8	; 0x08
    224a:	81 60       	ori	r24, 0x01	; 1
    224c:	88 87       	std	Y+8, r24	; 0x08
    224e:	e9 85       	ldd	r30, Y+9	; 0x09
    2250:	fa 85       	ldd	r31, Y+10	; 0x0a
    2252:	3a 96       	adiw	r30, 0x0a	; 10
    2254:	25 91       	lpm	r18, Z+
    2256:	34 91       	lpm	r19, Z+
    2258:	21 15       	cp	r18, r1
    225a:	31 05       	cpc	r19, r1
    225c:	19 f0       	breq	.+6      	; 0x2264 <_uartTransmitBlockEnd+0x22>
    225e:	ce 01       	movw	r24, r28
    2260:	f9 01       	movw	r30, r18
    2262:	09 95       	icall
    2264:	e8 8d       	ldd	r30, Y+24	; 0x18
    2266:	f9 8d       	ldd	r31, Y+25	; 0x19
    2268:	30 97       	sbiw	r30, 0x00	; 0
    226a:	21 f0       	breq	.+8      	; 0x2274 <_uartTransmitBlockEnd+0x32>
    226c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    226e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2270:	60 e0       	ldi	r22, 0x00	; 0
    2272:	09 95       	icall
    2274:	df 91       	pop	r29
    2276:	cf 91       	pop	r28
    2278:	08 95       	ret

0000227a <_uartSendBuffer>:
    227a:	ef 92       	push	r14
    227c:	ff 92       	push	r15
    227e:	0f 93       	push	r16
    2280:	1f 93       	push	r17
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	8c 01       	movw	r16, r24
    2288:	7b 01       	movw	r14, r22
    228a:	ea 01       	movw	r28, r20
    228c:	0b c0       	rjmp	.+22     	; 0x22a4 <_uartSendBuffer+0x2a>
    228e:	d7 01       	movw	r26, r14
    2290:	6d 91       	ld	r22, X+
    2292:	7d 01       	movw	r14, r26
    2294:	d8 01       	movw	r26, r16
    2296:	5c 96       	adiw	r26, 0x1c	; 28
    2298:	ed 91       	ld	r30, X+
    229a:	fc 91       	ld	r31, X
    229c:	5d 97       	sbiw	r26, 0x1d	; 29
    229e:	c8 01       	movw	r24, r16
    22a0:	09 95       	icall
    22a2:	21 97       	sbiw	r28, 0x01	; 1
    22a4:	20 97       	sbiw	r28, 0x00	; 0
    22a6:	99 f7       	brne	.-26     	; 0x228e <_uartSendBuffer+0x14>
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	1f 91       	pop	r17
    22ae:	0f 91       	pop	r16
    22b0:	ff 90       	pop	r15
    22b2:	ef 90       	pop	r14
    22b4:	08 95       	ret

000022b6 <_uartSendByte>:
    22b6:	1f 93       	push	r17
    22b8:	fc 01       	movw	r30, r24
    22ba:	16 2f       	mov	r17, r22
    22bc:	24 8d       	ldd	r18, Z+28	; 0x1c
    22be:	35 8d       	ldd	r19, Z+29	; 0x1d
    22c0:	f9 01       	movw	r30, r18
    22c2:	09 95       	icall
    22c4:	81 2f       	mov	r24, r17
    22c6:	1f 91       	pop	r17
    22c8:	08 95       	ret

000022ca <__uartTransmitService>:
    22ca:	fc 01       	movw	r30, r24
    22cc:	26 8d       	ldd	r18, Z+30	; 0x1e
    22ce:	37 8d       	ldd	r19, Z+31	; 0x1f
    22d0:	f9 01       	movw	r30, r18
    22d2:	09 95       	icall
    22d4:	08 95       	ret

000022d6 <__uartSendNextUnbuffered>:
    22d6:	1f 93       	push	r17
    22d8:	1f b7       	in	r17, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	0e 94 21 11 	call	0x2242	; 0x2242 <_uartTransmitBlockEnd>
    22e0:	1f bf       	out	0x3f, r17	; 63
    22e2:	1f 91       	pop	r17
    22e4:	08 95       	ret

000022e6 <__uartSendUnbuffered>:
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	06 2f       	mov	r16, r22
    22f0:	ec 01       	movw	r28, r24
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <__uartSendUnbuffered+0x12>
    22f4:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <breathe>
    22f8:	88 85       	ldd	r24, Y+8	; 0x08
    22fa:	80 ff       	sbrs	r24, 0
    22fc:	fb cf       	rjmp	.-10     	; 0x22f4 <__uartSendUnbuffered+0xe>
    22fe:	1f b7       	in	r17, 0x3f	; 63
    2300:	f8 94       	cli
    2302:	ce 01       	movw	r24, r28
    2304:	0e 94 05 11 	call	0x220a	; 0x220a <_uartTransmitBlockStart>
    2308:	ce 01       	movw	r24, r28
    230a:	60 2f       	mov	r22, r16
    230c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <_uartStartXmit>
    2310:	1f bf       	out	0x3f, r17	; 63
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	1f 91       	pop	r17
    2318:	0f 91       	pop	r16
    231a:	08 95       	ret

0000231c <uartReceivePollingMode>:
    231c:	dc 01       	movw	r26, r24
    231e:	96 96       	adiw	r26, 0x26	; 38
    2320:	ed 91       	ld	r30, X+
    2322:	fc 91       	ld	r31, X
    2324:	97 97       	sbiw	r26, 0x27	; 39
    2326:	66 23       	and	r22, r22
    2328:	19 f0       	breq	.+6      	; 0x2330 <uartReceivePollingMode+0x14>
    232a:	80 81       	ld	r24, Z
    232c:	8f 77       	andi	r24, 0x7F	; 127
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <uartReceivePollingMode+0x18>
    2330:	80 81       	ld	r24, Z
    2332:	80 68       	ori	r24, 0x80	; 128
    2334:	80 83       	st	Z, r24
    2336:	08 95       	ret

00002338 <uartPollByte>:
    2338:	dc 01       	movw	r26, r24
    233a:	94 96       	adiw	r26, 0x24	; 36
    233c:	ed 91       	ld	r30, X+
    233e:	fc 91       	ld	r31, X
    2340:	95 97       	sbiw	r26, 0x25	; 37
    2342:	80 81       	ld	r24, Z
    2344:	87 fd       	sbrc	r24, 7
    2346:	03 c0       	rjmp	.+6      	; 0x234e <uartPollByte+0x16>
    2348:	2f ef       	ldi	r18, 0xFF	; 255
    234a:	3f ef       	ldi	r19, 0xFF	; 255
    234c:	07 c0       	rjmp	.+14     	; 0x235c <uartPollByte+0x24>
    234e:	9c 96       	adiw	r26, 0x2c	; 44
    2350:	ed 91       	ld	r30, X+
    2352:	fc 91       	ld	r31, X
    2354:	9d 97       	sbiw	r26, 0x2d	; 45
    2356:	80 81       	ld	r24, Z
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	c9 01       	movw	r24, r18
    235e:	08 95       	ret

00002360 <clockHasElapsed>:
    2360:	0f 93       	push	r16
    2362:	1f 93       	push	r17
    2364:	00 e0       	ldi	r16, 0x00	; 0
    2366:	10 e0       	ldi	r17, 0x00	; 0
    2368:	0e 94 b9 11 	call	0x2372	; 0x2372 <clockHasElapsedGetOverflow>
    236c:	1f 91       	pop	r17
    236e:	0f 91       	pop	r16
    2370:	08 95       	ret

00002372 <clockHasElapsedGetOverflow>:
    2372:	8f 92       	push	r8
    2374:	9f 92       	push	r9
    2376:	af 92       	push	r10
    2378:	bf 92       	push	r11
    237a:	cf 92       	push	r12
    237c:	df 92       	push	r13
    237e:	ef 92       	push	r14
    2380:	ff 92       	push	r15
    2382:	0f 93       	push	r16
    2384:	1f 93       	push	r17
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	6b 01       	movw	r12, r22
    238c:	7c 01       	movw	r14, r24
    238e:	49 01       	movw	r8, r18
    2390:	5a 01       	movw	r10, r20
    2392:	e8 01       	movw	r28, r16
    2394:	0e 94 c8 07 	call	0xf90	; 0xf90 <clockGetus>
    2398:	6c 19       	sub	r22, r12
    239a:	7d 09       	sbc	r23, r13
    239c:	8e 09       	sbc	r24, r14
    239e:	9f 09       	sbc	r25, r15
    23a0:	68 15       	cp	r22, r8
    23a2:	79 05       	cpc	r23, r9
    23a4:	8a 05       	cpc	r24, r10
    23a6:	9b 05       	cpc	r25, r11
    23a8:	68 f0       	brcs	.+26     	; 0x23c4 <clockHasElapsedGetOverflow+0x52>
    23aa:	01 15       	cp	r16, r1
    23ac:	11 05       	cpc	r17, r1
    23ae:	41 f0       	breq	.+16     	; 0x23c0 <clockHasElapsedGetOverflow+0x4e>
    23b0:	68 19       	sub	r22, r8
    23b2:	79 09       	sbc	r23, r9
    23b4:	8a 09       	sbc	r24, r10
    23b6:	9b 09       	sbc	r25, r11
    23b8:	68 83       	st	Y, r22
    23ba:	79 83       	std	Y+1, r23	; 0x01
    23bc:	8a 83       	std	Y+2, r24	; 0x02
    23be:	9b 83       	std	Y+3, r25	; 0x03
    23c0:	8f ef       	ldi	r24, 0xFF	; 255
    23c2:	0c c0       	rjmp	.+24     	; 0x23dc <clockHasElapsedGetOverflow+0x6a>
    23c4:	01 15       	cp	r16, r1
    23c6:	11 05       	cpc	r17, r1
    23c8:	41 f0       	breq	.+16     	; 0x23da <clockHasElapsedGetOverflow+0x68>
    23ca:	86 1a       	sub	r8, r22
    23cc:	97 0a       	sbc	r9, r23
    23ce:	a8 0a       	sbc	r10, r24
    23d0:	b9 0a       	sbc	r11, r25
    23d2:	88 82       	st	Y, r8
    23d4:	99 82       	std	Y+1, r9	; 0x01
    23d6:	aa 82       	std	Y+2, r10	; 0x02
    23d8:	bb 82       	std	Y+3, r11	; 0x03
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	1f 91       	pop	r17
    23e2:	0f 91       	pop	r16
    23e4:	ff 90       	pop	r15
    23e6:	ef 90       	pop	r14
    23e8:	df 90       	pop	r13
    23ea:	cf 90       	pop	r12
    23ec:	bf 90       	pop	r11
    23ee:	af 90       	pop	r10
    23f0:	9f 90       	pop	r9
    23f2:	8f 90       	pop	r8
    23f4:	08 95       	ret

000023f6 <breathe>:
    23f6:	8f b7       	in	r24, 0x3f	; 63
    23f8:	78 94       	sei
	...
    2406:	00 00       	nop
    2408:	8f bf       	out	0x3f, r24	; 63
    240a:	08 95       	ret

0000240c <pin_low>:
    240c:	cf 93       	push	r28
    240e:	df 93       	push	r29
    2410:	9c 01       	movw	r18, r24
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	e9 f0       	breq	.+58     	; 0x2450 <pin_low+0x44>
    2416:	fc 01       	movw	r30, r24
    2418:	85 91       	lpm	r24, Z+
    241a:	94 91       	lpm	r25, Z+
    241c:	fc 01       	movw	r30, r24
    241e:	a5 91       	lpm	r26, Z+
    2420:	b4 91       	lpm	r27, Z+
    2422:	02 96       	adiw	r24, 0x02	; 2
    2424:	fc 01       	movw	r30, r24
    2426:	c5 91       	lpm	r28, Z+
    2428:	d4 91       	lpm	r29, Z+
    242a:	2e 5f       	subi	r18, 0xFE	; 254
    242c:	3f 4f       	sbci	r19, 0xFF	; 255
    242e:	f9 01       	movw	r30, r18
    2430:	24 91       	lpm	r18, Z+
    2432:	88 81       	ld	r24, Y
    2434:	82 23       	and	r24, r18
    2436:	49 f0       	breq	.+18     	; 0x244a <pin_low+0x3e>
    2438:	9f b7       	in	r25, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	8c 91       	ld	r24, X
    243e:	20 95       	com	r18
    2440:	82 23       	and	r24, r18
    2442:	8c 93       	st	X, r24
    2444:	9f bf       	out	0x3f, r25	; 63
    2446:	00 00       	nop
    2448:	03 c0       	rjmp	.+6      	; 0x2450 <pin_low+0x44>
    244a:	87 ef       	ldi	r24, 0xF7	; 247
    244c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <setError>
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	08 95       	ret

00002456 <pin_high>:
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
    245a:	9c 01       	movw	r18, r24
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	e1 f0       	breq	.+56     	; 0x2498 <pin_high+0x42>
    2460:	fc 01       	movw	r30, r24
    2462:	85 91       	lpm	r24, Z+
    2464:	94 91       	lpm	r25, Z+
    2466:	fc 01       	movw	r30, r24
    2468:	a5 91       	lpm	r26, Z+
    246a:	b4 91       	lpm	r27, Z+
    246c:	02 96       	adiw	r24, 0x02	; 2
    246e:	fc 01       	movw	r30, r24
    2470:	c5 91       	lpm	r28, Z+
    2472:	d4 91       	lpm	r29, Z+
    2474:	2e 5f       	subi	r18, 0xFE	; 254
    2476:	3f 4f       	sbci	r19, 0xFF	; 255
    2478:	f9 01       	movw	r30, r18
    247a:	24 91       	lpm	r18, Z+
    247c:	88 81       	ld	r24, Y
    247e:	82 23       	and	r24, r18
    2480:	41 f0       	breq	.+16     	; 0x2492 <pin_high+0x3c>
    2482:	9f b7       	in	r25, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	8c 91       	ld	r24, X
    2488:	82 2b       	or	r24, r18
    248a:	8c 93       	st	X, r24
    248c:	9f bf       	out	0x3f, r25	; 63
    248e:	00 00       	nop
    2490:	03 c0       	rjmp	.+6      	; 0x2498 <pin_high+0x42>
    2492:	87 ef       	ldi	r24, 0xF7	; 247
    2494:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <setError>
    2498:	df 91       	pop	r29
    249a:	cf 91       	pop	r28
    249c:	08 95       	ret

0000249e <pin_set>:
    249e:	66 23       	and	r22, r22
    24a0:	19 f0       	breq	.+6      	; 0x24a8 <pin_set+0xa>
    24a2:	0e 94 2b 12 	call	0x2456	; 0x2456 <pin_high>
    24a6:	08 95       	ret
    24a8:	0e 94 06 12 	call	0x240c	; 0x240c <pin_low>
    24ac:	08 95       	ret

000024ae <__scheduleUpdate>:
	uint16_t rtn = MIN(ticks,CLOCK_TOP);
	return rtn;
}

// called under compare interrupts when there is something in the queue
static void __scheduleUpdate(void){
    24ae:	2f 92       	push	r2
    24b0:	3f 92       	push	r3
    24b2:	4f 92       	push	r4
    24b4:	5f 92       	push	r5
    24b6:	6f 92       	push	r6
    24b8:	7f 92       	push	r7
    24ba:	8f 92       	push	r8
    24bc:	9f 92       	push	r9
    24be:	af 92       	push	r10
    24c0:	bf 92       	push	r11
    24c2:	cf 92       	push	r12
    24c4:	df 92       	push	r13
    24c6:	ef 92       	push	r14
    24c8:	ff 92       	push	r15
    24ca:	0f 93       	push	r16
    24cc:	1f 93       	push	r17
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	27 97       	sbiw	r28, 0x07	; 7
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
	// Dont call me again - turn off compare interrupts
	SCHEDULER_INT_DISABLE;
    24e2:	80 91 73 00 	lds	r24, 0x0073
    24e6:	8b 7f       	andi	r24, 0xFB	; 251
    24e8:	80 93 73 00 	sts	0x0073, r24

	// Turn interrupts back on
	INTERRUPTABLE_SECTION{
    24ec:	2f b7       	in	r18, 0x3f	; 63
    24ee:	2f 83       	std	Y+7, r18	; 0x07
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
    24f0:	78 94       	sei
		__running = TRUE;
    24f2:	8f ef       	ldi	r24, 0xFF	; 255
    24f4:	80 93 15 04 	sts	0x0415, r24
		TICK_COUNT lowest;
		do{
			int slot;
			__recheck = FALSE;
    24f8:	10 92 16 04 	sts	0x0416, r1
			JOB* job;
			lowest=0;
			for(slot=maxJobs-1, job=&__queue[slot]; slot>=0; slot--, job--){
    24fc:	80 91 e7 02 	lds	r24, 0x02E7
    2500:	a8 2f       	mov	r26, r24
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	11 97       	sbiw	r26, 0x01	; 1
    2506:	be 83       	std	Y+6, r27	; 0x06
    2508:	ad 83       	std	Y+5, r26	; 0x05
    250a:	ed e0       	ldi	r30, 0x0D	; 13
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	ae 9f       	mul	r26, r30
    2510:	50 01       	movw	r10, r0
    2512:	af 9f       	mul	r26, r31
    2514:	b0 0c       	add	r11, r0
    2516:	be 9f       	mul	r27, r30
    2518:	b0 0c       	add	r11, r0
    251a:	11 24       	eor	r1, r1
    251c:	28 e0       	ldi	r18, 0x08	; 8
    251e:	34 e0       	ldi	r19, 0x04	; 4
    2520:	a2 0e       	add	r10, r18
    2522:	b3 1e       	adc	r11, r19
    2524:	66 24       	eor	r6, r6
    2526:	77 24       	eor	r7, r7
    2528:	43 01       	movw	r8, r6
    252a:	5a c0       	rjmp	.+180    	; 0x25e0 <__scheduleUpdate+0x132>
				if(job->used){
    252c:	d5 01       	movw	r26, r10
    252e:	8c 91       	ld	r24, X
    2530:	88 23       	and	r24, r24
    2532:	09 f4       	brne	.+2      	; 0x2536 <__scheduleUpdate+0x88>
    2534:	4c c0       	rjmp	.+152    	; 0x25ce <__scheduleUpdate+0x120>
					// check if time has elapsed
					TICK_COUNT overflow;	// how many us the timer has overshot when it should have happened
					TICK_COUNT start=job->start;
    2536:	19 96       	adiw	r26, 0x09	; 9
    2538:	2d 90       	ld	r2, X+
    253a:	3d 90       	ld	r3, X+
    253c:	4d 90       	ld	r4, X+
    253e:	5c 90       	ld	r5, X
    2540:	1c 97       	sbiw	r26, 0x0c	; 12
					TICK_COUNT delay=job->delay;
    2542:	15 96       	adiw	r26, 0x05	; 5
    2544:	cd 90       	ld	r12, X+
    2546:	dd 90       	ld	r13, X+
    2548:	ed 90       	ld	r14, X+
    254a:	fc 90       	ld	r15, X
    254c:	18 97       	sbiw	r26, 0x08	; 8
					if(clockHasElapsedGetOverflow(start, delay, &overflow)){
    254e:	c2 01       	movw	r24, r4
    2550:	b1 01       	movw	r22, r2
    2552:	a7 01       	movw	r20, r14
    2554:	96 01       	movw	r18, r12
    2556:	8e 01       	movw	r16, r28
    2558:	0f 5f       	subi	r16, 0xFF	; 255
    255a:	1f 4f       	sbci	r17, 0xFF	; 255
    255c:	0e 94 b9 11 	call	0x2372	; 0x2372 <clockHasElapsedGetOverflow>
    2560:	88 23       	and	r24, r24
    2562:	19 f1       	breq	.+70     	; 0x25aa <__scheduleUpdate+0xfc>
						SchedulerCallback callback = job->callback;
    2564:	d5 01       	movw	r26, r10
    2566:	11 96       	adiw	r26, 0x01	; 1
    2568:	ed 91       	ld	r30, X+
    256a:	fc 91       	ld	r31, X
    256c:	12 97       	sbiw	r26, 0x02	; 2
						SchedulerData data = job->data;
    256e:	13 96       	adiw	r26, 0x03	; 3
    2570:	8d 91       	ld	r24, X+
    2572:	9c 91       	ld	r25, X
    2574:	14 97       	sbiw	r26, 0x04	; 4

						// Mark this job as unused. No more references shoud be made to job->xxxx
						job->used = FALSE;
    2576:	1c 92       	st	X, r1
						--__numJobs;
    2578:	20 91 17 04 	lds	r18, 0x0417
    257c:	30 91 18 04 	lds	r19, 0x0418
    2580:	21 50       	subi	r18, 0x01	; 1
    2582:	30 40       	sbci	r19, 0x00	; 0
    2584:	30 93 18 04 	sts	0x0418, r19
    2588:	20 93 17 04 	sts	0x0417, r18

						// Run the job with interrupts enabled
						callback(data,start+delay,overflow);
    258c:	c2 0c       	add	r12, r2
    258e:	d3 1c       	adc	r13, r3
    2590:	e4 1c       	adc	r14, r4
    2592:	f5 1c       	adc	r15, r5
    2594:	09 81       	ldd	r16, Y+1	; 0x01
    2596:	1a 81       	ldd	r17, Y+2	; 0x02
    2598:	2b 81       	ldd	r18, Y+3	; 0x03
    259a:	3c 81       	ldd	r19, Y+4	; 0x04
    259c:	b7 01       	movw	r22, r14
    259e:	a6 01       	movw	r20, r12
    25a0:	09 95       	icall


						// Force another loop as the time taken may mean
						// something else can now run
						__recheck = TRUE;
    25a2:	bf ef       	ldi	r27, 0xFF	; 255
    25a4:	b0 93 16 04 	sts	0x0416, r27
    25a8:	12 c0       	rjmp	.+36     	; 0x25ce <__scheduleUpdate+0x120>
					}else{
					   // overflow has the remaining number of microseconds to wait
					   if(lowest==0 || overflow < lowest){
    25aa:	61 14       	cp	r6, r1
    25ac:	71 04       	cpc	r7, r1
    25ae:	81 04       	cpc	r8, r1
    25b0:	91 04       	cpc	r9, r1
    25b2:	49 f0       	breq	.+18     	; 0x25c6 <__scheduleUpdate+0x118>
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	9a 81       	ldd	r25, Y+2	; 0x02
    25b8:	ab 81       	ldd	r26, Y+3	; 0x03
    25ba:	bc 81       	ldd	r27, Y+4	; 0x04
    25bc:	86 15       	cp	r24, r6
    25be:	97 05       	cpc	r25, r7
    25c0:	a8 05       	cpc	r26, r8
    25c2:	b9 05       	cpc	r27, r9
    25c4:	20 f4       	brcc	.+8      	; 0x25ce <__scheduleUpdate+0x120>
						   lowest = overflow;
    25c6:	69 80       	ldd	r6, Y+1	; 0x01
    25c8:	7a 80       	ldd	r7, Y+2	; 0x02
    25ca:	8b 80       	ldd	r8, Y+3	; 0x03
    25cc:	9c 80       	ldd	r9, Y+4	; 0x04
		do{
			int slot;
			__recheck = FALSE;
			JOB* job;
			lowest=0;
			for(slot=maxJobs-1, job=&__queue[slot]; slot>=0; slot--, job--){
    25ce:	ed 81       	ldd	r30, Y+5	; 0x05
    25d0:	fe 81       	ldd	r31, Y+6	; 0x06
    25d2:	31 97       	sbiw	r30, 0x01	; 1
    25d4:	fe 83       	std	Y+6, r31	; 0x06
    25d6:	ed 83       	std	Y+5, r30	; 0x05
    25d8:	23 ef       	ldi	r18, 0xF3	; 243
    25da:	3f ef       	ldi	r19, 0xFF	; 255
    25dc:	a2 0e       	add	r10, r18
    25de:	b3 1e       	adc	r11, r19
    25e0:	8d 81       	ldd	r24, Y+5	; 0x05
    25e2:	9e 81       	ldd	r25, Y+6	; 0x06
    25e4:	8f 5f       	subi	r24, 0xFF	; 255
    25e6:	9f 4f       	sbci	r25, 0xFF	; 255
    25e8:	09 f0       	breq	.+2      	; 0x25ec <__scheduleUpdate+0x13e>
    25ea:	a0 cf       	rjmp	.-192    	; 0x252c <__scheduleUpdate+0x7e>
						   lowest = overflow;
					   }
					}
				}
			}
		}while( __recheck);
    25ec:	80 91 16 04 	lds	r24, 0x0416
    25f0:	88 23       	and	r24, r24
    25f2:	09 f0       	breq	.+2      	; 0x25f6 <__scheduleUpdate+0x148>
    25f4:	81 cf       	rjmp	.-254    	; 0x24f8 <__scheduleUpdate+0x4a>
		__running=FALSE;
    25f6:	10 92 15 04 	sts	0x0415, r1

		if(__numJobs > 0){
    25fa:	80 91 17 04 	lds	r24, 0x0417
    25fe:	90 91 18 04 	lds	r25, 0x0418
    2602:	18 16       	cp	r1, r24
    2604:	19 06       	cpc	r1, r25
    2606:	4c f5       	brge	.+82     	; 0x265a <__scheduleUpdate+0x1ac>
			// Decide when we need to interrupt again
			uint16_t compare = calcTicks(lowest) + CLOCK_COUNTER;
    2608:	20 91 24 01 	lds	r18, 0x0124
    260c:	30 91 25 01 	lds	r19, 0x0125
    2610:	d4 01       	movw	r26, r8
    2612:	c3 01       	movw	r24, r6
    2614:	88 0f       	add	r24, r24
    2616:	99 1f       	adc	r25, r25
    2618:	aa 1f       	adc	r26, r26
    261a:	bb 1f       	adc	r27, r27
    261c:	81 30       	cpi	r24, 0x01	; 1
    261e:	ea ef       	ldi	r30, 0xFA	; 250
    2620:	9e 07       	cpc	r25, r30
    2622:	e0 e0       	ldi	r30, 0x00	; 0
    2624:	ae 07       	cpc	r26, r30
    2626:	e0 e0       	ldi	r30, 0x00	; 0
    2628:	be 07       	cpc	r27, r30
    262a:	20 f0       	brcs	.+8      	; 0x2634 <__scheduleUpdate+0x186>
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	9a ef       	ldi	r25, 0xFA	; 250
    2630:	a0 e0       	ldi	r26, 0x00	; 0
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	82 0f       	add	r24, r18
    2636:	93 1f       	adc	r25, r19
    2638:	02 c0       	rjmp	.+4      	; 0x263e <__scheduleUpdate+0x190>
			while(compare >= CLOCK_TOP){
				compare -= CLOCK_TOP;
    263a:	80 50       	subi	r24, 0x00	; 0
    263c:	9a 4f       	sbci	r25, 0xFA	; 250
		__running=FALSE;

		if(__numJobs > 0){
			// Decide when we need to interrupt again
			uint16_t compare = calcTicks(lowest) + CLOCK_COUNTER;
			while(compare >= CLOCK_TOP){
    263e:	fa ef       	ldi	r31, 0xFA	; 250
    2640:	80 30       	cpi	r24, 0x00	; 0
    2642:	9f 07       	cpc	r25, r31
    2644:	d0 f7       	brcc	.-12     	; 0x263a <__scheduleUpdate+0x18c>
				compare -= CLOCK_TOP;
			}
			// Set when next interrupt should occur
			SCHEDULER_THRESHOLD = compare;
    2646:	90 93 2b 01 	sts	0x012B, r25
    264a:	80 93 2a 01 	sts	0x012A, r24
			// Clear any pending interrupt
			SCHEDULER_INT_CLEAR;
    264e:	d2 9a       	sbi	0x1a, 2	; 26
			// Look for new interrupts
			SCHEDULER_INT_ENABLE;
    2650:	80 91 73 00 	lds	r24, 0x0073
    2654:	84 60       	ori	r24, 0x04	; 4
    2656:	80 93 73 00 	sts	0x0073, r24
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    265a:	2f 81       	ldd	r18, Y+7	; 0x07
    265c:	2f bf       	out	0x3f, r18	; 63
		}

	} // Restore previous interrupt enable
}
    265e:	27 96       	adiw	r28, 0x07	; 7
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	f8 94       	cli
    2664:	de bf       	out	0x3e, r29	; 62
    2666:	0f be       	out	0x3f, r0	; 63
    2668:	cd bf       	out	0x3d, r28	; 61
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	1f 91       	pop	r17
    2670:	0f 91       	pop	r16
    2672:	ff 90       	pop	r15
    2674:	ef 90       	pop	r14
    2676:	df 90       	pop	r13
    2678:	cf 90       	pop	r12
    267a:	bf 90       	pop	r11
    267c:	af 90       	pop	r10
    267e:	9f 90       	pop	r9
    2680:	8f 90       	pop	r8
    2682:	7f 90       	pop	r7
    2684:	6f 90       	pop	r6
    2686:	5f 90       	pop	r5
    2688:	4f 90       	pop	r4
    268a:	3f 90       	pop	r3
    268c:	2f 90       	pop	r2
    268e:	08 95       	ret

00002690 <__vector_48>:
}



// ISR for scheduler match - check if another job needs to run
ISR(TIMER5_COMPB_vect) {
    2690:	1f 92       	push	r1
    2692:	0f 92       	push	r0
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	0f 92       	push	r0
    2698:	11 24       	eor	r1, r1
    269a:	2f 93       	push	r18
    269c:	3f 93       	push	r19
    269e:	4f 93       	push	r20
    26a0:	5f 93       	push	r21
    26a2:	6f 93       	push	r22
    26a4:	7f 93       	push	r23
    26a6:	8f 93       	push	r24
    26a8:	9f 93       	push	r25
    26aa:	af 93       	push	r26
    26ac:	bf 93       	push	r27
    26ae:	ef 93       	push	r30
    26b0:	ff 93       	push	r31
	__scheduleUpdate();
    26b2:	0e 94 57 12 	call	0x24ae	; 0x24ae <__scheduleUpdate>
}
    26b6:	ff 91       	pop	r31
    26b8:	ef 91       	pop	r30
    26ba:	bf 91       	pop	r27
    26bc:	af 91       	pop	r26
    26be:	9f 91       	pop	r25
    26c0:	8f 91       	pop	r24
    26c2:	7f 91       	pop	r23
    26c4:	6f 91       	pop	r22
    26c6:	5f 91       	pop	r21
    26c8:	4f 91       	pop	r20
    26ca:	3f 91       	pop	r19
    26cc:	2f 91       	pop	r18
    26ce:	0f 90       	pop	r0
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	0f 90       	pop	r0
    26d4:	1f 90       	pop	r1
    26d6:	18 95       	reti

000026d8 <scheduleJob>:
// schedule a new job
// callback Is the function to be run at a later date
// data is a block of data to be passed into the callback
// start (in us) Is the start time of the delay
// delay (in us) Is the amount to delay by
void scheduleJob(SchedulerCallback callback, SchedulerData data, TICK_COUNT start, TICK_COUNT delay){
    26d8:	2f 92       	push	r2
    26da:	3f 92       	push	r3
    26dc:	4f 92       	push	r4
    26de:	5f 92       	push	r5
    26e0:	6f 92       	push	r6
    26e2:	7f 92       	push	r7
    26e4:	8f 92       	push	r8
    26e6:	9f 92       	push	r9
    26e8:	af 92       	push	r10
    26ea:	bf 92       	push	r11
    26ec:	cf 92       	push	r12
    26ee:	df 92       	push	r13
    26f0:	ef 92       	push	r14
    26f2:	ff 92       	push	r15
    26f4:	0f 93       	push	r16
    26f6:	1f 93       	push	r17
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	00 d0       	rcall	.+0      	; 0x26fe <scheduleJob+0x26>
    26fe:	00 d0       	rcall	.+0      	; 0x2700 <scheduleJob+0x28>
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	1c 01       	movw	r2, r24
    2706:	2b 01       	movw	r4, r22
    2708:	49 01       	movw	r8, r18
    270a:	5a 01       	movw	r10, r20
    270c:	67 01       	movw	r12, r14
    270e:	78 01       	movw	r14, r16
	boolean doItNow = FALSE;

 	if(delay < 1000U){
    2710:	88 ee       	ldi	r24, 0xE8	; 232
    2712:	c8 16       	cp	r12, r24
    2714:	83 e0       	ldi	r24, 0x03	; 3
    2716:	d8 06       	cpc	r13, r24
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	e8 06       	cpc	r14, r24
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	f8 06       	cpc	r15, r24
    2720:	38 f4       	brcc	.+14     	; 0x2730 <scheduleJob+0x58>
		// it needs to happen now as the delay is less than the heartbeat timer interrupt of 1ms
		if(__running){
    2722:	80 91 15 04 	lds	r24, 0x0415
    2726:	88 23       	and	r24, r24
    2728:	c1 f1       	breq	.+112    	; 0x279a <scheduleJob+0xc2>
			// make sure we do another loop of __scheduleUpdate to find it
			__recheck=TRUE;
    272a:	8f ef       	ldi	r24, 0xFF	; 255
    272c:	80 93 16 04 	sts	0x0416, r24

	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
    2730:	6f b7       	in	r22, 0x3f	; 63
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
    2732:	f8 94       	cli
			for(slot=0; slot < maxJobs; slot++){
    2734:	80 91 e7 02 	lds	r24, 0x02E7
    2738:	48 2f       	mov	r20, r24
    273a:	50 e0       	ldi	r21, 0x00	; 0
    273c:	a8 e0       	ldi	r26, 0x08	; 8
    273e:	b4 e0       	ldi	r27, 0x04	; 4
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	20 c0       	rjmp	.+64     	; 0x2786 <scheduleJob+0xae>

	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
    2746:	fd 01       	movw	r30, r26
			for(slot=0; slot < maxJobs; slot++){
				JOB* job = &__queue[slot];
				if(!job->used){
    2748:	8c 91       	ld	r24, X
    274a:	1d 96       	adiw	r26, 0x0d	; 13
    274c:	88 23       	and	r24, r24
    274e:	c9 f4       	brne	.+50     	; 0x2782 <scheduleJob+0xaa>
					job->used = TRUE;
    2750:	8f ef       	ldi	r24, 0xFF	; 255
    2752:	80 83       	st	Z, r24
					job->callback = callback;
    2754:	32 82       	std	Z+2, r3	; 0x02
    2756:	21 82       	std	Z+1, r2	; 0x01
					job->data = data;
    2758:	54 82       	std	Z+4, r5	; 0x04
    275a:	43 82       	std	Z+3, r4	; 0x03
					job->start=start;
    275c:	81 86       	std	Z+9, r8	; 0x09
    275e:	92 86       	std	Z+10, r9	; 0x0a
    2760:	a3 86       	std	Z+11, r10	; 0x0b
    2762:	b4 86       	std	Z+12, r11	; 0x0c
					job->delay=delay;
    2764:	c5 82       	std	Z+5, r12	; 0x05
    2766:	d6 82       	std	Z+6, r13	; 0x06
    2768:	e7 82       	std	Z+7, r14	; 0x07
    276a:	f0 86       	std	Z+8, r15	; 0x08
					found=TRUE;
					__numJobs++;
    276c:	80 91 17 04 	lds	r24, 0x0417
    2770:	90 91 18 04 	lds	r25, 0x0418
    2774:	01 96       	adiw	r24, 0x01	; 1
    2776:	90 93 18 04 	sts	0x0418, r25
    277a:	80 93 17 04 	sts	0x0417, r24
    277e:	8f ef       	ldi	r24, 0xFF	; 255
    2780:	06 c0       	rjmp	.+12     	; 0x278e <scheduleJob+0xb6>
	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
			for(slot=0; slot < maxJobs; slot++){
    2782:	2f 5f       	subi	r18, 0xFF	; 255
    2784:	3f 4f       	sbci	r19, 0xFF	; 255
    2786:	24 17       	cp	r18, r20
    2788:	35 07       	cpc	r19, r21
    278a:	ec f2       	brlt	.-70     	; 0x2746 <scheduleJob+0x6e>
    278c:	80 e0       	ldi	r24, 0x00	; 0
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    278e:	6f bf       	out	0x3f, r22	; 63
					break;
				}
			}
		}

		if(!found){
    2790:	88 23       	and	r24, r24
    2792:	f1 f4       	brne	.+60     	; 0x27d0 <scheduleJob+0xf8>
			// the queue is exhausted
			setError(SCHEDULER_EXHAUSTED);
    2794:	8f ef       	ldi	r24, 0xFF	; 255
    2796:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <setError>
	if(doItNow){
		// we need to do it now
		TICK_COUNT overflow;

		// wait for expiry
		while(!clockHasElapsedGetOverflow(start, delay, &overflow));
    279a:	3e 01       	movw	r6, r28
    279c:	08 94       	sec
    279e:	61 1c       	adc	r6, r1
    27a0:	71 1c       	adc	r7, r1
    27a2:	c5 01       	movw	r24, r10
    27a4:	b4 01       	movw	r22, r8
    27a6:	a7 01       	movw	r20, r14
    27a8:	96 01       	movw	r18, r12
    27aa:	83 01       	movw	r16, r6
    27ac:	0e 94 b9 11 	call	0x2372	; 0x2372 <clockHasElapsedGetOverflow>
    27b0:	88 23       	and	r24, r24
    27b2:	b9 f3       	breq	.-18     	; 0x27a2 <scheduleJob+0xca>

		// call the queued routine
		callback(data,start+delay,overflow);
    27b4:	c8 0c       	add	r12, r8
    27b6:	d9 1c       	adc	r13, r9
    27b8:	ea 1c       	adc	r14, r10
    27ba:	fb 1c       	adc	r15, r11
    27bc:	09 81       	ldd	r16, Y+1	; 0x01
    27be:	1a 81       	ldd	r17, Y+2	; 0x02
    27c0:	2b 81       	ldd	r18, Y+3	; 0x03
    27c2:	3c 81       	ldd	r19, Y+4	; 0x04
    27c4:	c2 01       	movw	r24, r4
    27c6:	b7 01       	movw	r22, r14
    27c8:	a6 01       	movw	r20, r12
    27ca:	f1 01       	movw	r30, r2
    27cc:	09 95       	icall
    27ce:	06 c0       	rjmp	.+12     	; 0x27dc <scheduleJob+0x104>
	}else{
		if(!__running){
    27d0:	80 91 15 04 	lds	r24, 0x0415
    27d4:	88 23       	and	r24, r24
    27d6:	11 f4       	brne	.+4      	; 0x27dc <scheduleJob+0x104>
			__scheduleUpdate();
    27d8:	0e 94 57 12 	call	0x24ae	; 0x24ae <__scheduleUpdate>
		}
	}
}
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	1f 91       	pop	r17
    27ea:	0f 91       	pop	r16
    27ec:	ff 90       	pop	r15
    27ee:	ef 90       	pop	r14
    27f0:	df 90       	pop	r13
    27f2:	cf 90       	pop	r12
    27f4:	bf 90       	pop	r11
    27f6:	af 90       	pop	r10
    27f8:	9f 90       	pop	r9
    27fa:	8f 90       	pop	r8
    27fc:	7f 90       	pop	r7
    27fe:	6f 90       	pop	r6
    2800:	5f 90       	pop	r5
    2802:	4f 90       	pop	r4
    2804:	3f 90       	pop	r3
    2806:	2f 90       	pop	r2
    2808:	08 95       	ret

0000280a <vfprintf>:
    280a:	a1 e1       	ldi	r26, 0x11	; 17
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	eb e0       	ldi	r30, 0x0B	; 11
    2810:	f4 e1       	ldi	r31, 0x14	; 20
    2812:	0c 94 e4 1a 	jmp	0x35c8	; 0x35c8 <__prologue_saves__>
    2816:	3c 01       	movw	r6, r24
    2818:	7f 87       	std	Y+15, r23	; 0x0f
    281a:	6e 87       	std	Y+14, r22	; 0x0e
    281c:	6a 01       	movw	r12, r20
    281e:	fc 01       	movw	r30, r24
    2820:	17 82       	std	Z+7, r1	; 0x07
    2822:	16 82       	std	Z+6, r1	; 0x06
    2824:	83 81       	ldd	r24, Z+3	; 0x03
    2826:	81 fd       	sbrc	r24, 1
    2828:	03 c0       	rjmp	.+6      	; 0x2830 <vfprintf+0x26>
    282a:	6f ef       	ldi	r22, 0xFF	; 255
    282c:	7f ef       	ldi	r23, 0xFF	; 255
    282e:	6f c3       	rjmp	.+1758   	; 0x2f0e <vfprintf+0x704>
    2830:	9e 01       	movw	r18, r28
    2832:	2f 5f       	subi	r18, 0xFF	; 255
    2834:	3f 4f       	sbci	r19, 0xFF	; 255
    2836:	39 8b       	std	Y+17, r19	; 0x11
    2838:	28 8b       	std	Y+16, r18	; 0x10
    283a:	f3 01       	movw	r30, r6
    283c:	23 81       	ldd	r18, Z+3	; 0x03
    283e:	ee 85       	ldd	r30, Y+14	; 0x0e
    2840:	ff 85       	ldd	r31, Y+15	; 0x0f
    2842:	23 fd       	sbrc	r18, 3
    2844:	85 91       	lpm	r24, Z+
    2846:	23 ff       	sbrs	r18, 3
    2848:	81 91       	ld	r24, Z+
    284a:	ff 87       	std	Y+15, r31	; 0x0f
    284c:	ee 87       	std	Y+14, r30	; 0x0e
    284e:	88 23       	and	r24, r24
    2850:	09 f4       	brne	.+2      	; 0x2854 <vfprintf+0x4a>
    2852:	5a c3       	rjmp	.+1716   	; 0x2f08 <vfprintf+0x6fe>
    2854:	85 32       	cpi	r24, 0x25	; 37
    2856:	51 f4       	brne	.+20     	; 0x286c <vfprintf+0x62>
    2858:	ee 85       	ldd	r30, Y+14	; 0x0e
    285a:	ff 85       	ldd	r31, Y+15	; 0x0f
    285c:	23 fd       	sbrc	r18, 3
    285e:	85 91       	lpm	r24, Z+
    2860:	23 ff       	sbrs	r18, 3
    2862:	81 91       	ld	r24, Z+
    2864:	ff 87       	std	Y+15, r31	; 0x0f
    2866:	ee 87       	std	Y+14, r30	; 0x0e
    2868:	85 32       	cpi	r24, 0x25	; 37
    286a:	29 f4       	brne	.+10     	; 0x2876 <vfprintf+0x6c>
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	b3 01       	movw	r22, r6
    2870:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2874:	e2 cf       	rjmp	.-60     	; 0x283a <vfprintf+0x30>
    2876:	98 2f       	mov	r25, r24
    2878:	10 e0       	ldi	r17, 0x00	; 0
    287a:	88 24       	eor	r8, r8
    287c:	99 24       	eor	r9, r9
    287e:	10 32       	cpi	r17, 0x20	; 32
    2880:	b0 f4       	brcc	.+44     	; 0x28ae <vfprintf+0xa4>
    2882:	9b 32       	cpi	r25, 0x2B	; 43
    2884:	69 f0       	breq	.+26     	; 0x28a0 <vfprintf+0x96>
    2886:	9c 32       	cpi	r25, 0x2C	; 44
    2888:	28 f4       	brcc	.+10     	; 0x2894 <vfprintf+0x8a>
    288a:	90 32       	cpi	r25, 0x20	; 32
    288c:	51 f0       	breq	.+20     	; 0x28a2 <vfprintf+0x98>
    288e:	93 32       	cpi	r25, 0x23	; 35
    2890:	71 f4       	brne	.+28     	; 0x28ae <vfprintf+0xa4>
    2892:	0b c0       	rjmp	.+22     	; 0x28aa <vfprintf+0xa0>
    2894:	9d 32       	cpi	r25, 0x2D	; 45
    2896:	39 f0       	breq	.+14     	; 0x28a6 <vfprintf+0x9c>
    2898:	90 33       	cpi	r25, 0x30	; 48
    289a:	49 f4       	brne	.+18     	; 0x28ae <vfprintf+0xa4>
    289c:	11 60       	ori	r17, 0x01	; 1
    289e:	28 c0       	rjmp	.+80     	; 0x28f0 <vfprintf+0xe6>
    28a0:	12 60       	ori	r17, 0x02	; 2
    28a2:	14 60       	ori	r17, 0x04	; 4
    28a4:	25 c0       	rjmp	.+74     	; 0x28f0 <vfprintf+0xe6>
    28a6:	18 60       	ori	r17, 0x08	; 8
    28a8:	23 c0       	rjmp	.+70     	; 0x28f0 <vfprintf+0xe6>
    28aa:	10 61       	ori	r17, 0x10	; 16
    28ac:	21 c0       	rjmp	.+66     	; 0x28f0 <vfprintf+0xe6>
    28ae:	17 fd       	sbrc	r17, 7
    28b0:	2a c0       	rjmp	.+84     	; 0x2906 <vfprintf+0xfc>
    28b2:	89 2f       	mov	r24, r25
    28b4:	80 53       	subi	r24, 0x30	; 48
    28b6:	8a 30       	cpi	r24, 0x0A	; 10
    28b8:	78 f4       	brcc	.+30     	; 0x28d8 <vfprintf+0xce>
    28ba:	16 ff       	sbrs	r17, 6
    28bc:	06 c0       	rjmp	.+12     	; 0x28ca <vfprintf+0xc0>
    28be:	fa e0       	ldi	r31, 0x0A	; 10
    28c0:	9f 9e       	mul	r9, r31
    28c2:	90 2c       	mov	r9, r0
    28c4:	11 24       	eor	r1, r1
    28c6:	98 0e       	add	r9, r24
    28c8:	13 c0       	rjmp	.+38     	; 0x28f0 <vfprintf+0xe6>
    28ca:	3a e0       	ldi	r19, 0x0A	; 10
    28cc:	83 9e       	mul	r8, r19
    28ce:	80 2c       	mov	r8, r0
    28d0:	11 24       	eor	r1, r1
    28d2:	88 0e       	add	r8, r24
    28d4:	10 62       	ori	r17, 0x20	; 32
    28d6:	0c c0       	rjmp	.+24     	; 0x28f0 <vfprintf+0xe6>
    28d8:	9e 32       	cpi	r25, 0x2E	; 46
    28da:	21 f4       	brne	.+8      	; 0x28e4 <vfprintf+0xda>
    28dc:	16 fd       	sbrc	r17, 6
    28de:	14 c3       	rjmp	.+1576   	; 0x2f08 <vfprintf+0x6fe>
    28e0:	10 64       	ori	r17, 0x40	; 64
    28e2:	06 c0       	rjmp	.+12     	; 0x28f0 <vfprintf+0xe6>
    28e4:	9c 36       	cpi	r25, 0x6C	; 108
    28e6:	11 f4       	brne	.+4      	; 0x28ec <vfprintf+0xe2>
    28e8:	10 68       	ori	r17, 0x80	; 128
    28ea:	02 c0       	rjmp	.+4      	; 0x28f0 <vfprintf+0xe6>
    28ec:	98 36       	cpi	r25, 0x68	; 104
    28ee:	59 f4       	brne	.+22     	; 0x2906 <vfprintf+0xfc>
    28f0:	ee 85       	ldd	r30, Y+14	; 0x0e
    28f2:	ff 85       	ldd	r31, Y+15	; 0x0f
    28f4:	23 fd       	sbrc	r18, 3
    28f6:	95 91       	lpm	r25, Z+
    28f8:	23 ff       	sbrs	r18, 3
    28fa:	91 91       	ld	r25, Z+
    28fc:	ff 87       	std	Y+15, r31	; 0x0f
    28fe:	ee 87       	std	Y+14, r30	; 0x0e
    2900:	99 23       	and	r25, r25
    2902:	09 f0       	breq	.+2      	; 0x2906 <vfprintf+0xfc>
    2904:	bc cf       	rjmp	.-136    	; 0x287e <vfprintf+0x74>
    2906:	89 2f       	mov	r24, r25
    2908:	85 54       	subi	r24, 0x45	; 69
    290a:	83 30       	cpi	r24, 0x03	; 3
    290c:	20 f4       	brcc	.+8      	; 0x2916 <vfprintf+0x10c>
    290e:	81 2f       	mov	r24, r17
    2910:	80 61       	ori	r24, 0x10	; 16
    2912:	90 5e       	subi	r25, 0xE0	; 224
    2914:	07 c0       	rjmp	.+14     	; 0x2924 <vfprintf+0x11a>
    2916:	89 2f       	mov	r24, r25
    2918:	85 56       	subi	r24, 0x65	; 101
    291a:	83 30       	cpi	r24, 0x03	; 3
    291c:	08 f0       	brcs	.+2      	; 0x2920 <vfprintf+0x116>
    291e:	9f c1       	rjmp	.+830    	; 0x2c5e <vfprintf+0x454>
    2920:	81 2f       	mov	r24, r17
    2922:	8f 7e       	andi	r24, 0xEF	; 239
    2924:	86 fd       	sbrc	r24, 6
    2926:	02 c0       	rjmp	.+4      	; 0x292c <vfprintf+0x122>
    2928:	76 e0       	ldi	r23, 0x06	; 6
    292a:	97 2e       	mov	r9, r23
    292c:	6f e3       	ldi	r22, 0x3F	; 63
    292e:	f6 2e       	mov	r15, r22
    2930:	f8 22       	and	r15, r24
    2932:	95 36       	cpi	r25, 0x65	; 101
    2934:	19 f4       	brne	.+6      	; 0x293c <vfprintf+0x132>
    2936:	f0 e4       	ldi	r31, 0x40	; 64
    2938:	ff 2a       	or	r15, r31
    293a:	07 c0       	rjmp	.+14     	; 0x294a <vfprintf+0x140>
    293c:	96 36       	cpi	r25, 0x66	; 102
    293e:	19 f4       	brne	.+6      	; 0x2946 <vfprintf+0x13c>
    2940:	20 e8       	ldi	r18, 0x80	; 128
    2942:	f2 2a       	or	r15, r18
    2944:	02 c0       	rjmp	.+4      	; 0x294a <vfprintf+0x140>
    2946:	91 10       	cpse	r9, r1
    2948:	9a 94       	dec	r9
    294a:	f7 fe       	sbrs	r15, 7
    294c:	0a c0       	rjmp	.+20     	; 0x2962 <vfprintf+0x158>
    294e:	3b e3       	ldi	r19, 0x3B	; 59
    2950:	39 15       	cp	r19, r9
    2952:	18 f4       	brcc	.+6      	; 0x295a <vfprintf+0x150>
    2954:	5c e3       	ldi	r21, 0x3C	; 60
    2956:	b5 2e       	mov	r11, r21
    2958:	02 c0       	rjmp	.+4      	; 0x295e <vfprintf+0x154>
    295a:	b9 2c       	mov	r11, r9
    295c:	b3 94       	inc	r11
    295e:	27 e0       	ldi	r18, 0x07	; 7
    2960:	09 c0       	rjmp	.+18     	; 0x2974 <vfprintf+0x16a>
    2962:	47 e0       	ldi	r20, 0x07	; 7
    2964:	49 15       	cp	r20, r9
    2966:	20 f4       	brcc	.+8      	; 0x2970 <vfprintf+0x166>
    2968:	bb 24       	eor	r11, r11
    296a:	47 e0       	ldi	r20, 0x07	; 7
    296c:	94 2e       	mov	r9, r20
    296e:	f7 cf       	rjmp	.-18     	; 0x295e <vfprintf+0x154>
    2970:	29 2d       	mov	r18, r9
    2972:	bb 24       	eor	r11, r11
    2974:	c6 01       	movw	r24, r12
    2976:	04 96       	adiw	r24, 0x04	; 4
    2978:	9d 87       	std	Y+13, r25	; 0x0d
    297a:	8c 87       	std	Y+12, r24	; 0x0c
    297c:	f6 01       	movw	r30, r12
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	82 81       	ldd	r24, Z+2	; 0x02
    2984:	93 81       	ldd	r25, Z+3	; 0x03
    2986:	ae 01       	movw	r20, r28
    2988:	4f 5f       	subi	r20, 0xFF	; 255
    298a:	5f 4f       	sbci	r21, 0xFF	; 255
    298c:	0b 2d       	mov	r16, r11
    298e:	0e 94 94 18 	call	0x3128	; 0x3128 <__ftoa_engine>
    2992:	6c 01       	movw	r12, r24
    2994:	09 81       	ldd	r16, Y+1	; 0x01
    2996:	20 2e       	mov	r2, r16
    2998:	33 24       	eor	r3, r3
    299a:	00 ff       	sbrs	r16, 0
    299c:	04 c0       	rjmp	.+8      	; 0x29a6 <vfprintf+0x19c>
    299e:	03 fd       	sbrc	r16, 3
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <vfprintf+0x19c>
    29a2:	1d e2       	ldi	r17, 0x2D	; 45
    29a4:	09 c0       	rjmp	.+18     	; 0x29b8 <vfprintf+0x1ae>
    29a6:	f1 fe       	sbrs	r15, 1
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <vfprintf+0x1a4>
    29aa:	1b e2       	ldi	r17, 0x2B	; 43
    29ac:	05 c0       	rjmp	.+10     	; 0x29b8 <vfprintf+0x1ae>
    29ae:	f2 fc       	sbrc	r15, 2
    29b0:	02 c0       	rjmp	.+4      	; 0x29b6 <vfprintf+0x1ac>
    29b2:	10 e0       	ldi	r17, 0x00	; 0
    29b4:	01 c0       	rjmp	.+2      	; 0x29b8 <vfprintf+0x1ae>
    29b6:	10 e2       	ldi	r17, 0x20	; 32
    29b8:	c1 01       	movw	r24, r2
    29ba:	8c 70       	andi	r24, 0x0C	; 12
    29bc:	90 70       	andi	r25, 0x00	; 0
    29be:	89 2b       	or	r24, r25
    29c0:	b9 f1       	breq	.+110    	; 0x2a30 <vfprintf+0x226>
    29c2:	11 23       	and	r17, r17
    29c4:	11 f4       	brne	.+4      	; 0x29ca <vfprintf+0x1c0>
    29c6:	83 e0       	ldi	r24, 0x03	; 3
    29c8:	01 c0       	rjmp	.+2      	; 0x29cc <vfprintf+0x1c2>
    29ca:	84 e0       	ldi	r24, 0x04	; 4
    29cc:	88 15       	cp	r24, r8
    29ce:	10 f0       	brcs	.+4      	; 0x29d4 <vfprintf+0x1ca>
    29d0:	88 24       	eor	r8, r8
    29d2:	0a c0       	rjmp	.+20     	; 0x29e8 <vfprintf+0x1de>
    29d4:	88 1a       	sub	r8, r24
    29d6:	f3 fc       	sbrc	r15, 3
    29d8:	07 c0       	rjmp	.+14     	; 0x29e8 <vfprintf+0x1de>
    29da:	80 e2       	ldi	r24, 0x20	; 32
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	b3 01       	movw	r22, r6
    29e0:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    29e4:	8a 94       	dec	r8
    29e6:	c9 f7       	brne	.-14     	; 0x29da <vfprintf+0x1d0>
    29e8:	11 23       	and	r17, r17
    29ea:	29 f0       	breq	.+10     	; 0x29f6 <vfprintf+0x1ec>
    29ec:	81 2f       	mov	r24, r17
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	b3 01       	movw	r22, r6
    29f2:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    29f6:	23 fe       	sbrs	r2, 3
    29f8:	03 c0       	rjmp	.+6      	; 0x2a00 <vfprintf+0x1f6>
    29fa:	04 ee       	ldi	r16, 0xE4	; 228
    29fc:	10 e0       	ldi	r17, 0x00	; 0
    29fe:	0e c0       	rjmp	.+28     	; 0x2a1c <vfprintf+0x212>
    2a00:	08 ee       	ldi	r16, 0xE8	; 232
    2a02:	10 e0       	ldi	r17, 0x00	; 0
    2a04:	0b c0       	rjmp	.+22     	; 0x2a1c <vfprintf+0x212>
    2a06:	e1 14       	cp	r14, r1
    2a08:	f1 04       	cpc	r15, r1
    2a0a:	09 f0       	breq	.+2      	; 0x2a0e <vfprintf+0x204>
    2a0c:	80 52       	subi	r24, 0x20	; 32
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	b3 01       	movw	r22, r6
    2a12:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2a16:	0f 5f       	subi	r16, 0xFF	; 255
    2a18:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1a:	05 c0       	rjmp	.+10     	; 0x2a26 <vfprintf+0x21c>
    2a1c:	ef 2c       	mov	r14, r15
    2a1e:	ff 24       	eor	r15, r15
    2a20:	f0 e1       	ldi	r31, 0x10	; 16
    2a22:	ef 22       	and	r14, r31
    2a24:	ff 24       	eor	r15, r15
    2a26:	f8 01       	movw	r30, r16
    2a28:	84 91       	lpm	r24, Z+
    2a2a:	88 23       	and	r24, r24
    2a2c:	61 f7       	brne	.-40     	; 0x2a06 <vfprintf+0x1fc>
    2a2e:	14 c1       	rjmp	.+552    	; 0x2c58 <vfprintf+0x44e>
    2a30:	f7 fe       	sbrs	r15, 7
    2a32:	12 c0       	rjmp	.+36     	; 0x2a58 <vfprintf+0x24e>
    2a34:	bc 0c       	add	r11, r12
    2a36:	24 fe       	sbrs	r2, 4
    2a38:	04 c0       	rjmp	.+8      	; 0x2a42 <vfprintf+0x238>
    2a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3c:	81 33       	cpi	r24, 0x31	; 49
    2a3e:	09 f4       	brne	.+2      	; 0x2a42 <vfprintf+0x238>
    2a40:	ba 94       	dec	r11
    2a42:	1b 14       	cp	r1, r11
    2a44:	1c f0       	brlt	.+6      	; 0x2a4c <vfprintf+0x242>
    2a46:	bb 24       	eor	r11, r11
    2a48:	b3 94       	inc	r11
    2a4a:	2d c0       	rjmp	.+90     	; 0x2aa6 <vfprintf+0x29c>
    2a4c:	f8 e0       	ldi	r31, 0x08	; 8
    2a4e:	fb 15       	cp	r31, r11
    2a50:	50 f5       	brcc	.+84     	; 0x2aa6 <vfprintf+0x29c>
    2a52:	38 e0       	ldi	r19, 0x08	; 8
    2a54:	b3 2e       	mov	r11, r19
    2a56:	27 c0       	rjmp	.+78     	; 0x2aa6 <vfprintf+0x29c>
    2a58:	f6 fc       	sbrc	r15, 6
    2a5a:	25 c0       	rjmp	.+74     	; 0x2aa6 <vfprintf+0x29c>
    2a5c:	89 2d       	mov	r24, r9
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	8c 15       	cp	r24, r12
    2a62:	9d 05       	cpc	r25, r13
    2a64:	4c f0       	brlt	.+18     	; 0x2a78 <vfprintf+0x26e>
    2a66:	2c ef       	ldi	r18, 0xFC	; 252
    2a68:	c2 16       	cp	r12, r18
    2a6a:	2f ef       	ldi	r18, 0xFF	; 255
    2a6c:	d2 06       	cpc	r13, r18
    2a6e:	24 f0       	brlt	.+8      	; 0x2a78 <vfprintf+0x26e>
    2a70:	30 e8       	ldi	r19, 0x80	; 128
    2a72:	f3 2a       	or	r15, r19
    2a74:	01 c0       	rjmp	.+2      	; 0x2a78 <vfprintf+0x26e>
    2a76:	9a 94       	dec	r9
    2a78:	99 20       	and	r9, r9
    2a7a:	49 f0       	breq	.+18     	; 0x2a8e <vfprintf+0x284>
    2a7c:	e2 e0       	ldi	r30, 0x02	; 2
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	ec 0f       	add	r30, r28
    2a82:	fd 1f       	adc	r31, r29
    2a84:	e9 0d       	add	r30, r9
    2a86:	f1 1d       	adc	r31, r1
    2a88:	80 81       	ld	r24, Z
    2a8a:	80 33       	cpi	r24, 0x30	; 48
    2a8c:	a1 f3       	breq	.-24     	; 0x2a76 <vfprintf+0x26c>
    2a8e:	f7 fe       	sbrs	r15, 7
    2a90:	0a c0       	rjmp	.+20     	; 0x2aa6 <vfprintf+0x29c>
    2a92:	b9 2c       	mov	r11, r9
    2a94:	b3 94       	inc	r11
    2a96:	89 2d       	mov	r24, r9
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	c8 16       	cp	r12, r24
    2a9c:	d9 06       	cpc	r13, r25
    2a9e:	14 f0       	brlt	.+4      	; 0x2aa4 <vfprintf+0x29a>
    2aa0:	99 24       	eor	r9, r9
    2aa2:	01 c0       	rjmp	.+2      	; 0x2aa6 <vfprintf+0x29c>
    2aa4:	9c 18       	sub	r9, r12
    2aa6:	f7 fc       	sbrc	r15, 7
    2aa8:	03 c0       	rjmp	.+6      	; 0x2ab0 <vfprintf+0x2a6>
    2aaa:	25 e0       	ldi	r18, 0x05	; 5
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	09 c0       	rjmp	.+18     	; 0x2ac2 <vfprintf+0x2b8>
    2ab0:	1c 14       	cp	r1, r12
    2ab2:	1d 04       	cpc	r1, r13
    2ab4:	1c f0       	brlt	.+6      	; 0x2abc <vfprintf+0x2b2>
    2ab6:	21 e0       	ldi	r18, 0x01	; 1
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	03 c0       	rjmp	.+6      	; 0x2ac2 <vfprintf+0x2b8>
    2abc:	96 01       	movw	r18, r12
    2abe:	2f 5f       	subi	r18, 0xFF	; 255
    2ac0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac2:	11 23       	and	r17, r17
    2ac4:	11 f0       	breq	.+4      	; 0x2aca <vfprintf+0x2c0>
    2ac6:	2f 5f       	subi	r18, 0xFF	; 255
    2ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aca:	99 20       	and	r9, r9
    2acc:	29 f0       	breq	.+10     	; 0x2ad8 <vfprintf+0x2ce>
    2ace:	89 2d       	mov	r24, r9
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	01 96       	adiw	r24, 0x01	; 1
    2ad4:	28 0f       	add	r18, r24
    2ad6:	39 1f       	adc	r19, r25
    2ad8:	88 2d       	mov	r24, r8
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	28 17       	cp	r18, r24
    2ade:	39 07       	cpc	r19, r25
    2ae0:	14 f0       	brlt	.+4      	; 0x2ae6 <vfprintf+0x2dc>
    2ae2:	88 24       	eor	r8, r8
    2ae4:	01 c0       	rjmp	.+2      	; 0x2ae8 <vfprintf+0x2de>
    2ae6:	82 1a       	sub	r8, r18
    2ae8:	4f 2c       	mov	r4, r15
    2aea:	55 24       	eor	r5, r5
    2aec:	c2 01       	movw	r24, r4
    2aee:	89 70       	andi	r24, 0x09	; 9
    2af0:	90 70       	andi	r25, 0x00	; 0
    2af2:	89 2b       	or	r24, r25
    2af4:	39 f0       	breq	.+14     	; 0x2b04 <vfprintf+0x2fa>
    2af6:	08 c0       	rjmp	.+16     	; 0x2b08 <vfprintf+0x2fe>
    2af8:	80 e2       	ldi	r24, 0x20	; 32
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	b3 01       	movw	r22, r6
    2afe:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2b02:	8a 94       	dec	r8
    2b04:	88 20       	and	r8, r8
    2b06:	c1 f7       	brne	.-16     	; 0x2af8 <vfprintf+0x2ee>
    2b08:	11 23       	and	r17, r17
    2b0a:	29 f0       	breq	.+10     	; 0x2b16 <vfprintf+0x30c>
    2b0c:	81 2f       	mov	r24, r17
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	b3 01       	movw	r22, r6
    2b12:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2b16:	43 fe       	sbrs	r4, 3
    2b18:	07 c0       	rjmp	.+14     	; 0x2b28 <vfprintf+0x31e>
    2b1a:	08 c0       	rjmp	.+16     	; 0x2b2c <vfprintf+0x322>
    2b1c:	80 e3       	ldi	r24, 0x30	; 48
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	b3 01       	movw	r22, r6
    2b22:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2b26:	8a 94       	dec	r8
    2b28:	88 20       	and	r8, r8
    2b2a:	c1 f7       	brne	.-16     	; 0x2b1c <vfprintf+0x312>
    2b2c:	f7 fe       	sbrs	r15, 7
    2b2e:	46 c0       	rjmp	.+140    	; 0x2bbc <vfprintf+0x3b2>
    2b30:	86 01       	movw	r16, r12
    2b32:	d7 fe       	sbrs	r13, 7
    2b34:	02 c0       	rjmp	.+4      	; 0x2b3a <vfprintf+0x330>
    2b36:	00 e0       	ldi	r16, 0x00	; 0
    2b38:	10 e0       	ldi	r17, 0x00	; 0
    2b3a:	76 01       	movw	r14, r12
    2b3c:	08 94       	sec
    2b3e:	e1 1c       	adc	r14, r1
    2b40:	f1 1c       	adc	r15, r1
    2b42:	e0 1a       	sub	r14, r16
    2b44:	f1 0a       	sbc	r15, r17
    2b46:	41 e0       	ldi	r20, 0x01	; 1
    2b48:	50 e0       	ldi	r21, 0x00	; 0
    2b4a:	4c 0f       	add	r20, r28
    2b4c:	5d 1f       	adc	r21, r29
    2b4e:	e4 0e       	add	r14, r20
    2b50:	f5 1e       	adc	r15, r21
    2b52:	26 01       	movw	r4, r12
    2b54:	4b 18       	sub	r4, r11
    2b56:	51 08       	sbc	r5, r1
    2b58:	89 2d       	mov	r24, r9
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	aa 24       	eor	r10, r10
    2b5e:	bb 24       	eor	r11, r11
    2b60:	a8 1a       	sub	r10, r24
    2b62:	b9 0a       	sbc	r11, r25
    2b64:	5f ef       	ldi	r21, 0xFF	; 255
    2b66:	0f 3f       	cpi	r16, 0xFF	; 255
    2b68:	15 07       	cpc	r17, r21
    2b6a:	29 f4       	brne	.+10     	; 0x2b76 <vfprintf+0x36c>
    2b6c:	8e e2       	ldi	r24, 0x2E	; 46
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	b3 01       	movw	r22, r6
    2b72:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2b76:	c0 16       	cp	r12, r16
    2b78:	d1 06       	cpc	r13, r17
    2b7a:	34 f0       	brlt	.+12     	; 0x2b88 <vfprintf+0x37e>
    2b7c:	40 16       	cp	r4, r16
    2b7e:	51 06       	cpc	r5, r17
    2b80:	1c f4       	brge	.+6      	; 0x2b88 <vfprintf+0x37e>
    2b82:	f7 01       	movw	r30, r14
    2b84:	80 81       	ld	r24, Z
    2b86:	01 c0       	rjmp	.+2      	; 0x2b8a <vfprintf+0x380>
    2b88:	80 e3       	ldi	r24, 0x30	; 48
    2b8a:	01 50       	subi	r16, 0x01	; 1
    2b8c:	10 40       	sbci	r17, 0x00	; 0
    2b8e:	08 94       	sec
    2b90:	e1 1c       	adc	r14, r1
    2b92:	f1 1c       	adc	r15, r1
    2b94:	0a 15       	cp	r16, r10
    2b96:	1b 05       	cpc	r17, r11
    2b98:	2c f0       	brlt	.+10     	; 0x2ba4 <vfprintf+0x39a>
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	b3 01       	movw	r22, r6
    2b9e:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2ba2:	e0 cf       	rjmp	.-64     	; 0x2b64 <vfprintf+0x35a>
    2ba4:	0c 15       	cp	r16, r12
    2ba6:	1d 05       	cpc	r17, r13
    2ba8:	39 f4       	brne	.+14     	; 0x2bb8 <vfprintf+0x3ae>
    2baa:	9a 81       	ldd	r25, Y+2	; 0x02
    2bac:	96 33       	cpi	r25, 0x36	; 54
    2bae:	18 f4       	brcc	.+6      	; 0x2bb6 <vfprintf+0x3ac>
    2bb0:	95 33       	cpi	r25, 0x35	; 53
    2bb2:	11 f4       	brne	.+4      	; 0x2bb8 <vfprintf+0x3ae>
    2bb4:	24 fe       	sbrs	r2, 4
    2bb6:	81 e3       	ldi	r24, 0x31	; 49
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	4b c0       	rjmp	.+150    	; 0x2c52 <vfprintf+0x448>
    2bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbe:	81 33       	cpi	r24, 0x31	; 49
    2bc0:	09 f0       	breq	.+2      	; 0x2bc4 <vfprintf+0x3ba>
    2bc2:	0f 7e       	andi	r16, 0xEF	; 239
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	b3 01       	movw	r22, r6
    2bc8:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2bcc:	99 20       	and	r9, r9
    2bce:	a1 f0       	breq	.+40     	; 0x2bf8 <vfprintf+0x3ee>
    2bd0:	8e e2       	ldi	r24, 0x2E	; 46
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	b3 01       	movw	r22, r6
    2bd6:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2bda:	12 e0       	ldi	r17, 0x02	; 2
    2bdc:	e1 e0       	ldi	r30, 0x01	; 1
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	ec 0f       	add	r30, r28
    2be2:	fd 1f       	adc	r31, r29
    2be4:	e1 0f       	add	r30, r17
    2be6:	f1 1d       	adc	r31, r1
    2be8:	1f 5f       	subi	r17, 0xFF	; 255
    2bea:	80 81       	ld	r24, Z
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	b3 01       	movw	r22, r6
    2bf0:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2bf4:	9a 94       	dec	r9
    2bf6:	91 f7       	brne	.-28     	; 0x2bdc <vfprintf+0x3d2>
    2bf8:	44 fc       	sbrc	r4, 4
    2bfa:	03 c0       	rjmp	.+6      	; 0x2c02 <vfprintf+0x3f8>
    2bfc:	85 e6       	ldi	r24, 0x65	; 101
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	02 c0       	rjmp	.+4      	; 0x2c06 <vfprintf+0x3fc>
    2c02:	85 e4       	ldi	r24, 0x45	; 69
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	b3 01       	movw	r22, r6
    2c08:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2c0c:	d7 fc       	sbrc	r13, 7
    2c0e:	05 c0       	rjmp	.+10     	; 0x2c1a <vfprintf+0x410>
    2c10:	c1 14       	cp	r12, r1
    2c12:	d1 04       	cpc	r13, r1
    2c14:	41 f4       	brne	.+16     	; 0x2c26 <vfprintf+0x41c>
    2c16:	04 ff       	sbrs	r16, 4
    2c18:	06 c0       	rjmp	.+12     	; 0x2c26 <vfprintf+0x41c>
    2c1a:	d0 94       	com	r13
    2c1c:	c1 94       	neg	r12
    2c1e:	d1 08       	sbc	r13, r1
    2c20:	d3 94       	inc	r13
    2c22:	8d e2       	ldi	r24, 0x2D	; 45
    2c24:	01 c0       	rjmp	.+2      	; 0x2c28 <vfprintf+0x41e>
    2c26:	8b e2       	ldi	r24, 0x2B	; 43
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	b3 01       	movw	r22, r6
    2c2c:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2c30:	80 e3       	ldi	r24, 0x30	; 48
    2c32:	05 c0       	rjmp	.+10     	; 0x2c3e <vfprintf+0x434>
    2c34:	8f 5f       	subi	r24, 0xFF	; 255
    2c36:	26 ef       	ldi	r18, 0xF6	; 246
    2c38:	3f ef       	ldi	r19, 0xFF	; 255
    2c3a:	c2 0e       	add	r12, r18
    2c3c:	d3 1e       	adc	r13, r19
    2c3e:	3a e0       	ldi	r19, 0x0A	; 10
    2c40:	c3 16       	cp	r12, r19
    2c42:	d1 04       	cpc	r13, r1
    2c44:	bc f7       	brge	.-18     	; 0x2c34 <vfprintf+0x42a>
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	b3 01       	movw	r22, r6
    2c4a:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2c4e:	c6 01       	movw	r24, r12
    2c50:	c0 96       	adiw	r24, 0x30	; 48
    2c52:	b3 01       	movw	r22, r6
    2c54:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2c58:	cc 84       	ldd	r12, Y+12	; 0x0c
    2c5a:	dd 84       	ldd	r13, Y+13	; 0x0d
    2c5c:	52 c1       	rjmp	.+676    	; 0x2f02 <vfprintf+0x6f8>
    2c5e:	93 36       	cpi	r25, 0x63	; 99
    2c60:	31 f0       	breq	.+12     	; 0x2c6e <vfprintf+0x464>
    2c62:	93 37       	cpi	r25, 0x73	; 115
    2c64:	99 f0       	breq	.+38     	; 0x2c8c <vfprintf+0x482>
    2c66:	93 35       	cpi	r25, 0x53	; 83
    2c68:	09 f0       	breq	.+2      	; 0x2c6c <vfprintf+0x462>
    2c6a:	59 c0       	rjmp	.+178    	; 0x2d1e <vfprintf+0x514>
    2c6c:	23 c0       	rjmp	.+70     	; 0x2cb4 <vfprintf+0x4aa>
    2c6e:	f6 01       	movw	r30, r12
    2c70:	80 81       	ld	r24, Z
    2c72:	89 83       	std	Y+1, r24	; 0x01
    2c74:	5e 01       	movw	r10, r28
    2c76:	08 94       	sec
    2c78:	a1 1c       	adc	r10, r1
    2c7a:	b1 1c       	adc	r11, r1
    2c7c:	22 e0       	ldi	r18, 0x02	; 2
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	c2 0e       	add	r12, r18
    2c82:	d3 1e       	adc	r13, r19
    2c84:	21 e0       	ldi	r18, 0x01	; 1
    2c86:	e2 2e       	mov	r14, r18
    2c88:	f1 2c       	mov	r15, r1
    2c8a:	12 c0       	rjmp	.+36     	; 0x2cb0 <vfprintf+0x4a6>
    2c8c:	f6 01       	movw	r30, r12
    2c8e:	a0 80       	ld	r10, Z
    2c90:	b1 80       	ldd	r11, Z+1	; 0x01
    2c92:	16 fd       	sbrc	r17, 6
    2c94:	03 c0       	rjmp	.+6      	; 0x2c9c <vfprintf+0x492>
    2c96:	6f ef       	ldi	r22, 0xFF	; 255
    2c98:	7f ef       	ldi	r23, 0xFF	; 255
    2c9a:	02 c0       	rjmp	.+4      	; 0x2ca0 <vfprintf+0x496>
    2c9c:	69 2d       	mov	r22, r9
    2c9e:	70 e0       	ldi	r23, 0x00	; 0
    2ca0:	22 e0       	ldi	r18, 0x02	; 2
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	c2 0e       	add	r12, r18
    2ca6:	d3 1e       	adc	r13, r19
    2ca8:	c5 01       	movw	r24, r10
    2caa:	0e 94 7e 19 	call	0x32fc	; 0x32fc <strnlen>
    2cae:	7c 01       	movw	r14, r24
    2cb0:	1f 77       	andi	r17, 0x7F	; 127
    2cb2:	13 c0       	rjmp	.+38     	; 0x2cda <vfprintf+0x4d0>
    2cb4:	f6 01       	movw	r30, r12
    2cb6:	a0 80       	ld	r10, Z
    2cb8:	b1 80       	ldd	r11, Z+1	; 0x01
    2cba:	16 fd       	sbrc	r17, 6
    2cbc:	03 c0       	rjmp	.+6      	; 0x2cc4 <vfprintf+0x4ba>
    2cbe:	6f ef       	ldi	r22, 0xFF	; 255
    2cc0:	7f ef       	ldi	r23, 0xFF	; 255
    2cc2:	02 c0       	rjmp	.+4      	; 0x2cc8 <vfprintf+0x4be>
    2cc4:	69 2d       	mov	r22, r9
    2cc6:	70 e0       	ldi	r23, 0x00	; 0
    2cc8:	22 e0       	ldi	r18, 0x02	; 2
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	c2 0e       	add	r12, r18
    2cce:	d3 1e       	adc	r13, r19
    2cd0:	c5 01       	movw	r24, r10
    2cd2:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <strnlen_P>
    2cd6:	7c 01       	movw	r14, r24
    2cd8:	10 68       	ori	r17, 0x80	; 128
    2cda:	13 ff       	sbrs	r17, 3
    2cdc:	07 c0       	rjmp	.+14     	; 0x2cec <vfprintf+0x4e2>
    2cde:	1b c0       	rjmp	.+54     	; 0x2d16 <vfprintf+0x50c>
    2ce0:	80 e2       	ldi	r24, 0x20	; 32
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	b3 01       	movw	r22, r6
    2ce6:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2cea:	8a 94       	dec	r8
    2cec:	88 2d       	mov	r24, r8
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	e8 16       	cp	r14, r24
    2cf2:	f9 06       	cpc	r15, r25
    2cf4:	a8 f3       	brcs	.-22     	; 0x2ce0 <vfprintf+0x4d6>
    2cf6:	0f c0       	rjmp	.+30     	; 0x2d16 <vfprintf+0x50c>
    2cf8:	f5 01       	movw	r30, r10
    2cfa:	17 fd       	sbrc	r17, 7
    2cfc:	85 91       	lpm	r24, Z+
    2cfe:	17 ff       	sbrs	r17, 7
    2d00:	81 91       	ld	r24, Z+
    2d02:	5f 01       	movw	r10, r30
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	b3 01       	movw	r22, r6
    2d08:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2d0c:	81 10       	cpse	r8, r1
    2d0e:	8a 94       	dec	r8
    2d10:	08 94       	sec
    2d12:	e1 08       	sbc	r14, r1
    2d14:	f1 08       	sbc	r15, r1
    2d16:	e1 14       	cp	r14, r1
    2d18:	f1 04       	cpc	r15, r1
    2d1a:	71 f7       	brne	.-36     	; 0x2cf8 <vfprintf+0x4ee>
    2d1c:	f2 c0       	rjmp	.+484    	; 0x2f02 <vfprintf+0x6f8>
    2d1e:	94 36       	cpi	r25, 0x64	; 100
    2d20:	11 f0       	breq	.+4      	; 0x2d26 <vfprintf+0x51c>
    2d22:	99 36       	cpi	r25, 0x69	; 105
    2d24:	89 f5       	brne	.+98     	; 0x2d88 <vfprintf+0x57e>
    2d26:	17 ff       	sbrs	r17, 7
    2d28:	08 c0       	rjmp	.+16     	; 0x2d3a <vfprintf+0x530>
    2d2a:	f6 01       	movw	r30, r12
    2d2c:	20 81       	ld	r18, Z
    2d2e:	31 81       	ldd	r19, Z+1	; 0x01
    2d30:	42 81       	ldd	r20, Z+2	; 0x02
    2d32:	53 81       	ldd	r21, Z+3	; 0x03
    2d34:	84 e0       	ldi	r24, 0x04	; 4
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	0a c0       	rjmp	.+20     	; 0x2d4e <vfprintf+0x544>
    2d3a:	f6 01       	movw	r30, r12
    2d3c:	80 81       	ld	r24, Z
    2d3e:	91 81       	ldd	r25, Z+1	; 0x01
    2d40:	9c 01       	movw	r18, r24
    2d42:	44 27       	eor	r20, r20
    2d44:	37 fd       	sbrc	r19, 7
    2d46:	40 95       	com	r20
    2d48:	54 2f       	mov	r21, r20
    2d4a:	82 e0       	ldi	r24, 0x02	; 2
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	c8 0e       	add	r12, r24
    2d50:	d9 1e       	adc	r13, r25
    2d52:	9f e6       	ldi	r25, 0x6F	; 111
    2d54:	f9 2e       	mov	r15, r25
    2d56:	f1 22       	and	r15, r17
    2d58:	57 ff       	sbrs	r21, 7
    2d5a:	09 c0       	rjmp	.+18     	; 0x2d6e <vfprintf+0x564>
    2d5c:	50 95       	com	r21
    2d5e:	40 95       	com	r20
    2d60:	30 95       	com	r19
    2d62:	21 95       	neg	r18
    2d64:	3f 4f       	sbci	r19, 0xFF	; 255
    2d66:	4f 4f       	sbci	r20, 0xFF	; 255
    2d68:	5f 4f       	sbci	r21, 0xFF	; 255
    2d6a:	90 e8       	ldi	r25, 0x80	; 128
    2d6c:	f9 2a       	or	r15, r25
    2d6e:	ca 01       	movw	r24, r20
    2d70:	b9 01       	movw	r22, r18
    2d72:	ae 01       	movw	r20, r28
    2d74:	4f 5f       	subi	r20, 0xFF	; 255
    2d76:	5f 4f       	sbci	r21, 0xFF	; 255
    2d78:	2a e0       	ldi	r18, 0x0A	; 10
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__ultoa_invert>
    2d80:	e8 2e       	mov	r14, r24
    2d82:	e8 89       	ldd	r30, Y+16	; 0x10
    2d84:	ee 1a       	sub	r14, r30
    2d86:	41 c0       	rjmp	.+130    	; 0x2e0a <vfprintf+0x600>
    2d88:	95 37       	cpi	r25, 0x75	; 117
    2d8a:	21 f4       	brne	.+8      	; 0x2d94 <vfprintf+0x58a>
    2d8c:	1f 7e       	andi	r17, 0xEF	; 239
    2d8e:	2a e0       	ldi	r18, 0x0A	; 10
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	1c c0       	rjmp	.+56     	; 0x2dcc <vfprintf+0x5c2>
    2d94:	19 7f       	andi	r17, 0xF9	; 249
    2d96:	9f 36       	cpi	r25, 0x6F	; 111
    2d98:	61 f0       	breq	.+24     	; 0x2db2 <vfprintf+0x5a8>
    2d9a:	90 37       	cpi	r25, 0x70	; 112
    2d9c:	20 f4       	brcc	.+8      	; 0x2da6 <vfprintf+0x59c>
    2d9e:	98 35       	cpi	r25, 0x58	; 88
    2da0:	09 f0       	breq	.+2      	; 0x2da4 <vfprintf+0x59a>
    2da2:	b2 c0       	rjmp	.+356    	; 0x2f08 <vfprintf+0x6fe>
    2da4:	0f c0       	rjmp	.+30     	; 0x2dc4 <vfprintf+0x5ba>
    2da6:	90 37       	cpi	r25, 0x70	; 112
    2da8:	39 f0       	breq	.+14     	; 0x2db8 <vfprintf+0x5ae>
    2daa:	98 37       	cpi	r25, 0x78	; 120
    2dac:	09 f0       	breq	.+2      	; 0x2db0 <vfprintf+0x5a6>
    2dae:	ac c0       	rjmp	.+344    	; 0x2f08 <vfprintf+0x6fe>
    2db0:	04 c0       	rjmp	.+8      	; 0x2dba <vfprintf+0x5b0>
    2db2:	28 e0       	ldi	r18, 0x08	; 8
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	0a c0       	rjmp	.+20     	; 0x2dcc <vfprintf+0x5c2>
    2db8:	10 61       	ori	r17, 0x10	; 16
    2dba:	14 fd       	sbrc	r17, 4
    2dbc:	14 60       	ori	r17, 0x04	; 4
    2dbe:	20 e1       	ldi	r18, 0x10	; 16
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	04 c0       	rjmp	.+8      	; 0x2dcc <vfprintf+0x5c2>
    2dc4:	14 fd       	sbrc	r17, 4
    2dc6:	16 60       	ori	r17, 0x06	; 6
    2dc8:	20 e1       	ldi	r18, 0x10	; 16
    2dca:	32 e0       	ldi	r19, 0x02	; 2
    2dcc:	17 ff       	sbrs	r17, 7
    2dce:	08 c0       	rjmp	.+16     	; 0x2de0 <vfprintf+0x5d6>
    2dd0:	f6 01       	movw	r30, r12
    2dd2:	60 81       	ld	r22, Z
    2dd4:	71 81       	ldd	r23, Z+1	; 0x01
    2dd6:	82 81       	ldd	r24, Z+2	; 0x02
    2dd8:	93 81       	ldd	r25, Z+3	; 0x03
    2dda:	44 e0       	ldi	r20, 0x04	; 4
    2ddc:	50 e0       	ldi	r21, 0x00	; 0
    2dde:	08 c0       	rjmp	.+16     	; 0x2df0 <vfprintf+0x5e6>
    2de0:	f6 01       	movw	r30, r12
    2de2:	80 81       	ld	r24, Z
    2de4:	91 81       	ldd	r25, Z+1	; 0x01
    2de6:	bc 01       	movw	r22, r24
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	42 e0       	ldi	r20, 0x02	; 2
    2dee:	50 e0       	ldi	r21, 0x00	; 0
    2df0:	c4 0e       	add	r12, r20
    2df2:	d5 1e       	adc	r13, r21
    2df4:	ae 01       	movw	r20, r28
    2df6:	4f 5f       	subi	r20, 0xFF	; 255
    2df8:	5f 4f       	sbci	r21, 0xFF	; 255
    2dfa:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__ultoa_invert>
    2dfe:	e8 2e       	mov	r14, r24
    2e00:	58 89       	ldd	r21, Y+16	; 0x10
    2e02:	e5 1a       	sub	r14, r21
    2e04:	8f e7       	ldi	r24, 0x7F	; 127
    2e06:	f8 2e       	mov	r15, r24
    2e08:	f1 22       	and	r15, r17
    2e0a:	f6 fe       	sbrs	r15, 6
    2e0c:	0b c0       	rjmp	.+22     	; 0x2e24 <vfprintf+0x61a>
    2e0e:	8e ef       	ldi	r24, 0xFE	; 254
    2e10:	f8 22       	and	r15, r24
    2e12:	e9 14       	cp	r14, r9
    2e14:	38 f4       	brcc	.+14     	; 0x2e24 <vfprintf+0x61a>
    2e16:	f4 fe       	sbrs	r15, 4
    2e18:	07 c0       	rjmp	.+14     	; 0x2e28 <vfprintf+0x61e>
    2e1a:	f2 fc       	sbrc	r15, 2
    2e1c:	05 c0       	rjmp	.+10     	; 0x2e28 <vfprintf+0x61e>
    2e1e:	9f ee       	ldi	r25, 0xEF	; 239
    2e20:	f9 22       	and	r15, r25
    2e22:	02 c0       	rjmp	.+4      	; 0x2e28 <vfprintf+0x61e>
    2e24:	1e 2d       	mov	r17, r14
    2e26:	01 c0       	rjmp	.+2      	; 0x2e2a <vfprintf+0x620>
    2e28:	19 2d       	mov	r17, r9
    2e2a:	f4 fe       	sbrs	r15, 4
    2e2c:	0d c0       	rjmp	.+26     	; 0x2e48 <vfprintf+0x63e>
    2e2e:	fe 01       	movw	r30, r28
    2e30:	ee 0d       	add	r30, r14
    2e32:	f1 1d       	adc	r31, r1
    2e34:	80 81       	ld	r24, Z
    2e36:	80 33       	cpi	r24, 0x30	; 48
    2e38:	19 f4       	brne	.+6      	; 0x2e40 <vfprintf+0x636>
    2e3a:	e9 ee       	ldi	r30, 0xE9	; 233
    2e3c:	fe 22       	and	r15, r30
    2e3e:	08 c0       	rjmp	.+16     	; 0x2e50 <vfprintf+0x646>
    2e40:	1f 5f       	subi	r17, 0xFF	; 255
    2e42:	f2 fe       	sbrs	r15, 2
    2e44:	05 c0       	rjmp	.+10     	; 0x2e50 <vfprintf+0x646>
    2e46:	03 c0       	rjmp	.+6      	; 0x2e4e <vfprintf+0x644>
    2e48:	8f 2d       	mov	r24, r15
    2e4a:	86 78       	andi	r24, 0x86	; 134
    2e4c:	09 f0       	breq	.+2      	; 0x2e50 <vfprintf+0x646>
    2e4e:	1f 5f       	subi	r17, 0xFF	; 255
    2e50:	0f 2d       	mov	r16, r15
    2e52:	f3 fc       	sbrc	r15, 3
    2e54:	14 c0       	rjmp	.+40     	; 0x2e7e <vfprintf+0x674>
    2e56:	f0 fe       	sbrs	r15, 0
    2e58:	0f c0       	rjmp	.+30     	; 0x2e78 <vfprintf+0x66e>
    2e5a:	18 15       	cp	r17, r8
    2e5c:	10 f0       	brcs	.+4      	; 0x2e62 <vfprintf+0x658>
    2e5e:	9e 2c       	mov	r9, r14
    2e60:	0b c0       	rjmp	.+22     	; 0x2e78 <vfprintf+0x66e>
    2e62:	9e 2c       	mov	r9, r14
    2e64:	98 0c       	add	r9, r8
    2e66:	91 1a       	sub	r9, r17
    2e68:	18 2d       	mov	r17, r8
    2e6a:	06 c0       	rjmp	.+12     	; 0x2e78 <vfprintf+0x66e>
    2e6c:	80 e2       	ldi	r24, 0x20	; 32
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	b3 01       	movw	r22, r6
    2e72:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2e76:	1f 5f       	subi	r17, 0xFF	; 255
    2e78:	18 15       	cp	r17, r8
    2e7a:	c0 f3       	brcs	.-16     	; 0x2e6c <vfprintf+0x662>
    2e7c:	04 c0       	rjmp	.+8      	; 0x2e86 <vfprintf+0x67c>
    2e7e:	18 15       	cp	r17, r8
    2e80:	10 f4       	brcc	.+4      	; 0x2e86 <vfprintf+0x67c>
    2e82:	81 1a       	sub	r8, r17
    2e84:	01 c0       	rjmp	.+2      	; 0x2e88 <vfprintf+0x67e>
    2e86:	88 24       	eor	r8, r8
    2e88:	04 ff       	sbrs	r16, 4
    2e8a:	0f c0       	rjmp	.+30     	; 0x2eaa <vfprintf+0x6a0>
    2e8c:	80 e3       	ldi	r24, 0x30	; 48
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	b3 01       	movw	r22, r6
    2e92:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2e96:	02 ff       	sbrs	r16, 2
    2e98:	1d c0       	rjmp	.+58     	; 0x2ed4 <vfprintf+0x6ca>
    2e9a:	01 fd       	sbrc	r16, 1
    2e9c:	03 c0       	rjmp	.+6      	; 0x2ea4 <vfprintf+0x69a>
    2e9e:	88 e7       	ldi	r24, 0x78	; 120
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	0e c0       	rjmp	.+28     	; 0x2ec0 <vfprintf+0x6b6>
    2ea4:	88 e5       	ldi	r24, 0x58	; 88
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	0b c0       	rjmp	.+22     	; 0x2ec0 <vfprintf+0x6b6>
    2eaa:	80 2f       	mov	r24, r16
    2eac:	86 78       	andi	r24, 0x86	; 134
    2eae:	91 f0       	breq	.+36     	; 0x2ed4 <vfprintf+0x6ca>
    2eb0:	01 ff       	sbrs	r16, 1
    2eb2:	02 c0       	rjmp	.+4      	; 0x2eb8 <vfprintf+0x6ae>
    2eb4:	8b e2       	ldi	r24, 0x2B	; 43
    2eb6:	01 c0       	rjmp	.+2      	; 0x2eba <vfprintf+0x6b0>
    2eb8:	80 e2       	ldi	r24, 0x20	; 32
    2eba:	f7 fc       	sbrc	r15, 7
    2ebc:	8d e2       	ldi	r24, 0x2D	; 45
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	b3 01       	movw	r22, r6
    2ec2:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2ec6:	06 c0       	rjmp	.+12     	; 0x2ed4 <vfprintf+0x6ca>
    2ec8:	80 e3       	ldi	r24, 0x30	; 48
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	b3 01       	movw	r22, r6
    2ece:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2ed2:	9a 94       	dec	r9
    2ed4:	e9 14       	cp	r14, r9
    2ed6:	c0 f3       	brcs	.-16     	; 0x2ec8 <vfprintf+0x6be>
    2ed8:	ea 94       	dec	r14
    2eda:	e1 e0       	ldi	r30, 0x01	; 1
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	ec 0f       	add	r30, r28
    2ee0:	fd 1f       	adc	r31, r29
    2ee2:	ee 0d       	add	r30, r14
    2ee4:	f1 1d       	adc	r31, r1
    2ee6:	80 81       	ld	r24, Z
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	b3 01       	movw	r22, r6
    2eec:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2ef0:	ee 20       	and	r14, r14
    2ef2:	91 f7       	brne	.-28     	; 0x2ed8 <vfprintf+0x6ce>
    2ef4:	06 c0       	rjmp	.+12     	; 0x2f02 <vfprintf+0x6f8>
    2ef6:	80 e2       	ldi	r24, 0x20	; 32
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	b3 01       	movw	r22, r6
    2efc:	0e 94 c7 19 	call	0x338e	; 0x338e <fputc>
    2f00:	8a 94       	dec	r8
    2f02:	88 20       	and	r8, r8
    2f04:	c1 f7       	brne	.-16     	; 0x2ef6 <vfprintf+0x6ec>
    2f06:	99 cc       	rjmp	.-1742   	; 0x283a <vfprintf+0x30>
    2f08:	f3 01       	movw	r30, r6
    2f0a:	66 81       	ldd	r22, Z+6	; 0x06
    2f0c:	77 81       	ldd	r23, Z+7	; 0x07
    2f0e:	cb 01       	movw	r24, r22
    2f10:	61 96       	adiw	r28, 0x11	; 17
    2f12:	e2 e1       	ldi	r30, 0x12	; 18
    2f14:	0c 94 00 1b 	jmp	0x3600	; 0x3600 <__epilogue_restores__>

00002f18 <malloc>:
    2f18:	cf 93       	push	r28
    2f1a:	df 93       	push	r29
    2f1c:	bc 01       	movw	r22, r24
    2f1e:	82 30       	cpi	r24, 0x02	; 2
    2f20:	91 05       	cpc	r25, r1
    2f22:	10 f4       	brcc	.+4      	; 0x2f28 <malloc+0x10>
    2f24:	62 e0       	ldi	r22, 0x02	; 2
    2f26:	70 e0       	ldi	r23, 0x00	; 0
    2f28:	a0 91 23 04 	lds	r26, 0x0423
    2f2c:	b0 91 24 04 	lds	r27, 0x0424
    2f30:	ed 01       	movw	r28, r26
    2f32:	e0 e0       	ldi	r30, 0x00	; 0
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	40 e0       	ldi	r20, 0x00	; 0
    2f38:	50 e0       	ldi	r21, 0x00	; 0
    2f3a:	21 c0       	rjmp	.+66     	; 0x2f7e <malloc+0x66>
    2f3c:	88 81       	ld	r24, Y
    2f3e:	99 81       	ldd	r25, Y+1	; 0x01
    2f40:	86 17       	cp	r24, r22
    2f42:	97 07       	cpc	r25, r23
    2f44:	69 f4       	brne	.+26     	; 0x2f60 <malloc+0x48>
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4a:	30 97       	sbiw	r30, 0x00	; 0
    2f4c:	19 f0       	breq	.+6      	; 0x2f54 <malloc+0x3c>
    2f4e:	93 83       	std	Z+3, r25	; 0x03
    2f50:	82 83       	std	Z+2, r24	; 0x02
    2f52:	04 c0       	rjmp	.+8      	; 0x2f5c <malloc+0x44>
    2f54:	90 93 24 04 	sts	0x0424, r25
    2f58:	80 93 23 04 	sts	0x0423, r24
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	34 c0       	rjmp	.+104    	; 0x2fc8 <malloc+0xb0>
    2f60:	68 17       	cp	r22, r24
    2f62:	79 07       	cpc	r23, r25
    2f64:	38 f4       	brcc	.+14     	; 0x2f74 <malloc+0x5c>
    2f66:	41 15       	cp	r20, r1
    2f68:	51 05       	cpc	r21, r1
    2f6a:	19 f0       	breq	.+6      	; 0x2f72 <malloc+0x5a>
    2f6c:	84 17       	cp	r24, r20
    2f6e:	95 07       	cpc	r25, r21
    2f70:	08 f4       	brcc	.+2      	; 0x2f74 <malloc+0x5c>
    2f72:	ac 01       	movw	r20, r24
    2f74:	fe 01       	movw	r30, r28
    2f76:	8a 81       	ldd	r24, Y+2	; 0x02
    2f78:	9b 81       	ldd	r25, Y+3	; 0x03
    2f7a:	9c 01       	movw	r18, r24
    2f7c:	e9 01       	movw	r28, r18
    2f7e:	20 97       	sbiw	r28, 0x00	; 0
    2f80:	e9 f6       	brne	.-70     	; 0x2f3c <malloc+0x24>
    2f82:	41 15       	cp	r20, r1
    2f84:	51 05       	cpc	r21, r1
    2f86:	a9 f1       	breq	.+106    	; 0x2ff2 <malloc+0xda>
    2f88:	ca 01       	movw	r24, r20
    2f8a:	86 1b       	sub	r24, r22
    2f8c:	97 0b       	sbc	r25, r23
    2f8e:	04 97       	sbiw	r24, 0x04	; 4
    2f90:	08 f4       	brcc	.+2      	; 0x2f94 <malloc+0x7c>
    2f92:	ba 01       	movw	r22, r20
    2f94:	e0 e0       	ldi	r30, 0x00	; 0
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	2a c0       	rjmp	.+84     	; 0x2fee <malloc+0xd6>
    2f9a:	8d 91       	ld	r24, X+
    2f9c:	9c 91       	ld	r25, X
    2f9e:	11 97       	sbiw	r26, 0x01	; 1
    2fa0:	84 17       	cp	r24, r20
    2fa2:	95 07       	cpc	r25, r21
    2fa4:	f9 f4       	brne	.+62     	; 0x2fe4 <malloc+0xcc>
    2fa6:	64 17       	cp	r22, r20
    2fa8:	75 07       	cpc	r23, r21
    2faa:	81 f4       	brne	.+32     	; 0x2fcc <malloc+0xb4>
    2fac:	12 96       	adiw	r26, 0x02	; 2
    2fae:	8d 91       	ld	r24, X+
    2fb0:	9c 91       	ld	r25, X
    2fb2:	13 97       	sbiw	r26, 0x03	; 3
    2fb4:	30 97       	sbiw	r30, 0x00	; 0
    2fb6:	19 f0       	breq	.+6      	; 0x2fbe <malloc+0xa6>
    2fb8:	93 83       	std	Z+3, r25	; 0x03
    2fba:	82 83       	std	Z+2, r24	; 0x02
    2fbc:	04 c0       	rjmp	.+8      	; 0x2fc6 <malloc+0xae>
    2fbe:	90 93 24 04 	sts	0x0424, r25
    2fc2:	80 93 23 04 	sts	0x0423, r24
    2fc6:	fd 01       	movw	r30, r26
    2fc8:	32 96       	adiw	r30, 0x02	; 2
    2fca:	4f c0       	rjmp	.+158    	; 0x306a <malloc+0x152>
    2fcc:	ca 01       	movw	r24, r20
    2fce:	86 1b       	sub	r24, r22
    2fd0:	97 0b       	sbc	r25, r23
    2fd2:	fd 01       	movw	r30, r26
    2fd4:	e8 0f       	add	r30, r24
    2fd6:	f9 1f       	adc	r31, r25
    2fd8:	61 93       	st	Z+, r22
    2fda:	71 93       	st	Z+, r23
    2fdc:	02 97       	sbiw	r24, 0x02	; 2
    2fde:	8d 93       	st	X+, r24
    2fe0:	9c 93       	st	X, r25
    2fe2:	43 c0       	rjmp	.+134    	; 0x306a <malloc+0x152>
    2fe4:	fd 01       	movw	r30, r26
    2fe6:	82 81       	ldd	r24, Z+2	; 0x02
    2fe8:	93 81       	ldd	r25, Z+3	; 0x03
    2fea:	9c 01       	movw	r18, r24
    2fec:	d9 01       	movw	r26, r18
    2fee:	10 97       	sbiw	r26, 0x00	; 0
    2ff0:	a1 f6       	brne	.-88     	; 0x2f9a <malloc+0x82>
    2ff2:	80 91 21 04 	lds	r24, 0x0421
    2ff6:	90 91 22 04 	lds	r25, 0x0422
    2ffa:	89 2b       	or	r24, r25
    2ffc:	41 f4       	brne	.+16     	; 0x300e <malloc+0xf6>
    2ffe:	80 91 ea 02 	lds	r24, 0x02EA
    3002:	90 91 eb 02 	lds	r25, 0x02EB
    3006:	90 93 22 04 	sts	0x0422, r25
    300a:	80 93 21 04 	sts	0x0421, r24
    300e:	40 91 ec 02 	lds	r20, 0x02EC
    3012:	50 91 ed 02 	lds	r21, 0x02ED
    3016:	41 15       	cp	r20, r1
    3018:	51 05       	cpc	r21, r1
    301a:	41 f4       	brne	.+16     	; 0x302c <malloc+0x114>
    301c:	4d b7       	in	r20, 0x3d	; 61
    301e:	5e b7       	in	r21, 0x3e	; 62
    3020:	80 91 e8 02 	lds	r24, 0x02E8
    3024:	90 91 e9 02 	lds	r25, 0x02E9
    3028:	48 1b       	sub	r20, r24
    302a:	59 0b       	sbc	r21, r25
    302c:	20 91 21 04 	lds	r18, 0x0421
    3030:	30 91 22 04 	lds	r19, 0x0422
    3034:	24 17       	cp	r18, r20
    3036:	35 07       	cpc	r19, r21
    3038:	b0 f4       	brcc	.+44     	; 0x3066 <malloc+0x14e>
    303a:	ca 01       	movw	r24, r20
    303c:	82 1b       	sub	r24, r18
    303e:	93 0b       	sbc	r25, r19
    3040:	86 17       	cp	r24, r22
    3042:	97 07       	cpc	r25, r23
    3044:	80 f0       	brcs	.+32     	; 0x3066 <malloc+0x14e>
    3046:	ab 01       	movw	r20, r22
    3048:	4e 5f       	subi	r20, 0xFE	; 254
    304a:	5f 4f       	sbci	r21, 0xFF	; 255
    304c:	84 17       	cp	r24, r20
    304e:	95 07       	cpc	r25, r21
    3050:	50 f0       	brcs	.+20     	; 0x3066 <malloc+0x14e>
    3052:	42 0f       	add	r20, r18
    3054:	53 1f       	adc	r21, r19
    3056:	50 93 22 04 	sts	0x0422, r21
    305a:	40 93 21 04 	sts	0x0421, r20
    305e:	f9 01       	movw	r30, r18
    3060:	61 93       	st	Z+, r22
    3062:	71 93       	st	Z+, r23
    3064:	02 c0       	rjmp	.+4      	; 0x306a <malloc+0x152>
    3066:	e0 e0       	ldi	r30, 0x00	; 0
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	cf 01       	movw	r24, r30
    306c:	df 91       	pop	r29
    306e:	cf 91       	pop	r28
    3070:	08 95       	ret

00003072 <free>:
    3072:	cf 93       	push	r28
    3074:	df 93       	push	r29
    3076:	00 97       	sbiw	r24, 0x00	; 0
    3078:	09 f4       	brne	.+2      	; 0x307c <free+0xa>
    307a:	50 c0       	rjmp	.+160    	; 0x311c <free+0xaa>
    307c:	ec 01       	movw	r28, r24
    307e:	22 97       	sbiw	r28, 0x02	; 2
    3080:	1b 82       	std	Y+3, r1	; 0x03
    3082:	1a 82       	std	Y+2, r1	; 0x02
    3084:	a0 91 23 04 	lds	r26, 0x0423
    3088:	b0 91 24 04 	lds	r27, 0x0424
    308c:	10 97       	sbiw	r26, 0x00	; 0
    308e:	09 f1       	breq	.+66     	; 0x30d2 <free+0x60>
    3090:	40 e0       	ldi	r20, 0x00	; 0
    3092:	50 e0       	ldi	r21, 0x00	; 0
    3094:	ac 17       	cp	r26, r28
    3096:	bd 07       	cpc	r27, r29
    3098:	08 f1       	brcs	.+66     	; 0x30dc <free+0x6a>
    309a:	bb 83       	std	Y+3, r27	; 0x03
    309c:	aa 83       	std	Y+2, r26	; 0x02
    309e:	fe 01       	movw	r30, r28
    30a0:	21 91       	ld	r18, Z+
    30a2:	31 91       	ld	r19, Z+
    30a4:	e2 0f       	add	r30, r18
    30a6:	f3 1f       	adc	r31, r19
    30a8:	ae 17       	cp	r26, r30
    30aa:	bf 07       	cpc	r27, r31
    30ac:	79 f4       	brne	.+30     	; 0x30cc <free+0x5a>
    30ae:	8d 91       	ld	r24, X+
    30b0:	9c 91       	ld	r25, X
    30b2:	11 97       	sbiw	r26, 0x01	; 1
    30b4:	28 0f       	add	r18, r24
    30b6:	39 1f       	adc	r19, r25
    30b8:	2e 5f       	subi	r18, 0xFE	; 254
    30ba:	3f 4f       	sbci	r19, 0xFF	; 255
    30bc:	39 83       	std	Y+1, r19	; 0x01
    30be:	28 83       	st	Y, r18
    30c0:	12 96       	adiw	r26, 0x02	; 2
    30c2:	8d 91       	ld	r24, X+
    30c4:	9c 91       	ld	r25, X
    30c6:	13 97       	sbiw	r26, 0x03	; 3
    30c8:	9b 83       	std	Y+3, r25	; 0x03
    30ca:	8a 83       	std	Y+2, r24	; 0x02
    30cc:	41 15       	cp	r20, r1
    30ce:	51 05       	cpc	r21, r1
    30d0:	71 f4       	brne	.+28     	; 0x30ee <free+0x7c>
    30d2:	d0 93 24 04 	sts	0x0424, r29
    30d6:	c0 93 23 04 	sts	0x0423, r28
    30da:	20 c0       	rjmp	.+64     	; 0x311c <free+0xaa>
    30dc:	12 96       	adiw	r26, 0x02	; 2
    30de:	8d 91       	ld	r24, X+
    30e0:	9c 91       	ld	r25, X
    30e2:	13 97       	sbiw	r26, 0x03	; 3
    30e4:	ad 01       	movw	r20, r26
    30e6:	00 97       	sbiw	r24, 0x00	; 0
    30e8:	11 f0       	breq	.+4      	; 0x30ee <free+0x7c>
    30ea:	dc 01       	movw	r26, r24
    30ec:	d3 cf       	rjmp	.-90     	; 0x3094 <free+0x22>
    30ee:	fa 01       	movw	r30, r20
    30f0:	d3 83       	std	Z+3, r29	; 0x03
    30f2:	c2 83       	std	Z+2, r28	; 0x02
    30f4:	21 91       	ld	r18, Z+
    30f6:	31 91       	ld	r19, Z+
    30f8:	e2 0f       	add	r30, r18
    30fa:	f3 1f       	adc	r31, r19
    30fc:	ce 17       	cp	r28, r30
    30fe:	df 07       	cpc	r29, r31
    3100:	69 f4       	brne	.+26     	; 0x311c <free+0xaa>
    3102:	88 81       	ld	r24, Y
    3104:	99 81       	ldd	r25, Y+1	; 0x01
    3106:	28 0f       	add	r18, r24
    3108:	39 1f       	adc	r19, r25
    310a:	2e 5f       	subi	r18, 0xFE	; 254
    310c:	3f 4f       	sbci	r19, 0xFF	; 255
    310e:	fa 01       	movw	r30, r20
    3110:	31 83       	std	Z+1, r19	; 0x01
    3112:	20 83       	st	Z, r18
    3114:	8a 81       	ldd	r24, Y+2	; 0x02
    3116:	9b 81       	ldd	r25, Y+3	; 0x03
    3118:	93 83       	std	Z+3, r25	; 0x03
    311a:	82 83       	std	Z+2, r24	; 0x02
    311c:	df 91       	pop	r29
    311e:	cf 91       	pop	r28
    3120:	08 95       	ret

00003122 <exit>:
    3122:	f8 94       	cli
    3124:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <_exit>

00003128 <__ftoa_engine>:
    3128:	28 30       	cpi	r18, 0x08	; 8
    312a:	08 f0       	brcs	.+2      	; 0x312e <__ftoa_engine+0x6>
    312c:	27 e0       	ldi	r18, 0x07	; 7
    312e:	33 27       	eor	r19, r19
    3130:	da 01       	movw	r26, r20
    3132:	99 0f       	add	r25, r25
    3134:	31 1d       	adc	r19, r1
    3136:	87 fd       	sbrc	r24, 7
    3138:	91 60       	ori	r25, 0x01	; 1
    313a:	00 96       	adiw	r24, 0x00	; 0
    313c:	61 05       	cpc	r22, r1
    313e:	71 05       	cpc	r23, r1
    3140:	39 f4       	brne	.+14     	; 0x3150 <__ftoa_engine+0x28>
    3142:	32 60       	ori	r19, 0x02	; 2
    3144:	2e 5f       	subi	r18, 0xFE	; 254
    3146:	3d 93       	st	X+, r19
    3148:	30 e3       	ldi	r19, 0x30	; 48
    314a:	2a 95       	dec	r18
    314c:	e1 f7       	brne	.-8      	; 0x3146 <__ftoa_engine+0x1e>
    314e:	08 95       	ret
    3150:	9f 3f       	cpi	r25, 0xFF	; 255
    3152:	30 f0       	brcs	.+12     	; 0x3160 <__ftoa_engine+0x38>
    3154:	80 38       	cpi	r24, 0x80	; 128
    3156:	71 05       	cpc	r23, r1
    3158:	61 05       	cpc	r22, r1
    315a:	09 f0       	breq	.+2      	; 0x315e <__ftoa_engine+0x36>
    315c:	3c 5f       	subi	r19, 0xFC	; 252
    315e:	3c 5f       	subi	r19, 0xFC	; 252
    3160:	3d 93       	st	X+, r19
    3162:	91 30       	cpi	r25, 0x01	; 1
    3164:	08 f0       	brcs	.+2      	; 0x3168 <__ftoa_engine+0x40>
    3166:	80 68       	ori	r24, 0x80	; 128
    3168:	91 1d       	adc	r25, r1
    316a:	df 93       	push	r29
    316c:	cf 93       	push	r28
    316e:	1f 93       	push	r17
    3170:	0f 93       	push	r16
    3172:	ff 92       	push	r15
    3174:	ef 92       	push	r14
    3176:	19 2f       	mov	r17, r25
    3178:	98 7f       	andi	r25, 0xF8	; 248
    317a:	96 95       	lsr	r25
    317c:	e9 2f       	mov	r30, r25
    317e:	96 95       	lsr	r25
    3180:	96 95       	lsr	r25
    3182:	e9 0f       	add	r30, r25
    3184:	ff 27       	eor	r31, r31
    3186:	e8 5d       	subi	r30, 0xD8	; 216
    3188:	fb 4f       	sbci	r31, 0xFB	; 251
    318a:	99 27       	eor	r25, r25
    318c:	33 27       	eor	r19, r19
    318e:	ee 24       	eor	r14, r14
    3190:	ff 24       	eor	r15, r15
    3192:	a7 01       	movw	r20, r14
    3194:	e7 01       	movw	r28, r14
    3196:	05 90       	lpm	r0, Z+
    3198:	08 94       	sec
    319a:	07 94       	ror	r0
    319c:	28 f4       	brcc	.+10     	; 0x31a8 <__ftoa_engine+0x80>
    319e:	36 0f       	add	r19, r22
    31a0:	e7 1e       	adc	r14, r23
    31a2:	f8 1e       	adc	r15, r24
    31a4:	49 1f       	adc	r20, r25
    31a6:	51 1d       	adc	r21, r1
    31a8:	66 0f       	add	r22, r22
    31aa:	77 1f       	adc	r23, r23
    31ac:	88 1f       	adc	r24, r24
    31ae:	99 1f       	adc	r25, r25
    31b0:	06 94       	lsr	r0
    31b2:	a1 f7       	brne	.-24     	; 0x319c <__ftoa_engine+0x74>
    31b4:	05 90       	lpm	r0, Z+
    31b6:	07 94       	ror	r0
    31b8:	28 f4       	brcc	.+10     	; 0x31c4 <__ftoa_engine+0x9c>
    31ba:	e7 0e       	add	r14, r23
    31bc:	f8 1e       	adc	r15, r24
    31be:	49 1f       	adc	r20, r25
    31c0:	56 1f       	adc	r21, r22
    31c2:	c1 1d       	adc	r28, r1
    31c4:	77 0f       	add	r23, r23
    31c6:	88 1f       	adc	r24, r24
    31c8:	99 1f       	adc	r25, r25
    31ca:	66 1f       	adc	r22, r22
    31cc:	06 94       	lsr	r0
    31ce:	a1 f7       	brne	.-24     	; 0x31b8 <__ftoa_engine+0x90>
    31d0:	05 90       	lpm	r0, Z+
    31d2:	07 94       	ror	r0
    31d4:	28 f4       	brcc	.+10     	; 0x31e0 <__ftoa_engine+0xb8>
    31d6:	f8 0e       	add	r15, r24
    31d8:	49 1f       	adc	r20, r25
    31da:	56 1f       	adc	r21, r22
    31dc:	c7 1f       	adc	r28, r23
    31de:	d1 1d       	adc	r29, r1
    31e0:	88 0f       	add	r24, r24
    31e2:	99 1f       	adc	r25, r25
    31e4:	66 1f       	adc	r22, r22
    31e6:	77 1f       	adc	r23, r23
    31e8:	06 94       	lsr	r0
    31ea:	a1 f7       	brne	.-24     	; 0x31d4 <__ftoa_engine+0xac>
    31ec:	05 90       	lpm	r0, Z+
    31ee:	07 94       	ror	r0
    31f0:	20 f4       	brcc	.+8      	; 0x31fa <__ftoa_engine+0xd2>
    31f2:	49 0f       	add	r20, r25
    31f4:	56 1f       	adc	r21, r22
    31f6:	c7 1f       	adc	r28, r23
    31f8:	d8 1f       	adc	r29, r24
    31fa:	99 0f       	add	r25, r25
    31fc:	66 1f       	adc	r22, r22
    31fe:	77 1f       	adc	r23, r23
    3200:	88 1f       	adc	r24, r24
    3202:	06 94       	lsr	r0
    3204:	a9 f7       	brne	.-22     	; 0x31f0 <__ftoa_engine+0xc8>
    3206:	84 91       	lpm	r24, Z+
    3208:	10 95       	com	r17
    320a:	17 70       	andi	r17, 0x07	; 7
    320c:	41 f0       	breq	.+16     	; 0x321e <__ftoa_engine+0xf6>
    320e:	d6 95       	lsr	r29
    3210:	c7 95       	ror	r28
    3212:	57 95       	ror	r21
    3214:	47 95       	ror	r20
    3216:	f7 94       	ror	r15
    3218:	e7 94       	ror	r14
    321a:	1a 95       	dec	r17
    321c:	c1 f7       	brne	.-16     	; 0x320e <__ftoa_engine+0xe6>
    321e:	ee ec       	ldi	r30, 0xCE	; 206
    3220:	f3 e0       	ldi	r31, 0x03	; 3
    3222:	68 94       	set
    3224:	15 90       	lpm	r1, Z+
    3226:	15 91       	lpm	r17, Z+
    3228:	35 91       	lpm	r19, Z+
    322a:	65 91       	lpm	r22, Z+
    322c:	95 91       	lpm	r25, Z+
    322e:	05 90       	lpm	r0, Z+
    3230:	7f e2       	ldi	r23, 0x2F	; 47
    3232:	73 95       	inc	r23
    3234:	e1 18       	sub	r14, r1
    3236:	f1 0a       	sbc	r15, r17
    3238:	43 0b       	sbc	r20, r19
    323a:	56 0b       	sbc	r21, r22
    323c:	c9 0b       	sbc	r28, r25
    323e:	d0 09       	sbc	r29, r0
    3240:	c0 f7       	brcc	.-16     	; 0x3232 <__ftoa_engine+0x10a>
    3242:	e1 0c       	add	r14, r1
    3244:	f1 1e       	adc	r15, r17
    3246:	43 1f       	adc	r20, r19
    3248:	56 1f       	adc	r21, r22
    324a:	c9 1f       	adc	r28, r25
    324c:	d0 1d       	adc	r29, r0
    324e:	7e f4       	brtc	.+30     	; 0x326e <__ftoa_engine+0x146>
    3250:	70 33       	cpi	r23, 0x30	; 48
    3252:	11 f4       	brne	.+4      	; 0x3258 <__ftoa_engine+0x130>
    3254:	8a 95       	dec	r24
    3256:	e6 cf       	rjmp	.-52     	; 0x3224 <__ftoa_engine+0xfc>
    3258:	e8 94       	clt
    325a:	01 50       	subi	r16, 0x01	; 1
    325c:	30 f0       	brcs	.+12     	; 0x326a <__ftoa_engine+0x142>
    325e:	08 0f       	add	r16, r24
    3260:	0a f4       	brpl	.+2      	; 0x3264 <__ftoa_engine+0x13c>
    3262:	00 27       	eor	r16, r16
    3264:	02 17       	cp	r16, r18
    3266:	08 f4       	brcc	.+2      	; 0x326a <__ftoa_engine+0x142>
    3268:	20 2f       	mov	r18, r16
    326a:	23 95       	inc	r18
    326c:	02 2f       	mov	r16, r18
    326e:	7a 33       	cpi	r23, 0x3A	; 58
    3270:	28 f0       	brcs	.+10     	; 0x327c <__ftoa_engine+0x154>
    3272:	79 e3       	ldi	r23, 0x39	; 57
    3274:	7d 93       	st	X+, r23
    3276:	2a 95       	dec	r18
    3278:	e9 f7       	brne	.-6      	; 0x3274 <__ftoa_engine+0x14c>
    327a:	10 c0       	rjmp	.+32     	; 0x329c <__ftoa_engine+0x174>
    327c:	7d 93       	st	X+, r23
    327e:	2a 95       	dec	r18
    3280:	89 f6       	brne	.-94     	; 0x3224 <__ftoa_engine+0xfc>
    3282:	06 94       	lsr	r0
    3284:	97 95       	ror	r25
    3286:	67 95       	ror	r22
    3288:	37 95       	ror	r19
    328a:	17 95       	ror	r17
    328c:	17 94       	ror	r1
    328e:	e1 18       	sub	r14, r1
    3290:	f1 0a       	sbc	r15, r17
    3292:	43 0b       	sbc	r20, r19
    3294:	56 0b       	sbc	r21, r22
    3296:	c9 0b       	sbc	r28, r25
    3298:	d0 09       	sbc	r29, r0
    329a:	98 f0       	brcs	.+38     	; 0x32c2 <__ftoa_engine+0x19a>
    329c:	23 95       	inc	r18
    329e:	7e 91       	ld	r23, -X
    32a0:	73 95       	inc	r23
    32a2:	7a 33       	cpi	r23, 0x3A	; 58
    32a4:	08 f0       	brcs	.+2      	; 0x32a8 <__ftoa_engine+0x180>
    32a6:	70 e3       	ldi	r23, 0x30	; 48
    32a8:	7c 93       	st	X, r23
    32aa:	20 13       	cpse	r18, r16
    32ac:	b8 f7       	brcc	.-18     	; 0x329c <__ftoa_engine+0x174>
    32ae:	7e 91       	ld	r23, -X
    32b0:	70 61       	ori	r23, 0x10	; 16
    32b2:	7d 93       	st	X+, r23
    32b4:	30 f0       	brcs	.+12     	; 0x32c2 <__ftoa_engine+0x19a>
    32b6:	83 95       	inc	r24
    32b8:	71 e3       	ldi	r23, 0x31	; 49
    32ba:	7d 93       	st	X+, r23
    32bc:	70 e3       	ldi	r23, 0x30	; 48
    32be:	2a 95       	dec	r18
    32c0:	e1 f7       	brne	.-8      	; 0x32ba <__ftoa_engine+0x192>
    32c2:	11 24       	eor	r1, r1
    32c4:	ef 90       	pop	r14
    32c6:	ff 90       	pop	r15
    32c8:	0f 91       	pop	r16
    32ca:	1f 91       	pop	r17
    32cc:	cf 91       	pop	r28
    32ce:	df 91       	pop	r29
    32d0:	99 27       	eor	r25, r25
    32d2:	87 fd       	sbrc	r24, 7
    32d4:	90 95       	com	r25
    32d6:	08 95       	ret

000032d8 <strnlen_P>:
    32d8:	fc 01       	movw	r30, r24
    32da:	05 90       	lpm	r0, Z+
    32dc:	61 50       	subi	r22, 0x01	; 1
    32de:	70 40       	sbci	r23, 0x00	; 0
    32e0:	01 10       	cpse	r0, r1
    32e2:	d8 f7       	brcc	.-10     	; 0x32da <strnlen_P+0x2>
    32e4:	80 95       	com	r24
    32e6:	90 95       	com	r25
    32e8:	8e 0f       	add	r24, r30
    32ea:	9f 1f       	adc	r25, r31
    32ec:	08 95       	ret

000032ee <memset>:
    32ee:	dc 01       	movw	r26, r24
    32f0:	01 c0       	rjmp	.+2      	; 0x32f4 <memset+0x6>
    32f2:	6d 93       	st	X+, r22
    32f4:	41 50       	subi	r20, 0x01	; 1
    32f6:	50 40       	sbci	r21, 0x00	; 0
    32f8:	e0 f7       	brcc	.-8      	; 0x32f2 <memset+0x4>
    32fa:	08 95       	ret

000032fc <strnlen>:
    32fc:	fc 01       	movw	r30, r24
    32fe:	61 50       	subi	r22, 0x01	; 1
    3300:	70 40       	sbci	r23, 0x00	; 0
    3302:	01 90       	ld	r0, Z+
    3304:	01 10       	cpse	r0, r1
    3306:	d8 f7       	brcc	.-10     	; 0x32fe <strnlen+0x2>
    3308:	80 95       	com	r24
    330a:	90 95       	com	r25
    330c:	8e 0f       	add	r24, r30
    330e:	9f 1f       	adc	r25, r31
    3310:	08 95       	ret

00003312 <itoa>:
    3312:	fb 01       	movw	r30, r22
    3314:	9f 01       	movw	r18, r30
    3316:	e8 94       	clt
    3318:	42 30       	cpi	r20, 0x02	; 2
    331a:	c4 f0       	brlt	.+48     	; 0x334c <itoa+0x3a>
    331c:	45 32       	cpi	r20, 0x25	; 37
    331e:	b4 f4       	brge	.+44     	; 0x334c <itoa+0x3a>
    3320:	4a 30       	cpi	r20, 0x0A	; 10
    3322:	29 f4       	brne	.+10     	; 0x332e <itoa+0x1c>
    3324:	97 fb       	bst	r25, 7
    3326:	1e f4       	brtc	.+6      	; 0x332e <itoa+0x1c>
    3328:	90 95       	com	r25
    332a:	81 95       	neg	r24
    332c:	9f 4f       	sbci	r25, 0xFF	; 255
    332e:	64 2f       	mov	r22, r20
    3330:	77 27       	eor	r23, r23
    3332:	0e 94 80 1a 	call	0x3500	; 0x3500 <__udivmodhi4>
    3336:	80 5d       	subi	r24, 0xD0	; 208
    3338:	8a 33       	cpi	r24, 0x3A	; 58
    333a:	0c f0       	brlt	.+2      	; 0x333e <itoa+0x2c>
    333c:	89 5d       	subi	r24, 0xD9	; 217
    333e:	81 93       	st	Z+, r24
    3340:	cb 01       	movw	r24, r22
    3342:	00 97       	sbiw	r24, 0x00	; 0
    3344:	a1 f7       	brne	.-24     	; 0x332e <itoa+0x1c>
    3346:	16 f4       	brtc	.+4      	; 0x334c <itoa+0x3a>
    3348:	5d e2       	ldi	r21, 0x2D	; 45
    334a:	51 93       	st	Z+, r21
    334c:	10 82       	st	Z, r1
    334e:	c9 01       	movw	r24, r18
    3350:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <strrev>

00003354 <fprintf_P>:
    3354:	a0 e0       	ldi	r26, 0x00	; 0
    3356:	b0 e0       	ldi	r27, 0x00	; 0
    3358:	e0 eb       	ldi	r30, 0xB0	; 176
    335a:	f9 e1       	ldi	r31, 0x19	; 25
    335c:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <__prologue_saves__+0x1c>
    3360:	0f 81       	ldd	r16, Y+7	; 0x07
    3362:	18 85       	ldd	r17, Y+8	; 0x08
    3364:	9e 01       	movw	r18, r28
    3366:	25 5f       	subi	r18, 0xF5	; 245
    3368:	3f 4f       	sbci	r19, 0xFF	; 255
    336a:	f8 01       	movw	r30, r16
    336c:	83 81       	ldd	r24, Z+3	; 0x03
    336e:	88 60       	ori	r24, 0x08	; 8
    3370:	83 83       	std	Z+3, r24	; 0x03
    3372:	c8 01       	movw	r24, r16
    3374:	69 85       	ldd	r22, Y+9	; 0x09
    3376:	7a 85       	ldd	r23, Y+10	; 0x0a
    3378:	a9 01       	movw	r20, r18
    337a:	0e 94 05 14 	call	0x280a	; 0x280a <vfprintf>
    337e:	f8 01       	movw	r30, r16
    3380:	23 81       	ldd	r18, Z+3	; 0x03
    3382:	27 7f       	andi	r18, 0xF7	; 247
    3384:	23 83       	std	Z+3, r18	; 0x03
    3386:	20 96       	adiw	r28, 0x00	; 0
    3388:	e4 e0       	ldi	r30, 0x04	; 4
    338a:	0c 94 0e 1b 	jmp	0x361c	; 0x361c <__epilogue_restores__+0x1c>

0000338e <fputc>:
    338e:	0f 93       	push	r16
    3390:	1f 93       	push	r17
    3392:	cf 93       	push	r28
    3394:	df 93       	push	r29
    3396:	8c 01       	movw	r16, r24
    3398:	eb 01       	movw	r28, r22
    339a:	8b 81       	ldd	r24, Y+3	; 0x03
    339c:	81 ff       	sbrs	r24, 1
    339e:	1b c0       	rjmp	.+54     	; 0x33d6 <fputc+0x48>
    33a0:	82 ff       	sbrs	r24, 2
    33a2:	0d c0       	rjmp	.+26     	; 0x33be <fputc+0x30>
    33a4:	2e 81       	ldd	r18, Y+6	; 0x06
    33a6:	3f 81       	ldd	r19, Y+7	; 0x07
    33a8:	8c 81       	ldd	r24, Y+4	; 0x04
    33aa:	9d 81       	ldd	r25, Y+5	; 0x05
    33ac:	28 17       	cp	r18, r24
    33ae:	39 07       	cpc	r19, r25
    33b0:	64 f4       	brge	.+24     	; 0x33ca <fputc+0x3c>
    33b2:	e8 81       	ld	r30, Y
    33b4:	f9 81       	ldd	r31, Y+1	; 0x01
    33b6:	01 93       	st	Z+, r16
    33b8:	f9 83       	std	Y+1, r31	; 0x01
    33ba:	e8 83       	st	Y, r30
    33bc:	06 c0       	rjmp	.+12     	; 0x33ca <fputc+0x3c>
    33be:	e8 85       	ldd	r30, Y+8	; 0x08
    33c0:	f9 85       	ldd	r31, Y+9	; 0x09
    33c2:	80 2f       	mov	r24, r16
    33c4:	09 95       	icall
    33c6:	89 2b       	or	r24, r25
    33c8:	31 f4       	brne	.+12     	; 0x33d6 <fputc+0x48>
    33ca:	8e 81       	ldd	r24, Y+6	; 0x06
    33cc:	9f 81       	ldd	r25, Y+7	; 0x07
    33ce:	01 96       	adiw	r24, 0x01	; 1
    33d0:	9f 83       	std	Y+7, r25	; 0x07
    33d2:	8e 83       	std	Y+6, r24	; 0x06
    33d4:	02 c0       	rjmp	.+4      	; 0x33da <fputc+0x4c>
    33d6:	0f ef       	ldi	r16, 0xFF	; 255
    33d8:	1f ef       	ldi	r17, 0xFF	; 255
    33da:	c8 01       	movw	r24, r16
    33dc:	df 91       	pop	r29
    33de:	cf 91       	pop	r28
    33e0:	1f 91       	pop	r17
    33e2:	0f 91       	pop	r16
    33e4:	08 95       	ret

000033e6 <__ultoa_invert>:
    33e6:	fa 01       	movw	r30, r20
    33e8:	aa 27       	eor	r26, r26
    33ea:	28 30       	cpi	r18, 0x08	; 8
    33ec:	51 f1       	breq	.+84     	; 0x3442 <__ultoa_invert+0x5c>
    33ee:	20 31       	cpi	r18, 0x10	; 16
    33f0:	81 f1       	breq	.+96     	; 0x3452 <__ultoa_invert+0x6c>
    33f2:	e8 94       	clt
    33f4:	6f 93       	push	r22
    33f6:	6e 7f       	andi	r22, 0xFE	; 254
    33f8:	6e 5f       	subi	r22, 0xFE	; 254
    33fa:	7f 4f       	sbci	r23, 0xFF	; 255
    33fc:	8f 4f       	sbci	r24, 0xFF	; 255
    33fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3400:	af 4f       	sbci	r26, 0xFF	; 255
    3402:	b1 e0       	ldi	r27, 0x01	; 1
    3404:	3e d0       	rcall	.+124    	; 0x3482 <__ultoa_invert+0x9c>
    3406:	b4 e0       	ldi	r27, 0x04	; 4
    3408:	3c d0       	rcall	.+120    	; 0x3482 <__ultoa_invert+0x9c>
    340a:	67 0f       	add	r22, r23
    340c:	78 1f       	adc	r23, r24
    340e:	89 1f       	adc	r24, r25
    3410:	9a 1f       	adc	r25, r26
    3412:	a1 1d       	adc	r26, r1
    3414:	68 0f       	add	r22, r24
    3416:	79 1f       	adc	r23, r25
    3418:	8a 1f       	adc	r24, r26
    341a:	91 1d       	adc	r25, r1
    341c:	a1 1d       	adc	r26, r1
    341e:	6a 0f       	add	r22, r26
    3420:	71 1d       	adc	r23, r1
    3422:	81 1d       	adc	r24, r1
    3424:	91 1d       	adc	r25, r1
    3426:	a1 1d       	adc	r26, r1
    3428:	20 d0       	rcall	.+64     	; 0x346a <__ultoa_invert+0x84>
    342a:	09 f4       	brne	.+2      	; 0x342e <__ultoa_invert+0x48>
    342c:	68 94       	set
    342e:	3f 91       	pop	r19
    3430:	2a e0       	ldi	r18, 0x0A	; 10
    3432:	26 9f       	mul	r18, r22
    3434:	11 24       	eor	r1, r1
    3436:	30 19       	sub	r19, r0
    3438:	30 5d       	subi	r19, 0xD0	; 208
    343a:	31 93       	st	Z+, r19
    343c:	de f6       	brtc	.-74     	; 0x33f4 <__ultoa_invert+0xe>
    343e:	cf 01       	movw	r24, r30
    3440:	08 95       	ret
    3442:	46 2f       	mov	r20, r22
    3444:	47 70       	andi	r20, 0x07	; 7
    3446:	40 5d       	subi	r20, 0xD0	; 208
    3448:	41 93       	st	Z+, r20
    344a:	b3 e0       	ldi	r27, 0x03	; 3
    344c:	0f d0       	rcall	.+30     	; 0x346c <__ultoa_invert+0x86>
    344e:	c9 f7       	brne	.-14     	; 0x3442 <__ultoa_invert+0x5c>
    3450:	f6 cf       	rjmp	.-20     	; 0x343e <__ultoa_invert+0x58>
    3452:	46 2f       	mov	r20, r22
    3454:	4f 70       	andi	r20, 0x0F	; 15
    3456:	40 5d       	subi	r20, 0xD0	; 208
    3458:	4a 33       	cpi	r20, 0x3A	; 58
    345a:	18 f0       	brcs	.+6      	; 0x3462 <__ultoa_invert+0x7c>
    345c:	49 5d       	subi	r20, 0xD9	; 217
    345e:	31 fd       	sbrc	r19, 1
    3460:	40 52       	subi	r20, 0x20	; 32
    3462:	41 93       	st	Z+, r20
    3464:	02 d0       	rcall	.+4      	; 0x346a <__ultoa_invert+0x84>
    3466:	a9 f7       	brne	.-22     	; 0x3452 <__ultoa_invert+0x6c>
    3468:	ea cf       	rjmp	.-44     	; 0x343e <__ultoa_invert+0x58>
    346a:	b4 e0       	ldi	r27, 0x04	; 4
    346c:	a6 95       	lsr	r26
    346e:	97 95       	ror	r25
    3470:	87 95       	ror	r24
    3472:	77 95       	ror	r23
    3474:	67 95       	ror	r22
    3476:	ba 95       	dec	r27
    3478:	c9 f7       	brne	.-14     	; 0x346c <__ultoa_invert+0x86>
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	61 05       	cpc	r22, r1
    347e:	71 05       	cpc	r23, r1
    3480:	08 95       	ret
    3482:	9b 01       	movw	r18, r22
    3484:	ac 01       	movw	r20, r24
    3486:	0a 2e       	mov	r0, r26
    3488:	06 94       	lsr	r0
    348a:	57 95       	ror	r21
    348c:	47 95       	ror	r20
    348e:	37 95       	ror	r19
    3490:	27 95       	ror	r18
    3492:	ba 95       	dec	r27
    3494:	c9 f7       	brne	.-14     	; 0x3488 <__ultoa_invert+0xa2>
    3496:	62 0f       	add	r22, r18
    3498:	73 1f       	adc	r23, r19
    349a:	84 1f       	adc	r24, r20
    349c:	95 1f       	adc	r25, r21
    349e:	a0 1d       	adc	r26, r0
    34a0:	08 95       	ret

000034a2 <strrev>:
    34a2:	dc 01       	movw	r26, r24
    34a4:	fc 01       	movw	r30, r24
    34a6:	67 2f       	mov	r22, r23
    34a8:	71 91       	ld	r23, Z+
    34aa:	77 23       	and	r23, r23
    34ac:	e1 f7       	brne	.-8      	; 0x34a6 <strrev+0x4>
    34ae:	32 97       	sbiw	r30, 0x02	; 2
    34b0:	04 c0       	rjmp	.+8      	; 0x34ba <strrev+0x18>
    34b2:	7c 91       	ld	r23, X
    34b4:	6d 93       	st	X+, r22
    34b6:	70 83       	st	Z, r23
    34b8:	62 91       	ld	r22, -Z
    34ba:	ae 17       	cp	r26, r30
    34bc:	bf 07       	cpc	r27, r31
    34be:	c8 f3       	brcs	.-14     	; 0x34b2 <strrev+0x10>
    34c0:	08 95       	ret

000034c2 <__mulsi3>:
    34c2:	62 9f       	mul	r22, r18
    34c4:	d0 01       	movw	r26, r0
    34c6:	73 9f       	mul	r23, r19
    34c8:	f0 01       	movw	r30, r0
    34ca:	82 9f       	mul	r24, r18
    34cc:	e0 0d       	add	r30, r0
    34ce:	f1 1d       	adc	r31, r1
    34d0:	64 9f       	mul	r22, r20
    34d2:	e0 0d       	add	r30, r0
    34d4:	f1 1d       	adc	r31, r1
    34d6:	92 9f       	mul	r25, r18
    34d8:	f0 0d       	add	r31, r0
    34da:	83 9f       	mul	r24, r19
    34dc:	f0 0d       	add	r31, r0
    34de:	74 9f       	mul	r23, r20
    34e0:	f0 0d       	add	r31, r0
    34e2:	65 9f       	mul	r22, r21
    34e4:	f0 0d       	add	r31, r0
    34e6:	99 27       	eor	r25, r25
    34e8:	72 9f       	mul	r23, r18
    34ea:	b0 0d       	add	r27, r0
    34ec:	e1 1d       	adc	r30, r1
    34ee:	f9 1f       	adc	r31, r25
    34f0:	63 9f       	mul	r22, r19
    34f2:	b0 0d       	add	r27, r0
    34f4:	e1 1d       	adc	r30, r1
    34f6:	f9 1f       	adc	r31, r25
    34f8:	bd 01       	movw	r22, r26
    34fa:	cf 01       	movw	r24, r30
    34fc:	11 24       	eor	r1, r1
    34fe:	08 95       	ret

00003500 <__udivmodhi4>:
    3500:	aa 1b       	sub	r26, r26
    3502:	bb 1b       	sub	r27, r27
    3504:	51 e1       	ldi	r21, 0x11	; 17
    3506:	07 c0       	rjmp	.+14     	; 0x3516 <__udivmodhi4_ep>

00003508 <__udivmodhi4_loop>:
    3508:	aa 1f       	adc	r26, r26
    350a:	bb 1f       	adc	r27, r27
    350c:	a6 17       	cp	r26, r22
    350e:	b7 07       	cpc	r27, r23
    3510:	10 f0       	brcs	.+4      	; 0x3516 <__udivmodhi4_ep>
    3512:	a6 1b       	sub	r26, r22
    3514:	b7 0b       	sbc	r27, r23

00003516 <__udivmodhi4_ep>:
    3516:	88 1f       	adc	r24, r24
    3518:	99 1f       	adc	r25, r25
    351a:	5a 95       	dec	r21
    351c:	a9 f7       	brne	.-22     	; 0x3508 <__udivmodhi4_loop>
    351e:	80 95       	com	r24
    3520:	90 95       	com	r25
    3522:	bc 01       	movw	r22, r24
    3524:	cd 01       	movw	r24, r26
    3526:	08 95       	ret

00003528 <__divmodhi4>:
    3528:	97 fb       	bst	r25, 7
    352a:	09 2e       	mov	r0, r25
    352c:	07 26       	eor	r0, r23
    352e:	0a d0       	rcall	.+20     	; 0x3544 <__divmodhi4_neg1>
    3530:	77 fd       	sbrc	r23, 7
    3532:	04 d0       	rcall	.+8      	; 0x353c <__divmodhi4_neg2>
    3534:	e5 df       	rcall	.-54     	; 0x3500 <__udivmodhi4>
    3536:	06 d0       	rcall	.+12     	; 0x3544 <__divmodhi4_neg1>
    3538:	00 20       	and	r0, r0
    353a:	1a f4       	brpl	.+6      	; 0x3542 <__divmodhi4_exit>

0000353c <__divmodhi4_neg2>:
    353c:	70 95       	com	r23
    353e:	61 95       	neg	r22
    3540:	7f 4f       	sbci	r23, 0xFF	; 255

00003542 <__divmodhi4_exit>:
    3542:	08 95       	ret

00003544 <__divmodhi4_neg1>:
    3544:	f6 f7       	brtc	.-4      	; 0x3542 <__divmodhi4_exit>
    3546:	90 95       	com	r25
    3548:	81 95       	neg	r24
    354a:	9f 4f       	sbci	r25, 0xFF	; 255
    354c:	08 95       	ret

0000354e <__udivmodsi4>:
    354e:	a1 e2       	ldi	r26, 0x21	; 33
    3550:	1a 2e       	mov	r1, r26
    3552:	aa 1b       	sub	r26, r26
    3554:	bb 1b       	sub	r27, r27
    3556:	fd 01       	movw	r30, r26
    3558:	0d c0       	rjmp	.+26     	; 0x3574 <__udivmodsi4_ep>

0000355a <__udivmodsi4_loop>:
    355a:	aa 1f       	adc	r26, r26
    355c:	bb 1f       	adc	r27, r27
    355e:	ee 1f       	adc	r30, r30
    3560:	ff 1f       	adc	r31, r31
    3562:	a2 17       	cp	r26, r18
    3564:	b3 07       	cpc	r27, r19
    3566:	e4 07       	cpc	r30, r20
    3568:	f5 07       	cpc	r31, r21
    356a:	20 f0       	brcs	.+8      	; 0x3574 <__udivmodsi4_ep>
    356c:	a2 1b       	sub	r26, r18
    356e:	b3 0b       	sbc	r27, r19
    3570:	e4 0b       	sbc	r30, r20
    3572:	f5 0b       	sbc	r31, r21

00003574 <__udivmodsi4_ep>:
    3574:	66 1f       	adc	r22, r22
    3576:	77 1f       	adc	r23, r23
    3578:	88 1f       	adc	r24, r24
    357a:	99 1f       	adc	r25, r25
    357c:	1a 94       	dec	r1
    357e:	69 f7       	brne	.-38     	; 0x355a <__udivmodsi4_loop>
    3580:	60 95       	com	r22
    3582:	70 95       	com	r23
    3584:	80 95       	com	r24
    3586:	90 95       	com	r25
    3588:	9b 01       	movw	r18, r22
    358a:	ac 01       	movw	r20, r24
    358c:	bd 01       	movw	r22, r26
    358e:	cf 01       	movw	r24, r30
    3590:	08 95       	ret

00003592 <__divmodsi4>:
    3592:	97 fb       	bst	r25, 7
    3594:	09 2e       	mov	r0, r25
    3596:	05 26       	eor	r0, r21
    3598:	0e d0       	rcall	.+28     	; 0x35b6 <__divmodsi4_neg1>
    359a:	57 fd       	sbrc	r21, 7
    359c:	04 d0       	rcall	.+8      	; 0x35a6 <__divmodsi4_neg2>
    359e:	d7 df       	rcall	.-82     	; 0x354e <__udivmodsi4>
    35a0:	0a d0       	rcall	.+20     	; 0x35b6 <__divmodsi4_neg1>
    35a2:	00 1c       	adc	r0, r0
    35a4:	38 f4       	brcc	.+14     	; 0x35b4 <__divmodsi4_exit>

000035a6 <__divmodsi4_neg2>:
    35a6:	50 95       	com	r21
    35a8:	40 95       	com	r20
    35aa:	30 95       	com	r19
    35ac:	21 95       	neg	r18
    35ae:	3f 4f       	sbci	r19, 0xFF	; 255
    35b0:	4f 4f       	sbci	r20, 0xFF	; 255
    35b2:	5f 4f       	sbci	r21, 0xFF	; 255

000035b4 <__divmodsi4_exit>:
    35b4:	08 95       	ret

000035b6 <__divmodsi4_neg1>:
    35b6:	f6 f7       	brtc	.-4      	; 0x35b4 <__divmodsi4_exit>
    35b8:	90 95       	com	r25
    35ba:	80 95       	com	r24
    35bc:	70 95       	com	r23
    35be:	61 95       	neg	r22
    35c0:	7f 4f       	sbci	r23, 0xFF	; 255
    35c2:	8f 4f       	sbci	r24, 0xFF	; 255
    35c4:	9f 4f       	sbci	r25, 0xFF	; 255
    35c6:	08 95       	ret

000035c8 <__prologue_saves__>:
    35c8:	2f 92       	push	r2
    35ca:	3f 92       	push	r3
    35cc:	4f 92       	push	r4
    35ce:	5f 92       	push	r5
    35d0:	6f 92       	push	r6
    35d2:	7f 92       	push	r7
    35d4:	8f 92       	push	r8
    35d6:	9f 92       	push	r9
    35d8:	af 92       	push	r10
    35da:	bf 92       	push	r11
    35dc:	cf 92       	push	r12
    35de:	df 92       	push	r13
    35e0:	ef 92       	push	r14
    35e2:	ff 92       	push	r15
    35e4:	0f 93       	push	r16
    35e6:	1f 93       	push	r17
    35e8:	cf 93       	push	r28
    35ea:	df 93       	push	r29
    35ec:	cd b7       	in	r28, 0x3d	; 61
    35ee:	de b7       	in	r29, 0x3e	; 62
    35f0:	ca 1b       	sub	r28, r26
    35f2:	db 0b       	sbc	r29, r27
    35f4:	0f b6       	in	r0, 0x3f	; 63
    35f6:	f8 94       	cli
    35f8:	de bf       	out	0x3e, r29	; 62
    35fa:	0f be       	out	0x3f, r0	; 63
    35fc:	cd bf       	out	0x3d, r28	; 61
    35fe:	09 94       	ijmp

00003600 <__epilogue_restores__>:
    3600:	2a 88       	ldd	r2, Y+18	; 0x12
    3602:	39 88       	ldd	r3, Y+17	; 0x11
    3604:	48 88       	ldd	r4, Y+16	; 0x10
    3606:	5f 84       	ldd	r5, Y+15	; 0x0f
    3608:	6e 84       	ldd	r6, Y+14	; 0x0e
    360a:	7d 84       	ldd	r7, Y+13	; 0x0d
    360c:	8c 84       	ldd	r8, Y+12	; 0x0c
    360e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3610:	aa 84       	ldd	r10, Y+10	; 0x0a
    3612:	b9 84       	ldd	r11, Y+9	; 0x09
    3614:	c8 84       	ldd	r12, Y+8	; 0x08
    3616:	df 80       	ldd	r13, Y+7	; 0x07
    3618:	ee 80       	ldd	r14, Y+6	; 0x06
    361a:	fd 80       	ldd	r15, Y+5	; 0x05
    361c:	0c 81       	ldd	r16, Y+4	; 0x04
    361e:	1b 81       	ldd	r17, Y+3	; 0x03
    3620:	aa 81       	ldd	r26, Y+2	; 0x02
    3622:	b9 81       	ldd	r27, Y+1	; 0x01
    3624:	ce 0f       	add	r28, r30
    3626:	d1 1d       	adc	r29, r1
    3628:	0f b6       	in	r0, 0x3f	; 63
    362a:	f8 94       	cli
    362c:	de bf       	out	0x3e, r29	; 62
    362e:	0f be       	out	0x3f, r0	; 63
    3630:	cd bf       	out	0x3d, r28	; 61
    3632:	ed 01       	movw	r28, r26
    3634:	08 95       	ret

00003636 <__tablejump2__>:
    3636:	ee 0f       	add	r30, r30
    3638:	ff 1f       	adc	r31, r31

0000363a <__tablejump__>:
    363a:	05 90       	lpm	r0, Z+
    363c:	f4 91       	lpm	r31, Z+
    363e:	e0 2d       	mov	r30, r0
    3640:	09 94       	ijmp

00003642 <_exit>:
    3642:	f8 94       	cli

00003644 <__stop_program>:
    3644:	ff cf       	rjmp	.-2      	; 0x3644 <__stop_program>
