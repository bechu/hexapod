
beta.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800200  00003758  000037ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003758  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000143  008002fa  008002fa  000038e6  2**0
                  ALLOC
  3 .debug_aranges 000004e0  00000000  00000000  000038e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000df9  00000000  00000000  00003dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001290e  00000000  00000000  00004bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000047fd  00000000  00000000  000174cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000043cc  00000000  00000000  0001bcca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009c0  00000000  00000000  00020098  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000239b  00000000  00000000  00020a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000021b5  00000000  00000000  00022df3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00024fa8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__ctors_end>
       4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
       8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
       c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      10:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      14:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      18:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      1c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      20:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      24:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      28:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      2c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      30:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      34:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      38:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      3c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      40:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      44:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      48:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      4c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      50:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      54:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      58:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      5c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      60:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      64:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      68:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      6c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      70:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      74:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      78:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      7c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      80:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      84:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      88:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      8c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      90:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__vector_36>
      94:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      98:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__vector_38>
      9c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      a0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      a4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      a8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      ac:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      b0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      b4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      b8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      bc:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__vector_47>
      c0:	0c 94 15 14 	jmp	0x282a	; 0x282a <__vector_48>
      c4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      c8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      cc:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      d0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      d4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      d8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      dc:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      e0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>

000000e4 <__c.1790>:
      e4:	6e 61 6e 00                                         nan.

000000e8 <__c.1788>:
      e8:	69 6e 66 00                                         inf.

000000ec <marquee_list>:
      ec:	48 02                                               H.

000000ee <bank1_list>:
      ee:	70 02 86 02 9c 02                                   p.....

000000f4 <__timer0Compare>:
      f4:	38 03 00 6e 00 02 47 00 35 00 02 44 00 06 05 03     8..n..G.5..D....
     104:	3c 03 00 6e 00 04 48 00 35 00 04 44 00 04 35 03     <..n..H.5..D..5.

00000114 <__timer1Compare>:
     114:	40 03 01 6f 00 02 88 00 36 00 02 80 00 06 ff 02     @..o....6.......
     124:	44 03 01 6f 00 04 8a 00 36 00 04 80 00 04 02 03     D..o....6.......
     134:	48 03 01 6f 00 08 8c 00 36 00 08 80 00 02 05 03     H..o....6.......

00000144 <__timer2Compare>:
     144:	4c 03 02 70 00 02 b3 00 37 00 02 b0 00 06 fc 02     L..p....7.......
     154:	50 03 02 70 00 04 b4 00 37 00 04 b0 00 04 41 03     P..p....7.....A.

00000164 <__timer3Compare>:
     164:	54 03 03 71 00 02 98 00 38 00 02 90 00 06 29 03     T..q....8.....).
     174:	58 03 03 71 00 04 9a 00 38 00 04 90 00 04 2c 03     X..q....8.....,.
     184:	5c 03 03 71 00 08 9c 00 38 00 08 90 00 02 2f 03     \..q....8...../.

00000194 <__timer4Compare>:
     194:	60 03 04 72 00 02 a8 00 39 00 02 a0 00 06 38 03     `..r....9.....8.
     1a4:	64 03 04 72 00 04 aa 00 39 00 04 a0 00 04 3b 03     d..r....9.....;.
     1b4:	68 03 04 72 00 08 ac 00 39 00 08 a0 00 02 3e 03     h..r....9.....>.

000001c4 <__timer5Compare>:
     1c4:	6c 03 05 73 00 02 28 01 3a 00 02 20 01 06 4a 03     l..s..(.:.. ..J.
     1d4:	70 03 05 73 00 04 2a 01 3a 00 04 20 01 04 4d 03     p..s..*.:.. ..M.
     1e4:	74 03 05 73 00 08 2c 01 3a 00 08 20 01 02 50 03     t..s..,.:.. ..P.

000001f4 <pgm_Timers>:
     1f4:	78 03 46 00 45 00 00 00 02 33 88 44 00 01 44 00     x.F.E....3.D..D.
     204:	02 45 00 08 00 00 01 f4 00 6e 00 01 35 00 01 00     .E.......n..5...
     214:	00 00 00 01 00 00 01 00 00 01 00 00 83 03 84 00     ................
     224:	81 00 ff 00 03 ff df 80 00 01 80 00 02 81 00 08     ................
     234:	81 00 10 14 01 6f 00 01 36 00 01 86 00 6f 00 20     .....o..6....o. 
     244:	36 00 20 81 00 40 00 00 8e 03 b2 00 b1 00 00 ff     6. ..@..........
     254:	02 33 88 b0 00 01 b0 00 02 b1 00 08 00 00 01 44     .3.............D
     264:	01 70 00 01 37 00 01 00 00 00 00 01 00 00 01 00     .p..7...........
     274:	00 01 00 00 99 03 94 00 91 00 ff 00 03 ff df 90     ................
     284:	00 01 90 00 02 91 00 08 91 00 10 64 01 71 00 01     ...........d.q..
     294:	38 00 01 96 00 71 00 20 38 00 20 91 00 40 32 03     8....q. 8. ..@2.
     2a4:	a4 03 a4 00 a1 00 ff 00 03 ff df a0 00 01 a0 00     ................
     2b4:	02 a1 00 08 a1 00 10 94 01 72 00 01 39 00 01 a6     .........r..9...
     2c4:	00 72 00 20 39 00 20 a1 00 40 44 03 af 03 24 01     .r. 9. ..@D...$.
     2d4:	21 01 ff 00 03 ff df 20 01 01 20 01 02 21 01 08     !...... .. ..!..
     2e4:	21 01 10 c4 01 73 00 01 3a 00 01 26 01 73 00 20     !....s..:..&.s. 
     2f4:	3a 00 20 21 01 40 47 03                             :. !.@G.

000002fc <_B4>:
     2fc:	55 03 10                                            U..

000002ff <_B5>:
     2ff:	55 03 20                                            U. 

00000302 <_B6>:
     302:	55 03 40                                            U.@

00000305 <_B7>:
     305:	55 03 80                                            U..

00000308 <_C0>:
     308:	5b 03 01                                            [..

0000030b <_C1>:
     30b:	5b 03 02                                            [..

0000030e <_C2>:
     30e:	5b 03 04                                            [..

00000311 <_C3>:
     311:	5b 03 08                                            [..

00000314 <_C4>:
     314:	5b 03 10                                            [..

00000317 <_C5>:
     317:	5b 03 20                                            [. 

0000031a <_D2>:
     31a:	61 03 04                                            a..

0000031d <_D3>:
     31d:	61 03 08                                            a..

00000320 <_D5>:
     320:	61 03 20                                            a. 

00000323 <_D6>:
     323:	61 03 40                                            a.@

00000326 <_D7>:
     326:	61 03 80                                            a..

00000329 <_E3>:
     329:	67 03 08                                            g..

0000032c <_E4>:
     32c:	67 03 10                                            g..

0000032f <_E5>:
     32f:	67 03 20                                            g. 

00000332 <_E7>:
     332:	67 03 80                                            g..

00000335 <_G5>:
     335:	6d 03 20                                            m. 

00000338 <_H3>:
     338:	73 03 08                                            s..

0000033b <_H4>:
     33b:	73 03 10                                            s..

0000033e <_H5>:
     33e:	73 03 20                                            s. 

00000341 <_H6>:
     341:	73 03 40                                            s.@

00000344 <_L0>:
     344:	79 03 01                                            y..

00000347 <_L1>:
     347:	79 03 02                                            y..

0000034a <_L3>:
     34a:	79 03 08                                            y..

0000034d <_L4>:
     34d:	79 03 10                                            y..

00000350 <_L5>:
     350:	79 03 20                                            y. 

00000353 <AVcc_MV>:
     353:	88 13                                               ..

00000355 <_PORTB>:
     355:	25 00 24 00 23 00                                   %.$.#.

0000035b <_PORTC>:
     35b:	28 00 27 00 26 00                                   (.'.&.

00000361 <_PORTD>:
     361:	2b 00 2a 00 29 00                                   +.*.).

00000367 <_PORTE>:
     367:	2e 00 2d 00 2c 00                                   ..-.,.

0000036d <_PORTG>:
     36d:	34 00 33 00 32 00                                   4.3.2.

00000373 <_PORTH>:
     373:	02 01 01 01 00 01                                   ......

00000379 <_PORTL>:
     379:	0b 01 0a 01 09 01                                   ......

0000037f <c_servoPWM>:
     37f:	b1 0a a9 0a                                         ....

00000383 <__c.1911>:
     383:	20 45 72 72 6f 72 3a 25 64 0d 0a 00                  Error:%d...

0000038f <__c.1909>:
     38f:	55 73 65 72 00                                      User.

00000394 <__c.1907>:
     394:	57 65 62 62 6f 74 4c 69 62 00                       WebbotLib.

0000039e <atoz>:
     39e:	ee 3e 9c 7a 9e 8e f6 2e 0c 78 ae 1c aa 2a 3a ce     .>.z.....x...*:.
     3ae:	e6 0a b6 1e 38 7c b8 6e 76 da                       ....8|.nv.

000003b8 <digits>:
     3b8:	fc 60 da f2 66 b6 3e e0 fe e6                       .`..f.>...

000003c2 <c_hw_uart>:
     3c2:	99 10 4f 11 6b 11 24 11 56 11 3a 11 00 40 7a 10     ..O.k.$.V.:..@z.
     3d2:	f3 5a 00 a0 72 4e 18 09 00 10 a5 d4 e8 00 00 e8     .Z..rN..........
     3e2:	76 48 17 00 00 e4 0b 54 02 00 00 ca 9a 3b 00 00     vH.....T.....;..
     3f2:	00 e1 f5 05 00 00 80 96 98 00 00 00 40 42 0f 00     ............@B..
     402:	00 00 a0 86 01 00 00 00 10 27 00 00 00 00 e8 03     .........'......
     412:	00 00 00 00 64 00 00 00 00 00 0a 00 00 00 00 00     ....d...........
     422:	01 00 00 00 00 00 2c 76 d8 88 dc 67 4f 08 23 df     ......,v...gO.#.
     432:	c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51     ...Y.......S.:.Q
     442:	99 76 96 e8 e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c     .v.....&....b.@|
     452:	6f fc ef bc 9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a     o.....@...o....Z
     462:	2a f7 5c 93 6b 6c f9 67 6d c1 1b fc e0 e4 0d 47     *.\.kl.gm......G
     472:	fe f5 20 e6 b5 00 d0 ed 90 2e 03 00 94 35 77 05     .. ..........5w.
     482:	00 80 84 1e 08 00 00 20 4e 0a 00 00 00 c8 0c 33     ....... N......3
     492:	33 33 33 0f 98 6e 12 83 11 41 ef 8d 21 14 89 3b     333..n...A..!..;
     4a2:	e6 55 16 cf fe e6 db 18 d1 84 4b 38 1b f7 7c 1d     .U........K8..|.
     4b2:	90 1d a4 bb e4 24 20 32 84 72 5e 22 81 00 c9 f1     .....$ 2.r^"....
     4c2:	24 ec a1 e5 3d 27                                   $...='

000004c8 <__ctors_start>:
     4c8:	b5 02       	muls	r27, r21
     4ca:	1f 09       	sbc	r17, r15
     4cc:	2f 09       	sbc	r18, r15

000004ce <__ctors_end>:
     4ce:	11 24       	eor	r1, r1
     4d0:	1f be       	out	0x3f, r1	; 63
     4d2:	cf ef       	ldi	r28, 0xFF	; 255
     4d4:	d1 e2       	ldi	r29, 0x21	; 33
     4d6:	de bf       	out	0x3e, r29	; 62
     4d8:	cd bf       	out	0x3d, r28	; 61

000004da <__do_copy_data>:
     4da:	12 e0       	ldi	r17, 0x02	; 2
     4dc:	a0 e0       	ldi	r26, 0x00	; 0
     4de:	b2 e0       	ldi	r27, 0x02	; 2
     4e0:	e8 e5       	ldi	r30, 0x58	; 88
     4e2:	f7 e3       	ldi	r31, 0x37	; 55
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <.do_copy_data_start>

000004e6 <.do_copy_data_loop>:
     4e6:	05 90       	lpm	r0, Z+
     4e8:	0d 92       	st	X+, r0

000004ea <.do_copy_data_start>:
     4ea:	aa 3f       	cpi	r26, 0xFA	; 250
     4ec:	b1 07       	cpc	r27, r17
     4ee:	d9 f7       	brne	.-10     	; 0x4e6 <.do_copy_data_loop>

000004f0 <__do_clear_bss>:
     4f0:	14 e0       	ldi	r17, 0x04	; 4
     4f2:	aa ef       	ldi	r26, 0xFA	; 250
     4f4:	b2 e0       	ldi	r27, 0x02	; 2
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <.do_clear_bss_start>

000004f8 <.do_clear_bss_loop>:
     4f8:	1d 92       	st	X+, r1

000004fa <.do_clear_bss_start>:
     4fa:	ad 33       	cpi	r26, 0x3D	; 61
     4fc:	b1 07       	cpc	r27, r17
     4fe:	e1 f7       	brne	.-8      	; 0x4f8 <.do_clear_bss_loop>

00000500 <__do_global_ctors>:
     500:	14 e0       	ldi	r17, 0x04	; 4
     502:	ce ec       	ldi	r28, 0xCE	; 206
     504:	d4 e0       	ldi	r29, 0x04	; 4
     506:	04 c0       	rjmp	.+8      	; 0x510 <.do_global_ctors_start>

00000508 <.do_global_ctors_loop>:
     508:	22 97       	sbiw	r28, 0x02	; 2
     50a:	fe 01       	movw	r30, r28
     50c:	0e 94 a6 1b 	call	0x374c	; 0x374c <__tablejump__>

00000510 <.do_global_ctors_start>:
     510:	c8 3c       	cpi	r28, 0xC8	; 200
     512:	d1 07       	cpc	r29, r17
     514:	c9 f7       	brne	.-14     	; 0x508 <.do_global_ctors_loop>
     516:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <main>
     51a:	0c 94 5e 19 	jmp	0x32bc	; 0x32bc <exit>

0000051e <__bad_interrupt>:
     51e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000522 <_Z41__static_initialization_and_destruction_0ii>:
	servo2.setSpeed(speed);
	servo3.setSpeed(speed);
	// -------- End   Actuators -------

	return HEXAPOD_LOOP_DURATION;
}
     522:	df 93       	push	r29
     524:	cf 93       	push	r28
     526:	00 d0       	rcall	.+0      	; 0x528 <_Z41__static_initialization_and_destruction_0ii+0x6>
     528:	00 d0       	rcall	.+0      	; 0x52a <_Z41__static_initialization_and_destruction_0ii+0x8>
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	9a 83       	std	Y+2, r25	; 0x02
     530:	89 83       	std	Y+1, r24	; 0x01
     532:	7c 83       	std	Y+4, r23	; 0x04
     534:	6b 83       	std	Y+3, r22	; 0x03
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	9a 81       	ldd	r25, Y+2	; 0x02
     53a:	81 30       	cpi	r24, 0x01	; 1
     53c:	91 05       	cpc	r25, r1
     53e:	71 f4       	brne	.+28     	; 0x55c <_Z41__static_initialization_and_destruction_0ii+0x3a>
     540:	8b 81       	ldd	r24, Y+3	; 0x03
     542:	9c 81       	ldd	r25, Y+4	; 0x04
     544:	2f ef       	ldi	r18, 0xFF	; 255
     546:	8f 3f       	cpi	r24, 0xFF	; 255
     548:	92 07       	cpc	r25, r18
     54a:	41 f4       	brne	.+16     	; 0x55c <_Z41__static_initialization_and_destruction_0ii+0x3a>
#include "hardware.h"
#include "protocol.h"
#include "services.h"

Protocol test;
     54c:	8a ef       	ldi	r24, 0xFA	; 250
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	0e 94 25 06 	call	0xc4a	; 0xc4a <_ZN8ProtocolC1Ev>
PingService ping;
     554:	83 e3       	ldi	r24, 0x33	; 51
     556:	93 e0       	ldi	r25, 0x03	; 3
     558:	0e 94 0a 07 	call	0xe14	; 0xe14 <_ZN11PingServiceC1Ev>
	servo2.setSpeed(speed);
	servo3.setSpeed(speed);
	// -------- End   Actuators -------

	return HEXAPOD_LOOP_DURATION;
}
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	cf 91       	pop	r28
     566:	df 91       	pop	r29
     568:	08 95       	ret

0000056a <_GLOBAL__I_test>:
     56a:	df 93       	push	r29
     56c:	cf 93       	push	r28
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	6f ef       	ldi	r22, 0xFF	; 255
     578:	7f ef       	ldi	r23, 0xFF	; 255
     57a:	0e 94 91 02 	call	0x522	; 0x522 <_Z41__static_initialization_and_destruction_0ii>
     57e:	cf 91       	pop	r28
     580:	df 91       	pop	r29
     582:	08 95       	ret

00000584 <_ZN8Actuator8setSpeedEa>:
class Actuator{
public:
	Actuator(__ACTUATOR* cstr){
		m_cstr = cstr;
	}
	void setSpeed(DRIVE_SPEED speed){
     584:	df 93       	push	r29
     586:	cf 93       	push	r28
     588:	00 d0       	rcall	.+0      	; 0x58a <_ZN8Actuator8setSpeedEa+0x6>
     58a:	0f 92       	push	r0
     58c:	cd b7       	in	r28, 0x3d	; 61
     58e:	de b7       	in	r29, 0x3e	; 62
     590:	9a 83       	std	Y+2, r25	; 0x02
     592:	89 83       	std	Y+1, r24	; 0x01
     594:	6b 83       	std	Y+3, r22	; 0x03
		__act_setSpeed(m_cstr,speed);
     596:	e9 81       	ldd	r30, Y+1	; 0x01
     598:	fa 81       	ldd	r31, Y+2	; 0x02
     59a:	80 81       	ld	r24, Z
     59c:	91 81       	ldd	r25, Z+1	; 0x01
     59e:	6b 81       	ldd	r22, Y+3	; 0x03
     5a0:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__act_setSpeed>
	}
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	cf 91       	pop	r28
     5ac:	df 91       	pop	r29
     5ae:	08 95       	ret

000005b0 <appControl>:
	return 0;
}


// This is the main loop
TICK_COUNT appControl(LOOP_COUNT loopCount, TICK_COUNT loopStart) {
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	df 93       	push	r29
     5b6:	cf 93       	push	r28
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	2f 97       	sbiw	r28, 0x0f	; 15
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	68 87       	std	Y+8, r22	; 0x08
     5ca:	79 87       	std	Y+9, r23	; 0x09
     5cc:	8a 87       	std	Y+10, r24	; 0x0a
     5ce:	9b 87       	std	Y+11, r25	; 0x0b
     5d0:	2c 87       	std	Y+12, r18	; 0x0c
     5d2:	3d 87       	std	Y+13, r19	; 0x0d
     5d4:	4e 87       	std	Y+14, r20	; 0x0e
     5d6:	5f 87       	std	Y+15, r21	; 0x0f
	*/
	// -------- Start Actuators -------
	// This example will move the motors back and forth using the loopStart time:
	

	TICK_COUNT ms = loopStart / 1000;		// Get current time in ms
     5d8:	8c 85       	ldd	r24, Y+12	; 0x0c
     5da:	9d 85       	ldd	r25, Y+13	; 0x0d
     5dc:	ae 85       	ldd	r26, Y+14	; 0x0e
     5de:	bf 85       	ldd	r27, Y+15	; 0x0f
     5e0:	28 ee       	ldi	r18, 0xE8	; 232
     5e2:	33 e0       	ldi	r19, 0x03	; 3
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	bc 01       	movw	r22, r24
     5ea:	cd 01       	movw	r24, r26
     5ec:	0e 94 30 1b 	call	0x3660	; 0x3660 <__udivmodsi4>
     5f0:	da 01       	movw	r26, r20
     5f2:	c9 01       	movw	r24, r18
     5f4:	8c 83       	std	Y+4, r24	; 0x04
     5f6:	9d 83       	std	Y+5, r25	; 0x05
     5f8:	ae 83       	std	Y+6, r26	; 0x06
     5fa:	bf 83       	std	Y+7, r27	; 0x07
	int16_t now = ms % (TICK_COUNT)5000; 	// 10 sec for a full swing
     5fc:	8c 81       	ldd	r24, Y+4	; 0x04
     5fe:	9d 81       	ldd	r25, Y+5	; 0x05
     600:	ae 81       	ldd	r26, Y+6	; 0x06
     602:	bf 81       	ldd	r27, Y+7	; 0x07
     604:	28 e8       	ldi	r18, 0x88	; 136
     606:	33 e1       	ldi	r19, 0x13	; 19
     608:	40 e0       	ldi	r20, 0x00	; 0
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	bc 01       	movw	r22, r24
     60e:	cd 01       	movw	r24, r26
     610:	0e 94 30 1b 	call	0x3660	; 0x3660 <__udivmodsi4>
     614:	dc 01       	movw	r26, r24
     616:	cb 01       	movw	r24, r22
     618:	9b 83       	std	Y+3, r25	; 0x03
     61a:	8a 83       	std	Y+2, r24	; 0x02
	if(now >= (int16_t)2500){				// Goes from 0ms...5000ms
     61c:	8a 81       	ldd	r24, Y+2	; 0x02
     61e:	9b 81       	ldd	r25, Y+3	; 0x03
     620:	29 e0       	ldi	r18, 0x09	; 9
     622:	84 3c       	cpi	r24, 0xC4	; 196
     624:	92 07       	cpc	r25, r18
     626:	44 f0       	brlt	.+16     	; 0x638 <appControl+0x88>
		now = (int16_t)5000 - now;			// then 5000ms...0ms
     628:	88 e8       	ldi	r24, 0x88	; 136
     62a:	93 e1       	ldi	r25, 0x13	; 19
     62c:	2a 81       	ldd	r18, Y+2	; 0x02
     62e:	3b 81       	ldd	r19, Y+3	; 0x03
     630:	82 1b       	sub	r24, r18
     632:	93 0b       	sbc	r25, r19
     634:	9b 83       	std	Y+3, r25	; 0x03
     636:	8a 83       	std	Y+2, r24	; 0x02
	}
	// Map it into DRIVE_SPEED range
	DRIVE_SPEED speed = interpolate(now, 0, 2500, DRIVE_SPEED_MIN, DRIVE_SPEED_MAX);
     638:	8a 81       	ldd	r24, Y+2	; 0x02
     63a:	9b 81       	ldd	r25, Y+3	; 0x03
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	44 ec       	ldi	r20, 0xC4	; 196
     642:	59 e0       	ldi	r21, 0x09	; 9
     644:	21 e8       	ldi	r18, 0x81	; 129
     646:	3f ef       	ldi	r19, 0xFF	; 255
     648:	0f e7       	ldi	r16, 0x7F	; 127
     64a:	10 e0       	ldi	r17, 0x00	; 0
     64c:	0e 94 a6 0b 	call	0x174c	; 0x174c <interpolate>
     650:	89 83       	std	Y+1, r24	; 0x01
	// Set speed for all motors/servos
	servo1.setSpeed(speed);
     652:	87 ed       	ldi	r24, 0xD7	; 215
     654:	93 e0       	ldi	r25, 0x03	; 3
     656:	69 81       	ldd	r22, Y+1	; 0x01
     658:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN8Actuator8setSpeedEa>
	servo2.setSpeed(speed);
     65c:	8b ed       	ldi	r24, 0xDB	; 219
     65e:	93 e0       	ldi	r25, 0x03	; 3
     660:	69 81       	ldd	r22, Y+1	; 0x01
     662:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN8Actuator8setSpeedEa>
	servo3.setSpeed(speed);
     666:	8f ed       	ldi	r24, 0xDF	; 223
     668:	93 e0       	ldi	r25, 0x03	; 3
     66a:	69 81       	ldd	r22, Y+1	; 0x01
     66c:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN8Actuator8setSpeedEa>
	// -------- End   Actuators -------

	return HEXAPOD_LOOP_DURATION;
     670:	80 ea       	ldi	r24, 0xA0	; 160
     672:	96 e8       	ldi	r25, 0x86	; 134
     674:	a1 e0       	ldi	r26, 0x01	; 1
     676:	b0 e0       	ldi	r27, 0x00	; 0
}
     678:	bc 01       	movw	r22, r24
     67a:	cd 01       	movw	r24, r26
     67c:	2f 96       	adiw	r28, 0x0f	; 15
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	de bf       	out	0x3e, r29	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	cd bf       	out	0x3d, r28	; 61
     688:	cf 91       	pop	r28
     68a:	df 91       	pop	r29
     68c:	1f 91       	pop	r17
     68e:	0f 91       	pop	r16
     690:	08 95       	ret

00000692 <_ZN6UartHW14setPollingModeEa>:

		return ch;
	}

	// Put the receiver in polling mode (TRUE) or interrupt mode (FALSE)
	void setPollingMode(boolean polling){
     692:	df 93       	push	r29
     694:	cf 93       	push	r28
     696:	00 d0       	rcall	.+0      	; 0x698 <_ZN6UartHW14setPollingModeEa+0x6>
     698:	0f 92       	push	r0
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	9a 83       	std	Y+2, r25	; 0x02
     6a0:	89 83       	std	Y+1, r24	; 0x01
     6a2:	6b 83       	std	Y+3, r22	; 0x03
		uartReceivePollingMode(m_hw, polling);
     6a4:	e9 81       	ldd	r30, Y+1	; 0x01
     6a6:	fa 81       	ldd	r31, Y+2	; 0x02
     6a8:	86 89       	ldd	r24, Z+22	; 0x16
     6aa:	97 89       	ldd	r25, Z+23	; 0x17
     6ac:	6b 81       	ldd	r22, Y+3	; 0x03
     6ae:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <uartReceivePollingMode>
		m_polling = polling;
     6b2:	e9 81       	ldd	r30, Y+1	; 0x01
     6b4:	fa 81       	ldd	r31, Y+2	; 0x02
     6b6:	8b 81       	ldd	r24, Y+3	; 0x03
     6b8:	80 8f       	std	Z+24, r24	; 0x18
	}
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	cf 91       	pop	r28
     6c2:	df 91       	pop	r29
     6c4:	08 95       	ret

000006c6 <appInitSoftware>:
	initHardware();
}


// Initialise the software
TICK_COUNT appInitSoftware(TICK_COUNT loopStart){
     6c6:	df 93       	push	r29
     6c8:	cf 93       	push	r28
     6ca:	00 d0       	rcall	.+0      	; 0x6cc <appInitSoftware+0x6>
     6cc:	00 d0       	rcall	.+0      	; 0x6ce <appInitSoftware+0x8>
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	69 83       	std	Y+1, r22	; 0x01
     6d4:	7a 83       	std	Y+2, r23	; 0x02
     6d6:	8b 83       	std	Y+3, r24	; 0x03
     6d8:	9c 83       	std	Y+4, r25	; 0x04
	uart1.setPollingMode(false);
     6da:	85 ee       	ldi	r24, 0xE5	; 229
     6dc:	93 e0       	ldi	r25, 0x03	; 3
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	0e 94 49 03 	call	0x692	; 0x692 <_ZN6UartHW14setPollingModeEa>
	//test.init(&uart1);
    //ping.init(&test);
	return 0;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	a0 e0       	ldi	r26, 0x00	; 0
     6ea:	b0 e0       	ldi	r27, 0x00	; 0
}
     6ec:	bc 01       	movw	r22, r24
     6ee:	cd 01       	movw	r24, r26
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	cf 91       	pop	r28
     6fa:	df 91       	pop	r29
     6fc:	08 95       	ret

000006fe <appInitHardware>:

Protocol test;
PingService ping;

// Initialise the hardware
void appInitHardware(void) {
     6fe:	df 93       	push	r29
     700:	cf 93       	push	r28
     702:	cd b7       	in	r28, 0x3d	; 61
     704:	de b7       	in	r29, 0x3e	; 62
	initHardware();
     706:	0e 94 a4 07 	call	0xf48	; 0xf48 <initHardware>
}
     70a:	cf 91       	pop	r28
     70c:	df 91       	pop	r29
     70e:	08 95       	ret

00000710 <__iCliRetVal>:
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
     710:	df 93       	push	r29
     712:	cf 93       	push	r28
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	f8 94       	cli
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	cf 91       	pop	r28
     71e:	df 91       	pop	r29
     720:	08 95       	ret

00000722 <__iRestore>:
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
     722:	df 93       	push	r29
     724:	cf 93       	push	r28
     726:	00 d0       	rcall	.+0      	; 0x728 <__iRestore+0x6>
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	9a 83       	std	Y+2, r25	; 0x02
     72e:	89 83       	std	Y+1, r24	; 0x01
     730:	ef e5       	ldi	r30, 0x5F	; 95
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	a9 81       	ldd	r26, Y+1	; 0x01
     736:	ba 81       	ldd	r27, Y+2	; 0x02
     738:	8c 91       	ld	r24, X
     73a:	80 83       	st	Z, r24
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	cf 91       	pop	r28
     742:	df 91       	pop	r29
     744:	08 95       	ret

00000746 <_ZN6PacketC2Ev>:
#include <stdio.h>
#include <string.h>
#include "protocol.h"

Packet::Packet()
     746:	df 93       	push	r29
     748:	cf 93       	push	r28
     74a:	00 d0       	rcall	.+0      	; 0x74c <_ZN6PacketC2Ev+0x6>
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
     750:	9a 83       	std	Y+2, r25	; 0x02
     752:	89 83       	std	Y+1, r24	; 0x01
{
	command = PROT_ERROR;
     754:	e9 81       	ldd	r30, Y+1	; 0x01
     756:	fa 81       	ldd	r31, Y+2	; 0x02
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	80 83       	st	Z, r24
	len = 0;
     75c:	e9 81       	ldd	r30, Y+1	; 0x01
     75e:	fa 81       	ldd	r31, Y+2	; 0x02
     760:	11 82       	std	Z+1, r1	; 0x01
}
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	cf 91       	pop	r28
     768:	df 91       	pop	r29
     76a:	08 95       	ret

0000076c <_ZN6PacketC1Ev>:
#include <stdio.h>
#include <string.h>
#include "protocol.h"

Packet::Packet()
     76c:	df 93       	push	r29
     76e:	cf 93       	push	r28
     770:	00 d0       	rcall	.+0      	; 0x772 <_ZN6PacketC1Ev+0x6>
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	9a 83       	std	Y+2, r25	; 0x02
     778:	89 83       	std	Y+1, r24	; 0x01
{
	command = PROT_ERROR;
     77a:	e9 81       	ldd	r30, Y+1	; 0x01
     77c:	fa 81       	ldd	r31, Y+2	; 0x02
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	80 83       	st	Z, r24
	len = 0;
     782:	e9 81       	ldd	r30, Y+1	; 0x01
     784:	fa 81       	ldd	r31, Y+2	; 0x02
     786:	11 82       	std	Z+1, r1	; 0x01
}
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	cf 91       	pop	r28
     78e:	df 91       	pop	r29
     790:	08 95       	ret

00000792 <_ZN8Protocol4initEP6UartHW>:
	memset(in, 0, Protocol::BUFFER_SIZE);
	memset(out, 0, Protocol::BUFFER_SIZE);
	haveMessage = false;
}

void Protocol::init(UartHW *uart)
     792:	df 93       	push	r29
     794:	cf 93       	push	r28
     796:	00 d0       	rcall	.+0      	; 0x798 <_ZN8Protocol4initEP6UartHW+0x6>
     798:	00 d0       	rcall	.+0      	; 0x79a <_ZN8Protocol4initEP6UartHW+0x8>
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
     79e:	9a 83       	std	Y+2, r25	; 0x02
     7a0:	89 83       	std	Y+1, r24	; 0x01
     7a2:	7c 83       	std	Y+4, r23	; 0x04
     7a4:	6b 83       	std	Y+3, r22	; 0x03
{
	_uart = uart;
     7a6:	e9 81       	ldd	r30, Y+1	; 0x01
     7a8:	fa 81       	ldd	r31, Y+2	; 0x02
     7aa:	8b 81       	ldd	r24, Y+3	; 0x03
     7ac:	9c 81       	ldd	r25, Y+4	; 0x04
     7ae:	95 87       	std	Z+13, r25	; 0x0d
     7b0:	84 87       	std	Z+12, r24	; 0x0c
}
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	cf 91       	pop	r28
     7bc:	df 91       	pop	r29
     7be:	08 95       	ret

000007c0 <_ZN8Protocol7receiveEv>:
	DUMP(c, 0x01);

	*_uart<<'\n';
}

bool Protocol::receive()
     7c0:	df 93       	push	r29
     7c2:	cf 93       	push	r28
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <_ZN8Protocol7receiveEv+0x6>
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	9a 83       	std	Y+2, r25	; 0x02
     7cc:	89 83       	std	Y+1, r24	; 0x01
        	in_offset = 0;
			_write("true", 4);
        	return true;
		}
    }*/
	return false;
     7ce:	80 e0       	ldi	r24, 0x00	; 0
}
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	cf 91       	pop	r28
     7d6:	df 91       	pop	r29
     7d8:	08 95       	ret

000007da <_ZN8Protocol4sendER6Packet>:

void Protocol::send(Packet &msg)
     7da:	df 93       	push	r29
     7dc:	cf 93       	push	r28
     7de:	00 d0       	rcall	.+0      	; 0x7e0 <_ZN8Protocol4sendER6Packet+0x6>
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <_ZN8Protocol4sendER6Packet+0x8>
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <_ZN8Protocol4sendER6Packet+0xa>
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	9c 83       	std	Y+4, r25	; 0x04
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	7e 83       	std	Y+6, r23	; 0x06
     7ee:	6d 83       	std	Y+5, r22	; 0x05
{
    if((out_offset + msg.len + 2) < Protocol::BUFFER_SIZE)
     7f0:	eb 81       	ldd	r30, Y+3	; 0x03
     7f2:	fc 81       	ldd	r31, Y+4	; 0x04
     7f4:	87 a9       	ldd	r24, Z+55	; 0x37
     7f6:	28 2f       	mov	r18, r24
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	ed 81       	ldd	r30, Y+5	; 0x05
     7fc:	fe 81       	ldd	r31, Y+6	; 0x06
     7fe:	81 81       	ldd	r24, Z+1	; 0x01
     800:	88 2f       	mov	r24, r24
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	82 0f       	add	r24, r18
     806:	93 1f       	adc	r25, r19
     808:	02 96       	adiw	r24, 0x02	; 2
     80a:	84 31       	cpi	r24, 0x14	; 20
     80c:	91 05       	cpc	r25, r1
     80e:	0c f0       	brlt	.+2      	; 0x812 <_ZN8Protocol4sendER6Packet+0x38>
     810:	54 c0       	rjmp	.+168    	; 0x8ba <_ZN8Protocol4sendER6Packet+0xe0>
    {
        out[out_offset++] = msg.command;
     812:	eb 81       	ldd	r30, Y+3	; 0x03
     814:	fc 81       	ldd	r31, Y+4	; 0x04
     816:	57 a9       	ldd	r21, Z+55	; 0x37
     818:	25 2f       	mov	r18, r21
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	ed 81       	ldd	r30, Y+5	; 0x05
     81e:	fe 81       	ldd	r31, Y+6	; 0x06
     820:	40 81       	ld	r20, Z
     822:	8b 81       	ldd	r24, Y+3	; 0x03
     824:	9c 81       	ldd	r25, Y+4	; 0x04
     826:	82 0f       	add	r24, r18
     828:	93 1f       	adc	r25, r19
     82a:	fc 01       	movw	r30, r24
     82c:	b2 96       	adiw	r30, 0x22	; 34
     82e:	40 83       	st	Z, r20
     830:	85 2f       	mov	r24, r21
     832:	8f 5f       	subi	r24, 0xFF	; 255
     834:	eb 81       	ldd	r30, Y+3	; 0x03
     836:	fc 81       	ldd	r31, Y+4	; 0x04
     838:	87 ab       	std	Z+55, r24	; 0x37
        out[out_offset++] = msg.len;
     83a:	eb 81       	ldd	r30, Y+3	; 0x03
     83c:	fc 81       	ldd	r31, Y+4	; 0x04
     83e:	57 a9       	ldd	r21, Z+55	; 0x37
     840:	25 2f       	mov	r18, r21
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	ed 81       	ldd	r30, Y+5	; 0x05
     846:	fe 81       	ldd	r31, Y+6	; 0x06
     848:	41 81       	ldd	r20, Z+1	; 0x01
     84a:	8b 81       	ldd	r24, Y+3	; 0x03
     84c:	9c 81       	ldd	r25, Y+4	; 0x04
     84e:	82 0f       	add	r24, r18
     850:	93 1f       	adc	r25, r19
     852:	fc 01       	movw	r30, r24
     854:	b2 96       	adiw	r30, 0x22	; 34
     856:	40 83       	st	Z, r20
     858:	85 2f       	mov	r24, r21
     85a:	8f 5f       	subi	r24, 0xFF	; 255
     85c:	eb 81       	ldd	r30, Y+3	; 0x03
     85e:	fc 81       	ldd	r31, Y+4	; 0x04
     860:	87 ab       	std	Z+55, r24	; 0x37
        for(int i=0;i<msg.len;i++)
     862:	1a 82       	std	Y+2, r1	; 0x02
     864:	19 82       	std	Y+1, r1	; 0x01
     866:	1f c0       	rjmp	.+62     	; 0x8a6 <_ZN8Protocol4sendER6Packet+0xcc>
            out[out_offset++] = msg.data[i];
     868:	eb 81       	ldd	r30, Y+3	; 0x03
     86a:	fc 81       	ldd	r31, Y+4	; 0x04
     86c:	67 a9       	ldd	r22, Z+55	; 0x37
     86e:	46 2f       	mov	r20, r22
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	29 81       	ldd	r18, Y+1	; 0x01
     874:	3a 81       	ldd	r19, Y+2	; 0x02
     876:	8d 81       	ldd	r24, Y+5	; 0x05
     878:	9e 81       	ldd	r25, Y+6	; 0x06
     87a:	82 0f       	add	r24, r18
     87c:	93 1f       	adc	r25, r19
     87e:	fc 01       	movw	r30, r24
     880:	32 96       	adiw	r30, 0x02	; 2
     882:	20 81       	ld	r18, Z
     884:	8b 81       	ldd	r24, Y+3	; 0x03
     886:	9c 81       	ldd	r25, Y+4	; 0x04
     888:	84 0f       	add	r24, r20
     88a:	95 1f       	adc	r25, r21
     88c:	fc 01       	movw	r30, r24
     88e:	b2 96       	adiw	r30, 0x22	; 34
     890:	20 83       	st	Z, r18
     892:	86 2f       	mov	r24, r22
     894:	8f 5f       	subi	r24, 0xFF	; 255
     896:	eb 81       	ldd	r30, Y+3	; 0x03
     898:	fc 81       	ldd	r31, Y+4	; 0x04
     89a:	87 ab       	std	Z+55, r24	; 0x37
{
    if((out_offset + msg.len + 2) < Protocol::BUFFER_SIZE)
    {
        out[out_offset++] = msg.command;
        out[out_offset++] = msg.len;
        for(int i=0;i<msg.len;i++)
     89c:	89 81       	ldd	r24, Y+1	; 0x01
     89e:	9a 81       	ldd	r25, Y+2	; 0x02
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	9a 83       	std	Y+2, r25	; 0x02
     8a4:	89 83       	std	Y+1, r24	; 0x01
     8a6:	ed 81       	ldd	r30, Y+5	; 0x05
     8a8:	fe 81       	ldd	r31, Y+6	; 0x06
     8aa:	81 81       	ldd	r24, Z+1	; 0x01
     8ac:	28 2f       	mov	r18, r24
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	9a 81       	ldd	r25, Y+2	; 0x02
     8b4:	82 17       	cp	r24, r18
     8b6:	93 07       	cpc	r25, r19
     8b8:	bc f2       	brlt	.-82     	; 0x868 <_ZN8Protocol4sendER6Packet+0x8e>
            out[out_offset++] = msg.data[i];
    }
}
     8ba:	26 96       	adiw	r28, 0x06	; 6
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	cf 91       	pop	r28
     8c8:	df 91       	pop	r29
     8ca:	08 95       	ret

000008cc <_ZN8Protocol6_writeEPhi>:

//////////////////////////////////////////
//
// PRIVATE
//////////////////////////////////////////////
void Protocol::_write(uint8_t *data, int size)
     8cc:	df 93       	push	r29
     8ce:	cf 93       	push	r28
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	28 97       	sbiw	r28, 0x08	; 8
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61
     8e0:	9c 83       	std	Y+4, r25	; 0x04
     8e2:	8b 83       	std	Y+3, r24	; 0x03
     8e4:	7e 83       	std	Y+6, r23	; 0x06
     8e6:	6d 83       	std	Y+5, r22	; 0x05
     8e8:	58 87       	std	Y+8, r21	; 0x08
     8ea:	4f 83       	std	Y+7, r20	; 0x07
{
	uint8_t *p = data;
     8ec:	8d 81       	ldd	r24, Y+5	; 0x05
     8ee:	9e 81       	ldd	r25, Y+6	; 0x06
     8f0:	9a 83       	std	Y+2, r25	; 0x02
     8f2:	89 83       	std	Y+1, r24	; 0x01
     8f4:	19 c0       	rjmp	.+50     	; 0x928 <_ZN8Protocol6_writeEPhi+0x5c>
	while(p-data < size)
	{
		_uart->write(*p);
     8f6:	eb 81       	ldd	r30, Y+3	; 0x03
     8f8:	fc 81       	ldd	r31, Y+4	; 0x04
     8fa:	04 84       	ldd	r0, Z+12	; 0x0c
     8fc:	f5 85       	ldd	r31, Z+13	; 0x0d
     8fe:	e0 2d       	mov	r30, r0
     900:	01 90       	ld	r0, Z+
     902:	f0 81       	ld	r31, Z
     904:	e0 2d       	mov	r30, r0
     906:	40 81       	ld	r20, Z
     908:	51 81       	ldd	r21, Z+1	; 0x01
     90a:	eb 81       	ldd	r30, Y+3	; 0x03
     90c:	fc 81       	ldd	r31, Y+4	; 0x04
     90e:	84 85       	ldd	r24, Z+12	; 0x0c
     910:	95 85       	ldd	r25, Z+13	; 0x0d
     912:	e9 81       	ldd	r30, Y+1	; 0x01
     914:	fa 81       	ldd	r31, Y+2	; 0x02
     916:	20 81       	ld	r18, Z
     918:	62 2f       	mov	r22, r18
     91a:	fa 01       	movw	r30, r20
     91c:	09 95       	icall
		p++;
     91e:	89 81       	ldd	r24, Y+1	; 0x01
     920:	9a 81       	ldd	r25, Y+2	; 0x02
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	9a 83       	std	Y+2, r25	; 0x02
     926:	89 83       	std	Y+1, r24	; 0x01
// PRIVATE
//////////////////////////////////////////////
void Protocol::_write(uint8_t *data, int size)
{
	uint8_t *p = data;
	while(p-data < size)
     928:	29 81       	ldd	r18, Y+1	; 0x01
     92a:	3a 81       	ldd	r19, Y+2	; 0x02
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	9e 81       	ldd	r25, Y+6	; 0x06
     930:	28 1b       	sub	r18, r24
     932:	39 0b       	sbc	r19, r25
     934:	8f 81       	ldd	r24, Y+7	; 0x07
     936:	98 85       	ldd	r25, Y+8	; 0x08
     938:	28 17       	cp	r18, r24
     93a:	39 07       	cpc	r19, r25
     93c:	e4 f2       	brlt	.-72     	; 0x8f6 <_ZN8Protocol6_writeEPhi+0x2a>
	{
		_uart->write(*p);
		p++;
	}
}
     93e:	28 96       	adiw	r28, 0x08	; 8
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	cf 91       	pop	r28
     94c:	df 91       	pop	r29
     94e:	08 95       	ret

00000950 <_ZN8Protocol5_readEv>:

uint8_t Protocol::_read()
     950:	df 93       	push	r29
     952:	cf 93       	push	r28
     954:	00 d0       	rcall	.+0      	; 0x956 <_ZN8Protocol5_readEv+0x6>
     956:	00 d0       	rcall	.+0      	; 0x958 <_ZN8Protocol5_readEv+0x8>
     958:	00 d0       	rcall	.+0      	; 0x95a <_ZN8Protocol5_readEv+0xa>
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	9e 83       	std	Y+6, r25	; 0x06
     960:	8d 83       	std	Y+5, r24	; 0x05
{
	int c = -1;
     962:	8f ef       	ldi	r24, 0xFF	; 255
     964:	9f ef       	ldi	r25, 0xFF	; 255
     966:	9b 83       	std	Y+3, r25	; 0x03
     968:	8a 83       	std	Y+2, r24	; 0x02
	CRITICAL_SECTION{
     96a:	ef e5       	ldi	r30, 0x5F	; 95
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	80 81       	ld	r24, Z
     970:	8c 83       	std	Y+4, r24	; 0x04
     972:	0e 94 88 03 	call	0x710	; 0x710 <__iCliRetVal>
     976:	89 83       	std	Y+1, r24	; 0x01
     978:	3f c0       	rjmp	.+126    	; 0x9f8 <_ZN8Protocol5_readEv+0xa8>
	while(in_offset < Protocol::BUFFER_SIZE )
	{
		c = _uart->read();
     97a:	ed 81       	ldd	r30, Y+5	; 0x05
     97c:	fe 81       	ldd	r31, Y+6	; 0x06
     97e:	04 84       	ldd	r0, Z+12	; 0x0c
     980:	f5 85       	ldd	r31, Z+13	; 0x0d
     982:	e0 2d       	mov	r30, r0
     984:	80 81       	ld	r24, Z
     986:	91 81       	ldd	r25, Z+1	; 0x01
     988:	fc 01       	movw	r30, r24
     98a:	32 96       	adiw	r30, 0x02	; 2
     98c:	20 81       	ld	r18, Z
     98e:	31 81       	ldd	r19, Z+1	; 0x01
     990:	ed 81       	ldd	r30, Y+5	; 0x05
     992:	fe 81       	ldd	r31, Y+6	; 0x06
     994:	84 85       	ldd	r24, Z+12	; 0x0c
     996:	95 85       	ldd	r25, Z+13	; 0x0d
     998:	f9 01       	movw	r30, r18
     99a:	09 95       	icall
     99c:	9b 83       	std	Y+3, r25	; 0x03
     99e:	8a 83       	std	Y+2, r24	; 0x02
		if(c == -1)
     9a0:	8a 81       	ldd	r24, Y+2	; 0x02
     9a2:	9b 81       	ldd	r25, Y+3	; 0x03
     9a4:	2f ef       	ldi	r18, 0xFF	; 255
     9a6:	8f 3f       	cpi	r24, 0xFF	; 255
     9a8:	92 07       	cpc	r25, r18
     9aa:	29 f1       	breq	.+74     	; 0x9f6 <_ZN8Protocol5_readEv+0xa6>
			break;
		in[in_offset] = 0;
     9ac:	ed 81       	ldd	r30, Y+5	; 0x05
     9ae:	fe 81       	ldd	r31, Y+6	; 0x06
     9b0:	86 a9       	ldd	r24, Z+54	; 0x36
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	8d 81       	ldd	r24, Y+5	; 0x05
     9b8:	9e 81       	ldd	r25, Y+6	; 0x06
     9ba:	82 0f       	add	r24, r18
     9bc:	93 1f       	adc	r25, r19
     9be:	fc 01       	movw	r30, r24
     9c0:	3e 96       	adiw	r30, 0x0e	; 14
     9c2:	10 82       	st	Z, r1
		in[in_offset] = (uint8_t)(c & 0xFF);
     9c4:	ed 81       	ldd	r30, Y+5	; 0x05
     9c6:	fe 81       	ldd	r31, Y+6	; 0x06
     9c8:	86 a9       	ldd	r24, Z+54	; 0x36
     9ca:	28 2f       	mov	r18, r24
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	4a 81       	ldd	r20, Y+2	; 0x02
     9d0:	8d 81       	ldd	r24, Y+5	; 0x05
     9d2:	9e 81       	ldd	r25, Y+6	; 0x06
     9d4:	82 0f       	add	r24, r18
     9d6:	93 1f       	adc	r25, r19
     9d8:	fc 01       	movw	r30, r24
     9da:	3e 96       	adiw	r30, 0x0e	; 14
     9dc:	40 83       	st	Z, r20
		in_offset++;
     9de:	ed 81       	ldd	r30, Y+5	; 0x05
     9e0:	fe 81       	ldd	r31, Y+6	; 0x06
     9e2:	86 a9       	ldd	r24, Z+54	; 0x36
     9e4:	8f 5f       	subi	r24, 0xFF	; 255
     9e6:	ed 81       	ldd	r30, Y+5	; 0x05
     9e8:	fe 81       	ldd	r31, Y+6	; 0x06
     9ea:	86 ab       	std	Z+54, r24	; 0x36

uint8_t Protocol::_read()
{
	int c = -1;
	CRITICAL_SECTION{
	while(in_offset < Protocol::BUFFER_SIZE )
     9ec:	ed 81       	ldd	r30, Y+5	; 0x05
     9ee:	fe 81       	ldd	r31, Y+6	; 0x06
     9f0:	86 a9       	ldd	r24, Z+54	; 0x36
     9f2:	84 31       	cpi	r24, 0x14	; 20
     9f4:	10 f2       	brcs	.-124    	; 0x97a <_ZN8Protocol5_readEv+0x2a>
}

uint8_t Protocol::_read()
{
	int c = -1;
	CRITICAL_SECTION{
     9f6:	19 82       	std	Y+1, r1	; 0x01
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	88 23       	and	r24, r24
     9fc:	b9 f7       	brne	.-18     	; 0x9ec <_ZN8Protocol5_readEv+0x9c>
			break;
		in[in_offset] = 0;
		in[in_offset] = (uint8_t)(c & 0xFF);
		in_offset++;
	}
	}
     9fe:	ce 01       	movw	r24, r28
     a00:	04 96       	adiw	r24, 0x04	; 4
     a02:	0e 94 91 03 	call	0x722	; 0x722 <__iRestore>
	return 0;
     a06:	80 e0       	ldi	r24, 0x00	; 0
}
     a08:	26 96       	adiw	r28, 0x06	; 6
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	cd bf       	out	0x3d, r28	; 61
     a14:	cf 91       	pop	r28
     a16:	df 91       	pop	r29
     a18:	08 95       	ret

00000a1a <_ZN6StreamlsEc>:
	}

	Stream& operator<< (const char str[] ){
		return print(str);
	}
	Stream& operator<< (char c ){
     a1a:	df 93       	push	r29
     a1c:	cf 93       	push	r28
     a1e:	00 d0       	rcall	.+0      	; 0xa20 <_ZN6StreamlsEc+0x6>
     a20:	0f 92       	push	r0
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
     a26:	9a 83       	std	Y+2, r25	; 0x02
     a28:	89 83       	std	Y+1, r24	; 0x01
     a2a:	6b 83       	std	Y+3, r22	; 0x03
		return print(c);
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	9a 81       	ldd	r25, Y+2	; 0x02
     a30:	6b 81       	ldd	r22, Y+3	; 0x03
     a32:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <_ZN6Stream5printEc>
	}
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	cf 91       	pop	r28
     a3e:	df 91       	pop	r29
     a40:	08 95       	ret

00000a42 <_ZN8Protocol4dumpEh>:
#define DUMP(X, Y) 	if(X & Y) \
		*_uart<<'1';\
	else\
		*_uart<<'0';

void Protocol::dump(uint8_t c)
     a42:	df 93       	push	r29
     a44:	cf 93       	push	r28
     a46:	00 d0       	rcall	.+0      	; 0xa48 <_ZN8Protocol4dumpEh+0x6>
     a48:	0f 92       	push	r0
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	9a 83       	std	Y+2, r25	; 0x02
     a50:	89 83       	std	Y+1, r24	; 0x01
     a52:	6b 83       	std	Y+3, r22	; 0x03
{
	DUMP(c, 0x80);
     a54:	8b 81       	ldd	r24, Y+3	; 0x03
     a56:	88 23       	and	r24, r24
     a58:	44 f4       	brge	.+16     	; 0xa6a <_ZN8Protocol4dumpEh+0x28>
     a5a:	e9 81       	ldd	r30, Y+1	; 0x01
     a5c:	fa 81       	ldd	r31, Y+2	; 0x02
     a5e:	84 85       	ldd	r24, Z+12	; 0x0c
     a60:	95 85       	ldd	r25, Z+13	; 0x0d
     a62:	61 e3       	ldi	r22, 0x31	; 49
     a64:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN6StreamlsEc>
     a68:	07 c0       	rjmp	.+14     	; 0xa78 <_ZN8Protocol4dumpEh+0x36>
     a6a:	e9 81       	ldd	r30, Y+1	; 0x01
     a6c:	fa 81       	ldd	r31, Y+2	; 0x02
     a6e:	84 85       	ldd	r24, Z+12	; 0x0c
     a70:	95 85       	ldd	r25, Z+13	; 0x0d
     a72:	60 e3       	ldi	r22, 0x30	; 48
     a74:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN6StreamlsEc>
	DUMP(c, 0x40);
     a78:	8b 81       	ldd	r24, Y+3	; 0x03
     a7a:	88 2f       	mov	r24, r24
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	80 74       	andi	r24, 0x40	; 64
     a80:	90 70       	andi	r25, 0x00	; 0
     a82:	00 97       	sbiw	r24, 0x00	; 0
     a84:	41 f0       	breq	.+16     	; 0xa96 <_ZN8Protocol4dumpEh+0x54>
     a86:	e9 81       	ldd	r30, Y+1	; 0x01
     a88:	fa 81       	ldd	r31, Y+2	; 0x02
     a8a:	84 85       	ldd	r24, Z+12	; 0x0c
     a8c:	95 85       	ldd	r25, Z+13	; 0x0d
     a8e:	61 e3       	ldi	r22, 0x31	; 49
     a90:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN6StreamlsEc>
     a94:	07 c0       	rjmp	.+14     	; 0xaa4 <_ZN8Protocol4dumpEh+0x62>
     a96:	e9 81       	ldd	r30, Y+1	; 0x01
     a98:	fa 81       	ldd	r31, Y+2	; 0x02
     a9a:	84 85       	ldd	r24, Z+12	; 0x0c
     a9c:	95 85       	ldd	r25, Z+13	; 0x0d
     a9e:	60 e3       	ldi	r22, 0x30	; 48
     aa0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN6StreamlsEc>
	DUMP(c, 0x20);
     aa4:	8b 81       	ldd	r24, Y+3	; 0x03
     aa6:	88 2f       	mov	r24, r24
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	80 72       	andi	r24, 0x20	; 32
     aac:	90 70       	andi	r25, 0x00	; 0
     aae:	00 97       	sbiw	r24, 0x00	; 0
     ab0:	41 f0       	breq	.+16     	; 0xac2 <_ZN8Protocol4dumpEh+0x80>
     ab2:	e9 81       	ldd	r30, Y+1	; 0x01
     ab4:	fa 81       	ldd	r31, Y+2	; 0x02
     ab6:	84 85       	ldd	r24, Z+12	; 0x0c
     ab8:	95 85       	ldd	r25, Z+13	; 0x0d
     aba:	61 e3       	ldi	r22, 0x31	; 49
     abc:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN6StreamlsEc>
     ac0:	07 c0       	rjmp	.+14     	; 0xad0 <_ZN8Protocol4dumpEh+0x8e>
     ac2:	e9 81       	ldd	r30, Y+1	; 0x01
     ac4:	fa 81       	ldd	r31, Y+2	; 0x02
     ac6:	84 85       	ldd	r24, Z+12	; 0x0c
     ac8:	95 85       	ldd	r25, Z+13	; 0x0d
     aca:	60 e3       	ldi	r22, 0x30	; 48
     acc:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN6StreamlsEc>
	DUMP(c, 0x10);
     ad0:	8b 81       	ldd	r24, Y+3	; 0x03
     ad2:	88 2f       	mov	r24, r24
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	80 71       	andi	r24, 0x10	; 16
     ad8:	90 70       	andi	r25, 0x00	; 0
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	41 f0       	breq	.+16     	; 0xaee <_ZN8Protocol4dumpEh+0xac>
     ade:	e9 81       	ldd	r30, Y+1	; 0x01
     ae0:	fa 81       	ldd	r31, Y+2	; 0x02
     ae2:	84 85       	ldd	r24, Z+12	; 0x0c
     ae4:	95 85       	ldd	r25, Z+13	; 0x0d
     ae6:	61 e3       	ldi	r22, 0x31	; 49
     ae8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN6StreamlsEc>
     aec:	07 c0       	rjmp	.+14     	; 0xafc <_ZN8Protocol4dumpEh+0xba>
     aee:	e9 81       	ldd	r30, Y+1	; 0x01
     af0:	fa 81       	ldd	r31, Y+2	; 0x02
     af2:	84 85       	ldd	r24, Z+12	; 0x0c
     af4:	95 85       	ldd	r25, Z+13	; 0x0d
     af6:	60 e3       	ldi	r22, 0x30	; 48
     af8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN6StreamlsEc>

	*_uart<<' ';
     afc:	e9 81       	ldd	r30, Y+1	; 0x01
     afe:	fa 81       	ldd	r31, Y+2	; 0x02
     b00:	84 85       	ldd	r24, Z+12	; 0x0c
     b02:	95 85       	ldd	r25, Z+13	; 0x0d
     b04:	60 e2       	ldi	r22, 0x20	; 32
     b06:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN6StreamlsEc>

	DUMP(c, 0x08);
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	88 2f       	mov	r24, r24
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	88 70       	andi	r24, 0x08	; 8
     b12:	90 70       	andi	r25, 0x00	; 0
     b14:	00 97       	sbiw	r24, 0x00	; 0
     b16:	41 f0       	breq	.+16     	; 0xb28 <_ZN8Protocol4dumpEh+0xe6>
     b18:	e9 81       	ldd	r30, Y+1	; 0x01
     b1a:	fa 81       	ldd	r31, Y+2	; 0x02
     b1c:	84 85       	ldd	r24, Z+12	; 0x0c
     b1e:	95 85       	ldd	r25, Z+13	; 0x0d
     b20:	61 e3       	ldi	r22, 0x31	; 49
     b22:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN6StreamlsEc>
     b26:	07 c0       	rjmp	.+14     	; 0xb36 <_ZN8Protocol4dumpEh+0xf4>
     b28:	e9 81       	ldd	r30, Y+1	; 0x01
     b2a:	fa 81       	ldd	r31, Y+2	; 0x02
     b2c:	84 85       	ldd	r24, Z+12	; 0x0c
     b2e:	95 85       	ldd	r25, Z+13	; 0x0d
     b30:	60 e3       	ldi	r22, 0x30	; 48
     b32:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN6StreamlsEc>
	DUMP(c, 0x04);
     b36:	8b 81       	ldd	r24, Y+3	; 0x03
     b38:	88 2f       	mov	r24, r24
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	84 70       	andi	r24, 0x04	; 4
     b3e:	90 70       	andi	r25, 0x00	; 0
     b40:	00 97       	sbiw	r24, 0x00	; 0
     b42:	41 f0       	breq	.+16     	; 0xb54 <_ZN8Protocol4dumpEh+0x112>
     b44:	e9 81       	ldd	r30, Y+1	; 0x01
     b46:	fa 81       	ldd	r31, Y+2	; 0x02
     b48:	84 85       	ldd	r24, Z+12	; 0x0c
     b4a:	95 85       	ldd	r25, Z+13	; 0x0d
     b4c:	61 e3       	ldi	r22, 0x31	; 49
     b4e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN6StreamlsEc>
     b52:	07 c0       	rjmp	.+14     	; 0xb62 <_ZN8Protocol4dumpEh+0x120>
     b54:	e9 81       	ldd	r30, Y+1	; 0x01
     b56:	fa 81       	ldd	r31, Y+2	; 0x02
     b58:	84 85       	ldd	r24, Z+12	; 0x0c
     b5a:	95 85       	ldd	r25, Z+13	; 0x0d
     b5c:	60 e3       	ldi	r22, 0x30	; 48
     b5e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN6StreamlsEc>
	DUMP(c, 0x02);
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	88 2f       	mov	r24, r24
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	82 70       	andi	r24, 0x02	; 2
     b6a:	90 70       	andi	r25, 0x00	; 0
     b6c:	00 97       	sbiw	r24, 0x00	; 0
     b6e:	41 f0       	breq	.+16     	; 0xb80 <_ZN8Protocol4dumpEh+0x13e>
     b70:	e9 81       	ldd	r30, Y+1	; 0x01
     b72:	fa 81       	ldd	r31, Y+2	; 0x02
     b74:	84 85       	ldd	r24, Z+12	; 0x0c
     b76:	95 85       	ldd	r25, Z+13	; 0x0d
     b78:	61 e3       	ldi	r22, 0x31	; 49
     b7a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN6StreamlsEc>
     b7e:	07 c0       	rjmp	.+14     	; 0xb8e <_ZN8Protocol4dumpEh+0x14c>
     b80:	e9 81       	ldd	r30, Y+1	; 0x01
     b82:	fa 81       	ldd	r31, Y+2	; 0x02
     b84:	84 85       	ldd	r24, Z+12	; 0x0c
     b86:	95 85       	ldd	r25, Z+13	; 0x0d
     b88:	60 e3       	ldi	r22, 0x30	; 48
     b8a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN6StreamlsEc>
	DUMP(c, 0x01);
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	88 2f       	mov	r24, r24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	81 70       	andi	r24, 0x01	; 1
     b96:	90 70       	andi	r25, 0x00	; 0
     b98:	88 23       	and	r24, r24
     b9a:	41 f0       	breq	.+16     	; 0xbac <_ZN8Protocol4dumpEh+0x16a>
     b9c:	e9 81       	ldd	r30, Y+1	; 0x01
     b9e:	fa 81       	ldd	r31, Y+2	; 0x02
     ba0:	84 85       	ldd	r24, Z+12	; 0x0c
     ba2:	95 85       	ldd	r25, Z+13	; 0x0d
     ba4:	61 e3       	ldi	r22, 0x31	; 49
     ba6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN6StreamlsEc>
     baa:	07 c0       	rjmp	.+14     	; 0xbba <_ZN8Protocol4dumpEh+0x178>
     bac:	e9 81       	ldd	r30, Y+1	; 0x01
     bae:	fa 81       	ldd	r31, Y+2	; 0x02
     bb0:	84 85       	ldd	r24, Z+12	; 0x0c
     bb2:	95 85       	ldd	r25, Z+13	; 0x0d
     bb4:	60 e3       	ldi	r22, 0x30	; 48
     bb6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN6StreamlsEc>

	*_uart<<'\n';
     bba:	e9 81       	ldd	r30, Y+1	; 0x01
     bbc:	fa 81       	ldd	r31, Y+2	; 0x02
     bbe:	84 85       	ldd	r24, Z+12	; 0x0c
     bc0:	95 85       	ldd	r25, Z+13	; 0x0d
     bc2:	6a e0       	ldi	r22, 0x0A	; 10
     bc4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN6StreamlsEc>
}
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	cf 91       	pop	r28
     bd0:	df 91       	pop	r29
     bd2:	08 95       	ret

00000bd4 <_ZN8Protocol7treatIOEv>:
void Protocol::init(UartHW *uart)
{
	_uart = uart;
}

void Protocol::treatIO()
     bd4:	df 93       	push	r29
     bd6:	cf 93       	push	r28
     bd8:	00 d0       	rcall	.+0      	; 0xbda <_ZN8Protocol7treatIOEv+0x6>
     bda:	00 d0       	rcall	.+0      	; 0xbdc <_ZN8Protocol7treatIOEv+0x8>
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	9c 83       	std	Y+4, r25	; 0x04
     be2:	8b 83       	std	Y+3, r24	; 0x03
{
	_read();
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	9c 81       	ldd	r25, Y+4	; 0x04
     be8:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN8Protocol5_readEv>
	if(in_offset >0 )
     bec:	eb 81       	ldd	r30, Y+3	; 0x03
     bee:	fc 81       	ldd	r31, Y+4	; 0x04
     bf0:	86 a9       	ldd	r24, Z+54	; 0x36
     bf2:	88 23       	and	r24, r24
     bf4:	19 f1       	breq	.+70     	; 0xc3c <_ZN8Protocol7treatIOEv+0x68>
{
//_write((uint8_t*)"test\n", 5);

for(int i=0;i<in_offset;i++)
     bf6:	1a 82       	std	Y+2, r1	; 0x02
     bf8:	19 82       	std	Y+1, r1	; 0x01
     bfa:	13 c0       	rjmp	.+38     	; 0xc22 <_ZN8Protocol7treatIOEv+0x4e>
	dump(in[i]);
     bfc:	29 81       	ldd	r18, Y+1	; 0x01
     bfe:	3a 81       	ldd	r19, Y+2	; 0x02
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	82 0f       	add	r24, r18
     c06:	93 1f       	adc	r25, r19
     c08:	fc 01       	movw	r30, r24
     c0a:	3e 96       	adiw	r30, 0x0e	; 14
     c0c:	20 81       	ld	r18, Z
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	62 2f       	mov	r22, r18
     c14:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN8Protocol4dumpEh>
	_read();
	if(in_offset >0 )
{
//_write((uint8_t*)"test\n", 5);

for(int i=0;i<in_offset;i++)
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	9a 81       	ldd	r25, Y+2	; 0x02
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	9a 83       	std	Y+2, r25	; 0x02
     c20:	89 83       	std	Y+1, r24	; 0x01
     c22:	eb 81       	ldd	r30, Y+3	; 0x03
     c24:	fc 81       	ldd	r31, Y+4	; 0x04
     c26:	86 a9       	ldd	r24, Z+54	; 0x36
     c28:	28 2f       	mov	r18, r24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	9a 81       	ldd	r25, Y+2	; 0x02
     c30:	82 17       	cp	r24, r18
     c32:	93 07       	cpc	r25, r19
     c34:	1c f3       	brlt	.-58     	; 0xbfc <_ZN8Protocol7treatIOEv+0x28>
	dump(in[i]);
//_write(in, in_offset);
        	in_offset = 0;
     c36:	eb 81       	ldd	r30, Y+3	; 0x03
     c38:	fc 81       	ldd	r31, Y+4	; 0x04
     c3a:	16 aa       	std	Z+54, r1	; 0x36
    if(out_offset > 0)
    {
        _write(out, out_offset);
        out_offset = 0;
    }*/
}
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <_ZN8ProtocolC1Ev>:
{
	command = PROT_ERROR;
	len = 0;
}

Protocol::Protocol()
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <_ZN8ProtocolC1Ev+0x6>
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	9a 83       	std	Y+2, r25	; 0x02
     c56:	89 83       	std	Y+1, r24	; 0x01
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	0e 94 b6 03 	call	0x76c	; 0x76c <_ZN6PacketC1Ev>
{
	_uart = NULL;
     c60:	e9 81       	ldd	r30, Y+1	; 0x01
     c62:	fa 81       	ldd	r31, Y+2	; 0x02
     c64:	15 86       	std	Z+13, r1	; 0x0d
     c66:	14 86       	std	Z+12, r1	; 0x0c
	in_offset = 0;
     c68:	e9 81       	ldd	r30, Y+1	; 0x01
     c6a:	fa 81       	ldd	r31, Y+2	; 0x02
     c6c:	16 aa       	std	Z+54, r1	; 0x36
	out_offset = 0;
     c6e:	e9 81       	ldd	r30, Y+1	; 0x01
     c70:	fa 81       	ldd	r31, Y+2	; 0x02
     c72:	17 aa       	std	Z+55, r1	; 0x37
	memset(in, 0, Protocol::BUFFER_SIZE);
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	9a 81       	ldd	r25, Y+2	; 0x02
     c78:	0e 96       	adiw	r24, 0x0e	; 14
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	44 e1       	ldi	r20, 0x14	; 20
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	0e 94 44 1a 	call	0x3488	; 0x3488 <memset>
	memset(out, 0, Protocol::BUFFER_SIZE);
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	9a 81       	ldd	r25, Y+2	; 0x02
     c8a:	82 96       	adiw	r24, 0x22	; 34
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	44 e1       	ldi	r20, 0x14	; 20
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	0e 94 44 1a 	call	0x3488	; 0x3488 <memset>
	haveMessage = false;
     c98:	e9 81       	ldd	r30, Y+1	; 0x01
     c9a:	fa 81       	ldd	r31, Y+2	; 0x02
     c9c:	10 ae       	std	Z+56, r1	; 0x38
}
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	cf 91       	pop	r28
     ca4:	df 91       	pop	r29
     ca6:	08 95       	ret

00000ca8 <_ZN8ProtocolC2Ev>:
{
	command = PROT_ERROR;
	len = 0;
}

Protocol::Protocol()
     ca8:	df 93       	push	r29
     caa:	cf 93       	push	r28
     cac:	00 d0       	rcall	.+0      	; 0xcae <_ZN8ProtocolC2Ev+0x6>
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	9a 83       	std	Y+2, r25	; 0x02
     cb4:	89 83       	std	Y+1, r24	; 0x01
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	0e 94 b6 03 	call	0x76c	; 0x76c <_ZN6PacketC1Ev>
{
	_uart = NULL;
     cbe:	e9 81       	ldd	r30, Y+1	; 0x01
     cc0:	fa 81       	ldd	r31, Y+2	; 0x02
     cc2:	15 86       	std	Z+13, r1	; 0x0d
     cc4:	14 86       	std	Z+12, r1	; 0x0c
	in_offset = 0;
     cc6:	e9 81       	ldd	r30, Y+1	; 0x01
     cc8:	fa 81       	ldd	r31, Y+2	; 0x02
     cca:	16 aa       	std	Z+54, r1	; 0x36
	out_offset = 0;
     ccc:	e9 81       	ldd	r30, Y+1	; 0x01
     cce:	fa 81       	ldd	r31, Y+2	; 0x02
     cd0:	17 aa       	std	Z+55, r1	; 0x37
	memset(in, 0, Protocol::BUFFER_SIZE);
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	9a 81       	ldd	r25, Y+2	; 0x02
     cd6:	0e 96       	adiw	r24, 0x0e	; 14
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	44 e1       	ldi	r20, 0x14	; 20
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	0e 94 44 1a 	call	0x3488	; 0x3488 <memset>
	memset(out, 0, Protocol::BUFFER_SIZE);
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	82 96       	adiw	r24, 0x22	; 34
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	44 e1       	ldi	r20, 0x14	; 20
     cf0:	50 e0       	ldi	r21, 0x00	; 0
     cf2:	0e 94 44 1a 	call	0x3488	; 0x3488 <memset>
	haveMessage = false;
     cf6:	e9 81       	ldd	r30, Y+1	; 0x01
     cf8:	fa 81       	ldd	r31, Y+2	; 0x02
     cfa:	10 ae       	std	Z+56, r1	; 0x38
}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	08 95       	ret

00000d06 <_ZN7ServiceC2Ec>:
#include "services.h"

Service::Service(char id)
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <_ZN7ServiceC2Ec+0x6>
     d0c:	0f 92       	push	r0
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	9a 83       	std	Y+2, r25	; 0x02
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	6b 83       	std	Y+3, r22	; 0x03
     d18:	e9 81       	ldd	r30, Y+1	; 0x01
     d1a:	fa 81       	ldd	r31, Y+2	; 0x02
     d1c:	8a e0       	ldi	r24, 0x0A	; 10
     d1e:	92 e0       	ldi	r25, 0x02	; 2
     d20:	91 83       	std	Z+1, r25	; 0x01
     d22:	80 83       	st	Z, r24
{
    _id = id;
     d24:	e9 81       	ldd	r30, Y+1	; 0x01
     d26:	fa 81       	ldd	r31, Y+2	; 0x02
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	82 83       	std	Z+2, r24	; 0x02
    _prot = NULL;
     d2c:	e9 81       	ldd	r30, Y+1	; 0x01
     d2e:	fa 81       	ldd	r31, Y+2	; 0x02
     d30:	14 82       	std	Z+4, r1	; 0x04
     d32:	13 82       	std	Z+3, r1	; 0x03
}
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	08 95       	ret

00000d40 <_ZN7ServiceC1Ec>:
#include "services.h"

Service::Service(char id)
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	00 d0       	rcall	.+0      	; 0xd46 <_ZN7ServiceC1Ec+0x6>
     d46:	0f 92       	push	r0
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	9a 83       	std	Y+2, r25	; 0x02
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	6b 83       	std	Y+3, r22	; 0x03
     d52:	e9 81       	ldd	r30, Y+1	; 0x01
     d54:	fa 81       	ldd	r31, Y+2	; 0x02
     d56:	8a e0       	ldi	r24, 0x0A	; 10
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	91 83       	std	Z+1, r25	; 0x01
     d5c:	80 83       	st	Z, r24
{
    _id = id;
     d5e:	e9 81       	ldd	r30, Y+1	; 0x01
     d60:	fa 81       	ldd	r31, Y+2	; 0x02
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	82 83       	std	Z+2, r24	; 0x02
    _prot = NULL;
     d66:	e9 81       	ldd	r30, Y+1	; 0x01
     d68:	fa 81       	ldd	r31, Y+2	; 0x02
     d6a:	14 82       	std	Z+4, r1	; 0x04
     d6c:	13 82       	std	Z+3, r1	; 0x03
}
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <_ZN7Service4initEP8Protocol>:

void Service::init(Protocol *prot)
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <_ZN7Service4initEP8Protocol+0x6>
     d80:	00 d0       	rcall	.+0      	; 0xd82 <_ZN7Service4initEP8Protocol+0x8>
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	9a 83       	std	Y+2, r25	; 0x02
     d88:	89 83       	std	Y+1, r24	; 0x01
     d8a:	7c 83       	std	Y+4, r23	; 0x04
     d8c:	6b 83       	std	Y+3, r22	; 0x03
{
    _prot = prot;
     d8e:	e9 81       	ldd	r30, Y+1	; 0x01
     d90:	fa 81       	ldd	r31, Y+2	; 0x02
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	9c 81       	ldd	r25, Y+4	; 0x04
     d96:	94 83       	std	Z+4, r25	; 0x04
     d98:	83 83       	std	Z+3, r24	; 0x03
}
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <_ZN7Service5matchERK6Packet>:

bool Service::match(const Packet &msg)
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	00 d0       	rcall	.+0      	; 0xdae <_ZN7Service5matchERK6Packet+0x6>
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <_ZN7Service5matchERK6Packet+0x8>
     db0:	0f 92       	push	r0
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	9a 83       	std	Y+2, r25	; 0x02
     db8:	89 83       	std	Y+1, r24	; 0x01
     dba:	7c 83       	std	Y+4, r23	; 0x04
     dbc:	6b 83       	std	Y+3, r22	; 0x03
{
    return msg.command == _id ? true : false;    
     dbe:	eb 81       	ldd	r30, Y+3	; 0x03
     dc0:	fc 81       	ldd	r31, Y+4	; 0x04
     dc2:	90 81       	ld	r25, Z
     dc4:	e9 81       	ldd	r30, Y+1	; 0x01
     dc6:	fa 81       	ldd	r31, Y+2	; 0x02
     dc8:	82 81       	ldd	r24, Z+2	; 0x02
     dca:	1d 82       	std	Y+5, r1	; 0x05
     dcc:	98 17       	cp	r25, r24
     dce:	11 f4       	brne	.+4      	; 0xdd4 <_ZN7Service5matchERK6Packet+0x2c>
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	8d 83       	std	Y+5, r24	; 0x05
     dd4:	8d 81       	ldd	r24, Y+5	; 0x05
}
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	cf 91       	pop	r28
     de2:	df 91       	pop	r29
     de4:	08 95       	ret

00000de6 <_ZN11PingServiceC2Ev>:



PingService::PingService() : Service(PROT_PING)
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	00 d0       	rcall	.+0      	; 0xdec <_ZN11PingServiceC2Ev+0x6>
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	9a 83       	std	Y+2, r25	; 0x02
     df2:	89 83       	std	Y+1, r24	; 0x01
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	9a 81       	ldd	r25, Y+2	; 0x02
     df8:	62 e0       	ldi	r22, 0x02	; 2
     dfa:	0e 94 83 06 	call	0xd06	; 0xd06 <_ZN7ServiceC2Ec>
     dfe:	e9 81       	ldd	r30, Y+1	; 0x01
     e00:	fa 81       	ldd	r31, Y+2	; 0x02
     e02:	84 e0       	ldi	r24, 0x04	; 4
     e04:	92 e0       	ldi	r25, 0x02	; 2
     e06:	91 83       	std	Z+1, r25	; 0x01
     e08:	80 83       	st	Z, r24
{
}
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <_ZN11PingServiceC1Ev>:
    return msg.command == _id ? true : false;    
}



PingService::PingService() : Service(PROT_PING)
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	00 d0       	rcall	.+0      	; 0xe1a <_ZN11PingServiceC1Ev+0x6>
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	9a 81       	ldd	r25, Y+2	; 0x02
     e26:	62 e0       	ldi	r22, 0x02	; 2
     e28:	0e 94 83 06 	call	0xd06	; 0xd06 <_ZN7ServiceC2Ec>
     e2c:	e9 81       	ldd	r30, Y+1	; 0x01
     e2e:	fa 81       	ldd	r31, Y+2	; 0x02
     e30:	84 e0       	ldi	r24, 0x04	; 4
     e32:	92 e0       	ldi	r25, 0x02	; 2
     e34:	91 83       	std	Z+1, r25	; 0x01
     e36:	80 83       	st	Z, r24
{
}
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <_ZN11PingService7executeER6Packet>:

bool PingService::execute(Packet &msg)
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	00 d0       	rcall	.+0      	; 0xe48 <_ZN11PingService7executeER6Packet+0x6>
     e48:	00 d0       	rcall	.+0      	; 0xe4a <_ZN11PingService7executeER6Packet+0x8>
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	9a 83       	std	Y+2, r25	; 0x02
     e50:	89 83       	std	Y+1, r24	; 0x01
     e52:	7c 83       	std	Y+4, r23	; 0x04
     e54:	6b 83       	std	Y+3, r22	; 0x03
{
    // i just forward the message
    _prot->send(msg);
     e56:	e9 81       	ldd	r30, Y+1	; 0x01
     e58:	fa 81       	ldd	r31, Y+2	; 0x02
     e5a:	83 81       	ldd	r24, Z+3	; 0x03
     e5c:	94 81       	ldd	r25, Z+4	; 0x04
     e5e:	2b 81       	ldd	r18, Y+3	; 0x03
     e60:	3c 81       	ldd	r19, Y+4	; 0x04
     e62:	b9 01       	movw	r22, r18
     e64:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN8Protocol4sendER6Packet>
    return true;
     e68:	81 e0       	ldi	r24, 0x01	; 1
}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <_ZN10SmartMotorC2ER5Servo>:
#include "smart_motor.h"


SmartMotor::SmartMotor(Servo &servo)
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <_ZN10SmartMotorC2ER5Servo+0x6>
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <_ZN10SmartMotorC2ER5Servo+0x8>
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	9a 83       	std	Y+2, r25	; 0x02
     e86:	89 83       	std	Y+1, r24	; 0x01
     e88:	7c 83       	std	Y+4, r23	; 0x04
     e8a:	6b 83       	std	Y+3, r22	; 0x03
{
}
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <_ZN10SmartMotorC1ER5Servo>:
#include "smart_motor.h"


SmartMotor::SmartMotor(Servo &servo)
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <_ZN10SmartMotorC1ER5Servo+0x6>
     ea0:	00 d0       	rcall	.+0      	; 0xea2 <_ZN10SmartMotorC1ER5Servo+0x8>
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	7c 83       	std	Y+4, r23	; 0x04
     eac:	6b 83       	std	Y+3, r22	; 0x03
{
}
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <_ZN10SmartMotor12set_positionEai>:

bool SmartMotor::set_position(DRIVE_SPEED position, int16_t t)
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <_ZN10SmartMotor12set_positionEai+0x6>
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <_ZN10SmartMotor12set_positionEai+0x8>
     ec4:	0f 92       	push	r0
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	9a 83       	std	Y+2, r25	; 0x02
     ecc:	89 83       	std	Y+1, r24	; 0x01
     ece:	6b 83       	std	Y+3, r22	; 0x03
     ed0:	5d 83       	std	Y+5, r21	; 0x05
     ed2:	4c 83       	std	Y+4, r20	; 0x04
{
	return false;
     ed4:	80 e0       	ldi	r24, 0x00	; 0
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <_ZN10SmartMotor9is_movingEv>:

bool SmartMotor::is_moving()
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	00 d0       	rcall	.+0      	; 0xeec <_ZN10SmartMotor9is_movingEv+0x6>
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	9a 83       	std	Y+2, r25	; 0x02
     ef2:	89 83       	std	Y+1, r24	; 0x01
{
	return false;
     ef4:	80 e0       	ldi	r24, 0x00	; 0
}
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <_ZN10SmartMotor7computeEv>:

void SmartMotor::compute()
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	00 d0       	rcall	.+0      	; 0xf06 <_ZN10SmartMotor7computeEv+0x6>
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	89 83       	std	Y+1, r24	; 0x01
{
}
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <marquee_put_char>:
static MAKE_WRITER(marquee_put_char); /* Fwd Def */
MARQUEE _marquee_ = MAKE_MARQUEE(marquee_list,500000,2000000,&marquee_put_char);
// Create a Writer to write to marquee
// Do NOT call it directly instead, to write the char 'A' use:
// 	marqueeGetWriter(&marquee)('A');
static MAKE_WRITER(marquee_put_char){ /* createWriter */
     f18:	68 2f       	mov	r22, r24
	return marqueeSendByte(&_marquee_,byte);
     f1a:	89 e5       	ldi	r24, 0x59	; 89
     f1c:	92 e0       	ldi	r25, 0x02	; 2
     f1e:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <marqueeSendByte>
}
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	08 95       	ret

00000f26 <registerLED>:
static __inline__ void LED_off(LED* led){
	LED_set(led,FALSE);
}

static __inline__ void statusLEDregister(const IOPin* pin, boolean activeHigh){
	statusLED.pin = pin;
     f26:	8b e0       	ldi	r24, 0x0B	; 11
     f28:	93 e0       	ldi	r25, 0x03	; 3
     f2a:	90 93 31 04 	sts	0x0431, r25
     f2e:	80 93 30 04 	sts	0x0430, r24
	statusLED.activeHigh = activeHigh;
     f32:	80 91 32 04 	lds	r24, 0x0432
	statusLED.initialised=FALSE;
     f36:	8c 7f       	andi	r24, 0xFC	; 252
     f38:	80 93 32 04 	sts	0x0432, r24


void LED_set(LED* led,	boolean value);

static __inline__ void LED_on(LED* led){
	LED_set(led,TRUE);
     f3c:	80 e3       	ldi	r24, 0x30	; 48
     f3e:	94 e0       	ldi	r25, 0x04	; 4
     f40:	6f ef       	ldi	r22, 0xFF	; 255
     f42:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <LED_set>
void initHardware(void){
	servoPWMInit(&_bank1_);
}
void registerLED(void){
	statusLEDregister(C1,false);
}
     f46:	08 95       	ret

00000f48 <initHardware>:
	//segled_init(&_led_display_);
}

// ----------- Initialise my added devices ------
void initHardware(void){
	servoPWMInit(&_bank1_);
     f48:	82 eb       	ldi	r24, 0xB2	; 178
     f4a:	92 e0       	ldi	r25, 0x02	; 2
     f4c:	0e 94 33 0a 	call	0x1466	; 0x1466 <servoPWMInit>
}
     f50:	08 95       	ret

00000f52 <sysInitHardware>:
static __inline__ boolean SWITCH_released(SWITCH* sw){
	return pin_is_high(sw->pin);
}

static __inline__ void SWITCH_init(SWITCH *sw){
	pin_make_input(sw->pin,TRUE);
     f52:	80 91 46 02 	lds	r24, 0x0246
     f56:	90 91 47 02 	lds	r25, 0x0247
     f5a:	6f ef       	ldi	r22, 0xFF	; 255
     f5c:	0e 94 ae 0c 	call	0x195c	; 0x195c <pin_make_input>
// ----------- Initialise built in devices ------
void sysInitHardware(void){
	SWITCH_init(&_button_);
//	setErrorLog(&uart1SendByte);
	//rprintfInit(&uart1SendByte);
	uartInit(_C_uart1,115200);
     f60:	84 e1       	ldi	r24, 0x14	; 20
     f62:	92 e0       	ldi	r25, 0x02	; 2
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	52 ec       	ldi	r21, 0xC2	; 194
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_uartInit>
// ----------- Register the statusLED -----------
	//segled_init(&_led_display_);
}
     f70:	08 95       	ret

00000f72 <__vector_36>:
#endif

#ifndef USART1_RX_vect
# error Uart1 Rx complete vector undefined
#else
ISR(USART1_RX_vect){
     f72:	1f 92       	push	r1
     f74:	0f 92       	push	r0
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	0f 92       	push	r0
     f7a:	11 24       	eor	r1, r1
     f7c:	2f 93       	push	r18
     f7e:	3f 93       	push	r19
     f80:	4f 93       	push	r20
     f82:	5f 93       	push	r21
     f84:	6f 93       	push	r22
     f86:	7f 93       	push	r23
     f88:	8f 93       	push	r24
     f8a:	9f 93       	push	r25
     f8c:	af 93       	push	r26
     f8e:	bf 93       	push	r27
     f90:	ef 93       	push	r30
     f92:	ff 93       	push	r31
	uartReceiveService(_C_uart1);
     f94:	e0 91 40 02 	lds	r30, 0x0240
     f98:	f0 91 41 02 	lds	r31, 0x0241
     f9c:	60 81       	ld	r22, Z
     f9e:	84 e1       	ldi	r24, 0x14	; 20
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	0e 94 87 11 	call	0x230e	; 0x230e <__uartReceiveService>
}
     fa6:	ff 91       	pop	r31
     fa8:	ef 91       	pop	r30
     faa:	bf 91       	pop	r27
     fac:	af 91       	pop	r26
     fae:	9f 91       	pop	r25
     fb0:	8f 91       	pop	r24
     fb2:	7f 91       	pop	r23
     fb4:	6f 91       	pop	r22
     fb6:	5f 91       	pop	r21
     fb8:	4f 91       	pop	r20
     fba:	3f 91       	pop	r19
     fbc:	2f 91       	pop	r18
     fbe:	0f 90       	pop	r0
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	0f 90       	pop	r0
     fc4:	1f 90       	pop	r1
     fc6:	18 95       	reti

00000fc8 <__vector_38>:
HW_UART __C_uart1 = MAKE_UART_BUFFERED(null,null,UCSR1A,UCSR1B,UBRR1L,UBRR1H,UDR1,null,BV(U2X1),D2,D3,&uart1GetByte,&uart1SendByte);

#ifndef USART1_TX_vect
# error Uart1 Tx complete vector undefined
#else
ISR(USART1_TX_vect){
     fc8:	1f 92       	push	r1
     fca:	0f 92       	push	r0
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	0f 92       	push	r0
     fd0:	11 24       	eor	r1, r1
     fd2:	2f 93       	push	r18
     fd4:	3f 93       	push	r19
     fd6:	4f 93       	push	r20
     fd8:	5f 93       	push	r21
     fda:	6f 93       	push	r22
     fdc:	7f 93       	push	r23
     fde:	8f 93       	push	r24
     fe0:	9f 93       	push	r25
     fe2:	af 93       	push	r26
     fe4:	bf 93       	push	r27
     fe6:	ef 93       	push	r30
     fe8:	ff 93       	push	r31
	uartTransmitService(_C_uart1);
     fea:	84 e1       	ldi	r24, 0x14	; 20
     fec:	92 e0       	ldi	r25, 0x02	; 2
     fee:	0e 94 32 12 	call	0x2464	; 0x2464 <__uartTransmitService>
}
     ff2:	ff 91       	pop	r31
     ff4:	ef 91       	pop	r30
     ff6:	bf 91       	pop	r27
     ff8:	af 91       	pop	r26
     ffa:	9f 91       	pop	r25
     ffc:	8f 91       	pop	r24
     ffe:	7f 91       	pop	r23
    1000:	6f 91       	pop	r22
    1002:	5f 91       	pop	r21
    1004:	4f 91       	pop	r20
    1006:	3f 91       	pop	r19
    1008:	2f 91       	pop	r18
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	0f 90       	pop	r0
    1010:	1f 90       	pop	r1
    1012:	18 95       	reti

00001014 <uart1GetByte>:
}

// Create a routine to read a byte from uart1
// Returns -1 if there was no data
MAKE_READER( uart1GetByte){
	return uartGetByte(_C_uart1);
    1014:	84 e1       	ldi	r24, 0x14	; 20
    1016:	92 e0       	ldi	r25, 0x02	; 2
    1018:	0e 94 a1 11 	call	0x2342	; 0x2342 <__uartGetByte>
}
    101c:	08 95       	ret

0000101e <uart1SendByte>:

// ------------------- uart1 -------------------

// Create a routine to write bytes to uart1
// You can set rprintf to use it by calling rprintfInit(&uart1SendByte)
MAKE_WRITER(uart1SendByte){
    101e:	68 2f       	mov	r22, r24
	return uartSendByte(_C_uart1,byte);
    1020:	84 e1       	ldi	r24, 0x14	; 20
    1022:	92 e0       	ldi	r25, 0x02	; 2
    1024:	0e 94 28 12 	call	0x2450	; 0x2450 <_uartSendByte>
}
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	08 95       	ret

0000102c <clockGetSnapshot>:
#define STATUS_LED_DDR   DDRC		
#define STATUS_LED_PIN   PC1		
static uint8_t counter;
		

void clockGetSnapshot(TIMER_SNAPSHOT* snapshot){
    102c:	fc 01       	movw	r30, r24
	// Clock timer uses TIMER_MODE_CTC_OCR which generate compare interrupts on channel A
	CRITICAL_SECTION{
    102e:	6f b7       	in	r22, 0x3f	; 63
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
    1030:	f8 94       	cli
		// get the current ticks from the timer
		uint16_t tcnt = TCNT5;
    1032:	80 91 24 01 	lds	r24, 0x0124
    1036:	90 91 25 01 	lds	r25, 0x0125
		// get the number of whole ticks
		snapshot->whole  = wholeTicks;
    103a:	20 91 ba 03 	lds	r18, 0x03BA
    103e:	30 91 bb 03 	lds	r19, 0x03BB
    1042:	40 91 bc 03 	lds	r20, 0x03BC
    1046:	50 91 bd 03 	lds	r21, 0x03BD
    104a:	20 83       	st	Z, r18
    104c:	31 83       	std	Z+1, r19	; 0x01
    104e:	42 83       	std	Z+2, r20	; 0x02
    1050:	53 83       	std	Z+3, r21	; 0x03
		// get the current ticks again
		snapshot->part   = TCNT5;
    1052:	20 91 24 01 	lds	r18, 0x0124
    1056:	30 91 25 01 	lds	r19, 0x0125
    105a:	35 83       	std	Z+5, r19	; 0x05
    105c:	24 83       	std	Z+4, r18	; 0x04
		// If the second reading of tcnt has gone down then there must have been an overflow
		// since reading the 'rtn' value. Or there may be a pending interrupt which may be
		// because interrupts are currently turned off. In either case increment the 'rtn' value
		// as if the interrupt has happened
		if(snapshot->part < tcnt || CLOCK_INT_PENDING ){
    105e:	28 17       	cp	r18, r24
    1060:	39 07       	cpc	r19, r25
    1062:	10 f0       	brcs	.+4      	; 0x1068 <clockGetSnapshot+0x3c>
    1064:	d1 9b       	sbis	0x1a, 1	; 26
    1066:	12 c0       	rjmp	.+36     	; 0x108c <clockGetSnapshot+0x60>
			snapshot->whole += usPerTop;
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	a2 81       	ldd	r26, Z+2	; 0x02
    106e:	b3 81       	ldd	r27, Z+3	; 0x03
    1070:	80 50       	subi	r24, 0x00	; 0
    1072:	93 48       	sbci	r25, 0x83	; 131
    1074:	af 4f       	sbci	r26, 0xFF	; 255
    1076:	bf 4f       	sbci	r27, 0xFF	; 255
    1078:	80 83       	st	Z, r24
    107a:	91 83       	std	Z+1, r25	; 0x01
    107c:	a2 83       	std	Z+2, r26	; 0x02
    107e:	b3 83       	std	Z+3, r27	; 0x03
			// get the current ticks again
			snapshot->part = TCNT5;
    1080:	80 91 24 01 	lds	r24, 0x0124
    1084:	90 91 25 01 	lds	r25, 0x0125
    1088:	95 83       	std	Z+5, r25	; 0x05
    108a:	84 83       	std	Z+4, r24	; 0x04
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    108c:	6f bf       	out	0x3f, r22	; 63
		}
	}
}
    108e:	08 95       	ret

00001090 <clockSnapshotToTicks>:

TICK_COUNT clockSnapshotToTicks(const TIMER_SNAPSHOT* snapshot){
    1090:	ef 92       	push	r14
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	fc 01       	movw	r30, r24
	TICK_COUNT rtn = snapshot->whole;
    109a:	e0 80       	ld	r14, Z
    109c:	f1 80       	ldd	r15, Z+1	; 0x01
    109e:	02 81       	ldd	r16, Z+2	; 0x02
    10a0:	13 81       	ldd	r17, Z+3	; 0x03

	// top = usPerTop
	// part     x
	TICK_COUNT frac  = snapshot->part;
    10a2:	64 81       	ldd	r22, Z+4	; 0x04
    10a4:	75 81       	ldd	r23, Z+5	; 0x05
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	90 e0       	ldi	r25, 0x00	; 0
	frac *= usPerTop;
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	3d e7       	ldi	r19, 0x7D	; 125
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__mulsi3>
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	3a ef       	ldi	r19, 0xFA	; 250
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	0e 94 30 1b 	call	0x3660	; 0x3660 <__udivmodsi4>
    10c2:	2e 0d       	add	r18, r14
    10c4:	3f 1d       	adc	r19, r15
    10c6:	40 1f       	adc	r20, r16
    10c8:	51 1f       	adc	r21, r17
	frac /= CLOCK_TOP;

	rtn += frac;

	return rtn;
}
    10ca:	b9 01       	movw	r22, r18
    10cc:	ca 01       	movw	r24, r20
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	ff 90       	pop	r15
    10d4:	ef 90       	pop	r14
    10d6:	08 95       	ret

000010d8 <clockGetus>:

// Get the current clock time in uS
TICK_COUNT clockGetus(void){
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <clockGetus+0xa>
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <clockGetus+0xc>
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <clockGetus+0xe>
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
	TIMER_SNAPSHOT snapshot;
	clockGetSnapshot(&snapshot);
    10ea:	8e 01       	movw	r16, r28
    10ec:	0f 5f       	subi	r16, 0xFF	; 255
    10ee:	1f 4f       	sbci	r17, 0xFF	; 255
    10f0:	c8 01       	movw	r24, r16
    10f2:	0e 94 16 08 	call	0x102c	; 0x102c <clockGetSnapshot>

	return clockSnapshotToTicks(&snapshot);
    10f6:	c8 01       	movw	r24, r16
    10f8:	0e 94 48 08 	call	0x1090	; 0x1090 <clockSnapshotToTicks>
}
    10fc:	26 96       	adiw	r28, 0x06	; 6
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	08 95       	ret

00001112 <__clockInit>:

// Initialise the clock timer and turn it on
void __clockInit(void){
	// Set interrupt pending = false
	CLOCK_INT_CLEAR;
    1112:	d1 9a       	sbi	0x1a, 1	; 26
	
	// Enable interrupts
	CLOCK_INT_ENABLE;
    1114:	e3 e7       	ldi	r30, 0x73	; 115
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	82 60       	ori	r24, 0x02	; 2
    111c:	80 83       	st	Z, r24
}
    111e:	08 95       	ret

00001120 <__vector_47>:

// ISR for clock overflow. Occurs every msPerTop
ISR(TIMER5_COMPA_vect) {
    1120:	1f 92       	push	r1
    1122:	0f 92       	push	r0
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	0f 92       	push	r0
    1128:	11 24       	eor	r1, r1
    112a:	2f 93       	push	r18
    112c:	8f 93       	push	r24
    112e:	9f 93       	push	r25
    1130:	af 93       	push	r26
    1132:	bf 93       	push	r27
	wholeTicks += usPerTop;
    1134:	80 91 ba 03 	lds	r24, 0x03BA
    1138:	90 91 bb 03 	lds	r25, 0x03BB
    113c:	a0 91 bc 03 	lds	r26, 0x03BC
    1140:	b0 91 bd 03 	lds	r27, 0x03BD
    1144:	80 50       	subi	r24, 0x00	; 0
    1146:	93 48       	sbci	r25, 0x83	; 131
    1148:	af 4f       	sbci	r26, 0xFF	; 255
    114a:	bf 4f       	sbci	r27, 0xFF	; 255
    114c:	80 93 ba 03 	sts	0x03BA, r24
    1150:	90 93 bb 03 	sts	0x03BB, r25
    1154:	a0 93 bc 03 	sts	0x03BC, r26
    1158:	b0 93 bd 03 	sts	0x03BD, r27

	
	// Flash the status led if there is an error
	ERROR* err = &__error;
	if(err->errorCode && bit_is_set(STATUS_LED_DDR,STATUS_LED_PIN)){
    115c:	20 91 2b 04 	lds	r18, 0x042B
    1160:	22 23       	and	r18, r18
    1162:	b9 f1       	breq	.+110    	; 0x11d2 <__vector_47+0xb2>
    1164:	39 9b       	sbis	0x07, 1	; 7
    1166:	35 c0       	rjmp	.+106    	; 0x11d2 <__vector_47+0xb2>
		// There is an error and status led pin is an output

		// Decrement any counter
		if(counter){
    1168:	80 91 be 03 	lds	r24, 0x03BE
    116c:	88 23       	and	r24, r24
    116e:	19 f0       	breq	.+6      	; 0x1176 <__vector_47+0x56>
			counter--;
    1170:	81 50       	subi	r24, 0x01	; 1
    1172:	80 93 be 03 	sts	0x03BE, r24
		}
		if(counter==0){
    1176:	80 91 be 03 	lds	r24, 0x03BE
    117a:	88 23       	and	r24, r24
    117c:	51 f5       	brne	.+84     	; 0x11d2 <__vector_47+0xb2>
			// Its time to do something
			if(err->remaining==0){
    117e:	80 91 2c 04 	lds	r24, 0x042C
    1182:	88 23       	and	r24, r24
    1184:	59 f4       	brne	.+22     	; 0x119c <__vector_47+0x7c>
				err->remaining = ABS(err->errorCode);
    1186:	82 2f       	mov	r24, r18
    1188:	99 27       	eor	r25, r25
    118a:	87 fd       	sbrc	r24, 7
    118c:	90 95       	com	r25
    118e:	97 ff       	sbrs	r25, 7
    1190:	03 c0       	rjmp	.+6      	; 0x1198 <__vector_47+0x78>
    1192:	90 95       	com	r25
    1194:	81 95       	neg	r24
    1196:	9f 4f       	sbci	r25, 0xFF	; 255
    1198:	80 93 2c 04 	sts	0x042C, r24
			}

			uint8_t delay = (err->errorCode < 0 ) ? 250/msPerTop : 500/msPerTop;
    119c:	27 fd       	sbrc	r18, 7
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <__vector_47+0x84>
    11a0:	9f e0       	ldi	r25, 0x0F	; 15
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <__vector_47+0x86>
    11a4:	97 e0       	ldi	r25, 0x07	; 7
			if(err->phase){
    11a6:	20 91 2d 04 	lds	r18, 0x042D
    11aa:	22 23       	and	r18, r18
    11ac:	41 f0       	breq	.+16     	; 0x11be <__vector_47+0x9e>
				// turn led off
				if(-- err->remaining == 0){
    11ae:	80 91 2c 04 	lds	r24, 0x042C
    11b2:	81 50       	subi	r24, 0x01	; 1
    11b4:	80 93 2c 04 	sts	0x042C, r24
    11b8:	88 23       	and	r24, r24
    11ba:	09 f4       	brne	.+2      	; 0x11be <__vector_47+0x9e>
    11bc:	9e e3       	ldi	r25, 0x3E	; 62
					delay = 2000/msPerTop;
				}
			}else{
				// turn led on
			}
			err->phase = !err->phase;
    11be:	10 92 2d 04 	sts	0x042D, r1
    11c2:	22 23       	and	r18, r18
    11c4:	19 f4       	brne	.+6      	; 0x11cc <__vector_47+0xac>
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	80 93 2d 04 	sts	0x042D, r24
			counter = delay;
    11cc:	90 93 be 03 	sts	0x03BE, r25
			// toggle the LED
			sbi(STATUS_LED_INPUT,STATUS_LED_PIN);
    11d0:	31 9a       	sbi	0x06, 1	; 6
		}
	}
	
}
    11d2:	bf 91       	pop	r27
    11d4:	af 91       	pop	r26
    11d6:	9f 91       	pop	r25
    11d8:	8f 91       	pop	r24
    11da:	2f 91       	pop	r18
    11dc:	0f 90       	pop	r0
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	0f 90       	pop	r0
    11e2:	1f 90       	pop	r1
    11e4:	18 95       	reti

000011e6 <_ZN6Stream4_putEcP6__file>:
	// Send a block of bytes from program memory
	size_t write_P(const void *src, size_t len);

	// All stream oriented devices must support
	// the following methods
	virtual int write(uint8_t c) = 0;
    11e6:	28 2f       	mov	r18, r24
	virtual int read(void) = 0;
    11e8:	61 15       	cp	r22, r1
    11ea:	71 05       	cpc	r23, r1
    11ec:	19 f4       	brne	.+6      	; 0x11f4 <_ZN6Stream4_putEcP6__file+0xe>
    11ee:	a0 e0       	ldi	r26, 0x00	; 0
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <_ZN6Stream4_putEcP6__file+0x12>
    11f4:	db 01       	movw	r26, r22
    11f6:	12 97       	sbiw	r26, 0x02	; 2

    11f8:	ed 91       	ld	r30, X+
    11fa:	fc 91       	ld	r31, X
    11fc:	11 97       	sbiw	r26, 0x01	; 1
    11fe:	01 90       	ld	r0, Z+
    1200:	f0 81       	ld	r31, Z
    1202:	e0 2d       	mov	r30, r0
    1204:	cd 01       	movw	r24, r26
    1206:	62 2f       	mov	r22, r18
    1208:	09 95       	icall
private:
    120a:	08 95       	ret

0000120c <_ZN6Stream4_getEP6__file>:
	 * when using commands from stdio.h
	 * This is passed on to the write of our C++ object
	 */
	static int	_put(char c, STREAM *s){
		Stream* str = (Stream*)s;
		return str->write((uint8_t)c);
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	19 f4       	brne	.+6      	; 0x1216 <_ZN6Stream4_getEP6__file+0xa>
    1210:	a0 e0       	ldi	r26, 0x00	; 0
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	02 c0       	rjmp	.+4      	; 0x121a <_ZN6Stream4_getEP6__file+0xe>
    1216:	dc 01       	movw	r26, r24
    1218:	12 97       	sbiw	r26, 0x02	; 2
	}
    121a:	ed 91       	ld	r30, X+
    121c:	fc 91       	ld	r31, X
    121e:	11 97       	sbiw	r26, 0x01	; 1
    1220:	02 80       	ldd	r0, Z+2	; 0x02
    1222:	f3 81       	ldd	r31, Z+3	; 0x03
    1224:	e0 2d       	mov	r30, r0
    1226:	cd 01       	movw	r24, r26
    1228:	09 95       	icall

    122a:	08 95       	ret

0000122c <_ZN10NullStream5writeEh>:
	 * when using commands from stdio.h
	 * This is passed on to the read of our C++ object
	 */
	static int	_get(STREAM *s){
		Stream* str = (Stream*)s;
		return str->read();
    122c:	86 2f       	mov	r24, r22
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	08 95       	ret

00001232 <_ZN10NullStream4readEv>:
	}
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	9f ef       	ldi	r25, 0xFF	; 255
    1236:	08 95       	ret

00001238 <_ZN7Marquee4readEv>:
public:
	Marquee(MARQUEE* cstr) {m_cstr = cstr;}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){return marqueeSendByte(m_cstr,data);}
	virtual int read(void){return EOF;}
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	9f ef       	ldi	r25, 0xFF	; 255
    123c:	08 95       	ret

0000123e <_Z10_cpp_Init_v>:
UartHW uart1(_C_uart1);
#include <Stream/Stream.h>
NullStream nullStream;

void __attribute__ ((constructor)) _cpp_Init_(void){
	stdin = stdout = uart1;
    123e:	87 ee       	ldi	r24, 0xE7	; 231
    1240:	93 e0       	ldi	r25, 0x03	; 3
    1242:	90 93 3a 04 	sts	0x043A, r25
    1246:	80 93 39 04 	sts	0x0439, r24
    124a:	90 93 38 04 	sts	0x0438, r25
    124e:	80 93 37 04 	sts	0x0437, r24
	stderr = uart1;
    1252:	90 93 3c 04 	sts	0x043C, r25
    1256:	80 93 3b 04 	sts	0x043B, r24
}
    125a:	08 95       	ret

0000125c <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void){
    125c:	ff cf       	rjmp	.-2      	; 0x125c <__cxa_pure_virtual>

0000125e <_GLOBAL__I_statusLed>:
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class Led {
public:
	Led(LED * cstr){m_cstr = cstr;};
    125e:	80 e3       	ldi	r24, 0x30	; 48
    1260:	94 e0       	ldi	r25, 0x04	; 4
    1262:	90 93 c2 03 	sts	0x03C2, r25
    1266:	80 93 c1 03 	sts	0x03C1, r24
	LED* m_cstr;
};

class StatusLed : public Led {
public:
	StatusLed(LED * cstr) : Led(cstr){
    126a:	83 ec       	ldi	r24, 0xC3	; 195
    126c:	92 e0       	ldi	r25, 0x02	; 2
    126e:	90 93 c0 03 	sts	0x03C0, r25
    1272:	80 93 bf 03 	sts	0x03BF, r24
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class Switch {
public:
	Switch(SWITCH * cstr){m_cstr = cstr;};
    1276:	86 e4       	ldi	r24, 0x46	; 70
    1278:	92 e0       	ldi	r25, 0x02	; 2
    127a:	90 93 c4 03 	sts	0x03C4, r25
    127e:	80 93 c3 03 	sts	0x03C3, r24
#include <stdio.h>
#ifndef _STREAM_H
#define _STREAM_H


#ifdef __cplusplus
    1282:	63 ef       	ldi	r22, 0xF3	; 243
    1284:	78 e0       	ldi	r23, 0x08	; 8
    1286:	70 93 d0 03 	sts	0x03D0, r23
    128a:	60 93 cf 03 	sts	0x03CF, r22
    128e:	46 e0       	ldi	r20, 0x06	; 6
    1290:	59 e0       	ldi	r21, 0x09	; 9
    1292:	50 93 d2 03 	sts	0x03D2, r21
    1296:	40 93 d1 03 	sts	0x03D1, r20
    129a:	a3 e0       	ldi	r26, 0x03	; 3
    129c:	a0 93 ca 03 	sts	0x03CA, r26
    12a0:	10 92 d4 03 	sts	0x03D4, r1
    12a4:	10 92 d3 03 	sts	0x03D3, r1
};


class Marquee : public Stream {
public:
	Marquee(MARQUEE* cstr) {m_cstr = cstr;}
    12a8:	8f ec       	ldi	r24, 0xCF	; 207
    12aa:	92 e0       	ldi	r25, 0x02	; 2
    12ac:	90 93 c6 03 	sts	0x03C6, r25
    12b0:	80 93 c5 03 	sts	0x03C5, r24
    12b4:	89 e5       	ldi	r24, 0x59	; 89
    12b6:	92 e0       	ldi	r25, 0x02	; 2
    12b8:	90 93 d6 03 	sts	0x03D6, r25
    12bc:	80 93 d5 03 	sts	0x03D5, r24
#ifdef __cplusplus
}
class Actuator{
public:
	Actuator(__ACTUATOR* cstr){
		m_cstr = cstr;
    12c0:	80 e7       	ldi	r24, 0x70	; 112
    12c2:	92 e0       	ldi	r25, 0x02	; 2
    12c4:	90 93 d8 03 	sts	0x03D8, r25
    12c8:	80 93 d7 03 	sts	0x03D7, r24
#ifdef __cplusplus
}
class Servo : public Actuator{
public:
	Servo(SERVO* cstr) : Actuator(&cstr->actuator){
		m_cstr = cstr;
    12cc:	90 93 da 03 	sts	0x03DA, r25
    12d0:	80 93 d9 03 	sts	0x03D9, r24
    12d4:	86 e8       	ldi	r24, 0x86	; 134
    12d6:	92 e0       	ldi	r25, 0x02	; 2
    12d8:	90 93 dc 03 	sts	0x03DC, r25
    12dc:	80 93 db 03 	sts	0x03DB, r24
    12e0:	90 93 de 03 	sts	0x03DE, r25
    12e4:	80 93 dd 03 	sts	0x03DD, r24
    12e8:	8c e9       	ldi	r24, 0x9C	; 156
    12ea:	92 e0       	ldi	r25, 0x02	; 2
    12ec:	90 93 e0 03 	sts	0x03E0, r25
    12f0:	80 93 df 03 	sts	0x03DF, r24
    12f4:	90 93 e2 03 	sts	0x03E2, r25
    12f8:	80 93 e1 03 	sts	0x03E1, r24
};

class ServoDriver{
public:
	ServoDriver(SERVO_DRIVER* cstr){
		driver = cstr;
    12fc:	82 eb       	ldi	r24, 0xB2	; 178
    12fe:	92 e0       	ldi	r25, 0x02	; 2
    1300:	90 93 e4 03 	sts	0x03E4, r25
    1304:	80 93 e3 03 	sts	0x03E3, r24
    1308:	70 93 f0 03 	sts	0x03F0, r23
    130c:	60 93 ef 03 	sts	0x03EF, r22
    1310:	50 93 f2 03 	sts	0x03F2, r21
    1314:	40 93 f1 03 	sts	0x03F1, r20
    1318:	a0 93 ea 03 	sts	0x03EA, r26
    131c:	10 92 f4 03 	sts	0x03F4, r1
    1320:	10 92 f3 03 	sts	0x03F3, r1
/* ===================== C++ Wrapper Code ===============================================*/
#include "Stream/Stream.h"
class Uart : public Stream {
public:
	Uart(UART * cstr): Stream(){
		m_cstr = cstr;
    1324:	24 e1       	ldi	r18, 0x14	; 20
    1326:	32 e0       	ldi	r19, 0x02	; 2
    1328:	30 93 f6 03 	sts	0x03F6, r19
    132c:	20 93 f5 03 	sts	0x03F5, r18
		cstr->cpp = this;
    1330:	e5 ee       	ldi	r30, 0xE5	; 229
    1332:	f3 e0       	ldi	r31, 0x03	; 3
    1334:	f0 93 2a 02 	sts	0x022A, r31
    1338:	e0 93 29 02 	sts	0x0229, r30
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class UartHW : public Uart {
public:
	UartHW(HW_UART* uart) : Uart(&uart->_uart_){
    133c:	8f ed       	ldi	r24, 0xDF	; 223
    133e:	92 e0       	ldi	r25, 0x02	; 2
    1340:	91 83       	std	Z+1, r25	; 0x01
    1342:	80 83       	st	Z, r24
		m_hw = uart;
    1344:	30 93 fc 03 	sts	0x03FC, r19
    1348:	20 93 fb 03 	sts	0x03FB, r18
		m_polling = FALSE;
    134c:	10 92 fd 03 	sts	0x03FD, r1
    1350:	70 93 09 04 	sts	0x0409, r23
    1354:	60 93 08 04 	sts	0x0408, r22
    1358:	50 93 0b 04 	sts	0x040B, r21
    135c:	40 93 0a 04 	sts	0x040A, r20
    1360:	a0 93 03 04 	sts	0x0403, r26
    1364:	10 92 0d 04 	sts	0x040D, r1
    1368:	10 92 0c 04 	sts	0x040C, r1
	/* function to read one char from device
	 * Called directly from the C FILE code
	 * when using commands from stdio.h
	 * This is passed on to the read of our C++ object
	 */
	static int	_get(STREAM *s){
    136c:	8f ee       	ldi	r24, 0xEF	; 239
    136e:	92 e0       	ldi	r25, 0x02	; 2
    1370:	90 93 ff 03 	sts	0x03FF, r25
    1374:	80 93 fe 03 	sts	0x03FE, r24
	while(1);
}
    1378:	08 95       	ret

0000137a <_ZNK9StatusLed3setEa>:
	}

	virtual void set(boolean value) const{
    137a:	1f 93       	push	r17
    137c:	16 2f       	mov	r17, r22
		LED_off(&statusLED);
	}
}

static __inline__ void statusLED_set(boolean value){
	if(pin_is_output(statusLED.pin)){
    137e:	80 91 30 04 	lds	r24, 0x0430
    1382:	90 91 31 04 	lds	r25, 0x0431
    1386:	0e 94 99 0c 	call	0x1932	; 0x1932 <pin_is_output>
    138a:	88 23       	and	r24, r24
    138c:	29 f0       	breq	.+10     	; 0x1398 <_ZNK9StatusLed3setEa+0x1e>
		LED_set(&statusLED, value);
    138e:	80 e3       	ldi	r24, 0x30	; 48
    1390:	94 e0       	ldi	r25, 0x04	; 4
    1392:	61 2f       	mov	r22, r17
    1394:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <LED_set>
	StatusLed(LED * cstr) : Led(cstr){
	}

	virtual void set(boolean value) const{
		statusLED_set(value);
	}
    1398:	1f 91       	pop	r17
    139a:	08 95       	ret

0000139c <_ZNK3Led3setEa>:
	}
	void off(void) const{
		set(FALSE);
	}
	virtual void set(boolean value) const{
		LED_set(m_cstr,value);
    139c:	fc 01       	movw	r30, r24
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <LED_set>
	}
    13a6:	08 95       	ret

000013a8 <_ZN7Marquee5writeEh>:

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){return marqueeSendByte(m_cstr,data);}
    13a8:	fc 01       	movw	r30, r24
    13aa:	80 89       	ldd	r24, Z+16	; 0x10
    13ac:	91 89       	ldd	r25, Z+17	; 0x11
    13ae:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <marqueeSendByte>
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	08 95       	ret

000013b6 <_ZN6UartHW4readEv>:
	};

	virtual int read(void){
    13b6:	fc 01       	movw	r30, r24
		int ch;

		if(m_polling){
    13b8:	80 8d       	ldd	r24, Z+24	; 0x18
    13ba:	88 23       	and	r24, r24
    13bc:	29 f0       	breq	.+10     	; 0x13c8 <_ZN6UartHW4readEv+0x12>
			ch = uartPollByte(m_hw);
    13be:	86 89       	ldd	r24, Z+22	; 0x16
    13c0:	97 89       	ldd	r25, Z+23	; 0x17
    13c2:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uartPollByte>
    13c6:	08 95       	ret
		}else{
			ch = __uartGetByte(m_cstr);
    13c8:	80 89       	ldd	r24, Z+16	; 0x10
    13ca:	91 89       	ldd	r25, Z+17	; 0x11
    13cc:	0e 94 a1 11 	call	0x2342	; 0x2342 <__uartGetByte>
		}

		return ch;
	}
    13d0:	08 95       	ret

000013d2 <_ZN4Uart4readEv>:
	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
		return _uartSendByte(m_cstr, data);
	}
	virtual int read(void){
		return __uartGetByte(m_cstr);
    13d2:	fc 01       	movw	r30, r24
    13d4:	80 89       	ldd	r24, Z+16	; 0x10
    13d6:	91 89       	ldd	r25, Z+17	; 0x11
    13d8:	0e 94 a1 11 	call	0x2342	; 0x2342 <__uartGetByte>
	}
    13dc:	08 95       	ret

000013de <_ZN4Uart5writeEh>:
		return m_cstr;
	}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
		return _uartSendByte(m_cstr, data);
    13de:	fc 01       	movw	r30, r24
    13e0:	80 89       	ldd	r24, Z+16	; 0x10
    13e2:	91 89       	ldd	r25, Z+17	; 0x11
    13e4:	0e 94 28 12 	call	0x2450	; 0x2450 <_uartSendByte>
	}
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	08 95       	ret

000013ec <__initTimers>:
// Private methods

//int __timerPrescalerIndex(const Timer* timer, uint16_t prescaler);

static __inline__ TimerData* timerGetData(const Timer* timer){
	return (TimerData*)pgm_read_word(&timer->pgm_data);
    13ec:	24 ea       	ldi	r18, 0xA4	; 164
    13ee:	32 e0       	ldi	r19, 0x02	; 2
    13f0:	f9 01       	movw	r30, r18
    13f2:	a5 91       	lpm	r26, Z+
    13f4:	b4 91       	lpm	r27, Z+
 
// Set Timer4 to the following:-
//		Mode 	 = TIMER_MODE_PWM_FAST_ICR
//		Prescale = 8
	// Save the timer mode
	timerGetData(&pgm_Timers[4])->mode = TIMER_MODE_PWM_FAST_ICR;
    13f6:	8e e0       	ldi	r24, 0x0E	; 14
    13f8:	1a 96       	adiw	r26, 0x0a	; 10
    13fa:	8c 93       	st	X, r24
    13fc:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR4A,WGM40);
	} 
		
			
	if(14 & 2){
		sbi(TCCR4A,WGM41);
    13fe:	e0 ea       	ldi	r30, 0xA0	; 160
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	82 60       	ori	r24, 0x02	; 2
    1406:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 4){
		sbi(TCCR4B,WGM42);
    1408:	e1 ea       	ldi	r30, 0xA1	; 161
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	88 60       	ori	r24, 0x08	; 8
    1410:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 8){
		sbi(TCCR4B,WGM43);
    1412:	80 81       	ld	r24, Z
    1414:	80 61       	ori	r24, 0x10	; 16
    1416:	80 83       	st	Z, r24
	} 
		
	// Top is stored in ICR register
	ICR4 = 40000;			
    1418:	80 e4       	ldi	r24, 0x40	; 64
    141a:	9c e9       	ldi	r25, 0x9C	; 156
    141c:	90 93 a7 00 	sts	0x00A7, r25
    1420:	80 93 a6 00 	sts	0x00A6, r24
			
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[4])->prescale_value = 8;
    1424:	48 e0       	ldi	r20, 0x08	; 8
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	4d 93       	st	X+, r20
    142a:	5c 93       	st	X, r21
	TCCR4B |= 2;
    142c:	80 81       	ld	r24, Z
    142e:	82 60       	ori	r24, 0x02	; 2
    1430:	80 83       	st	Z, r24
    1432:	24 5d       	subi	r18, 0xD4	; 212
    1434:	3f 4f       	sbci	r19, 0xFF	; 255
    1436:	f9 01       	movw	r30, r18
    1438:	a5 91       	lpm	r26, Z+
    143a:	b4 91       	lpm	r27, Z+
	 
// Set Timer5 to the following:-
//		Mode 	 = TIMER_MODE_CTC_OCR
//		Prescale = 8
	// Save the timer mode
	timerGetData(&pgm_Timers[5])->mode = TIMER_MODE_CTC_OCR;
    143c:	84 e0       	ldi	r24, 0x04	; 4
    143e:	1a 96       	adiw	r26, 0x0a	; 10
    1440:	8c 93       	st	X, r24
    1442:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR5A,WGM51);
	} 
		
			
	if(4 & 4){
		sbi(TCCR5B,WGM52);
    1444:	e1 e2       	ldi	r30, 0x21	; 33
    1446:	f1 e0       	ldi	r31, 0x01	; 1
    1448:	80 81       	ld	r24, Z
    144a:	88 60       	ori	r24, 0x08	; 8
    144c:	80 83       	st	Z, r24
	if(4 & 8){
		sbi(TCCR5B,WGM53);
	} 
		
	// Top is stored in Compare A OCR
				OCR5A = 64000;			
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	9a ef       	ldi	r25, 0xFA	; 250
    1452:	90 93 29 01 	sts	0x0129, r25
    1456:	80 93 28 01 	sts	0x0128, r24
				
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[5])->prescale_value = 8;
    145a:	4d 93       	st	X+, r20
    145c:	5c 93       	st	X, r21
	TCCR5B |= 2;
    145e:	80 81       	ld	r24, Z
    1460:	82 60       	ori	r24, 0x02	; 2
    1462:	80 83       	st	Z, r24
	}
    1464:	08 95       	ret

00001466 <servoPWMInit>:
    1466:	8f 92       	push	r8
    1468:	9f 92       	push	r9
    146a:	af 92       	push	r10
    146c:	bf 92       	push	r11
    146e:	cf 92       	push	r12
    1470:	df 92       	push	r13
    1472:	ef 92       	push	r14
    1474:	ff 92       	push	r15
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	6c 01       	movw	r12, r24
    1480:	dc 01       	movw	r26, r24
    1482:	12 96       	adiw	r26, 0x02	; 2
    1484:	8c 91       	ld	r24, X
    1486:	c8 2f       	mov	r28, r24
    1488:	d0 e0       	ldi	r29, 0x00	; 0
    148a:	21 97       	sbiw	r28, 0x01	; 1
    148c:	7e 01       	movw	r14, r28
    148e:	ee 0c       	add	r14, r14
    1490:	ff 1c       	adc	r15, r15
    1492:	9f e7       	ldi	r25, 0x7F	; 127
    1494:	89 2e       	mov	r8, r25
    1496:	93 e0       	ldi	r25, 0x03	; 3
    1498:	99 2e       	mov	r9, r25
    149a:	8c e2       	ldi	r24, 0x2C	; 44
    149c:	a8 2e       	mov	r10, r24
    149e:	47 c0       	rjmp	.+142    	; 0x152e <servoPWMInit+0xc8>
    14a0:	d6 01       	movw	r26, r12
    14a2:	ed 91       	ld	r30, X+
    14a4:	fc 91       	ld	r31, X
    14a6:	ee 0d       	add	r30, r14
    14a8:	ff 1d       	adc	r31, r15
    14aa:	05 91       	lpm	r16, Z+
    14ac:	14 91       	lpm	r17, Z+
    14ae:	f8 01       	movw	r30, r16
    14b0:	d5 82       	std	Z+5, r13	; 0x05
    14b2:	c4 82       	std	Z+4, r12	; 0x04
    14b4:	86 81       	ldd	r24, Z+6	; 0x06
    14b6:	97 81       	ldd	r25, Z+7	; 0x07
    14b8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <compareFromIOPin>
    14bc:	fc 01       	movw	r30, r24
    14be:	d8 01       	movw	r26, r16
    14c0:	55 96       	adiw	r26, 0x15	; 21
    14c2:	9c 93       	st	X, r25
    14c4:	8e 93       	st	-X, r24
    14c6:	54 97       	sbiw	r26, 0x14	; 20
    14c8:	32 96       	adiw	r30, 0x02	; 2
    14ca:	b4 90       	lpm	r11, Z+
    14cc:	11 96       	adiw	r26, 0x01	; 1
    14ce:	9c 92       	st	X, r9
    14d0:	8e 92       	st	-X, r8
    14d2:	16 96       	adiw	r26, 0x06	; 6
    14d4:	8d 91       	ld	r24, X+
    14d6:	9c 91       	ld	r25, X
    14d8:	17 97       	sbiw	r26, 0x07	; 7
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <pin_make_output>
    14e0:	ba 9c       	mul	r11, r10
    14e2:	c0 01       	movw	r24, r0
    14e4:	11 24       	eor	r1, r1
    14e6:	8d 5e       	subi	r24, 0xED	; 237
    14e8:	9d 4f       	sbci	r25, 0xFD	; 253
    14ea:	fc 01       	movw	r30, r24
    14ec:	a5 91       	lpm	r26, Z+
    14ee:	b4 91       	lpm	r27, Z+
    14f0:	8d 91       	ld	r24, X+
    14f2:	9c 91       	ld	r25, X
    14f4:	d8 01       	movw	r26, r16
    14f6:	53 96       	adiw	r26, 0x13	; 19
    14f8:	9c 93       	st	X, r25
    14fa:	8e 93       	st	-X, r24
    14fc:	52 97       	sbiw	r26, 0x12	; 18
    14fe:	18 96       	adiw	r26, 0x08	; 8
    1500:	6d 91       	ld	r22, X+
    1502:	7c 91       	ld	r23, X
    1504:	19 97       	sbiw	r26, 0x09	; 9
    1506:	1a 96       	adiw	r26, 0x0a	; 10
    1508:	4d 91       	ld	r20, X+
    150a:	5c 91       	ld	r21, X
    150c:	1b 97       	sbiw	r26, 0x0b	; 11
    150e:	c8 01       	movw	r24, r16
    1510:	0e 94 cf 0a 	call	0x159e	; 0x159e <servoSetConfig>
    1514:	c8 01       	movw	r24, r16
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__act_setSpeed>
    151c:	c8 01       	movw	r24, r16
    151e:	6f ef       	ldi	r22, 0xFF	; 255
    1520:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__act_setConnected>
    1524:	21 97       	sbiw	r28, 0x01	; 1
    1526:	ee ef       	ldi	r30, 0xFE	; 254
    1528:	ff ef       	ldi	r31, 0xFF	; 255
    152a:	ee 0e       	add	r14, r30
    152c:	ff 1e       	adc	r15, r31
    152e:	ff ef       	ldi	r31, 0xFF	; 255
    1530:	cf 3f       	cpi	r28, 0xFF	; 255
    1532:	df 07       	cpc	r29, r31
    1534:	09 f0       	breq	.+2      	; 0x1538 <servoPWMInit+0xd2>
    1536:	b4 cf       	rjmp	.-152    	; 0x14a0 <servoPWMInit+0x3a>
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	ff 90       	pop	r15
    1542:	ef 90       	pop	r14
    1544:	df 90       	pop	r13
    1546:	cf 90       	pop	r12
    1548:	bf 90       	pop	r11
    154a:	af 90       	pop	r10
    154c:	9f 90       	pop	r9
    154e:	8f 90       	pop	r8
    1550:	08 95       	ret

00001552 <setConnected>:
    1552:	fc 01       	movw	r30, r24
    1554:	84 89       	ldd	r24, Z+20	; 0x14
    1556:	95 89       	ldd	r25, Z+21	; 0x15
    1558:	61 11       	cpse	r22, r1
    155a:	62 e0       	ldi	r22, 0x02	; 2
    155c:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <compareSetOutputMode>
    1560:	08 95       	ret

00001562 <setSpeed>:
    1562:	ef 92       	push	r14
    1564:	ff 92       	push	r15
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	fc 01       	movw	r30, r24
    156c:	e4 88       	ldd	r14, Z+20	; 0x14
    156e:	f5 88       	ldd	r15, Z+21	; 0x15
    1570:	24 85       	ldd	r18, Z+12	; 0x0c
    1572:	35 85       	ldd	r19, Z+13	; 0x0d
    1574:	06 85       	ldd	r16, Z+14	; 0x0e
    1576:	17 85       	ldd	r17, Z+15	; 0x0f
    1578:	86 2f       	mov	r24, r22
    157a:	99 27       	eor	r25, r25
    157c:	87 fd       	sbrc	r24, 7
    157e:	90 95       	com	r25
    1580:	61 e8       	ldi	r22, 0x81	; 129
    1582:	7f ef       	ldi	r23, 0xFF	; 255
    1584:	4f e7       	ldi	r20, 0x7F	; 127
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	0e 94 ed 0b 	call	0x17da	; 0x17da <interpolateU>
    158c:	bc 01       	movw	r22, r24
    158e:	c7 01       	movw	r24, r14
    1590:	0e 94 12 10 	call	0x2024	; 0x2024 <compareSetThreshold>
    1594:	1f 91       	pop	r17
    1596:	0f 91       	pop	r16
    1598:	ff 90       	pop	r15
    159a:	ef 90       	pop	r14
    159c:	08 95       	ret

0000159e <servoSetConfig>:
    159e:	9f 92       	push	r9
    15a0:	af 92       	push	r10
    15a2:	bf 92       	push	r11
    15a4:	cf 92       	push	r12
    15a6:	df 92       	push	r13
    15a8:	ef 92       	push	r14
    15aa:	ff 92       	push	r15
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	ec 01       	movw	r28, r24
    15b6:	7b 01       	movw	r14, r22
    15b8:	8a 01       	movw	r16, r20
    15ba:	79 87       	std	Y+9, r23	; 0x09
    15bc:	68 87       	std	Y+8, r22	; 0x08
    15be:	5b 87       	std	Y+11, r21	; 0x0b
    15c0:	4a 87       	std	Y+10, r20	; 0x0a
    15c2:	8c 81       	ldd	r24, Y+4	; 0x04
    15c4:	9d 81       	ldd	r25, Y+5	; 0x05
    15c6:	89 2b       	or	r24, r25
    15c8:	09 f4       	brne	.+2      	; 0x15cc <servoSetConfig+0x2e>
    15ca:	5e c0       	rjmp	.+188    	; 0x1688 <servoSetConfig+0xea>
    15cc:	9f b6       	in	r9, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	8a 89       	ldd	r24, Y+18	; 0x12
    15d2:	9b 89       	ldd	r25, Y+19	; 0x13
    15d4:	68 ee       	ldi	r22, 0xE8	; 232
    15d6:	73 e0       	ldi	r23, 0x03	; 3
    15d8:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__udivmodhi4>
    15dc:	5b 01       	movw	r10, r22
    15de:	cc 24       	eor	r12, r12
    15e0:	dd 24       	eor	r13, r13
    15e2:	b7 01       	movw	r22, r14
    15e4:	60 1b       	sub	r22, r16
    15e6:	71 0b       	sbc	r23, r17
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	a6 01       	movw	r20, r12
    15ee:	95 01       	movw	r18, r10
    15f0:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__mulsi3>
    15f4:	24 e1       	ldi	r18, 0x14	; 20
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	50 e0       	ldi	r21, 0x00	; 0
    15fc:	0e 94 30 1b 	call	0x3660	; 0x3660 <__udivmodsi4>
    1600:	c9 01       	movw	r24, r18
    1602:	da 01       	movw	r26, r20
    1604:	9c 01       	movw	r18, r24
    1606:	ad 01       	movw	r20, r26
    1608:	da 01       	movw	r26, r20
    160a:	c9 01       	movw	r24, r18
    160c:	80 70       	andi	r24, 0x00	; 0
    160e:	90 70       	andi	r25, 0x00	; 0
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	a1 05       	cpc	r26, r1
    1614:	b1 05       	cpc	r27, r1
    1616:	39 f0       	breq	.+14     	; 0x1626 <servoSetConfig+0x88>
    1618:	86 ee       	ldi	r24, 0xE6	; 230
    161a:	0e 94 36 0c 	call	0x186c	; 0x186c <setError>
    161e:	2f ef       	ldi	r18, 0xFF	; 255
    1620:	3f ef       	ldi	r19, 0xFF	; 255
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	3d 87       	std	Y+13, r19	; 0x0d
    1628:	2c 87       	std	Y+12, r18	; 0x0c
    162a:	0e 0d       	add	r16, r14
    162c:	1f 1d       	adc	r17, r15
    162e:	b8 01       	movw	r22, r16
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	a6 01       	movw	r20, r12
    1636:	95 01       	movw	r18, r10
    1638:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__mulsi3>
    163c:	24 e1       	ldi	r18, 0x14	; 20
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e0       	ldi	r20, 0x00	; 0
    1642:	50 e0       	ldi	r21, 0x00	; 0
    1644:	0e 94 30 1b 	call	0x3660	; 0x3660 <__udivmodsi4>
    1648:	c9 01       	movw	r24, r18
    164a:	da 01       	movw	r26, r20
    164c:	9c 01       	movw	r18, r24
    164e:	ad 01       	movw	r20, r26
    1650:	da 01       	movw	r26, r20
    1652:	c9 01       	movw	r24, r18
    1654:	80 70       	andi	r24, 0x00	; 0
    1656:	90 70       	andi	r25, 0x00	; 0
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	a1 05       	cpc	r26, r1
    165c:	b1 05       	cpc	r27, r1
    165e:	39 f0       	breq	.+14     	; 0x166e <servoSetConfig+0xd0>
    1660:	86 ee       	ldi	r24, 0xE6	; 230
    1662:	0e 94 36 0c 	call	0x186c	; 0x186c <setError>
    1666:	2f ef       	ldi	r18, 0xFF	; 255
    1668:	3f ef       	ldi	r19, 0xFF	; 255
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	3f 87       	std	Y+15, r19	; 0x0f
    1670:	2e 87       	std	Y+14, r18	; 0x0e
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	80 ff       	sbrs	r24, 0
    1676:	07 c0       	rjmp	.+14     	; 0x1686 <servoSetConfig+0xe8>
    1678:	6a 81       	ldd	r22, Y+2	; 0x02
    167a:	61 50       	subi	r22, 0x01	; 1
    167c:	6a 83       	std	Y+2, r22	; 0x02
    167e:	6f 5f       	subi	r22, 0xFF	; 255
    1680:	ce 01       	movw	r24, r28
    1682:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__act_setSpeed>
    1686:	9f be       	out	0x3f, r9	; 63
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	1f 91       	pop	r17
    168e:	0f 91       	pop	r16
    1690:	ff 90       	pop	r15
    1692:	ef 90       	pop	r14
    1694:	df 90       	pop	r13
    1696:	cf 90       	pop	r12
    1698:	bf 90       	pop	r11
    169a:	af 90       	pop	r10
    169c:	9f 90       	pop	r9
    169e:	08 95       	ret

000016a0 <_ZN6Stream5printEc>:
    16a0:	1f 93       	push	r17
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	ec 01       	movw	r28, r24
    16a8:	16 2f       	mov	r17, r22
    16aa:	6a 30       	cpi	r22, 0x0A	; 10
    16ac:	39 f4       	brne	.+14     	; 0x16bc <_ZN6Stream5printEc+0x1c>
    16ae:	e8 81       	ld	r30, Y
    16b0:	f9 81       	ldd	r31, Y+1	; 0x01
    16b2:	01 90       	ld	r0, Z+
    16b4:	f0 81       	ld	r31, Z
    16b6:	e0 2d       	mov	r30, r0
    16b8:	6d e0       	ldi	r22, 0x0D	; 13
    16ba:	09 95       	icall
    16bc:	e8 81       	ld	r30, Y
    16be:	f9 81       	ldd	r31, Y+1	; 0x01
    16c0:	01 90       	ld	r0, Z+
    16c2:	f0 81       	ld	r31, Z
    16c4:	e0 2d       	mov	r30, r0
    16c6:	ce 01       	movw	r24, r28
    16c8:	61 2f       	mov	r22, r17
    16ca:	09 95       	icall
    16cc:	ce 01       	movw	r24, r28
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	1f 91       	pop	r17
    16d4:	08 95       	ret

000016d6 <__act_setSpeed>:
    16d6:	1f 93       	push	r17
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	ec 01       	movw	r28, r24
    16de:	16 2f       	mov	r17, r22
    16e0:	61 38       	cpi	r22, 0x81	; 129
    16e2:	0c f4       	brge	.+2      	; 0x16e6 <__act_setSpeed+0x10>
    16e4:	11 e8       	ldi	r17, 0x81	; 129
    16e6:	e8 81       	ld	r30, Y
    16e8:	f9 81       	ldd	r31, Y+1	; 0x01
    16ea:	30 97       	sbiw	r30, 0x00	; 0
    16ec:	79 f0       	breq	.+30     	; 0x170c <__act_setSpeed+0x36>
    16ee:	25 91       	lpm	r18, Z+
    16f0:	34 91       	lpm	r19, Z+
    16f2:	21 15       	cp	r18, r1
    16f4:	31 05       	cpc	r19, r1
    16f6:	51 f0       	breq	.+20     	; 0x170c <__act_setSpeed+0x36>
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	81 fd       	sbrc	r24, 1
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <__act_setSpeed+0x2c>
    16fe:	61 2f       	mov	r22, r17
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <__act_setSpeed+0x30>
    1702:	61 2f       	mov	r22, r17
    1704:	61 95       	neg	r22
    1706:	ce 01       	movw	r24, r28
    1708:	f9 01       	movw	r30, r18
    170a:	09 95       	icall
    170c:	1a 83       	std	Y+2, r17	; 0x02
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	08 95       	ret

00001716 <__act_setConnected>:
    1716:	dc 01       	movw	r26, r24
    1718:	96 2f       	mov	r25, r22
    171a:	91 70       	andi	r25, 0x01	; 1
    171c:	13 96       	adiw	r26, 0x03	; 3
    171e:	8c 91       	ld	r24, X
    1720:	13 97       	sbiw	r26, 0x03	; 3
    1722:	8e 7f       	andi	r24, 0xFE	; 254
    1724:	89 2b       	or	r24, r25
    1726:	13 96       	adiw	r26, 0x03	; 3
    1728:	8c 93       	st	X, r24
    172a:	13 97       	sbiw	r26, 0x03	; 3
    172c:	8d 91       	ld	r24, X+
    172e:	9c 91       	ld	r25, X
    1730:	11 97       	sbiw	r26, 0x01	; 1
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	51 f0       	breq	.+20     	; 0x174a <__act_setConnected+0x34>
    1736:	fc 01       	movw	r30, r24
    1738:	32 96       	adiw	r30, 0x02	; 2
    173a:	25 91       	lpm	r18, Z+
    173c:	34 91       	lpm	r19, Z+
    173e:	21 15       	cp	r18, r1
    1740:	31 05       	cpc	r19, r1
    1742:	19 f0       	breq	.+6      	; 0x174a <__act_setConnected+0x34>
    1744:	cd 01       	movw	r24, r26
    1746:	f9 01       	movw	r30, r18
    1748:	09 95       	icall
    174a:	08 95       	ret

0000174c <interpolate>:
    174c:	4f 92       	push	r4
    174e:	5f 92       	push	r5
    1750:	6f 92       	push	r6
    1752:	7f 92       	push	r7
    1754:	8f 92       	push	r8
    1756:	9f 92       	push	r9
    1758:	af 92       	push	r10
    175a:	bf 92       	push	r11
    175c:	cf 92       	push	r12
    175e:	df 92       	push	r13
    1760:	ef 92       	push	r14
    1762:	ff 92       	push	r15
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	2b 01       	movw	r4, r22
    176a:	3a 01       	movw	r6, r20
    176c:	59 01       	movw	r10, r18
    176e:	78 01       	movw	r14, r16
    1770:	e2 1a       	sub	r14, r18
    1772:	f3 0a       	sbc	r15, r19
    1774:	00 27       	eor	r16, r16
    1776:	f7 fc       	sbrc	r15, 7
    1778:	00 95       	com	r16
    177a:	10 2f       	mov	r17, r16
    177c:	9c 01       	movw	r18, r24
    177e:	26 1b       	sub	r18, r22
    1780:	37 0b       	sbc	r19, r23
    1782:	44 27       	eor	r20, r20
    1784:	37 fd       	sbrc	r19, 7
    1786:	40 95       	com	r20
    1788:	54 2f       	mov	r21, r20
    178a:	c8 01       	movw	r24, r16
    178c:	b7 01       	movw	r22, r14
    178e:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__mulsi3>
    1792:	64 18       	sub	r6, r4
    1794:	75 08       	sbc	r7, r5
    1796:	88 24       	eor	r8, r8
    1798:	77 fc       	sbrc	r7, 7
    179a:	80 94       	com	r8
    179c:	98 2c       	mov	r9, r8
    179e:	a4 01       	movw	r20, r8
    17a0:	93 01       	movw	r18, r6
    17a2:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__divmodsi4>
    17a6:	c9 01       	movw	r24, r18
    17a8:	da 01       	movw	r26, r20
    17aa:	cc 24       	eor	r12, r12
    17ac:	b7 fc       	sbrc	r11, 7
    17ae:	c0 94       	com	r12
    17b0:	dc 2c       	mov	r13, r12
    17b2:	a8 0e       	add	r10, r24
    17b4:	b9 1e       	adc	r11, r25
    17b6:	ca 1e       	adc	r12, r26
    17b8:	db 1e       	adc	r13, r27
    17ba:	c5 01       	movw	r24, r10
    17bc:	1f 91       	pop	r17
    17be:	0f 91       	pop	r16
    17c0:	ff 90       	pop	r15
    17c2:	ef 90       	pop	r14
    17c4:	df 90       	pop	r13
    17c6:	cf 90       	pop	r12
    17c8:	bf 90       	pop	r11
    17ca:	af 90       	pop	r10
    17cc:	9f 90       	pop	r9
    17ce:	8f 90       	pop	r8
    17d0:	7f 90       	pop	r7
    17d2:	6f 90       	pop	r6
    17d4:	5f 90       	pop	r5
    17d6:	4f 90       	pop	r4
    17d8:	08 95       	ret

000017da <interpolateU>:
    17da:	4f 92       	push	r4
    17dc:	5f 92       	push	r5
    17de:	6f 92       	push	r6
    17e0:	7f 92       	push	r7
    17e2:	8f 92       	push	r8
    17e4:	9f 92       	push	r9
    17e6:	af 92       	push	r10
    17e8:	bf 92       	push	r11
    17ea:	cf 92       	push	r12
    17ec:	df 92       	push	r13
    17ee:	ef 92       	push	r14
    17f0:	ff 92       	push	r15
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    17f6:	2b 01       	movw	r4, r22
    17f8:	5a 01       	movw	r10, r20
    17fa:	39 01       	movw	r6, r18
    17fc:	78 01       	movw	r14, r16
    17fe:	e2 1a       	sub	r14, r18
    1800:	f3 0a       	sbc	r15, r19
    1802:	00 e0       	ldi	r16, 0x00	; 0
    1804:	10 e0       	ldi	r17, 0x00	; 0
    1806:	9c 01       	movw	r18, r24
    1808:	26 1b       	sub	r18, r22
    180a:	37 0b       	sbc	r19, r23
    180c:	44 27       	eor	r20, r20
    180e:	37 fd       	sbrc	r19, 7
    1810:	40 95       	com	r20
    1812:	54 2f       	mov	r21, r20
    1814:	c8 01       	movw	r24, r16
    1816:	b7 01       	movw	r22, r14
    1818:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__mulsi3>
    181c:	a4 18       	sub	r10, r4
    181e:	b5 08       	sbc	r11, r5
    1820:	cc 24       	eor	r12, r12
    1822:	b7 fc       	sbrc	r11, 7
    1824:	c0 94       	com	r12
    1826:	dc 2c       	mov	r13, r12
    1828:	a6 01       	movw	r20, r12
    182a:	95 01       	movw	r18, r10
    182c:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__divmodsi4>
    1830:	88 24       	eor	r8, r8
    1832:	99 24       	eor	r9, r9
    1834:	26 0d       	add	r18, r6
    1836:	37 1d       	adc	r19, r7
    1838:	48 1d       	adc	r20, r8
    183a:	59 1d       	adc	r21, r9
    183c:	c9 01       	movw	r24, r18
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	df 90       	pop	r13
    1848:	cf 90       	pop	r12
    184a:	bf 90       	pop	r11
    184c:	af 90       	pop	r10
    184e:	9f 90       	pop	r9
    1850:	8f 90       	pop	r8
    1852:	7f 90       	pop	r7
    1854:	6f 90       	pop	r6
    1856:	5f 90       	pop	r5
    1858:	4f 90       	pop	r4
    185a:	08 95       	ret

0000185c <getError>:
    185c:	80 91 2b 04 	lds	r24, 0x042B
    1860:	08 95       	ret

00001862 <setErrorLog>:
    1862:	90 93 2f 04 	sts	0x042F, r25
    1866:	80 93 2e 04 	sts	0x042E, r24
    186a:	08 95       	ret

0000186c <setError>:
    186c:	1f 93       	push	r17
    186e:	18 2f       	mov	r17, r24
    1870:	80 91 2b 04 	lds	r24, 0x042B
    1874:	88 23       	and	r24, r24
    1876:	09 f0       	breq	.+2      	; 0x187a <setError+0xe>
    1878:	5a c0       	rjmp	.+180    	; 0x192e <setError+0xc2>
    187a:	10 93 2b 04 	sts	0x042B, r17
    187e:	80 91 30 04 	lds	r24, 0x0430
    1882:	90 91 31 04 	lds	r25, 0x0431
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	49 f0       	breq	.+18     	; 0x189c <setError+0x30>
    188a:	0e 94 99 0c 	call	0x1932	; 0x1932 <pin_is_output>
    188e:	88 23       	and	r24, r24
    1890:	29 f0       	breq	.+10     	; 0x189c <setError+0x30>
    1892:	80 e3       	ldi	r24, 0x30	; 48
    1894:	94 e0       	ldi	r25, 0x04	; 4
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <LED_set>
    189c:	80 91 3b 04 	lds	r24, 0x043B
    18a0:	90 91 3c 04 	lds	r25, 0x043C
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	09 f4       	brne	.+2      	; 0x18aa <setError+0x3e>
    18a8:	42 c0       	rjmp	.+132    	; 0x192e <setError+0xc2>
    18aa:	17 ff       	sbrs	r17, 7
    18ac:	12 c0       	rjmp	.+36     	; 0x18d2 <setError+0x66>
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <setError+0x44>
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <setError+0x46>
    18b2:	ad b7       	in	r26, 0x3d	; 61
    18b4:	be b7       	in	r27, 0x3e	; 62
    18b6:	12 96       	adiw	r26, 0x02	; 2
    18b8:	9c 93       	st	X, r25
    18ba:	8e 93       	st	-X, r24
    18bc:	11 97       	sbiw	r26, 0x01	; 1
    18be:	84 e9       	ldi	r24, 0x94	; 148
    18c0:	93 e0       	ldi	r25, 0x03	; 3
    18c2:	14 96       	adiw	r26, 0x04	; 4
    18c4:	9c 93       	st	X, r25
    18c6:	8e 93       	st	-X, r24
    18c8:	13 97       	sbiw	r26, 0x03	; 3
    18ca:	0e 94 56 1a 	call	0x34ac	; 0x34ac <fprintf_P>
    18ce:	11 95       	neg	r17
    18d0:	0c c0       	rjmp	.+24     	; 0x18ea <setError+0x7e>
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <setError+0x68>
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <setError+0x6a>
    18d6:	ed b7       	in	r30, 0x3d	; 61
    18d8:	fe b7       	in	r31, 0x3e	; 62
    18da:	92 83       	std	Z+2, r25	; 0x02
    18dc:	81 83       	std	Z+1, r24	; 0x01
    18de:	8f e8       	ldi	r24, 0x8F	; 143
    18e0:	93 e0       	ldi	r25, 0x03	; 3
    18e2:	94 83       	std	Z+4, r25	; 0x04
    18e4:	83 83       	std	Z+3, r24	; 0x03
    18e6:	0e 94 56 1a 	call	0x34ac	; 0x34ac <fprintf_P>
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <setError+0x80>
    18ec:	ed b7       	in	r30, 0x3d	; 61
    18ee:	fe b7       	in	r31, 0x3e	; 62
    18f0:	31 96       	adiw	r30, 0x01	; 1
    18f2:	80 91 3b 04 	lds	r24, 0x043B
    18f6:	90 91 3c 04 	lds	r25, 0x043C
    18fa:	ad b7       	in	r26, 0x3d	; 61
    18fc:	be b7       	in	r27, 0x3e	; 62
    18fe:	12 96       	adiw	r26, 0x02	; 2
    1900:	9c 93       	st	X, r25
    1902:	8e 93       	st	-X, r24
    1904:	11 97       	sbiw	r26, 0x01	; 1
    1906:	83 e8       	ldi	r24, 0x83	; 131
    1908:	93 e0       	ldi	r25, 0x03	; 3
    190a:	93 83       	std	Z+3, r25	; 0x03
    190c:	82 83       	std	Z+2, r24	; 0x02
    190e:	81 2f       	mov	r24, r17
    1910:	99 27       	eor	r25, r25
    1912:	87 fd       	sbrc	r24, 7
    1914:	90 95       	com	r25
    1916:	95 83       	std	Z+5, r25	; 0x05
    1918:	84 83       	std	Z+4, r24	; 0x04
    191a:	0e 94 56 1a 	call	0x34ac	; 0x34ac <fprintf_P>
    191e:	ed b7       	in	r30, 0x3d	; 61
    1920:	fe b7       	in	r31, 0x3e	; 62
    1922:	36 96       	adiw	r30, 0x06	; 6
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	fe bf       	out	0x3e, r31	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	ed bf       	out	0x3d, r30	; 61
    192e:	1f 91       	pop	r17
    1930:	08 95       	ret

00001932 <pin_is_output>:
    1932:	9c 01       	movw	r18, r24
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	81 f0       	breq	.+32     	; 0x1958 <pin_is_output+0x26>
    1938:	fc 01       	movw	r30, r24
    193a:	85 91       	lpm	r24, Z+
    193c:	94 91       	lpm	r25, Z+
    193e:	02 96       	adiw	r24, 0x02	; 2
    1940:	fc 01       	movw	r30, r24
    1942:	a5 91       	lpm	r26, Z+
    1944:	b4 91       	lpm	r27, Z+
    1946:	2e 5f       	subi	r18, 0xFE	; 254
    1948:	3f 4f       	sbci	r19, 0xFF	; 255
    194a:	f9 01       	movw	r30, r18
    194c:	94 91       	lpm	r25, Z+
    194e:	8c 91       	ld	r24, X
    1950:	89 23       	and	r24, r25
    1952:	11 f0       	breq	.+4      	; 0x1958 <pin_is_output+0x26>
    1954:	8f ef       	ldi	r24, 0xFF	; 255
    1956:	08 95       	ret
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	08 95       	ret

0000195c <pin_make_input>:
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	9c 01       	movw	r18, r24
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	f9 f0       	breq	.+62     	; 0x19a4 <pin_make_input+0x48>
    1966:	fc 01       	movw	r30, r24
    1968:	45 91       	lpm	r20, Z+
    196a:	54 91       	lpm	r21, Z+
    196c:	ca 01       	movw	r24, r20
    196e:	02 96       	adiw	r24, 0x02	; 2
    1970:	fc 01       	movw	r30, r24
    1972:	a5 91       	lpm	r26, Z+
    1974:	b4 91       	lpm	r27, Z+
    1976:	fa 01       	movw	r30, r20
    1978:	c5 91       	lpm	r28, Z+
    197a:	d4 91       	lpm	r29, Z+
    197c:	2e 5f       	subi	r18, 0xFE	; 254
    197e:	3f 4f       	sbci	r19, 0xFF	; 255
    1980:	f9 01       	movw	r30, r18
    1982:	94 91       	lpm	r25, Z+
    1984:	3f b7       	in	r19, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	8c 91       	ld	r24, X
    198a:	29 2f       	mov	r18, r25
    198c:	20 95       	com	r18
    198e:	82 23       	and	r24, r18
    1990:	8c 93       	st	X, r24
    1992:	66 23       	and	r22, r22
    1994:	19 f0       	breq	.+6      	; 0x199c <pin_make_input+0x40>
    1996:	88 81       	ld	r24, Y
    1998:	89 2b       	or	r24, r25
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <pin_make_input+0x44>
    199c:	88 81       	ld	r24, Y
    199e:	82 23       	and	r24, r18
    19a0:	88 83       	st	Y, r24
    19a2:	3f bf       	out	0x3f, r19	; 63
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	08 95       	ret

000019aa <pin_make_output>:
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	9c 01       	movw	r18, r24
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	f9 f0       	breq	.+62     	; 0x19f2 <pin_make_output+0x48>
    19b4:	fc 01       	movw	r30, r24
    19b6:	45 91       	lpm	r20, Z+
    19b8:	54 91       	lpm	r21, Z+
    19ba:	ca 01       	movw	r24, r20
    19bc:	02 96       	adiw	r24, 0x02	; 2
    19be:	fc 01       	movw	r30, r24
    19c0:	c5 91       	lpm	r28, Z+
    19c2:	d4 91       	lpm	r29, Z+
    19c4:	fa 01       	movw	r30, r20
    19c6:	a5 91       	lpm	r26, Z+
    19c8:	b4 91       	lpm	r27, Z+
    19ca:	2e 5f       	subi	r18, 0xFE	; 254
    19cc:	3f 4f       	sbci	r19, 0xFF	; 255
    19ce:	f9 01       	movw	r30, r18
    19d0:	24 91       	lpm	r18, Z+
    19d2:	3f b7       	in	r19, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	66 23       	and	r22, r22
    19d8:	19 f0       	breq	.+6      	; 0x19e0 <pin_make_output+0x36>
    19da:	8c 91       	ld	r24, X
    19dc:	82 2b       	or	r24, r18
    19de:	04 c0       	rjmp	.+8      	; 0x19e8 <pin_make_output+0x3e>
    19e0:	8c 91       	ld	r24, X
    19e2:	92 2f       	mov	r25, r18
    19e4:	90 95       	com	r25
    19e6:	89 23       	and	r24, r25
    19e8:	8c 93       	st	X, r24
    19ea:	88 81       	ld	r24, Y
    19ec:	82 2b       	or	r24, r18
    19ee:	88 83       	st	Y, r24
    19f0:	3f bf       	out	0x3f, r19	; 63
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	08 95       	ret

000019f8 <LED_set>:
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	ec 01       	movw	r28, r24
    1a00:	16 2f       	mov	r17, r22
    1a02:	88 81       	ld	r24, Y
    1a04:	99 81       	ldd	r25, Y+1	; 0x01
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	a9 f0       	breq	.+42     	; 0x1a34 <LED_set+0x3c>
    1a0a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a0c:	30 fd       	sbrc	r19, 0
    1a0e:	05 c0       	rjmp	.+10     	; 0x1a1a <LED_set+0x22>
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	66 23       	and	r22, r22
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <LED_set+0x20>
    1a16:	21 e0       	ldi	r18, 0x01	; 1
    1a18:	12 2f       	mov	r17, r18
    1a1a:	31 fd       	sbrc	r19, 1
    1a1c:	06 c0       	rjmp	.+12     	; 0x1a2a <LED_set+0x32>
    1a1e:	61 2f       	mov	r22, r17
    1a20:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <pin_make_output>
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	82 60       	ori	r24, 0x02	; 2
    1a28:	8a 83       	std	Y+2, r24	; 0x02
    1a2a:	88 81       	ld	r24, Y
    1a2c:	99 81       	ldd	r25, Y+1	; 0x01
    1a2e:	61 2f       	mov	r22, r17
    1a30:	0e 94 1c 13 	call	0x2638	; 0x2638 <pin_set>
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	1f 91       	pop	r17
    1a3a:	08 95       	ret

00001a3c <main>:
    1a3c:	0e 94 93 07 	call	0xf26	; 0xf26 <registerLED>
    1a40:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__initTimers>
    1a44:	0e 94 89 08 	call	0x1112	; 0x1112 <__clockInit>
    1a48:	78 94       	sei
    1a4a:	0e 94 a9 07 	call	0xf52	; 0xf52 <sysInitHardware>
    1a4e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <appInitHardware>
    1a52:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <clockGetus>
    1a56:	60 93 12 04 	sts	0x0412, r22
    1a5a:	70 93 13 04 	sts	0x0413, r23
    1a5e:	80 93 14 04 	sts	0x0414, r24
    1a62:	90 93 15 04 	sts	0x0415, r25
    1a66:	0e 94 63 03 	call	0x6c6	; 0x6c6 <appInitSoftware>
    1a6a:	60 93 16 04 	sts	0x0416, r22
    1a6e:	70 93 17 04 	sts	0x0417, r23
    1a72:	80 93 18 04 	sts	0x0418, r24
    1a76:	90 93 19 04 	sts	0x0419, r25
    1a7a:	78 94       	sei
    1a7c:	0e 94 c8 12 	call	0x2590	; 0x2590 <breathe>
    1a80:	80 91 16 04 	lds	r24, 0x0416
    1a84:	90 91 17 04 	lds	r25, 0x0417
    1a88:	a0 91 18 04 	lds	r26, 0x0418
    1a8c:	b0 91 19 04 	lds	r27, 0x0419
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	a1 05       	cpc	r26, r1
    1a94:	b1 05       	cpc	r27, r1
    1a96:	19 f4       	brne	.+6      	; 0x1a9e <main+0x62>
    1a98:	16 c0       	rjmp	.+44     	; 0x1ac6 <main+0x8a>
    1a9a:	0e 94 c8 12 	call	0x2590	; 0x2590 <breathe>
    1a9e:	60 91 12 04 	lds	r22, 0x0412
    1aa2:	70 91 13 04 	lds	r23, 0x0413
    1aa6:	80 91 14 04 	lds	r24, 0x0414
    1aaa:	90 91 15 04 	lds	r25, 0x0415
    1aae:	20 91 16 04 	lds	r18, 0x0416
    1ab2:	30 91 17 04 	lds	r19, 0x0417
    1ab6:	40 91 18 04 	lds	r20, 0x0418
    1aba:	50 91 19 04 	lds	r21, 0x0419
    1abe:	0e 94 7d 12 	call	0x24fa	; 0x24fa <clockHasElapsed>
    1ac2:	88 23       	and	r24, r24
    1ac4:	51 f3       	breq	.-44     	; 0x1a9a <main+0x5e>
    1ac6:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <clockGetus>
    1aca:	9b 01       	movw	r18, r22
    1acc:	ac 01       	movw	r20, r24
    1ace:	60 93 12 04 	sts	0x0412, r22
    1ad2:	70 93 13 04 	sts	0x0413, r23
    1ad6:	80 93 14 04 	sts	0x0414, r24
    1ada:	90 93 15 04 	sts	0x0415, r25
    1ade:	60 91 0e 04 	lds	r22, 0x040E
    1ae2:	70 91 0f 04 	lds	r23, 0x040F
    1ae6:	80 91 10 04 	lds	r24, 0x0410
    1aea:	90 91 11 04 	lds	r25, 0x0411
    1aee:	6f 5f       	subi	r22, 0xFF	; 255
    1af0:	7f 4f       	sbci	r23, 0xFF	; 255
    1af2:	8f 4f       	sbci	r24, 0xFF	; 255
    1af4:	9f 4f       	sbci	r25, 0xFF	; 255
    1af6:	60 93 0e 04 	sts	0x040E, r22
    1afa:	70 93 0f 04 	sts	0x040F, r23
    1afe:	80 93 10 04 	sts	0x0410, r24
    1b02:	90 93 11 04 	sts	0x0411, r25
    1b06:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <appControl>
    1b0a:	af cf       	rjmp	.-162    	; 0x1a6a <main+0x2e>

00001b0c <marqueeSendByte>:
    1b0c:	cf 92       	push	r12
    1b0e:	df 92       	push	r13
    1b10:	ef 92       	push	r14
    1b12:	ff 92       	push	r15
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	ec 01       	movw	r28, r24
    1b1e:	d6 2e       	mov	r13, r22
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	9d 81       	ldd	r25, Y+5	; 0x05
    1b24:	89 2b       	or	r24, r25
    1b26:	a9 f5       	brne	.+106    	; 0x1b92 <marqueeSendByte+0x86>
    1b28:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b2c:	01 96       	adiw	r24, 0x01	; 1
    1b2e:	0e 94 59 18 	call	0x30b2	; 0x30b2 <malloc>
    1b32:	9d 83       	std	Y+5, r25	; 0x05
    1b34:	8c 83       	std	Y+4, r24	; 0x04
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	61 f1       	breq	.+88     	; 0x1b92 <marqueeSendByte+0x86>
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	07 c0       	rjmp	.+14     	; 0x1b4e <marqueeSendByte+0x42>
    1b40:	ec 81       	ldd	r30, Y+4	; 0x04
    1b42:	fd 81       	ldd	r31, Y+5	; 0x05
    1b44:	e2 0f       	add	r30, r18
    1b46:	f3 1f       	adc	r31, r19
    1b48:	10 82       	st	Z, r1
    1b4a:	2f 5f       	subi	r18, 0xFF	; 255
    1b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b50:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b52:	82 17       	cp	r24, r18
    1b54:	93 07       	cpc	r25, r19
    1b56:	a0 f7       	brcc	.-24     	; 0x1b40 <marqueeSendByte+0x34>
    1b58:	19 86       	std	Y+9, r1	; 0x09
    1b5a:	18 86       	std	Y+8, r1	; 0x08
    1b5c:	1f 82       	std	Y+7, r1	; 0x07
    1b5e:	1e 82       	std	Y+6, r1	; 0x06
    1b60:	8c 89       	ldd	r24, Y+20	; 0x14
    1b62:	8e 7f       	andi	r24, 0xFE	; 254
    1b64:	8c 8b       	std	Y+20, r24	; 0x14
    1b66:	00 e0       	ldi	r16, 0x00	; 0
    1b68:	10 e0       	ldi	r17, 0x00	; 0
    1b6a:	0e c0       	rjmp	.+28     	; 0x1b88 <marqueeSendByte+0x7c>
    1b6c:	c8 01       	movw	r24, r16
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	e8 81       	ld	r30, Y
    1b74:	f9 81       	ldd	r31, Y+1	; 0x01
    1b76:	e8 0f       	add	r30, r24
    1b78:	f9 1f       	adc	r31, r25
    1b7a:	85 91       	lpm	r24, Z+
    1b7c:	94 91       	lpm	r25, Z+
    1b7e:	60 e2       	ldi	r22, 0x20	; 32
    1b80:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <segled_put_char>
    1b84:	0f 5f       	subi	r16, 0xFF	; 255
    1b86:	1f 4f       	sbci	r17, 0xFF	; 255
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8c:	08 17       	cp	r16, r24
    1b8e:	19 07       	cpc	r17, r25
    1b90:	68 f3       	brcs	.-38     	; 0x1b6c <marqueeSendByte+0x60>
    1b92:	ec 81       	ldd	r30, Y+4	; 0x04
    1b94:	fd 81       	ldd	r31, Y+5	; 0x05
    1b96:	30 97       	sbiw	r30, 0x00	; 0
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <marqueeSendByte+0x90>
    1b9a:	3e c0       	rjmp	.+124    	; 0x1c18 <marqueeSendByte+0x10c>
    1b9c:	8a e0       	ldi	r24, 0x0A	; 10
    1b9e:	d8 16       	cp	r13, r24
    1ba0:	19 f5       	brne	.+70     	; 0x1be8 <marqueeSendByte+0xdc>
    1ba2:	88 85       	ldd	r24, Y+8	; 0x08
    1ba4:	99 85       	ldd	r25, Y+9	; 0x09
    1ba6:	e8 0f       	add	r30, r24
    1ba8:	f9 1f       	adc	r31, r25
    1baa:	10 82       	st	Z, r1
    1bac:	19 86       	std	Y+9, r1	; 0x09
    1bae:	18 86       	std	Y+8, r1	; 0x08
    1bb0:	cf b6       	in	r12, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	8c 89       	ldd	r24, Y+20	; 0x14
    1bb6:	80 fd       	sbrc	r24, 0
    1bb8:	15 c0       	rjmp	.+42     	; 0x1be4 <marqueeSendByte+0xd8>
    1bba:	8c 89       	ldd	r24, Y+20	; 0x14
    1bbc:	81 60       	ori	r24, 0x01	; 1
    1bbe:	8c 8b       	std	Y+20, r24	; 0x14
    1bc0:	8c 89       	ldd	r24, Y+20	; 0x14
    1bc2:	8d 7f       	andi	r24, 0xFD	; 253
    1bc4:	8c 8b       	std	Y+20, r24	; 0x14
    1bc6:	1f 82       	std	Y+7, r1	; 0x07
    1bc8:	1e 82       	std	Y+6, r1	; 0x06
    1bca:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <clockGetus>
    1bce:	9b 01       	movw	r18, r22
    1bd0:	ac 01       	movw	r20, r24
    1bd2:	ec 84       	ldd	r14, Y+12	; 0x0c
    1bd4:	fd 84       	ldd	r15, Y+13	; 0x0d
    1bd6:	0e 85       	ldd	r16, Y+14	; 0x0e
    1bd8:	1f 85       	ldd	r17, Y+15	; 0x0f
    1bda:	86 e1       	ldi	r24, 0x16	; 22
    1bdc:	9e e0       	ldi	r25, 0x0E	; 14
    1bde:	be 01       	movw	r22, r28
    1be0:	0e 94 39 14 	call	0x2872	; 0x2872 <scheduleJob>
    1be4:	cf be       	out	0x3f, r12	; 63
    1be6:	18 c0       	rjmp	.+48     	; 0x1c18 <marqueeSendByte+0x10c>
    1be8:	8d e0       	ldi	r24, 0x0D	; 13
    1bea:	d8 16       	cp	r13, r24
    1bec:	a9 f0       	breq	.+42     	; 0x1c18 <marqueeSendByte+0x10c>
    1bee:	28 85       	ldd	r18, Y+8	; 0x08
    1bf0:	39 85       	ldd	r19, Y+9	; 0x09
    1bf2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bf4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bf6:	28 17       	cp	r18, r24
    1bf8:	39 07       	cpc	r19, r25
    1bfa:	70 f4       	brcc	.+28     	; 0x1c18 <marqueeSendByte+0x10c>
    1bfc:	e2 0f       	add	r30, r18
    1bfe:	f3 1f       	adc	r31, r19
    1c00:	2f b7       	in	r18, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	d0 82       	st	Z, r13
    1c06:	11 82       	std	Z+1, r1	; 0x01
    1c08:	88 85       	ldd	r24, Y+8	; 0x08
    1c0a:	99 85       	ldd	r25, Y+9	; 0x09
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	99 87       	std	Y+9, r25	; 0x09
    1c10:	88 87       	std	Y+8, r24	; 0x08
    1c12:	1f 82       	std	Y+7, r1	; 0x07
    1c14:	1e 82       	std	Y+6, r1	; 0x06
    1c16:	2f bf       	out	0x3f, r18	; 63
    1c18:	8d 2d       	mov	r24, r13
    1c1a:	df 91       	pop	r29
    1c1c:	cf 91       	pop	r28
    1c1e:	1f 91       	pop	r17
    1c20:	0f 91       	pop	r16
    1c22:	ff 90       	pop	r15
    1c24:	ef 90       	pop	r14
    1c26:	df 90       	pop	r13
    1c28:	cf 90       	pop	r12
    1c2a:	08 95       	ret

00001c2c <marqueeUpdate>:
    1c2c:	2f 92       	push	r2
    1c2e:	3f 92       	push	r3
    1c30:	4f 92       	push	r4
    1c32:	5f 92       	push	r5
    1c34:	6f 92       	push	r6
    1c36:	7f 92       	push	r7
    1c38:	8f 92       	push	r8
    1c3a:	9f 92       	push	r9
    1c3c:	af 92       	push	r10
    1c3e:	bf 92       	push	r11
    1c40:	cf 92       	push	r12
    1c42:	df 92       	push	r13
    1c44:	ef 92       	push	r14
    1c46:	ff 92       	push	r15
    1c48:	0f 93       	push	r16
    1c4a:	1f 93       	push	r17
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	38 2e       	mov	r3, r24
    1c52:	29 2e       	mov	r2, r25
    1c54:	2a 01       	movw	r4, r20
    1c56:	3b 01       	movw	r6, r22
    1c58:	c8 2f       	mov	r28, r24
    1c5a:	d9 2f       	mov	r29, r25
    1c5c:	0c 81       	ldd	r16, Y+4	; 0x04
    1c5e:	1d 81       	ldd	r17, Y+5	; 0x05
    1c60:	8e 81       	ldd	r24, Y+6	; 0x06
    1c62:	9f 81       	ldd	r25, Y+7	; 0x07
    1c64:	08 0f       	add	r16, r24
    1c66:	19 1f       	adc	r17, r25
    1c68:	f8 01       	movw	r30, r16
    1c6a:	80 80       	ld	r8, Z
    1c6c:	8c 89       	ldd	r24, Y+20	; 0x14
    1c6e:	86 95       	lsr	r24
    1c70:	81 70       	andi	r24, 0x01	; 1
    1c72:	88 20       	and	r8, r8
    1c74:	29 f4       	brne	.+10     	; 0x1c80 <marqueeUpdate+0x54>
    1c76:	a8 88       	ldd	r10, Y+16	; 0x10
    1c78:	b9 88       	ldd	r11, Y+17	; 0x11
    1c7a:	ca 88       	ldd	r12, Y+18	; 0x12
    1c7c:	db 88       	ldd	r13, Y+19	; 0x13
    1c7e:	04 c0       	rjmp	.+8      	; 0x1c88 <marqueeUpdate+0x5c>
    1c80:	ac 84       	ldd	r10, Y+12	; 0x0c
    1c82:	bd 84       	ldd	r11, Y+13	; 0x0d
    1c84:	ce 84       	ldd	r12, Y+14	; 0x0e
    1c86:	df 84       	ldd	r13, Y+15	; 0x0f
    1c88:	88 23       	and	r24, r24
    1c8a:	d1 f4       	brne	.+52     	; 0x1cc0 <marqueeUpdate+0x94>
    1c8c:	88 20       	and	r8, r8
    1c8e:	c1 f0       	breq	.+48     	; 0x1cc0 <marqueeUpdate+0x94>
    1c90:	f8 01       	movw	r30, r16
    1c92:	32 91       	ld	r19, -Z
    1c94:	8f 01       	movw	r16, r30
    1c96:	0f 5f       	subi	r16, 0xFF	; 255
    1c98:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9a:	4a 81       	ldd	r20, Y+2	; 0x02
    1c9c:	5b 81       	ldd	r21, Y+3	; 0x03
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	07 c0       	rjmp	.+14     	; 0x1cb4 <marqueeUpdate+0x88>
    1ca6:	20 81       	ld	r18, Z
    1ca8:	22 23       	and	r18, r18
    1caa:	51 f0       	breq	.+20     	; 0x1cc0 <marqueeUpdate+0x94>
    1cac:	23 17       	cp	r18, r19
    1cae:	41 f4       	brne	.+16     	; 0x1cc0 <marqueeUpdate+0x94>
    1cb0:	31 96       	adiw	r30, 0x01	; 1
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	84 17       	cp	r24, r20
    1cb6:	95 07       	cpc	r25, r21
    1cb8:	b0 f3       	brcs	.-20     	; 0x1ca6 <marqueeUpdate+0x7a>
    1cba:	99 24       	eor	r9, r9
    1cbc:	9a 94       	dec	r9
    1cbe:	01 c0       	rjmp	.+2      	; 0x1cc2 <marqueeUpdate+0x96>
    1cc0:	99 24       	eor	r9, r9
    1cc2:	8c 89       	ldd	r24, Y+20	; 0x14
    1cc4:	86 95       	lsr	r24
    1cc6:	81 70       	andi	r24, 0x01	; 1
    1cc8:	29 2d       	mov	r18, r9
    1cca:	33 27       	eor	r19, r19
    1ccc:	27 fd       	sbrc	r18, 7
    1cce:	30 95       	com	r19
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	28 17       	cp	r18, r24
    1cd4:	39 07       	cpc	r19, r25
    1cd6:	c1 f0       	breq	.+48     	; 0x1d08 <marqueeUpdate+0xdc>
    1cd8:	a6 01       	movw	r20, r12
    1cda:	95 01       	movw	r18, r10
    1cdc:	62 e0       	ldi	r22, 0x02	; 2
    1cde:	56 95       	lsr	r21
    1ce0:	47 95       	ror	r20
    1ce2:	37 95       	ror	r19
    1ce4:	27 95       	ror	r18
    1ce6:	6a 95       	dec	r22
    1ce8:	d1 f7       	brne	.-12     	; 0x1cde <marqueeUpdate+0xb2>
    1cea:	99 2d       	mov	r25, r9
    1cec:	92 70       	andi	r25, 0x02	; 2
    1cee:	8c 89       	ldd	r24, Y+20	; 0x14
    1cf0:	8d 7f       	andi	r24, 0xFD	; 253
    1cf2:	89 2b       	or	r24, r25
    1cf4:	8c 8b       	std	Y+20, r24	; 0x14
    1cf6:	99 20       	and	r9, r9
    1cf8:	19 f0       	breq	.+6      	; 0x1d00 <marqueeUpdate+0xd4>
    1cfa:	59 01       	movw	r10, r18
    1cfc:	6a 01       	movw	r12, r20
    1cfe:	04 c0       	rjmp	.+8      	; 0x1d08 <marqueeUpdate+0xdc>
    1d00:	a2 1a       	sub	r10, r18
    1d02:	b3 0a       	sbc	r11, r19
    1d04:	c4 0a       	sbc	r12, r20
    1d06:	d5 0a       	sbc	r13, r21
    1d08:	ee 24       	eor	r14, r14
    1d0a:	ff 24       	eor	r15, r15
    1d0c:	18 c0       	rjmp	.+48     	; 0x1d3e <marqueeUpdate+0x112>
    1d0e:	c7 01       	movw	r24, r14
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	e8 81       	ld	r30, Y
    1d16:	f9 81       	ldd	r31, Y+1	; 0x01
    1d18:	e8 0f       	add	r30, r24
    1d1a:	f9 1f       	adc	r31, r25
    1d1c:	85 91       	lpm	r24, Z+
    1d1e:	94 91       	lpm	r25, Z+
    1d20:	99 20       	and	r9, r9
    1d22:	39 f4       	brne	.+14     	; 0x1d32 <marqueeUpdate+0x106>
    1d24:	f8 01       	movw	r30, r16
    1d26:	60 81       	ld	r22, Z
    1d28:	66 23       	and	r22, r22
    1d2a:	19 f0       	breq	.+6      	; 0x1d32 <marqueeUpdate+0x106>
    1d2c:	0f 5f       	subi	r16, 0xFF	; 255
    1d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d30:	01 c0       	rjmp	.+2      	; 0x1d34 <marqueeUpdate+0x108>
    1d32:	60 e2       	ldi	r22, 0x20	; 32
    1d34:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <segled_put_char>
    1d38:	08 94       	sec
    1d3a:	e1 1c       	adc	r14, r1
    1d3c:	f1 1c       	adc	r15, r1
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	9b 81       	ldd	r25, Y+3	; 0x03
    1d42:	e8 16       	cp	r14, r24
    1d44:	f9 06       	cpc	r15, r25
    1d46:	18 f3       	brcs	.-58     	; 0x1d0e <marqueeUpdate+0xe2>
    1d48:	88 20       	and	r8, r8
    1d4a:	b1 f4       	brne	.+44     	; 0x1d78 <marqueeUpdate+0x14c>
    1d4c:	1f 82       	std	Y+7, r1	; 0x07
    1d4e:	1e 82       	std	Y+6, r1	; 0x06
    1d50:	88 89       	ldd	r24, Y+16	; 0x10
    1d52:	99 89       	ldd	r25, Y+17	; 0x11
    1d54:	aa 89       	ldd	r26, Y+18	; 0x12
    1d56:	bb 89       	ldd	r27, Y+19	; 0x13
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	a1 05       	cpc	r26, r1
    1d5c:	b1 05       	cpc	r27, r1
    1d5e:	29 f0       	breq	.+10     	; 0x1d6a <marqueeUpdate+0x13e>
    1d60:	ec 81       	ldd	r30, Y+4	; 0x04
    1d62:	fd 81       	ldd	r31, Y+5	; 0x05
    1d64:	80 81       	ld	r24, Z
    1d66:	88 23       	and	r24, r24
    1d68:	19 f4       	brne	.+6      	; 0x1d70 <marqueeUpdate+0x144>
    1d6a:	8c 89       	ldd	r24, Y+20	; 0x14
    1d6c:	8e 7f       	andi	r24, 0xFE	; 254
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <marqueeUpdate+0x148>
    1d70:	8c 89       	ldd	r24, Y+20	; 0x14
    1d72:	8d 7f       	andi	r24, 0xFD	; 253
    1d74:	8c 8b       	std	Y+20, r24	; 0x14
    1d76:	07 c0       	rjmp	.+14     	; 0x1d86 <marqueeUpdate+0x15a>
    1d78:	99 20       	and	r9, r9
    1d7a:	29 f4       	brne	.+10     	; 0x1d86 <marqueeUpdate+0x15a>
    1d7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d80:	01 96       	adiw	r24, 0x01	; 1
    1d82:	9f 83       	std	Y+7, r25	; 0x07
    1d84:	8e 83       	std	Y+6, r24	; 0x06
    1d86:	8c 89       	ldd	r24, Y+20	; 0x14
    1d88:	80 ff       	sbrs	r24, 0
    1d8a:	0a c0       	rjmp	.+20     	; 0x1da0 <marqueeUpdate+0x174>
    1d8c:	86 e1       	ldi	r24, 0x16	; 22
    1d8e:	9e e0       	ldi	r25, 0x0E	; 14
    1d90:	63 2d       	mov	r22, r3
    1d92:	72 2d       	mov	r23, r2
    1d94:	a3 01       	movw	r20, r6
    1d96:	92 01       	movw	r18, r4
    1d98:	86 01       	movw	r16, r12
    1d9a:	75 01       	movw	r14, r10
    1d9c:	0e 94 39 14 	call	0x2872	; 0x2872 <scheduleJob>
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	ff 90       	pop	r15
    1daa:	ef 90       	pop	r14
    1dac:	df 90       	pop	r13
    1dae:	cf 90       	pop	r12
    1db0:	bf 90       	pop	r11
    1db2:	af 90       	pop	r10
    1db4:	9f 90       	pop	r9
    1db6:	8f 90       	pop	r8
    1db8:	7f 90       	pop	r7
    1dba:	6f 90       	pop	r6
    1dbc:	5f 90       	pop	r5
    1dbe:	4f 90       	pop	r4
    1dc0:	3f 90       	pop	r3
    1dc2:	2f 90       	pop	r2
    1dc4:	08 95       	ret

00001dc6 <segled_put_char>:
    1dc6:	ef 92       	push	r14
    1dc8:	ff 92       	push	r15
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	8c 01       	movw	r16, r24
    1dd4:	e6 2e       	mov	r14, r22
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	80 89       	ldd	r24, Z+16	; 0x10
    1dda:	81 fd       	sbrc	r24, 1
    1ddc:	12 c0       	rjmp	.+36     	; 0x1e02 <segled_put_char+0x3c>
    1dde:	c0 e0       	ldi	r28, 0x00	; 0
    1de0:	d0 e0       	ldi	r29, 0x00	; 0
    1de2:	f8 01       	movw	r30, r16
    1de4:	ec 0f       	add	r30, r28
    1de6:	fd 1f       	adc	r31, r29
    1de8:	80 81       	ld	r24, Z
    1dea:	91 81       	ldd	r25, Z+1	; 0x01
    1dec:	60 e0       	ldi	r22, 0x00	; 0
    1dee:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <pin_make_output>
    1df2:	22 96       	adiw	r28, 0x02	; 2
    1df4:	c0 31       	cpi	r28, 0x10	; 16
    1df6:	d1 05       	cpc	r29, r1
    1df8:	a1 f7       	brne	.-24     	; 0x1de2 <segled_put_char+0x1c>
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	80 89       	ldd	r24, Z+16	; 0x10
    1dfe:	82 60       	ori	r24, 0x02	; 2
    1e00:	80 8b       	std	Z+16, r24	; 0x10
    1e02:	8e 2d       	mov	r24, r14
    1e04:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <segled8_get_mask>
    1e08:	f8 2e       	mov	r15, r24
    1e0a:	80 ff       	sbrs	r24, 0
    1e0c:	07 c0       	rjmp	.+14     	; 0x1e1c <segled_put_char+0x56>
    1e0e:	f8 01       	movw	r30, r16
    1e10:	86 85       	ldd	r24, Z+14	; 0x0e
    1e12:	97 85       	ldd	r25, Z+15	; 0x0f
    1e14:	89 2b       	or	r24, r25
    1e16:	11 f4       	brne	.+4      	; 0x1e1c <segled_put_char+0x56>
    1e18:	80 e1       	ldi	r24, 0x10	; 16
    1e1a:	f8 2e       	mov	r15, r24
    1e1c:	f8 01       	movw	r30, r16
    1e1e:	80 89       	ldd	r24, Z+16	; 0x10
    1e20:	80 ff       	sbrs	r24, 0
    1e22:	f0 94       	com	r15
    1e24:	c0 e0       	ldi	r28, 0x00	; 0
    1e26:	d0 e0       	ldi	r29, 0x00	; 0
    1e28:	f8 01       	movw	r30, r16
    1e2a:	ec 0f       	add	r30, r28
    1e2c:	fd 1f       	adc	r31, r29
    1e2e:	80 81       	ld	r24, Z
    1e30:	91 81       	ldd	r25, Z+1	; 0x01
    1e32:	f7 fe       	sbrs	r15, 7
    1e34:	03 c0       	rjmp	.+6      	; 0x1e3c <segled_put_char+0x76>
    1e36:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <pin_high>
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <segled_put_char+0x7a>
    1e3c:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <pin_low>
    1e40:	22 96       	adiw	r28, 0x02	; 2
    1e42:	c0 31       	cpi	r28, 0x10	; 16
    1e44:	d1 05       	cpc	r29, r1
    1e46:	11 f0       	breq	.+4      	; 0x1e4c <segled_put_char+0x86>
    1e48:	ff 0c       	add	r15, r15
    1e4a:	ee cf       	rjmp	.-36     	; 0x1e28 <segled_put_char+0x62>
    1e4c:	8e 2d       	mov	r24, r14
    1e4e:	df 91       	pop	r29
    1e50:	cf 91       	pop	r28
    1e52:	1f 91       	pop	r17
    1e54:	0f 91       	pop	r16
    1e56:	ff 90       	pop	r15
    1e58:	ef 90       	pop	r14
    1e5a:	08 95       	ret

00001e5c <segled_set>:
    1e5c:	ef 92       	push	r14
    1e5e:	ff 92       	push	r15
    1e60:	0f 93       	push	r16
    1e62:	1f 93       	push	r17
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	8c 01       	movw	r16, r24
    1e6a:	e6 2e       	mov	r14, r22
    1e6c:	f4 2e       	mov	r15, r20
    1e6e:	fc 01       	movw	r30, r24
    1e70:	80 89       	ldd	r24, Z+16	; 0x10
    1e72:	81 fd       	sbrc	r24, 1
    1e74:	12 c0       	rjmp	.+36     	; 0x1e9a <segled_set+0x3e>
    1e76:	c0 e0       	ldi	r28, 0x00	; 0
    1e78:	d0 e0       	ldi	r29, 0x00	; 0
    1e7a:	f8 01       	movw	r30, r16
    1e7c:	ec 0f       	add	r30, r28
    1e7e:	fd 1f       	adc	r31, r29
    1e80:	80 81       	ld	r24, Z
    1e82:	91 81       	ldd	r25, Z+1	; 0x01
    1e84:	60 e0       	ldi	r22, 0x00	; 0
    1e86:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <pin_make_output>
    1e8a:	22 96       	adiw	r28, 0x02	; 2
    1e8c:	c0 31       	cpi	r28, 0x10	; 16
    1e8e:	d1 05       	cpc	r29, r1
    1e90:	a1 f7       	brne	.-24     	; 0x1e7a <segled_set+0x1e>
    1e92:	f8 01       	movw	r30, r16
    1e94:	80 89       	ldd	r24, Z+16	; 0x10
    1e96:	82 60       	ori	r24, 0x02	; 2
    1e98:	80 8b       	std	Z+16, r24	; 0x10
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	80 89       	ldd	r24, Z+16	; 0x10
    1e9e:	80 fd       	sbrc	r24, 0
    1ea0:	06 c0       	rjmp	.+12     	; 0x1eae <segled_set+0x52>
    1ea2:	ff 20       	and	r15, r15
    1ea4:	19 f4       	brne	.+6      	; 0x1eac <segled_set+0x50>
    1ea6:	ff 24       	eor	r15, r15
    1ea8:	fa 94       	dec	r15
    1eaa:	01 c0       	rjmp	.+2      	; 0x1eae <segled_set+0x52>
    1eac:	ff 24       	eor	r15, r15
    1eae:	ee 2d       	mov	r30, r14
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	ee 0f       	add	r30, r30
    1eb4:	ff 1f       	adc	r31, r31
    1eb6:	e0 0f       	add	r30, r16
    1eb8:	f1 1f       	adc	r31, r17
    1eba:	80 81       	ld	r24, Z
    1ebc:	91 81       	ldd	r25, Z+1	; 0x01
    1ebe:	6f 2d       	mov	r22, r15
    1ec0:	0e 94 1c 13 	call	0x2638	; 0x2638 <pin_set>
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	1f 91       	pop	r17
    1eca:	0f 91       	pop	r16
    1ecc:	ff 90       	pop	r15
    1ece:	ef 90       	pop	r14
    1ed0:	08 95       	ret

00001ed2 <segled8_get_mask>:
    1ed2:	e8 2f       	mov	r30, r24
    1ed4:	81 54       	subi	r24, 0x41	; 65
    1ed6:	8a 31       	cpi	r24, 0x1A	; 26
    1ed8:	28 f4       	brcc	.+10     	; 0x1ee4 <segled8_get_mask+0x12>
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	e3 5a       	subi	r30, 0xA3	; 163
    1ede:	fc 4f       	sbci	r31, 0xFC	; 252
    1ee0:	84 91       	lpm	r24, Z+
    1ee2:	08 95       	ret
    1ee4:	8e 2f       	mov	r24, r30
    1ee6:	81 56       	subi	r24, 0x61	; 97
    1ee8:	8a 31       	cpi	r24, 0x1A	; 26
    1eea:	28 f4       	brcc	.+10     	; 0x1ef6 <segled8_get_mask+0x24>
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	e3 5c       	subi	r30, 0xC3	; 195
    1ef0:	fc 4f       	sbci	r31, 0xFC	; 252
    1ef2:	84 91       	lpm	r24, Z+
    1ef4:	08 95       	ret
    1ef6:	8e 2f       	mov	r24, r30
    1ef8:	80 53       	subi	r24, 0x30	; 48
    1efa:	8a 30       	cpi	r24, 0x0A	; 10
    1efc:	28 f4       	brcc	.+10     	; 0x1f08 <segled8_get_mask+0x36>
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	e8 57       	subi	r30, 0x78	; 120
    1f02:	fc 4f       	sbci	r31, 0xFC	; 252
    1f04:	84 91       	lpm	r24, Z+
    1f06:	08 95       	ret
    1f08:	ea 30       	cpi	r30, 0x0A	; 10
    1f0a:	28 f4       	brcc	.+10     	; 0x1f16 <segled8_get_mask+0x44>
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	e8 54       	subi	r30, 0x48	; 72
    1f10:	fc 4f       	sbci	r31, 0xFC	; 252
    1f12:	84 91       	lpm	r24, Z+
    1f14:	08 95       	ret
    1f16:	ed 32       	cpi	r30, 0x2D	; 45
    1f18:	11 f4       	brne	.+4      	; 0x1f1e <segled8_get_mask+0x4c>
    1f1a:	82 e0       	ldi	r24, 0x02	; 2
    1f1c:	08 95       	ret
    1f1e:	eb 35       	cpi	r30, 0x5B	; 91
    1f20:	79 f0       	breq	.+30     	; 0x1f40 <segled8_get_mask+0x6e>
    1f22:	eb 37       	cpi	r30, 0x7B	; 123
    1f24:	69 f0       	breq	.+26     	; 0x1f40 <segled8_get_mask+0x6e>
    1f26:	e8 32       	cpi	r30, 0x28	; 40
    1f28:	59 f0       	breq	.+22     	; 0x1f40 <segled8_get_mask+0x6e>
    1f2a:	ed 35       	cpi	r30, 0x5D	; 93
    1f2c:	59 f0       	breq	.+22     	; 0x1f44 <segled8_get_mask+0x72>
    1f2e:	ed 37       	cpi	r30, 0x7D	; 125
    1f30:	49 f0       	breq	.+18     	; 0x1f44 <segled8_get_mask+0x72>
    1f32:	e9 32       	cpi	r30, 0x29	; 41
    1f34:	39 f0       	breq	.+14     	; 0x1f44 <segled8_get_mask+0x72>
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	ee 32       	cpi	r30, 0x2E	; 46
    1f3a:	29 f4       	brne	.+10     	; 0x1f46 <segled8_get_mask+0x74>
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	08 95       	ret
    1f40:	8c e9       	ldi	r24, 0x9C	; 156
    1f42:	08 95       	ret
    1f44:	80 ef       	ldi	r24, 0xF0	; 240
    1f46:	08 95       	ret

00001f48 <compareFromIOPin>:
    1f48:	bf 92       	push	r11
    1f4a:	cf 92       	push	r12
    1f4c:	df 92       	push	r13
    1f4e:	ef 92       	push	r14
    1f50:	ff 92       	push	r15
    1f52:	0f 93       	push	r16
    1f54:	1f 93       	push	r17
    1f56:	cf 93       	push	r28
    1f58:	df 93       	push	r29
    1f5a:	6c 01       	movw	r12, r24
    1f5c:	b0 90 be 02 	lds	r11, 0x02BE
    1f60:	24 ef       	ldi	r18, 0xF4	; 244
    1f62:	31 e0       	ldi	r19, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	c0 e0       	ldi	r28, 0x00	; 0
    1f68:	d0 e0       	ldi	r29, 0x00	; 0
    1f6a:	2d c0       	rjmp	.+90     	; 0x1fc6 <compareFromIOPin+0x7e>
    1f6c:	28 5f       	subi	r18, 0xF8	; 248
    1f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f70:	f9 01       	movw	r30, r18
    1f72:	e4 90       	lpm	r14, Z+
    1f74:	28 50       	subi	r18, 0x08	; 8
    1f76:	30 40       	sbci	r19, 0x00	; 0
    1f78:	f9 01       	movw	r30, r18
    1f7a:	77 96       	adiw	r30, 0x17	; 23
    1f7c:	2a 5f       	subi	r18, 0xFA	; 250
    1f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	a0 e0       	ldi	r26, 0x00	; 0
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	05 91       	lpm	r16, Z+
    1f88:	14 91       	lpm	r17, Z+
    1f8a:	f9 01       	movw	r30, r18
    1f8c:	f4 90       	lpm	r15, Z+
    1f8e:	26 50       	subi	r18, 0x06	; 6
    1f90:	30 40       	sbci	r19, 0x00	; 0
    1f92:	14 c0       	rjmp	.+40     	; 0x1fbc <compareFromIOPin+0x74>
    1f94:	b8 01       	movw	r22, r16
    1f96:	6a 0f       	add	r22, r26
    1f98:	7b 1f       	adc	r23, r27
    1f9a:	fb 01       	movw	r30, r22
    1f9c:	3e 96       	adiw	r30, 0x0e	; 14
    1f9e:	45 91       	lpm	r20, Z+
    1fa0:	54 91       	lpm	r21, Z+
    1fa2:	41 15       	cp	r20, r1
    1fa4:	51 05       	cpc	r21, r1
    1fa6:	41 f0       	breq	.+16     	; 0x1fb8 <compareFromIOPin+0x70>
    1fa8:	4c 15       	cp	r20, r12
    1faa:	5d 05       	cpc	r21, r13
    1fac:	29 f4       	brne	.+10     	; 0x1fb8 <compareFromIOPin+0x70>
    1fae:	ff 20       	and	r15, r15
    1fb0:	11 f0       	breq	.+4      	; 0x1fb6 <compareFromIOPin+0x6e>
    1fb2:	eb 01       	movw	r28, r22
    1fb4:	0a c0       	rjmp	.+20     	; 0x1fca <compareFromIOPin+0x82>
    1fb6:	eb 01       	movw	r28, r22
    1fb8:	8f 5f       	subi	r24, 0xFF	; 255
    1fba:	50 96       	adiw	r26, 0x10	; 16
    1fbc:	8e 15       	cp	r24, r14
    1fbe:	50 f3       	brcs	.-44     	; 0x1f94 <compareFromIOPin+0x4c>
    1fc0:	9f 5f       	subi	r25, 0xFF	; 255
    1fc2:	24 5d       	subi	r18, 0xD4	; 212
    1fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc6:	9b 15       	cp	r25, r11
    1fc8:	88 f2       	brcs	.-94     	; 0x1f6c <compareFromIOPin+0x24>
    1fca:	ce 01       	movw	r24, r28
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	1f 91       	pop	r17
    1fd2:	0f 91       	pop	r16
    1fd4:	ff 90       	pop	r15
    1fd6:	ef 90       	pop	r14
    1fd8:	df 90       	pop	r13
    1fda:	cf 90       	pop	r12
    1fdc:	bf 90       	pop	r11
    1fde:	08 95       	ret

00001fe0 <compareSetOutputMode>:
    1fe0:	9c 01       	movw	r18, r24
    1fe2:	0b 96       	adiw	r24, 0x0b	; 11
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	a5 91       	lpm	r26, Z+
    1fe8:	b4 91       	lpm	r27, Z+
    1fea:	23 5f       	subi	r18, 0xF3	; 243
    1fec:	3f 4f       	sbci	r19, 0xFF	; 255
    1fee:	f9 01       	movw	r30, r18
    1ff0:	24 91       	lpm	r18, Z+
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	02 2e       	mov	r0, r18
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <compareSetOutputMode+0x1c>
    1ff8:	66 0f       	add	r22, r22
    1ffa:	77 1f       	adc	r23, r23
    1ffc:	0a 94       	dec	r0
    1ffe:	e2 f7       	brpl	.-8      	; 0x1ff8 <compareSetOutputMode+0x18>
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	02 c0       	rjmp	.+4      	; 0x200a <compareSetOutputMode+0x2a>
    2006:	88 0f       	add	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	2a 95       	dec	r18
    200c:	e2 f7       	brpl	.-8      	; 0x2006 <compareSetOutputMode+0x26>
    200e:	28 2f       	mov	r18, r24
    2010:	22 0f       	add	r18, r18
    2012:	28 2b       	or	r18, r24
    2014:	9c 91       	ld	r25, X
    2016:	82 2f       	mov	r24, r18
    2018:	86 23       	and	r24, r22
    201a:	20 95       	com	r18
    201c:	29 23       	and	r18, r25
    201e:	82 2b       	or	r24, r18
    2020:	8c 93       	st	X, r24
    2022:	08 95       	ret

00002024 <compareSetThreshold>:
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
    2028:	9c 01       	movw	r18, r24
    202a:	2e 5f       	subi	r18, 0xFE	; 254
    202c:	3f 4f       	sbci	r19, 0xFF	; 255
    202e:	f9 01       	movw	r30, r18
    2030:	84 91       	lpm	r24, Z+
    2032:	22 50       	subi	r18, 0x02	; 2
    2034:	30 40       	sbci	r19, 0x00	; 0
    2036:	9c e2       	ldi	r25, 0x2C	; 44
    2038:	89 9f       	mul	r24, r25
    203a:	a0 01       	movw	r20, r0
    203c:	11 24       	eor	r1, r1
    203e:	4c 50       	subi	r20, 0x0C	; 12
    2040:	5e 4f       	sbci	r21, 0xFE	; 254
    2042:	48 5f       	subi	r20, 0xF8	; 248
    2044:	5f 4f       	sbci	r21, 0xFF	; 255
    2046:	fa 01       	movw	r30, r20
    2048:	84 91       	lpm	r24, Z+
    204a:	48 50       	subi	r20, 0x08	; 8
    204c:	50 40       	sbci	r21, 0x00	; 0
    204e:	88 23       	and	r24, r24
    2050:	c1 f0       	breq	.+48     	; 0x2082 <compareSetThreshold+0x5e>
    2052:	c9 01       	movw	r24, r18
    2054:	06 96       	adiw	r24, 0x06	; 6
    2056:	fc 01       	movw	r30, r24
    2058:	c5 91       	lpm	r28, Z+
    205a:	d4 91       	lpm	r29, Z+
    205c:	fa 01       	movw	r30, r20
    205e:	36 96       	adiw	r30, 0x06	; 6
    2060:	e4 91       	lpm	r30, Z+
    2062:	ee 23       	and	r30, r30
    2064:	19 f0       	breq	.+6      	; 0x206c <compareSetThreshold+0x48>
    2066:	79 83       	std	Y+1, r23	; 0x01
    2068:	68 83       	st	Y, r22
    206a:	0e c0       	rjmp	.+28     	; 0x2088 <compareSetThreshold+0x64>
    206c:	6f 3f       	cpi	r22, 0xFF	; 255
    206e:	71 05       	cpc	r23, r1
    2070:	31 f0       	breq	.+12     	; 0x207e <compareSetThreshold+0x5a>
    2072:	28 f0       	brcs	.+10     	; 0x207e <compareSetThreshold+0x5a>
    2074:	8e ef       	ldi	r24, 0xFE	; 254
    2076:	0e 94 36 0c 	call	0x186c	; 0x186c <setError>
    207a:	6f ef       	ldi	r22, 0xFF	; 255
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	68 83       	st	Y, r22
    2080:	03 c0       	rjmp	.+6      	; 0x2088 <compareSetThreshold+0x64>
    2082:	8d ef       	ldi	r24, 0xFD	; 253
    2084:	0e 94 36 0c 	call	0x186c	; 0x186c <setError>
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	08 95       	ret

0000208e <_uartSetBaudRate>:
    208e:	dc 01       	movw	r26, r24
    2090:	19 96       	adiw	r26, 0x09	; 9
    2092:	8d 91       	ld	r24, X+
    2094:	9c 91       	ld	r25, X
    2096:	1a 97       	sbiw	r26, 0x0a	; 10
    2098:	fc 01       	movw	r30, r24
    209a:	25 91       	lpm	r18, Z+
    209c:	34 91       	lpm	r19, Z+
    209e:	cd 01       	movw	r24, r26
    20a0:	f9 01       	movw	r30, r18
    20a2:	09 95       	icall
    20a4:	08 95       	ret

000020a6 <_uartInit>:
    20a6:	df 92       	push	r13
    20a8:	ef 92       	push	r14
    20aa:	ff 92       	push	r15
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
    20b0:	cf 93       	push	r28
    20b2:	df 93       	push	r29
    20b4:	ec 01       	movw	r28, r24
    20b6:	7a 01       	movw	r14, r20
    20b8:	8b 01       	movw	r16, r22
    20ba:	df b6       	in	r13, 0x3f	; 63
    20bc:	f8 94       	cli
    20be:	2d 85       	ldd	r18, Y+13	; 0x0d
    20c0:	3e 85       	ldd	r19, Y+14	; 0x0e
    20c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c4:	98 89       	ldd	r25, Y+16	; 0x10
    20c6:	28 17       	cp	r18, r24
    20c8:	39 07       	cpc	r19, r25
    20ca:	11 f0       	breq	.+4      	; 0x20d0 <_uartInit+0x2a>
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	01 c0       	rjmp	.+2      	; 0x20d2 <_uartInit+0x2c>
    20d0:	8f ef       	ldi	r24, 0xFF	; 255
    20d2:	8f 8b       	std	Y+23, r24	; 0x17
    20d4:	88 23       	and	r24, r24
    20d6:	81 f0       	breq	.+32     	; 0x20f8 <_uartInit+0x52>
    20d8:	2d 85       	ldd	r18, Y+13	; 0x0d
    20da:	3e 85       	ldd	r19, Y+14	; 0x0e
    20dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    20de:	98 89       	ldd	r25, Y+16	; 0x10
    20e0:	28 17       	cp	r18, r24
    20e2:	39 07       	cpc	r19, r25
    20e4:	21 f0       	breq	.+8      	; 0x20ee <_uartInit+0x48>
    20e6:	c9 01       	movw	r24, r18
    20e8:	60 e0       	ldi	r22, 0x00	; 0
    20ea:	0e 94 ae 0c 	call	0x195c	; 0x195c <pin_make_input>
    20ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f0:	98 89       	ldd	r25, Y+16	; 0x10
    20f2:	6f ef       	ldi	r22, 0xFF	; 255
    20f4:	0e 94 ae 0c 	call	0x195c	; 0x195c <pin_make_input>
    20f8:	88 85       	ldd	r24, Y+8	; 0x08
    20fa:	81 60       	ori	r24, 0x01	; 1
    20fc:	88 87       	std	Y+8, r24	; 0x08
    20fe:	88 85       	ldd	r24, Y+8	; 0x08
    2100:	8b 7f       	andi	r24, 0xFB	; 251
    2102:	88 87       	std	Y+8, r24	; 0x08
    2104:	88 85       	ldd	r24, Y+8	; 0x08
    2106:	8d 7f       	andi	r24, 0xFD	; 253
    2108:	88 87       	std	Y+8, r24	; 0x08
    210a:	89 85       	ldd	r24, Y+9	; 0x09
    210c:	9a 85       	ldd	r25, Y+10	; 0x0a
    210e:	04 96       	adiw	r24, 0x04	; 4
    2110:	fc 01       	movw	r30, r24
    2112:	25 91       	lpm	r18, Z+
    2114:	34 91       	lpm	r19, Z+
    2116:	ce 01       	movw	r24, r28
    2118:	b8 01       	movw	r22, r16
    211a:	a7 01       	movw	r20, r14
    211c:	f9 01       	movw	r30, r18
    211e:	09 95       	icall
    2120:	df be       	out	0x3f, r13	; 63
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	1f 91       	pop	r17
    2128:	0f 91       	pop	r16
    212a:	ff 90       	pop	r15
    212c:	ef 90       	pop	r14
    212e:	df 90       	pop	r13
    2130:	08 95       	ret

00002132 <__uartHWSetBaudRate>:
    2132:	bf 92       	push	r11
    2134:	cf 92       	push	r12
    2136:	df 92       	push	r13
    2138:	ef 92       	push	r14
    213a:	ff 92       	push	r15
    213c:	0f 93       	push	r16
    213e:	1f 93       	push	r17
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	7a 01       	movw	r14, r20
    2146:	8b 01       	movw	r16, r22
    2148:	ec 01       	movw	r28, r24
    214a:	bf b6       	in	r11, 0x3f	; 63
    214c:	f8 94       	cli
    214e:	4f 3f       	cpi	r20, 0xFF	; 255
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	58 07       	cpc	r21, r24
    2154:	8f ef       	ldi	r24, 0xFF	; 255
    2156:	68 07       	cpc	r22, r24
    2158:	8f ef       	ldi	r24, 0xFF	; 255
    215a:	78 07       	cpc	r23, r24
    215c:	21 f4       	brne	.+8      	; 0x2166 <__uartHWSetBaudRate+0x34>
    215e:	a1 e0       	ldi	r26, 0x01	; 1
    2160:	ca 2e       	mov	r12, r26
    2162:	d1 2c       	mov	r13, r1
    2164:	24 c0       	rjmp	.+72     	; 0x21ae <__uartHWSetBaudRate+0x7c>
    2166:	cb 01       	movw	r24, r22
    2168:	ba 01       	movw	r22, r20
    216a:	f3 e0       	ldi	r31, 0x03	; 3
    216c:	66 0f       	add	r22, r22
    216e:	77 1f       	adc	r23, r23
    2170:	88 1f       	adc	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	fa 95       	dec	r31
    2176:	d1 f7       	brne	.-12     	; 0x216c <__uartHWSetBaudRate+0x3a>
    2178:	20 91 0c 02 	lds	r18, 0x020C
    217c:	30 91 0d 02 	lds	r19, 0x020D
    2180:	40 91 0e 02 	lds	r20, 0x020E
    2184:	50 91 0f 02 	lds	r21, 0x020F
    2188:	62 0f       	add	r22, r18
    218a:	73 1f       	adc	r23, r19
    218c:	84 1f       	adc	r24, r20
    218e:	95 1f       	adc	r25, r21
    2190:	a8 01       	movw	r20, r16
    2192:	97 01       	movw	r18, r14
    2194:	e4 e0       	ldi	r30, 0x04	; 4
    2196:	22 0f       	add	r18, r18
    2198:	33 1f       	adc	r19, r19
    219a:	44 1f       	adc	r20, r20
    219c:	55 1f       	adc	r21, r21
    219e:	ea 95       	dec	r30
    21a0:	d1 f7       	brne	.-12     	; 0x2196 <__uartHWSetBaudRate+0x64>
    21a2:	0e 94 30 1b 	call	0x3660	; 0x3660 <__udivmodsi4>
    21a6:	69 01       	movw	r12, r18
    21a8:	08 94       	sec
    21aa:	c1 08       	sbc	r12, r1
    21ac:	d1 08       	sbc	r13, r1
    21ae:	98 a9       	ldd	r25, Y+48	; 0x30
    21b0:	99 23       	and	r25, r25
    21b2:	c9 f1       	breq	.+114    	; 0x2226 <__stack+0x27>
    21b4:	ec a1       	ldd	r30, Y+36	; 0x24
    21b6:	fd a1       	ldd	r31, Y+37	; 0x25
    21b8:	80 81       	ld	r24, Z
    21ba:	90 95       	com	r25
    21bc:	89 23       	and	r24, r25
    21be:	80 83       	st	Z, r24
    21c0:	8f ef       	ldi	r24, 0xFF	; 255
    21c2:	e8 16       	cp	r14, r24
    21c4:	8f ef       	ldi	r24, 0xFF	; 255
    21c6:	f8 06       	cpc	r15, r24
    21c8:	8f ef       	ldi	r24, 0xFF	; 255
    21ca:	08 07       	cpc	r16, r24
    21cc:	8f ef       	ldi	r24, 0xFF	; 255
    21ce:	18 07       	cpc	r17, r24
    21d0:	19 f4       	brne	.+6      	; 0x21d8 <__uartHWSetBaudRate+0xa6>
    21d2:	21 e0       	ldi	r18, 0x01	; 1
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	1d c0       	rjmp	.+58     	; 0x2212 <__stack+0x13>
    21d8:	32 e0       	ldi	r19, 0x02	; 2
    21da:	ee 0c       	add	r14, r14
    21dc:	ff 1c       	adc	r15, r15
    21de:	00 1f       	adc	r16, r16
    21e0:	11 1f       	adc	r17, r17
    21e2:	3a 95       	dec	r19
    21e4:	d1 f7       	brne	.-12     	; 0x21da <__uartHWSetBaudRate+0xa8>
    21e6:	60 91 0c 02 	lds	r22, 0x020C
    21ea:	70 91 0d 02 	lds	r23, 0x020D
    21ee:	80 91 0e 02 	lds	r24, 0x020E
    21f2:	90 91 0f 02 	lds	r25, 0x020F
    21f6:	6e 0d       	add	r22, r14
    21f8:	7f 1d       	adc	r23, r15
    21fa:	80 1f       	adc	r24, r16
    21fc:	91 1f       	adc	r25, r17
    21fe:	ee 0c       	add	r14, r14
    2200:	ff 1c       	adc	r15, r15
    2202:	00 1f       	adc	r16, r16
    2204:	11 1f       	adc	r17, r17
    2206:	a8 01       	movw	r20, r16
    2208:	97 01       	movw	r18, r14
    220a:	0e 94 30 1b 	call	0x3660	; 0x3660 <__udivmodsi4>
    220e:	21 50       	subi	r18, 0x01	; 1
    2210:	30 40       	sbci	r19, 0x00	; 0
    2212:	2c 15       	cp	r18, r12
    2214:	3d 05       	cpc	r19, r13
    2216:	38 f0       	brcs	.+14     	; 0x2226 <__stack+0x27>
    2218:	ec a1       	ldd	r30, Y+36	; 0x24
    221a:	fd a1       	ldd	r31, Y+37	; 0x25
    221c:	80 81       	ld	r24, Z
    221e:	98 a9       	ldd	r25, Y+48	; 0x30
    2220:	89 2b       	or	r24, r25
    2222:	80 83       	st	Z, r24
    2224:	69 01       	movw	r12, r18
    2226:	e8 a5       	ldd	r30, Y+40	; 0x28
    2228:	f9 a5       	ldd	r31, Y+41	; 0x29
    222a:	c0 82       	st	Z, r12
    222c:	ea a5       	ldd	r30, Y+42	; 0x2a
    222e:	fb a5       	ldd	r31, Y+43	; 0x2b
    2230:	d0 82       	st	Z, r13
    2232:	bf be       	out	0x3f, r11	; 63
    2234:	df 91       	pop	r29
    2236:	cf 91       	pop	r28
    2238:	1f 91       	pop	r17
    223a:	0f 91       	pop	r16
    223c:	ff 90       	pop	r15
    223e:	ef 90       	pop	r14
    2240:	df 90       	pop	r13
    2242:	cf 90       	pop	r12
    2244:	bf 90       	pop	r11
    2246:	08 95       	ret

00002248 <__uartHWOff>:
    2248:	dc 01       	movw	r26, r24
    224a:	96 96       	adiw	r26, 0x26	; 38
    224c:	ed 91       	ld	r30, X+
    224e:	fc 91       	ld	r31, X
    2250:	97 97       	sbiw	r26, 0x27	; 39
    2252:	80 81       	ld	r24, Z
    2254:	87 72       	andi	r24, 0x27	; 39
    2256:	80 83       	st	Z, r24
    2258:	d0 96       	adiw	r26, 0x30	; 48
    225a:	9c 91       	ld	r25, X
    225c:	d0 97       	sbiw	r26, 0x30	; 48
    225e:	99 23       	and	r25, r25
    2260:	41 f0       	breq	.+16     	; 0x2272 <__uartHWOff+0x2a>
    2262:	94 96       	adiw	r26, 0x24	; 36
    2264:	ed 91       	ld	r30, X+
    2266:	fc 91       	ld	r31, X
    2268:	95 97       	sbiw	r26, 0x25	; 37
    226a:	80 81       	ld	r24, Z
    226c:	90 95       	com	r25
    226e:	89 23       	and	r24, r25
    2270:	80 83       	st	Z, r24
    2272:	08 95       	ret

00002274 <oneWireReceiveMode>:
    2274:	dc 01       	movw	r26, r24
    2276:	57 96       	adiw	r26, 0x17	; 23
    2278:	8c 91       	ld	r24, X
    227a:	57 97       	sbiw	r26, 0x17	; 23
    227c:	88 23       	and	r24, r24
    227e:	71 f0       	breq	.+28     	; 0x229c <oneWireReceiveMode+0x28>
    2280:	96 96       	adiw	r26, 0x26	; 38
    2282:	ed 91       	ld	r30, X+
    2284:	fc 91       	ld	r31, X
    2286:	97 97       	sbiw	r26, 0x27	; 39
    2288:	80 81       	ld	r24, Z
    228a:	87 7b       	andi	r24, 0xB7	; 183
    228c:	80 83       	st	Z, r24
    228e:	96 96       	adiw	r26, 0x26	; 38
    2290:	ed 91       	ld	r30, X+
    2292:	fc 91       	ld	r31, X
    2294:	97 97       	sbiw	r26, 0x27	; 39
    2296:	80 81       	ld	r24, Z
    2298:	80 69       	ori	r24, 0x90	; 144
    229a:	80 83       	st	Z, r24
    229c:	08 95       	ret

0000229e <__uartHWStartXmit>:
    229e:	dc 01       	movw	r26, r24
    22a0:	9c 96       	adiw	r26, 0x2c	; 44
    22a2:	ed 91       	ld	r30, X+
    22a4:	fc 91       	ld	r31, X
    22a6:	9d 97       	sbiw	r26, 0x2d	; 45
    22a8:	60 83       	st	Z, r22
    22aa:	08 95       	ret

000022ac <startXmitMode>:
    22ac:	dc 01       	movw	r26, r24
    22ae:	57 96       	adiw	r26, 0x17	; 23
    22b0:	8c 91       	ld	r24, X
    22b2:	57 97       	sbiw	r26, 0x17	; 23
    22b4:	88 23       	and	r24, r24
    22b6:	71 f0       	breq	.+28     	; 0x22d4 <startXmitMode+0x28>
    22b8:	96 96       	adiw	r26, 0x26	; 38
    22ba:	ed 91       	ld	r30, X+
    22bc:	fc 91       	ld	r31, X
    22be:	97 97       	sbiw	r26, 0x27	; 39
    22c0:	80 81       	ld	r24, Z
    22c2:	8f 76       	andi	r24, 0x6F	; 111
    22c4:	80 83       	st	Z, r24
    22c6:	96 96       	adiw	r26, 0x26	; 38
    22c8:	ed 91       	ld	r30, X+
    22ca:	fc 91       	ld	r31, X
    22cc:	97 97       	sbiw	r26, 0x27	; 39
    22ce:	80 81       	ld	r24, Z
    22d0:	88 64       	ori	r24, 0x48	; 72
    22d2:	80 83       	st	Z, r24
    22d4:	08 95       	ret

000022d6 <__uartHWInit>:
    22d6:	cf 93       	push	r28
    22d8:	df 93       	push	r29
    22da:	ec 01       	movw	r28, r24
    22dc:	0e 94 47 10 	call	0x208e	; 0x208e <_uartSetBaudRate>
    22e0:	8f 89       	ldd	r24, Y+23	; 0x17
    22e2:	88 23       	and	r24, r24
    22e4:	11 f0       	breq	.+4      	; 0x22ea <__uartHWInit+0x14>
    22e6:	20 e9       	ldi	r18, 0x90	; 144
    22e8:	0c c0       	rjmp	.+24     	; 0x2302 <__uartHWInit+0x2c>
    22ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ee:	89 2b       	or	r24, r25
    22f0:	11 f0       	breq	.+4      	; 0x22f6 <__uartHWInit+0x20>
    22f2:	20 e9       	ldi	r18, 0x90	; 144
    22f4:	01 c0       	rjmp	.+2      	; 0x22f8 <__uartHWInit+0x22>
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22fa:	98 89       	ldd	r25, Y+16	; 0x10
    22fc:	89 2b       	or	r24, r25
    22fe:	09 f0       	breq	.+2      	; 0x2302 <__uartHWInit+0x2c>
    2300:	28 64       	ori	r18, 0x48	; 72
    2302:	ee a1       	ldd	r30, Y+38	; 0x26
    2304:	ff a1       	ldd	r31, Y+39	; 0x27
    2306:	20 83       	st	Z, r18
    2308:	df 91       	pop	r29
    230a:	cf 91       	pop	r28
    230c:	08 95       	ret

0000230e <__uartReceiveService>:
    230e:	dc 01       	movw	r26, r24
    2310:	26 2f       	mov	r18, r22
    2312:	14 96       	adiw	r26, 0x04	; 4
    2314:	8d 91       	ld	r24, X+
    2316:	9c 91       	ld	r25, X
    2318:	15 97       	sbiw	r26, 0x05	; 5
    231a:	89 2b       	or	r24, r25
    231c:	59 f0       	breq	.+22     	; 0x2334 <__uartReceiveService+0x26>
    231e:	14 96       	adiw	r26, 0x04	; 4
    2320:	ed 91       	ld	r30, X+
    2322:	fc 91       	ld	r31, X
    2324:	15 97       	sbiw	r26, 0x05	; 5
    2326:	16 96       	adiw	r26, 0x06	; 6
    2328:	6d 91       	ld	r22, X+
    232a:	7c 91       	ld	r23, X
    232c:	17 97       	sbiw	r26, 0x07	; 7
    232e:	82 2f       	mov	r24, r18
    2330:	09 95       	icall
    2332:	08 95       	ret
    2334:	90 96       	adiw	r26, 0x20	; 32
    2336:	ed 91       	ld	r30, X+
    2338:	fc 91       	ld	r31, X
    233a:	91 97       	sbiw	r26, 0x21	; 33
    233c:	cd 01       	movw	r24, r26
    233e:	09 95       	icall
    2340:	08 95       	ret

00002342 <__uartGetByte>:
    2342:	fc 01       	movw	r30, r24
    2344:	22 a1       	ldd	r18, Z+34	; 0x22
    2346:	33 a1       	ldd	r19, Z+35	; 0x23
    2348:	f9 01       	movw	r30, r18
    234a:	09 95       	icall
    234c:	08 95       	ret

0000234e <__uartGetByteUnbuffered>:
    234e:	fc 01       	movw	r30, r24
    2350:	4f b7       	in	r20, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	23 85       	ldd	r18, Z+11	; 0x0b
    2356:	34 85       	ldd	r19, Z+12	; 0x0c
    2358:	8f ef       	ldi	r24, 0xFF	; 255
    235a:	9f ef       	ldi	r25, 0xFF	; 255
    235c:	94 87       	std	Z+12, r25	; 0x0c
    235e:	83 87       	std	Z+11, r24	; 0x0b
    2360:	4f bf       	out	0x3f, r20	; 63
    2362:	c9 01       	movw	r24, r18
    2364:	08 95       	ret

00002366 <__uartReceiveUnbuffered>:
    2366:	fc 01       	movw	r30, r24
    2368:	83 85       	ldd	r24, Z+11	; 0x0b
    236a:	94 85       	ldd	r25, Z+12	; 0x0c
    236c:	8f 5f       	subi	r24, 0xFF	; 255
    236e:	9f 4f       	sbci	r25, 0xFF	; 255
    2370:	29 f4       	brne	.+10     	; 0x237c <__uartReceiveUnbuffered+0x16>
    2372:	86 2f       	mov	r24, r22
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	94 87       	std	Z+12, r25	; 0x0c
    2378:	83 87       	std	Z+11, r24	; 0x0b
    237a:	08 95       	ret
    237c:	80 85       	ldd	r24, Z+8	; 0x08
    237e:	84 60       	ori	r24, 0x04	; 4
    2380:	80 87       	std	Z+8, r24	; 0x08
    2382:	85 ef       	ldi	r24, 0xF5	; 245
    2384:	0e 94 36 0c 	call	0x186c	; 0x186c <setError>
    2388:	08 95       	ret

0000238a <_uartStartXmit>:
    238a:	dc 01       	movw	r26, r24
    238c:	19 96       	adiw	r26, 0x09	; 9
    238e:	8d 91       	ld	r24, X+
    2390:	9c 91       	ld	r25, X
    2392:	1a 97       	sbiw	r26, 0x0a	; 10
    2394:	02 96       	adiw	r24, 0x02	; 2
    2396:	fc 01       	movw	r30, r24
    2398:	25 91       	lpm	r18, Z+
    239a:	34 91       	lpm	r19, Z+
    239c:	cd 01       	movw	r24, r26
    239e:	f9 01       	movw	r30, r18
    23a0:	09 95       	icall
    23a2:	08 95       	ret

000023a4 <_uartTransmitBlockStart>:
    23a4:	cf 93       	push	r28
    23a6:	df 93       	push	r29
    23a8:	ec 01       	movw	r28, r24
    23aa:	88 85       	ldd	r24, Y+8	; 0x08
    23ac:	8e 7f       	andi	r24, 0xFE	; 254
    23ae:	88 87       	std	Y+8, r24	; 0x08
    23b0:	e8 8d       	ldd	r30, Y+24	; 0x18
    23b2:	f9 8d       	ldd	r31, Y+25	; 0x19
    23b4:	30 97       	sbiw	r30, 0x00	; 0
    23b6:	21 f0       	breq	.+8      	; 0x23c0 <_uartTransmitBlockStart+0x1c>
    23b8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23ba:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23bc:	6f ef       	ldi	r22, 0xFF	; 255
    23be:	09 95       	icall
    23c0:	e9 85       	ldd	r30, Y+9	; 0x09
    23c2:	fa 85       	ldd	r31, Y+10	; 0x0a
    23c4:	38 96       	adiw	r30, 0x08	; 8
    23c6:	25 91       	lpm	r18, Z+
    23c8:	34 91       	lpm	r19, Z+
    23ca:	21 15       	cp	r18, r1
    23cc:	31 05       	cpc	r19, r1
    23ce:	19 f0       	breq	.+6      	; 0x23d6 <_uartTransmitBlockStart+0x32>
    23d0:	ce 01       	movw	r24, r28
    23d2:	f9 01       	movw	r30, r18
    23d4:	09 95       	icall
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	08 95       	ret

000023dc <_uartTransmitBlockEnd>:
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	ec 01       	movw	r28, r24
    23e2:	88 85       	ldd	r24, Y+8	; 0x08
    23e4:	81 60       	ori	r24, 0x01	; 1
    23e6:	88 87       	std	Y+8, r24	; 0x08
    23e8:	e9 85       	ldd	r30, Y+9	; 0x09
    23ea:	fa 85       	ldd	r31, Y+10	; 0x0a
    23ec:	3a 96       	adiw	r30, 0x0a	; 10
    23ee:	25 91       	lpm	r18, Z+
    23f0:	34 91       	lpm	r19, Z+
    23f2:	21 15       	cp	r18, r1
    23f4:	31 05       	cpc	r19, r1
    23f6:	19 f0       	breq	.+6      	; 0x23fe <_uartTransmitBlockEnd+0x22>
    23f8:	ce 01       	movw	r24, r28
    23fa:	f9 01       	movw	r30, r18
    23fc:	09 95       	icall
    23fe:	e8 8d       	ldd	r30, Y+24	; 0x18
    2400:	f9 8d       	ldd	r31, Y+25	; 0x19
    2402:	30 97       	sbiw	r30, 0x00	; 0
    2404:	21 f0       	breq	.+8      	; 0x240e <_uartTransmitBlockEnd+0x32>
    2406:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2408:	9b 8d       	ldd	r25, Y+27	; 0x1b
    240a:	60 e0       	ldi	r22, 0x00	; 0
    240c:	09 95       	icall
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	08 95       	ret

00002414 <_uartSendBuffer>:
    2414:	ef 92       	push	r14
    2416:	ff 92       	push	r15
    2418:	0f 93       	push	r16
    241a:	1f 93       	push	r17
    241c:	cf 93       	push	r28
    241e:	df 93       	push	r29
    2420:	8c 01       	movw	r16, r24
    2422:	7b 01       	movw	r14, r22
    2424:	ea 01       	movw	r28, r20
    2426:	0b c0       	rjmp	.+22     	; 0x243e <_uartSendBuffer+0x2a>
    2428:	d7 01       	movw	r26, r14
    242a:	6d 91       	ld	r22, X+
    242c:	7d 01       	movw	r14, r26
    242e:	d8 01       	movw	r26, r16
    2430:	5c 96       	adiw	r26, 0x1c	; 28
    2432:	ed 91       	ld	r30, X+
    2434:	fc 91       	ld	r31, X
    2436:	5d 97       	sbiw	r26, 0x1d	; 29
    2438:	c8 01       	movw	r24, r16
    243a:	09 95       	icall
    243c:	21 97       	sbiw	r28, 0x01	; 1
    243e:	20 97       	sbiw	r28, 0x00	; 0
    2440:	99 f7       	brne	.-26     	; 0x2428 <_uartSendBuffer+0x14>
    2442:	df 91       	pop	r29
    2444:	cf 91       	pop	r28
    2446:	1f 91       	pop	r17
    2448:	0f 91       	pop	r16
    244a:	ff 90       	pop	r15
    244c:	ef 90       	pop	r14
    244e:	08 95       	ret

00002450 <_uartSendByte>:
    2450:	1f 93       	push	r17
    2452:	fc 01       	movw	r30, r24
    2454:	16 2f       	mov	r17, r22
    2456:	24 8d       	ldd	r18, Z+28	; 0x1c
    2458:	35 8d       	ldd	r19, Z+29	; 0x1d
    245a:	f9 01       	movw	r30, r18
    245c:	09 95       	icall
    245e:	81 2f       	mov	r24, r17
    2460:	1f 91       	pop	r17
    2462:	08 95       	ret

00002464 <__uartTransmitService>:
    2464:	fc 01       	movw	r30, r24
    2466:	26 8d       	ldd	r18, Z+30	; 0x1e
    2468:	37 8d       	ldd	r19, Z+31	; 0x1f
    246a:	f9 01       	movw	r30, r18
    246c:	09 95       	icall
    246e:	08 95       	ret

00002470 <__uartSendNextUnbuffered>:
    2470:	1f 93       	push	r17
    2472:	1f b7       	in	r17, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	0e 94 ee 11 	call	0x23dc	; 0x23dc <_uartTransmitBlockEnd>
    247a:	1f bf       	out	0x3f, r17	; 63
    247c:	1f 91       	pop	r17
    247e:	08 95       	ret

00002480 <__uartSendUnbuffered>:
    2480:	0f 93       	push	r16
    2482:	1f 93       	push	r17
    2484:	cf 93       	push	r28
    2486:	df 93       	push	r29
    2488:	06 2f       	mov	r16, r22
    248a:	ec 01       	movw	r28, r24
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <__uartSendUnbuffered+0x12>
    248e:	0e 94 c8 12 	call	0x2590	; 0x2590 <breathe>
    2492:	88 85       	ldd	r24, Y+8	; 0x08
    2494:	80 ff       	sbrs	r24, 0
    2496:	fb cf       	rjmp	.-10     	; 0x248e <__uartSendUnbuffered+0xe>
    2498:	1f b7       	in	r17, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	ce 01       	movw	r24, r28
    249e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <_uartTransmitBlockStart>
    24a2:	ce 01       	movw	r24, r28
    24a4:	60 2f       	mov	r22, r16
    24a6:	0e 94 c5 11 	call	0x238a	; 0x238a <_uartStartXmit>
    24aa:	1f bf       	out	0x3f, r17	; 63
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	1f 91       	pop	r17
    24b2:	0f 91       	pop	r16
    24b4:	08 95       	ret

000024b6 <uartReceivePollingMode>:
    24b6:	dc 01       	movw	r26, r24
    24b8:	96 96       	adiw	r26, 0x26	; 38
    24ba:	ed 91       	ld	r30, X+
    24bc:	fc 91       	ld	r31, X
    24be:	97 97       	sbiw	r26, 0x27	; 39
    24c0:	66 23       	and	r22, r22
    24c2:	19 f0       	breq	.+6      	; 0x24ca <uartReceivePollingMode+0x14>
    24c4:	80 81       	ld	r24, Z
    24c6:	8f 77       	andi	r24, 0x7F	; 127
    24c8:	02 c0       	rjmp	.+4      	; 0x24ce <uartReceivePollingMode+0x18>
    24ca:	80 81       	ld	r24, Z
    24cc:	80 68       	ori	r24, 0x80	; 128
    24ce:	80 83       	st	Z, r24
    24d0:	08 95       	ret

000024d2 <uartPollByte>:
    24d2:	dc 01       	movw	r26, r24
    24d4:	94 96       	adiw	r26, 0x24	; 36
    24d6:	ed 91       	ld	r30, X+
    24d8:	fc 91       	ld	r31, X
    24da:	95 97       	sbiw	r26, 0x25	; 37
    24dc:	80 81       	ld	r24, Z
    24de:	87 fd       	sbrc	r24, 7
    24e0:	03 c0       	rjmp	.+6      	; 0x24e8 <uartPollByte+0x16>
    24e2:	2f ef       	ldi	r18, 0xFF	; 255
    24e4:	3f ef       	ldi	r19, 0xFF	; 255
    24e6:	07 c0       	rjmp	.+14     	; 0x24f6 <uartPollByte+0x24>
    24e8:	9c 96       	adiw	r26, 0x2c	; 44
    24ea:	ed 91       	ld	r30, X+
    24ec:	fc 91       	ld	r31, X
    24ee:	9d 97       	sbiw	r26, 0x2d	; 45
    24f0:	80 81       	ld	r24, Z
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	c9 01       	movw	r24, r18
    24f8:	08 95       	ret

000024fa <clockHasElapsed>:
    24fa:	0f 93       	push	r16
    24fc:	1f 93       	push	r17
    24fe:	00 e0       	ldi	r16, 0x00	; 0
    2500:	10 e0       	ldi	r17, 0x00	; 0
    2502:	0e 94 86 12 	call	0x250c	; 0x250c <clockHasElapsedGetOverflow>
    2506:	1f 91       	pop	r17
    2508:	0f 91       	pop	r16
    250a:	08 95       	ret

0000250c <clockHasElapsedGetOverflow>:
    250c:	8f 92       	push	r8
    250e:	9f 92       	push	r9
    2510:	af 92       	push	r10
    2512:	bf 92       	push	r11
    2514:	cf 92       	push	r12
    2516:	df 92       	push	r13
    2518:	ef 92       	push	r14
    251a:	ff 92       	push	r15
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	6b 01       	movw	r12, r22
    2526:	7c 01       	movw	r14, r24
    2528:	49 01       	movw	r8, r18
    252a:	5a 01       	movw	r10, r20
    252c:	e8 01       	movw	r28, r16
    252e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <clockGetus>
    2532:	6c 19       	sub	r22, r12
    2534:	7d 09       	sbc	r23, r13
    2536:	8e 09       	sbc	r24, r14
    2538:	9f 09       	sbc	r25, r15
    253a:	68 15       	cp	r22, r8
    253c:	79 05       	cpc	r23, r9
    253e:	8a 05       	cpc	r24, r10
    2540:	9b 05       	cpc	r25, r11
    2542:	68 f0       	brcs	.+26     	; 0x255e <clockHasElapsedGetOverflow+0x52>
    2544:	01 15       	cp	r16, r1
    2546:	11 05       	cpc	r17, r1
    2548:	41 f0       	breq	.+16     	; 0x255a <clockHasElapsedGetOverflow+0x4e>
    254a:	68 19       	sub	r22, r8
    254c:	79 09       	sbc	r23, r9
    254e:	8a 09       	sbc	r24, r10
    2550:	9b 09       	sbc	r25, r11
    2552:	68 83       	st	Y, r22
    2554:	79 83       	std	Y+1, r23	; 0x01
    2556:	8a 83       	std	Y+2, r24	; 0x02
    2558:	9b 83       	std	Y+3, r25	; 0x03
    255a:	8f ef       	ldi	r24, 0xFF	; 255
    255c:	0c c0       	rjmp	.+24     	; 0x2576 <clockHasElapsedGetOverflow+0x6a>
    255e:	01 15       	cp	r16, r1
    2560:	11 05       	cpc	r17, r1
    2562:	41 f0       	breq	.+16     	; 0x2574 <clockHasElapsedGetOverflow+0x68>
    2564:	86 1a       	sub	r8, r22
    2566:	97 0a       	sbc	r9, r23
    2568:	a8 0a       	sbc	r10, r24
    256a:	b9 0a       	sbc	r11, r25
    256c:	88 82       	st	Y, r8
    256e:	99 82       	std	Y+1, r9	; 0x01
    2570:	aa 82       	std	Y+2, r10	; 0x02
    2572:	bb 82       	std	Y+3, r11	; 0x03
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	ff 90       	pop	r15
    2580:	ef 90       	pop	r14
    2582:	df 90       	pop	r13
    2584:	cf 90       	pop	r12
    2586:	bf 90       	pop	r11
    2588:	af 90       	pop	r10
    258a:	9f 90       	pop	r9
    258c:	8f 90       	pop	r8
    258e:	08 95       	ret

00002590 <breathe>:
    2590:	8f b7       	in	r24, 0x3f	; 63
    2592:	78 94       	sei
	...
    25a0:	00 00       	nop
    25a2:	8f bf       	out	0x3f, r24	; 63
    25a4:	08 95       	ret

000025a6 <pin_low>:
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	9c 01       	movw	r18, r24
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	e9 f0       	breq	.+58     	; 0x25ea <pin_low+0x44>
    25b0:	fc 01       	movw	r30, r24
    25b2:	85 91       	lpm	r24, Z+
    25b4:	94 91       	lpm	r25, Z+
    25b6:	fc 01       	movw	r30, r24
    25b8:	a5 91       	lpm	r26, Z+
    25ba:	b4 91       	lpm	r27, Z+
    25bc:	02 96       	adiw	r24, 0x02	; 2
    25be:	fc 01       	movw	r30, r24
    25c0:	c5 91       	lpm	r28, Z+
    25c2:	d4 91       	lpm	r29, Z+
    25c4:	2e 5f       	subi	r18, 0xFE	; 254
    25c6:	3f 4f       	sbci	r19, 0xFF	; 255
    25c8:	f9 01       	movw	r30, r18
    25ca:	24 91       	lpm	r18, Z+
    25cc:	88 81       	ld	r24, Y
    25ce:	82 23       	and	r24, r18
    25d0:	49 f0       	breq	.+18     	; 0x25e4 <pin_low+0x3e>
    25d2:	9f b7       	in	r25, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	8c 91       	ld	r24, X
    25d8:	20 95       	com	r18
    25da:	82 23       	and	r24, r18
    25dc:	8c 93       	st	X, r24
    25de:	9f bf       	out	0x3f, r25	; 63
    25e0:	00 00       	nop
    25e2:	03 c0       	rjmp	.+6      	; 0x25ea <pin_low+0x44>
    25e4:	87 ef       	ldi	r24, 0xF7	; 247
    25e6:	0e 94 36 0c 	call	0x186c	; 0x186c <setError>
    25ea:	df 91       	pop	r29
    25ec:	cf 91       	pop	r28
    25ee:	08 95       	ret

000025f0 <pin_high>:
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	9c 01       	movw	r18, r24
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	e1 f0       	breq	.+56     	; 0x2632 <pin_high+0x42>
    25fa:	fc 01       	movw	r30, r24
    25fc:	85 91       	lpm	r24, Z+
    25fe:	94 91       	lpm	r25, Z+
    2600:	fc 01       	movw	r30, r24
    2602:	a5 91       	lpm	r26, Z+
    2604:	b4 91       	lpm	r27, Z+
    2606:	02 96       	adiw	r24, 0x02	; 2
    2608:	fc 01       	movw	r30, r24
    260a:	c5 91       	lpm	r28, Z+
    260c:	d4 91       	lpm	r29, Z+
    260e:	2e 5f       	subi	r18, 0xFE	; 254
    2610:	3f 4f       	sbci	r19, 0xFF	; 255
    2612:	f9 01       	movw	r30, r18
    2614:	24 91       	lpm	r18, Z+
    2616:	88 81       	ld	r24, Y
    2618:	82 23       	and	r24, r18
    261a:	41 f0       	breq	.+16     	; 0x262c <pin_high+0x3c>
    261c:	9f b7       	in	r25, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	8c 91       	ld	r24, X
    2622:	82 2b       	or	r24, r18
    2624:	8c 93       	st	X, r24
    2626:	9f bf       	out	0x3f, r25	; 63
    2628:	00 00       	nop
    262a:	03 c0       	rjmp	.+6      	; 0x2632 <pin_high+0x42>
    262c:	87 ef       	ldi	r24, 0xF7	; 247
    262e:	0e 94 36 0c 	call	0x186c	; 0x186c <setError>
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	08 95       	ret

00002638 <pin_set>:
    2638:	66 23       	and	r22, r22
    263a:	19 f0       	breq	.+6      	; 0x2642 <pin_set+0xa>
    263c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <pin_high>
    2640:	08 95       	ret
    2642:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <pin_low>
    2646:	08 95       	ret

00002648 <__scheduleUpdate>:
	uint16_t rtn = MIN(ticks,CLOCK_TOP);
	return rtn;
}

// called under compare interrupts when there is something in the queue
static void __scheduleUpdate(void){
    2648:	2f 92       	push	r2
    264a:	3f 92       	push	r3
    264c:	4f 92       	push	r4
    264e:	5f 92       	push	r5
    2650:	6f 92       	push	r6
    2652:	7f 92       	push	r7
    2654:	8f 92       	push	r8
    2656:	9f 92       	push	r9
    2658:	af 92       	push	r10
    265a:	bf 92       	push	r11
    265c:	cf 92       	push	r12
    265e:	df 92       	push	r13
    2660:	ef 92       	push	r14
    2662:	ff 92       	push	r15
    2664:	0f 93       	push	r16
    2666:	1f 93       	push	r17
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	27 97       	sbiw	r28, 0x07	; 7
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
	// Dont call me again - turn off compare interrupts
	SCHEDULER_INT_DISABLE;
    267c:	80 91 73 00 	lds	r24, 0x0073
    2680:	8b 7f       	andi	r24, 0xFB	; 251
    2682:	80 93 73 00 	sts	0x0073, r24

	// Turn interrupts back on
	INTERRUPTABLE_SECTION{
    2686:	2f b7       	in	r18, 0x3f	; 63
    2688:	2f 83       	std	Y+7, r18	; 0x07
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
    268a:	78 94       	sei
		__running = TRUE;
    268c:	8f ef       	ldi	r24, 0xFF	; 255
    268e:	80 93 27 04 	sts	0x0427, r24
		TICK_COUNT lowest;
		do{
			int slot;
			__recheck = FALSE;
    2692:	10 92 28 04 	sts	0x0428, r1
			JOB* job;
			lowest=0;
			for(slot=maxJobs-1, job=&__queue[slot]; slot>=0; slot--, job--){
    2696:	80 91 f3 02 	lds	r24, 0x02F3
    269a:	a8 2f       	mov	r26, r24
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	11 97       	sbiw	r26, 0x01	; 1
    26a0:	be 83       	std	Y+6, r27	; 0x06
    26a2:	ad 83       	std	Y+5, r26	; 0x05
    26a4:	ed e0       	ldi	r30, 0x0D	; 13
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	ae 9f       	mul	r26, r30
    26aa:	50 01       	movw	r10, r0
    26ac:	af 9f       	mul	r26, r31
    26ae:	b0 0c       	add	r11, r0
    26b0:	be 9f       	mul	r27, r30
    26b2:	b0 0c       	add	r11, r0
    26b4:	11 24       	eor	r1, r1
    26b6:	2a e1       	ldi	r18, 0x1A	; 26
    26b8:	34 e0       	ldi	r19, 0x04	; 4
    26ba:	a2 0e       	add	r10, r18
    26bc:	b3 1e       	adc	r11, r19
    26be:	66 24       	eor	r6, r6
    26c0:	77 24       	eor	r7, r7
    26c2:	43 01       	movw	r8, r6
    26c4:	5a c0       	rjmp	.+180    	; 0x277a <__scheduleUpdate+0x132>
				if(job->used){
    26c6:	d5 01       	movw	r26, r10
    26c8:	8c 91       	ld	r24, X
    26ca:	88 23       	and	r24, r24
    26cc:	09 f4       	brne	.+2      	; 0x26d0 <__scheduleUpdate+0x88>
    26ce:	4c c0       	rjmp	.+152    	; 0x2768 <__scheduleUpdate+0x120>
					// check if time has elapsed
					TICK_COUNT overflow;	// how many us the timer has overshot when it should have happened
					TICK_COUNT start=job->start;
    26d0:	19 96       	adiw	r26, 0x09	; 9
    26d2:	2d 90       	ld	r2, X+
    26d4:	3d 90       	ld	r3, X+
    26d6:	4d 90       	ld	r4, X+
    26d8:	5c 90       	ld	r5, X
    26da:	1c 97       	sbiw	r26, 0x0c	; 12
					TICK_COUNT delay=job->delay;
    26dc:	15 96       	adiw	r26, 0x05	; 5
    26de:	cd 90       	ld	r12, X+
    26e0:	dd 90       	ld	r13, X+
    26e2:	ed 90       	ld	r14, X+
    26e4:	fc 90       	ld	r15, X
    26e6:	18 97       	sbiw	r26, 0x08	; 8
					if(clockHasElapsedGetOverflow(start, delay, &overflow)){
    26e8:	c2 01       	movw	r24, r4
    26ea:	b1 01       	movw	r22, r2
    26ec:	a7 01       	movw	r20, r14
    26ee:	96 01       	movw	r18, r12
    26f0:	8e 01       	movw	r16, r28
    26f2:	0f 5f       	subi	r16, 0xFF	; 255
    26f4:	1f 4f       	sbci	r17, 0xFF	; 255
    26f6:	0e 94 86 12 	call	0x250c	; 0x250c <clockHasElapsedGetOverflow>
    26fa:	88 23       	and	r24, r24
    26fc:	19 f1       	breq	.+70     	; 0x2744 <__scheduleUpdate+0xfc>
						SchedulerCallback callback = job->callback;
    26fe:	d5 01       	movw	r26, r10
    2700:	11 96       	adiw	r26, 0x01	; 1
    2702:	ed 91       	ld	r30, X+
    2704:	fc 91       	ld	r31, X
    2706:	12 97       	sbiw	r26, 0x02	; 2
						SchedulerData data = job->data;
    2708:	13 96       	adiw	r26, 0x03	; 3
    270a:	8d 91       	ld	r24, X+
    270c:	9c 91       	ld	r25, X
    270e:	14 97       	sbiw	r26, 0x04	; 4

						// Mark this job as unused. No more references shoud be made to job->xxxx
						job->used = FALSE;
    2710:	1c 92       	st	X, r1
						--__numJobs;
    2712:	20 91 29 04 	lds	r18, 0x0429
    2716:	30 91 2a 04 	lds	r19, 0x042A
    271a:	21 50       	subi	r18, 0x01	; 1
    271c:	30 40       	sbci	r19, 0x00	; 0
    271e:	30 93 2a 04 	sts	0x042A, r19
    2722:	20 93 29 04 	sts	0x0429, r18

						// Run the job with interrupts enabled
						callback(data,start+delay,overflow);
    2726:	c2 0c       	add	r12, r2
    2728:	d3 1c       	adc	r13, r3
    272a:	e4 1c       	adc	r14, r4
    272c:	f5 1c       	adc	r15, r5
    272e:	09 81       	ldd	r16, Y+1	; 0x01
    2730:	1a 81       	ldd	r17, Y+2	; 0x02
    2732:	2b 81       	ldd	r18, Y+3	; 0x03
    2734:	3c 81       	ldd	r19, Y+4	; 0x04
    2736:	b7 01       	movw	r22, r14
    2738:	a6 01       	movw	r20, r12
    273a:	09 95       	icall


						// Force another loop as the time taken may mean
						// something else can now run
						__recheck = TRUE;
    273c:	bf ef       	ldi	r27, 0xFF	; 255
    273e:	b0 93 28 04 	sts	0x0428, r27
    2742:	12 c0       	rjmp	.+36     	; 0x2768 <__scheduleUpdate+0x120>
					}else{
					   // overflow has the remaining number of microseconds to wait
					   if(lowest==0 || overflow < lowest){
    2744:	61 14       	cp	r6, r1
    2746:	71 04       	cpc	r7, r1
    2748:	81 04       	cpc	r8, r1
    274a:	91 04       	cpc	r9, r1
    274c:	49 f0       	breq	.+18     	; 0x2760 <__scheduleUpdate+0x118>
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	9a 81       	ldd	r25, Y+2	; 0x02
    2752:	ab 81       	ldd	r26, Y+3	; 0x03
    2754:	bc 81       	ldd	r27, Y+4	; 0x04
    2756:	86 15       	cp	r24, r6
    2758:	97 05       	cpc	r25, r7
    275a:	a8 05       	cpc	r26, r8
    275c:	b9 05       	cpc	r27, r9
    275e:	20 f4       	brcc	.+8      	; 0x2768 <__scheduleUpdate+0x120>
						   lowest = overflow;
    2760:	69 80       	ldd	r6, Y+1	; 0x01
    2762:	7a 80       	ldd	r7, Y+2	; 0x02
    2764:	8b 80       	ldd	r8, Y+3	; 0x03
    2766:	9c 80       	ldd	r9, Y+4	; 0x04
		do{
			int slot;
			__recheck = FALSE;
			JOB* job;
			lowest=0;
			for(slot=maxJobs-1, job=&__queue[slot]; slot>=0; slot--, job--){
    2768:	ed 81       	ldd	r30, Y+5	; 0x05
    276a:	fe 81       	ldd	r31, Y+6	; 0x06
    276c:	31 97       	sbiw	r30, 0x01	; 1
    276e:	fe 83       	std	Y+6, r31	; 0x06
    2770:	ed 83       	std	Y+5, r30	; 0x05
    2772:	23 ef       	ldi	r18, 0xF3	; 243
    2774:	3f ef       	ldi	r19, 0xFF	; 255
    2776:	a2 0e       	add	r10, r18
    2778:	b3 1e       	adc	r11, r19
    277a:	8d 81       	ldd	r24, Y+5	; 0x05
    277c:	9e 81       	ldd	r25, Y+6	; 0x06
    277e:	8f 5f       	subi	r24, 0xFF	; 255
    2780:	9f 4f       	sbci	r25, 0xFF	; 255
    2782:	09 f0       	breq	.+2      	; 0x2786 <__scheduleUpdate+0x13e>
    2784:	a0 cf       	rjmp	.-192    	; 0x26c6 <__scheduleUpdate+0x7e>
						   lowest = overflow;
					   }
					}
				}
			}
		}while( __recheck);
    2786:	80 91 28 04 	lds	r24, 0x0428
    278a:	88 23       	and	r24, r24
    278c:	09 f0       	breq	.+2      	; 0x2790 <__scheduleUpdate+0x148>
    278e:	81 cf       	rjmp	.-254    	; 0x2692 <__scheduleUpdate+0x4a>
		__running=FALSE;
    2790:	10 92 27 04 	sts	0x0427, r1

		if(__numJobs > 0){
    2794:	80 91 29 04 	lds	r24, 0x0429
    2798:	90 91 2a 04 	lds	r25, 0x042A
    279c:	18 16       	cp	r1, r24
    279e:	19 06       	cpc	r1, r25
    27a0:	4c f5       	brge	.+82     	; 0x27f4 <__scheduleUpdate+0x1ac>
			// Decide when we need to interrupt again
			uint16_t compare = calcTicks(lowest) + CLOCK_COUNTER;
    27a2:	20 91 24 01 	lds	r18, 0x0124
    27a6:	30 91 25 01 	lds	r19, 0x0125
    27aa:	d4 01       	movw	r26, r8
    27ac:	c3 01       	movw	r24, r6
    27ae:	88 0f       	add	r24, r24
    27b0:	99 1f       	adc	r25, r25
    27b2:	aa 1f       	adc	r26, r26
    27b4:	bb 1f       	adc	r27, r27
    27b6:	81 30       	cpi	r24, 0x01	; 1
    27b8:	ea ef       	ldi	r30, 0xFA	; 250
    27ba:	9e 07       	cpc	r25, r30
    27bc:	e0 e0       	ldi	r30, 0x00	; 0
    27be:	ae 07       	cpc	r26, r30
    27c0:	e0 e0       	ldi	r30, 0x00	; 0
    27c2:	be 07       	cpc	r27, r30
    27c4:	20 f0       	brcs	.+8      	; 0x27ce <__scheduleUpdate+0x186>
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	9a ef       	ldi	r25, 0xFA	; 250
    27ca:	a0 e0       	ldi	r26, 0x00	; 0
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	82 0f       	add	r24, r18
    27d0:	93 1f       	adc	r25, r19
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <__scheduleUpdate+0x190>
			while(compare >= CLOCK_TOP){
				compare -= CLOCK_TOP;
    27d4:	80 50       	subi	r24, 0x00	; 0
    27d6:	9a 4f       	sbci	r25, 0xFA	; 250
		__running=FALSE;

		if(__numJobs > 0){
			// Decide when we need to interrupt again
			uint16_t compare = calcTicks(lowest) + CLOCK_COUNTER;
			while(compare >= CLOCK_TOP){
    27d8:	fa ef       	ldi	r31, 0xFA	; 250
    27da:	80 30       	cpi	r24, 0x00	; 0
    27dc:	9f 07       	cpc	r25, r31
    27de:	d0 f7       	brcc	.-12     	; 0x27d4 <__scheduleUpdate+0x18c>
				compare -= CLOCK_TOP;
			}
			// Set when next interrupt should occur
			SCHEDULER_THRESHOLD = compare;
    27e0:	90 93 2b 01 	sts	0x012B, r25
    27e4:	80 93 2a 01 	sts	0x012A, r24
			// Clear any pending interrupt
			SCHEDULER_INT_CLEAR;
    27e8:	d2 9a       	sbi	0x1a, 2	; 26
			// Look for new interrupts
			SCHEDULER_INT_ENABLE;
    27ea:	80 91 73 00 	lds	r24, 0x0073
    27ee:	84 60       	ori	r24, 0x04	; 4
    27f0:	80 93 73 00 	sts	0x0073, r24
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    27f4:	2f 81       	ldd	r18, Y+7	; 0x07
    27f6:	2f bf       	out	0x3f, r18	; 63
		}

	} // Restore previous interrupt enable
}
    27f8:	27 96       	adiw	r28, 0x07	; 7
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	de bf       	out	0x3e, r29	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	cd bf       	out	0x3d, r28	; 61
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	1f 91       	pop	r17
    280a:	0f 91       	pop	r16
    280c:	ff 90       	pop	r15
    280e:	ef 90       	pop	r14
    2810:	df 90       	pop	r13
    2812:	cf 90       	pop	r12
    2814:	bf 90       	pop	r11
    2816:	af 90       	pop	r10
    2818:	9f 90       	pop	r9
    281a:	8f 90       	pop	r8
    281c:	7f 90       	pop	r7
    281e:	6f 90       	pop	r6
    2820:	5f 90       	pop	r5
    2822:	4f 90       	pop	r4
    2824:	3f 90       	pop	r3
    2826:	2f 90       	pop	r2
    2828:	08 95       	ret

0000282a <__vector_48>:
}



// ISR for scheduler match - check if another job needs to run
ISR(TIMER5_COMPB_vect) {
    282a:	1f 92       	push	r1
    282c:	0f 92       	push	r0
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	0f 92       	push	r0
    2832:	11 24       	eor	r1, r1
    2834:	2f 93       	push	r18
    2836:	3f 93       	push	r19
    2838:	4f 93       	push	r20
    283a:	5f 93       	push	r21
    283c:	6f 93       	push	r22
    283e:	7f 93       	push	r23
    2840:	8f 93       	push	r24
    2842:	9f 93       	push	r25
    2844:	af 93       	push	r26
    2846:	bf 93       	push	r27
    2848:	ef 93       	push	r30
    284a:	ff 93       	push	r31
	__scheduleUpdate();
    284c:	0e 94 24 13 	call	0x2648	; 0x2648 <__scheduleUpdate>
}
    2850:	ff 91       	pop	r31
    2852:	ef 91       	pop	r30
    2854:	bf 91       	pop	r27
    2856:	af 91       	pop	r26
    2858:	9f 91       	pop	r25
    285a:	8f 91       	pop	r24
    285c:	7f 91       	pop	r23
    285e:	6f 91       	pop	r22
    2860:	5f 91       	pop	r21
    2862:	4f 91       	pop	r20
    2864:	3f 91       	pop	r19
    2866:	2f 91       	pop	r18
    2868:	0f 90       	pop	r0
    286a:	0f be       	out	0x3f, r0	; 63
    286c:	0f 90       	pop	r0
    286e:	1f 90       	pop	r1
    2870:	18 95       	reti

00002872 <scheduleJob>:
// schedule a new job
// callback Is the function to be run at a later date
// data is a block of data to be passed into the callback
// start (in us) Is the start time of the delay
// delay (in us) Is the amount to delay by
void scheduleJob(SchedulerCallback callback, SchedulerData data, TICK_COUNT start, TICK_COUNT delay){
    2872:	2f 92       	push	r2
    2874:	3f 92       	push	r3
    2876:	4f 92       	push	r4
    2878:	5f 92       	push	r5
    287a:	6f 92       	push	r6
    287c:	7f 92       	push	r7
    287e:	8f 92       	push	r8
    2880:	9f 92       	push	r9
    2882:	af 92       	push	r10
    2884:	bf 92       	push	r11
    2886:	cf 92       	push	r12
    2888:	df 92       	push	r13
    288a:	ef 92       	push	r14
    288c:	ff 92       	push	r15
    288e:	0f 93       	push	r16
    2890:	1f 93       	push	r17
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	00 d0       	rcall	.+0      	; 0x2898 <scheduleJob+0x26>
    2898:	00 d0       	rcall	.+0      	; 0x289a <scheduleJob+0x28>
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	1c 01       	movw	r2, r24
    28a0:	2b 01       	movw	r4, r22
    28a2:	49 01       	movw	r8, r18
    28a4:	5a 01       	movw	r10, r20
    28a6:	67 01       	movw	r12, r14
    28a8:	78 01       	movw	r14, r16
	boolean doItNow = FALSE;

 	if(delay < 1000U){
    28aa:	88 ee       	ldi	r24, 0xE8	; 232
    28ac:	c8 16       	cp	r12, r24
    28ae:	83 e0       	ldi	r24, 0x03	; 3
    28b0:	d8 06       	cpc	r13, r24
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	e8 06       	cpc	r14, r24
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	f8 06       	cpc	r15, r24
    28ba:	38 f4       	brcc	.+14     	; 0x28ca <scheduleJob+0x58>
		// it needs to happen now as the delay is less than the heartbeat timer interrupt of 1ms
		if(__running){
    28bc:	80 91 27 04 	lds	r24, 0x0427
    28c0:	88 23       	and	r24, r24
    28c2:	c1 f1       	breq	.+112    	; 0x2934 <scheduleJob+0xc2>
			// make sure we do another loop of __scheduleUpdate to find it
			__recheck=TRUE;
    28c4:	8f ef       	ldi	r24, 0xFF	; 255
    28c6:	80 93 28 04 	sts	0x0428, r24

	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
    28ca:	6f b7       	in	r22, 0x3f	; 63
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
    28cc:	f8 94       	cli
			for(slot=0; slot < maxJobs; slot++){
    28ce:	80 91 f3 02 	lds	r24, 0x02F3
    28d2:	48 2f       	mov	r20, r24
    28d4:	50 e0       	ldi	r21, 0x00	; 0
    28d6:	aa e1       	ldi	r26, 0x1A	; 26
    28d8:	b4 e0       	ldi	r27, 0x04	; 4
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	20 c0       	rjmp	.+64     	; 0x2920 <scheduleJob+0xae>

	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
    28e0:	fd 01       	movw	r30, r26
			for(slot=0; slot < maxJobs; slot++){
				JOB* job = &__queue[slot];
				if(!job->used){
    28e2:	8c 91       	ld	r24, X
    28e4:	1d 96       	adiw	r26, 0x0d	; 13
    28e6:	88 23       	and	r24, r24
    28e8:	c9 f4       	brne	.+50     	; 0x291c <scheduleJob+0xaa>
					job->used = TRUE;
    28ea:	8f ef       	ldi	r24, 0xFF	; 255
    28ec:	80 83       	st	Z, r24
					job->callback = callback;
    28ee:	32 82       	std	Z+2, r3	; 0x02
    28f0:	21 82       	std	Z+1, r2	; 0x01
					job->data = data;
    28f2:	54 82       	std	Z+4, r5	; 0x04
    28f4:	43 82       	std	Z+3, r4	; 0x03
					job->start=start;
    28f6:	81 86       	std	Z+9, r8	; 0x09
    28f8:	92 86       	std	Z+10, r9	; 0x0a
    28fa:	a3 86       	std	Z+11, r10	; 0x0b
    28fc:	b4 86       	std	Z+12, r11	; 0x0c
					job->delay=delay;
    28fe:	c5 82       	std	Z+5, r12	; 0x05
    2900:	d6 82       	std	Z+6, r13	; 0x06
    2902:	e7 82       	std	Z+7, r14	; 0x07
    2904:	f0 86       	std	Z+8, r15	; 0x08
					found=TRUE;
					__numJobs++;
    2906:	80 91 29 04 	lds	r24, 0x0429
    290a:	90 91 2a 04 	lds	r25, 0x042A
    290e:	01 96       	adiw	r24, 0x01	; 1
    2910:	90 93 2a 04 	sts	0x042A, r25
    2914:	80 93 29 04 	sts	0x0429, r24
    2918:	8f ef       	ldi	r24, 0xFF	; 255
    291a:	06 c0       	rjmp	.+12     	; 0x2928 <scheduleJob+0xb6>
	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
			for(slot=0; slot < maxJobs; slot++){
    291c:	2f 5f       	subi	r18, 0xFF	; 255
    291e:	3f 4f       	sbci	r19, 0xFF	; 255
    2920:	24 17       	cp	r18, r20
    2922:	35 07       	cpc	r19, r21
    2924:	ec f2       	brlt	.-70     	; 0x28e0 <scheduleJob+0x6e>
    2926:	80 e0       	ldi	r24, 0x00	; 0
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    2928:	6f bf       	out	0x3f, r22	; 63
					break;
				}
			}
		}

		if(!found){
    292a:	88 23       	and	r24, r24
    292c:	f1 f4       	brne	.+60     	; 0x296a <scheduleJob+0xf8>
			// the queue is exhausted
			setError(SCHEDULER_EXHAUSTED);
    292e:	8f ef       	ldi	r24, 0xFF	; 255
    2930:	0e 94 36 0c 	call	0x186c	; 0x186c <setError>
	if(doItNow){
		// we need to do it now
		TICK_COUNT overflow;

		// wait for expiry
		while(!clockHasElapsedGetOverflow(start, delay, &overflow));
    2934:	3e 01       	movw	r6, r28
    2936:	08 94       	sec
    2938:	61 1c       	adc	r6, r1
    293a:	71 1c       	adc	r7, r1
    293c:	c5 01       	movw	r24, r10
    293e:	b4 01       	movw	r22, r8
    2940:	a7 01       	movw	r20, r14
    2942:	96 01       	movw	r18, r12
    2944:	83 01       	movw	r16, r6
    2946:	0e 94 86 12 	call	0x250c	; 0x250c <clockHasElapsedGetOverflow>
    294a:	88 23       	and	r24, r24
    294c:	b9 f3       	breq	.-18     	; 0x293c <scheduleJob+0xca>

		// call the queued routine
		callback(data,start+delay,overflow);
    294e:	c8 0c       	add	r12, r8
    2950:	d9 1c       	adc	r13, r9
    2952:	ea 1c       	adc	r14, r10
    2954:	fb 1c       	adc	r15, r11
    2956:	09 81       	ldd	r16, Y+1	; 0x01
    2958:	1a 81       	ldd	r17, Y+2	; 0x02
    295a:	2b 81       	ldd	r18, Y+3	; 0x03
    295c:	3c 81       	ldd	r19, Y+4	; 0x04
    295e:	c2 01       	movw	r24, r4
    2960:	b7 01       	movw	r22, r14
    2962:	a6 01       	movw	r20, r12
    2964:	f1 01       	movw	r30, r2
    2966:	09 95       	icall
    2968:	06 c0       	rjmp	.+12     	; 0x2976 <scheduleJob+0x104>
	}else{
		if(!__running){
    296a:	80 91 27 04 	lds	r24, 0x0427
    296e:	88 23       	and	r24, r24
    2970:	11 f4       	brne	.+4      	; 0x2976 <scheduleJob+0x104>
			__scheduleUpdate();
    2972:	0e 94 24 13 	call	0x2648	; 0x2648 <__scheduleUpdate>
		}
	}
}
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	ff 90       	pop	r15
    2988:	ef 90       	pop	r14
    298a:	df 90       	pop	r13
    298c:	cf 90       	pop	r12
    298e:	bf 90       	pop	r11
    2990:	af 90       	pop	r10
    2992:	9f 90       	pop	r9
    2994:	8f 90       	pop	r8
    2996:	7f 90       	pop	r7
    2998:	6f 90       	pop	r6
    299a:	5f 90       	pop	r5
    299c:	4f 90       	pop	r4
    299e:	3f 90       	pop	r3
    29a0:	2f 90       	pop	r2
    29a2:	08 95       	ret

000029a4 <vfprintf>:
    29a4:	a1 e1       	ldi	r26, 0x11	; 17
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	e8 ed       	ldi	r30, 0xD8	; 216
    29aa:	f4 e1       	ldi	r31, 0x14	; 20
    29ac:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <__prologue_saves__>
    29b0:	3c 01       	movw	r6, r24
    29b2:	7f 87       	std	Y+15, r23	; 0x0f
    29b4:	6e 87       	std	Y+14, r22	; 0x0e
    29b6:	6a 01       	movw	r12, r20
    29b8:	fc 01       	movw	r30, r24
    29ba:	17 82       	std	Z+7, r1	; 0x07
    29bc:	16 82       	std	Z+6, r1	; 0x06
    29be:	83 81       	ldd	r24, Z+3	; 0x03
    29c0:	81 fd       	sbrc	r24, 1
    29c2:	03 c0       	rjmp	.+6      	; 0x29ca <vfprintf+0x26>
    29c4:	6f ef       	ldi	r22, 0xFF	; 255
    29c6:	7f ef       	ldi	r23, 0xFF	; 255
    29c8:	6f c3       	rjmp	.+1758   	; 0x30a8 <vfprintf+0x704>
    29ca:	9e 01       	movw	r18, r28
    29cc:	2f 5f       	subi	r18, 0xFF	; 255
    29ce:	3f 4f       	sbci	r19, 0xFF	; 255
    29d0:	39 8b       	std	Y+17, r19	; 0x11
    29d2:	28 8b       	std	Y+16, r18	; 0x10
    29d4:	f3 01       	movw	r30, r6
    29d6:	23 81       	ldd	r18, Z+3	; 0x03
    29d8:	ee 85       	ldd	r30, Y+14	; 0x0e
    29da:	ff 85       	ldd	r31, Y+15	; 0x0f
    29dc:	23 fd       	sbrc	r18, 3
    29de:	85 91       	lpm	r24, Z+
    29e0:	23 ff       	sbrs	r18, 3
    29e2:	81 91       	ld	r24, Z+
    29e4:	ff 87       	std	Y+15, r31	; 0x0f
    29e6:	ee 87       	std	Y+14, r30	; 0x0e
    29e8:	88 23       	and	r24, r24
    29ea:	09 f4       	brne	.+2      	; 0x29ee <vfprintf+0x4a>
    29ec:	5a c3       	rjmp	.+1716   	; 0x30a2 <vfprintf+0x6fe>
    29ee:	85 32       	cpi	r24, 0x25	; 37
    29f0:	51 f4       	brne	.+20     	; 0x2a06 <vfprintf+0x62>
    29f2:	ee 85       	ldd	r30, Y+14	; 0x0e
    29f4:	ff 85       	ldd	r31, Y+15	; 0x0f
    29f6:	23 fd       	sbrc	r18, 3
    29f8:	85 91       	lpm	r24, Z+
    29fa:	23 ff       	sbrs	r18, 3
    29fc:	81 91       	ld	r24, Z+
    29fe:	ff 87       	std	Y+15, r31	; 0x0f
    2a00:	ee 87       	std	Y+14, r30	; 0x0e
    2a02:	85 32       	cpi	r24, 0x25	; 37
    2a04:	29 f4       	brne	.+10     	; 0x2a10 <vfprintf+0x6c>
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	b3 01       	movw	r22, r6
    2a0a:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    2a0e:	e2 cf       	rjmp	.-60     	; 0x29d4 <vfprintf+0x30>
    2a10:	98 2f       	mov	r25, r24
    2a12:	10 e0       	ldi	r17, 0x00	; 0
    2a14:	88 24       	eor	r8, r8
    2a16:	99 24       	eor	r9, r9
    2a18:	10 32       	cpi	r17, 0x20	; 32
    2a1a:	b0 f4       	brcc	.+44     	; 0x2a48 <vfprintf+0xa4>
    2a1c:	9b 32       	cpi	r25, 0x2B	; 43
    2a1e:	69 f0       	breq	.+26     	; 0x2a3a <vfprintf+0x96>
    2a20:	9c 32       	cpi	r25, 0x2C	; 44
    2a22:	28 f4       	brcc	.+10     	; 0x2a2e <vfprintf+0x8a>
    2a24:	90 32       	cpi	r25, 0x20	; 32
    2a26:	51 f0       	breq	.+20     	; 0x2a3c <vfprintf+0x98>
    2a28:	93 32       	cpi	r25, 0x23	; 35
    2a2a:	71 f4       	brne	.+28     	; 0x2a48 <vfprintf+0xa4>
    2a2c:	0b c0       	rjmp	.+22     	; 0x2a44 <vfprintf+0xa0>
    2a2e:	9d 32       	cpi	r25, 0x2D	; 45
    2a30:	39 f0       	breq	.+14     	; 0x2a40 <vfprintf+0x9c>
    2a32:	90 33       	cpi	r25, 0x30	; 48
    2a34:	49 f4       	brne	.+18     	; 0x2a48 <vfprintf+0xa4>
    2a36:	11 60       	ori	r17, 0x01	; 1
    2a38:	28 c0       	rjmp	.+80     	; 0x2a8a <vfprintf+0xe6>
    2a3a:	12 60       	ori	r17, 0x02	; 2
    2a3c:	14 60       	ori	r17, 0x04	; 4
    2a3e:	25 c0       	rjmp	.+74     	; 0x2a8a <vfprintf+0xe6>
    2a40:	18 60       	ori	r17, 0x08	; 8
    2a42:	23 c0       	rjmp	.+70     	; 0x2a8a <vfprintf+0xe6>
    2a44:	10 61       	ori	r17, 0x10	; 16
    2a46:	21 c0       	rjmp	.+66     	; 0x2a8a <vfprintf+0xe6>
    2a48:	17 fd       	sbrc	r17, 7
    2a4a:	2a c0       	rjmp	.+84     	; 0x2aa0 <vfprintf+0xfc>
    2a4c:	89 2f       	mov	r24, r25
    2a4e:	80 53       	subi	r24, 0x30	; 48
    2a50:	8a 30       	cpi	r24, 0x0A	; 10
    2a52:	78 f4       	brcc	.+30     	; 0x2a72 <vfprintf+0xce>
    2a54:	16 ff       	sbrs	r17, 6
    2a56:	06 c0       	rjmp	.+12     	; 0x2a64 <vfprintf+0xc0>
    2a58:	fa e0       	ldi	r31, 0x0A	; 10
    2a5a:	9f 9e       	mul	r9, r31
    2a5c:	90 2c       	mov	r9, r0
    2a5e:	11 24       	eor	r1, r1
    2a60:	98 0e       	add	r9, r24
    2a62:	13 c0       	rjmp	.+38     	; 0x2a8a <vfprintf+0xe6>
    2a64:	3a e0       	ldi	r19, 0x0A	; 10
    2a66:	83 9e       	mul	r8, r19
    2a68:	80 2c       	mov	r8, r0
    2a6a:	11 24       	eor	r1, r1
    2a6c:	88 0e       	add	r8, r24
    2a6e:	10 62       	ori	r17, 0x20	; 32
    2a70:	0c c0       	rjmp	.+24     	; 0x2a8a <vfprintf+0xe6>
    2a72:	9e 32       	cpi	r25, 0x2E	; 46
    2a74:	21 f4       	brne	.+8      	; 0x2a7e <vfprintf+0xda>
    2a76:	16 fd       	sbrc	r17, 6
    2a78:	14 c3       	rjmp	.+1576   	; 0x30a2 <vfprintf+0x6fe>
    2a7a:	10 64       	ori	r17, 0x40	; 64
    2a7c:	06 c0       	rjmp	.+12     	; 0x2a8a <vfprintf+0xe6>
    2a7e:	9c 36       	cpi	r25, 0x6C	; 108
    2a80:	11 f4       	brne	.+4      	; 0x2a86 <vfprintf+0xe2>
    2a82:	10 68       	ori	r17, 0x80	; 128
    2a84:	02 c0       	rjmp	.+4      	; 0x2a8a <vfprintf+0xe6>
    2a86:	98 36       	cpi	r25, 0x68	; 104
    2a88:	59 f4       	brne	.+22     	; 0x2aa0 <vfprintf+0xfc>
    2a8a:	ee 85       	ldd	r30, Y+14	; 0x0e
    2a8c:	ff 85       	ldd	r31, Y+15	; 0x0f
    2a8e:	23 fd       	sbrc	r18, 3
    2a90:	95 91       	lpm	r25, Z+
    2a92:	23 ff       	sbrs	r18, 3
    2a94:	91 91       	ld	r25, Z+
    2a96:	ff 87       	std	Y+15, r31	; 0x0f
    2a98:	ee 87       	std	Y+14, r30	; 0x0e
    2a9a:	99 23       	and	r25, r25
    2a9c:	09 f0       	breq	.+2      	; 0x2aa0 <vfprintf+0xfc>
    2a9e:	bc cf       	rjmp	.-136    	; 0x2a18 <vfprintf+0x74>
    2aa0:	89 2f       	mov	r24, r25
    2aa2:	85 54       	subi	r24, 0x45	; 69
    2aa4:	83 30       	cpi	r24, 0x03	; 3
    2aa6:	20 f4       	brcc	.+8      	; 0x2ab0 <vfprintf+0x10c>
    2aa8:	81 2f       	mov	r24, r17
    2aaa:	80 61       	ori	r24, 0x10	; 16
    2aac:	90 5e       	subi	r25, 0xE0	; 224
    2aae:	07 c0       	rjmp	.+14     	; 0x2abe <vfprintf+0x11a>
    2ab0:	89 2f       	mov	r24, r25
    2ab2:	85 56       	subi	r24, 0x65	; 101
    2ab4:	83 30       	cpi	r24, 0x03	; 3
    2ab6:	08 f0       	brcs	.+2      	; 0x2aba <vfprintf+0x116>
    2ab8:	9f c1       	rjmp	.+830    	; 0x2df8 <vfprintf+0x454>
    2aba:	81 2f       	mov	r24, r17
    2abc:	8f 7e       	andi	r24, 0xEF	; 239
    2abe:	86 fd       	sbrc	r24, 6
    2ac0:	02 c0       	rjmp	.+4      	; 0x2ac6 <vfprintf+0x122>
    2ac2:	76 e0       	ldi	r23, 0x06	; 6
    2ac4:	97 2e       	mov	r9, r23
    2ac6:	6f e3       	ldi	r22, 0x3F	; 63
    2ac8:	f6 2e       	mov	r15, r22
    2aca:	f8 22       	and	r15, r24
    2acc:	95 36       	cpi	r25, 0x65	; 101
    2ace:	19 f4       	brne	.+6      	; 0x2ad6 <vfprintf+0x132>
    2ad0:	f0 e4       	ldi	r31, 0x40	; 64
    2ad2:	ff 2a       	or	r15, r31
    2ad4:	07 c0       	rjmp	.+14     	; 0x2ae4 <vfprintf+0x140>
    2ad6:	96 36       	cpi	r25, 0x66	; 102
    2ad8:	19 f4       	brne	.+6      	; 0x2ae0 <vfprintf+0x13c>
    2ada:	20 e8       	ldi	r18, 0x80	; 128
    2adc:	f2 2a       	or	r15, r18
    2ade:	02 c0       	rjmp	.+4      	; 0x2ae4 <vfprintf+0x140>
    2ae0:	91 10       	cpse	r9, r1
    2ae2:	9a 94       	dec	r9
    2ae4:	f7 fe       	sbrs	r15, 7
    2ae6:	0a c0       	rjmp	.+20     	; 0x2afc <vfprintf+0x158>
    2ae8:	3b e3       	ldi	r19, 0x3B	; 59
    2aea:	39 15       	cp	r19, r9
    2aec:	18 f4       	brcc	.+6      	; 0x2af4 <vfprintf+0x150>
    2aee:	5c e3       	ldi	r21, 0x3C	; 60
    2af0:	b5 2e       	mov	r11, r21
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <vfprintf+0x154>
    2af4:	b9 2c       	mov	r11, r9
    2af6:	b3 94       	inc	r11
    2af8:	27 e0       	ldi	r18, 0x07	; 7
    2afa:	09 c0       	rjmp	.+18     	; 0x2b0e <vfprintf+0x16a>
    2afc:	47 e0       	ldi	r20, 0x07	; 7
    2afe:	49 15       	cp	r20, r9
    2b00:	20 f4       	brcc	.+8      	; 0x2b0a <vfprintf+0x166>
    2b02:	bb 24       	eor	r11, r11
    2b04:	47 e0       	ldi	r20, 0x07	; 7
    2b06:	94 2e       	mov	r9, r20
    2b08:	f7 cf       	rjmp	.-18     	; 0x2af8 <vfprintf+0x154>
    2b0a:	29 2d       	mov	r18, r9
    2b0c:	bb 24       	eor	r11, r11
    2b0e:	c6 01       	movw	r24, r12
    2b10:	04 96       	adiw	r24, 0x04	; 4
    2b12:	9d 87       	std	Y+13, r25	; 0x0d
    2b14:	8c 87       	std	Y+12, r24	; 0x0c
    2b16:	f6 01       	movw	r30, r12
    2b18:	60 81       	ld	r22, Z
    2b1a:	71 81       	ldd	r23, Z+1	; 0x01
    2b1c:	82 81       	ldd	r24, Z+2	; 0x02
    2b1e:	93 81       	ldd	r25, Z+3	; 0x03
    2b20:	ae 01       	movw	r20, r28
    2b22:	4f 5f       	subi	r20, 0xFF	; 255
    2b24:	5f 4f       	sbci	r21, 0xFF	; 255
    2b26:	0b 2d       	mov	r16, r11
    2b28:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__ftoa_engine>
    2b2c:	6c 01       	movw	r12, r24
    2b2e:	09 81       	ldd	r16, Y+1	; 0x01
    2b30:	20 2e       	mov	r2, r16
    2b32:	33 24       	eor	r3, r3
    2b34:	00 ff       	sbrs	r16, 0
    2b36:	04 c0       	rjmp	.+8      	; 0x2b40 <vfprintf+0x19c>
    2b38:	03 fd       	sbrc	r16, 3
    2b3a:	02 c0       	rjmp	.+4      	; 0x2b40 <vfprintf+0x19c>
    2b3c:	1d e2       	ldi	r17, 0x2D	; 45
    2b3e:	09 c0       	rjmp	.+18     	; 0x2b52 <vfprintf+0x1ae>
    2b40:	f1 fe       	sbrs	r15, 1
    2b42:	02 c0       	rjmp	.+4      	; 0x2b48 <vfprintf+0x1a4>
    2b44:	1b e2       	ldi	r17, 0x2B	; 43
    2b46:	05 c0       	rjmp	.+10     	; 0x2b52 <vfprintf+0x1ae>
    2b48:	f2 fc       	sbrc	r15, 2
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <vfprintf+0x1ac>
    2b4c:	10 e0       	ldi	r17, 0x00	; 0
    2b4e:	01 c0       	rjmp	.+2      	; 0x2b52 <vfprintf+0x1ae>
    2b50:	10 e2       	ldi	r17, 0x20	; 32
    2b52:	c1 01       	movw	r24, r2
    2b54:	8c 70       	andi	r24, 0x0C	; 12
    2b56:	90 70       	andi	r25, 0x00	; 0
    2b58:	89 2b       	or	r24, r25
    2b5a:	b9 f1       	breq	.+110    	; 0x2bca <vfprintf+0x226>
    2b5c:	11 23       	and	r17, r17
    2b5e:	11 f4       	brne	.+4      	; 0x2b64 <vfprintf+0x1c0>
    2b60:	83 e0       	ldi	r24, 0x03	; 3
    2b62:	01 c0       	rjmp	.+2      	; 0x2b66 <vfprintf+0x1c2>
    2b64:	84 e0       	ldi	r24, 0x04	; 4
    2b66:	88 15       	cp	r24, r8
    2b68:	10 f0       	brcs	.+4      	; 0x2b6e <vfprintf+0x1ca>
    2b6a:	88 24       	eor	r8, r8
    2b6c:	0a c0       	rjmp	.+20     	; 0x2b82 <vfprintf+0x1de>
    2b6e:	88 1a       	sub	r8, r24
    2b70:	f3 fc       	sbrc	r15, 3
    2b72:	07 c0       	rjmp	.+14     	; 0x2b82 <vfprintf+0x1de>
    2b74:	80 e2       	ldi	r24, 0x20	; 32
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	b3 01       	movw	r22, r6
    2b7a:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    2b7e:	8a 94       	dec	r8
    2b80:	c9 f7       	brne	.-14     	; 0x2b74 <vfprintf+0x1d0>
    2b82:	11 23       	and	r17, r17
    2b84:	29 f0       	breq	.+10     	; 0x2b90 <vfprintf+0x1ec>
    2b86:	81 2f       	mov	r24, r17
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	b3 01       	movw	r22, r6
    2b8c:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    2b90:	23 fe       	sbrs	r2, 3
    2b92:	03 c0       	rjmp	.+6      	; 0x2b9a <vfprintf+0x1f6>
    2b94:	04 ee       	ldi	r16, 0xE4	; 228
    2b96:	10 e0       	ldi	r17, 0x00	; 0
    2b98:	0e c0       	rjmp	.+28     	; 0x2bb6 <vfprintf+0x212>
    2b9a:	08 ee       	ldi	r16, 0xE8	; 232
    2b9c:	10 e0       	ldi	r17, 0x00	; 0
    2b9e:	0b c0       	rjmp	.+22     	; 0x2bb6 <vfprintf+0x212>
    2ba0:	e1 14       	cp	r14, r1
    2ba2:	f1 04       	cpc	r15, r1
    2ba4:	09 f0       	breq	.+2      	; 0x2ba8 <vfprintf+0x204>
    2ba6:	80 52       	subi	r24, 0x20	; 32
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	b3 01       	movw	r22, r6
    2bac:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    2bb0:	0f 5f       	subi	r16, 0xFF	; 255
    2bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb4:	05 c0       	rjmp	.+10     	; 0x2bc0 <vfprintf+0x21c>
    2bb6:	ef 2c       	mov	r14, r15
    2bb8:	ff 24       	eor	r15, r15
    2bba:	f0 e1       	ldi	r31, 0x10	; 16
    2bbc:	ef 22       	and	r14, r31
    2bbe:	ff 24       	eor	r15, r15
    2bc0:	f8 01       	movw	r30, r16
    2bc2:	84 91       	lpm	r24, Z+
    2bc4:	88 23       	and	r24, r24
    2bc6:	61 f7       	brne	.-40     	; 0x2ba0 <vfprintf+0x1fc>
    2bc8:	14 c1       	rjmp	.+552    	; 0x2df2 <vfprintf+0x44e>
    2bca:	f7 fe       	sbrs	r15, 7
    2bcc:	12 c0       	rjmp	.+36     	; 0x2bf2 <vfprintf+0x24e>
    2bce:	bc 0c       	add	r11, r12
    2bd0:	24 fe       	sbrs	r2, 4
    2bd2:	04 c0       	rjmp	.+8      	; 0x2bdc <vfprintf+0x238>
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	81 33       	cpi	r24, 0x31	; 49
    2bd8:	09 f4       	brne	.+2      	; 0x2bdc <vfprintf+0x238>
    2bda:	ba 94       	dec	r11
    2bdc:	1b 14       	cp	r1, r11
    2bde:	1c f0       	brlt	.+6      	; 0x2be6 <vfprintf+0x242>
    2be0:	bb 24       	eor	r11, r11
    2be2:	b3 94       	inc	r11
    2be4:	2d c0       	rjmp	.+90     	; 0x2c40 <vfprintf+0x29c>
    2be6:	f8 e0       	ldi	r31, 0x08	; 8
    2be8:	fb 15       	cp	r31, r11
    2bea:	50 f5       	brcc	.+84     	; 0x2c40 <vfprintf+0x29c>
    2bec:	38 e0       	ldi	r19, 0x08	; 8
    2bee:	b3 2e       	mov	r11, r19
    2bf0:	27 c0       	rjmp	.+78     	; 0x2c40 <vfprintf+0x29c>
    2bf2:	f6 fc       	sbrc	r15, 6
    2bf4:	25 c0       	rjmp	.+74     	; 0x2c40 <vfprintf+0x29c>
    2bf6:	89 2d       	mov	r24, r9
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	8c 15       	cp	r24, r12
    2bfc:	9d 05       	cpc	r25, r13
    2bfe:	4c f0       	brlt	.+18     	; 0x2c12 <vfprintf+0x26e>
    2c00:	2c ef       	ldi	r18, 0xFC	; 252
    2c02:	c2 16       	cp	r12, r18
    2c04:	2f ef       	ldi	r18, 0xFF	; 255
    2c06:	d2 06       	cpc	r13, r18
    2c08:	24 f0       	brlt	.+8      	; 0x2c12 <vfprintf+0x26e>
    2c0a:	30 e8       	ldi	r19, 0x80	; 128
    2c0c:	f3 2a       	or	r15, r19
    2c0e:	01 c0       	rjmp	.+2      	; 0x2c12 <vfprintf+0x26e>
    2c10:	9a 94       	dec	r9
    2c12:	99 20       	and	r9, r9
    2c14:	49 f0       	breq	.+18     	; 0x2c28 <vfprintf+0x284>
    2c16:	e2 e0       	ldi	r30, 0x02	; 2
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	ec 0f       	add	r30, r28
    2c1c:	fd 1f       	adc	r31, r29
    2c1e:	e9 0d       	add	r30, r9
    2c20:	f1 1d       	adc	r31, r1
    2c22:	80 81       	ld	r24, Z
    2c24:	80 33       	cpi	r24, 0x30	; 48
    2c26:	a1 f3       	breq	.-24     	; 0x2c10 <vfprintf+0x26c>
    2c28:	f7 fe       	sbrs	r15, 7
    2c2a:	0a c0       	rjmp	.+20     	; 0x2c40 <vfprintf+0x29c>
    2c2c:	b9 2c       	mov	r11, r9
    2c2e:	b3 94       	inc	r11
    2c30:	89 2d       	mov	r24, r9
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	c8 16       	cp	r12, r24
    2c36:	d9 06       	cpc	r13, r25
    2c38:	14 f0       	brlt	.+4      	; 0x2c3e <vfprintf+0x29a>
    2c3a:	99 24       	eor	r9, r9
    2c3c:	01 c0       	rjmp	.+2      	; 0x2c40 <vfprintf+0x29c>
    2c3e:	9c 18       	sub	r9, r12
    2c40:	f7 fc       	sbrc	r15, 7
    2c42:	03 c0       	rjmp	.+6      	; 0x2c4a <vfprintf+0x2a6>
    2c44:	25 e0       	ldi	r18, 0x05	; 5
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	09 c0       	rjmp	.+18     	; 0x2c5c <vfprintf+0x2b8>
    2c4a:	1c 14       	cp	r1, r12
    2c4c:	1d 04       	cpc	r1, r13
    2c4e:	1c f0       	brlt	.+6      	; 0x2c56 <vfprintf+0x2b2>
    2c50:	21 e0       	ldi	r18, 0x01	; 1
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	03 c0       	rjmp	.+6      	; 0x2c5c <vfprintf+0x2b8>
    2c56:	96 01       	movw	r18, r12
    2c58:	2f 5f       	subi	r18, 0xFF	; 255
    2c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5c:	11 23       	and	r17, r17
    2c5e:	11 f0       	breq	.+4      	; 0x2c64 <vfprintf+0x2c0>
    2c60:	2f 5f       	subi	r18, 0xFF	; 255
    2c62:	3f 4f       	sbci	r19, 0xFF	; 255
    2c64:	99 20       	and	r9, r9
    2c66:	29 f0       	breq	.+10     	; 0x2c72 <vfprintf+0x2ce>
    2c68:	89 2d       	mov	r24, r9
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	01 96       	adiw	r24, 0x01	; 1
    2c6e:	28 0f       	add	r18, r24
    2c70:	39 1f       	adc	r19, r25
    2c72:	88 2d       	mov	r24, r8
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	28 17       	cp	r18, r24
    2c78:	39 07       	cpc	r19, r25
    2c7a:	14 f0       	brlt	.+4      	; 0x2c80 <vfprintf+0x2dc>
    2c7c:	88 24       	eor	r8, r8
    2c7e:	01 c0       	rjmp	.+2      	; 0x2c82 <vfprintf+0x2de>
    2c80:	82 1a       	sub	r8, r18
    2c82:	4f 2c       	mov	r4, r15
    2c84:	55 24       	eor	r5, r5
    2c86:	c2 01       	movw	r24, r4
    2c88:	89 70       	andi	r24, 0x09	; 9
    2c8a:	90 70       	andi	r25, 0x00	; 0
    2c8c:	89 2b       	or	r24, r25
    2c8e:	39 f0       	breq	.+14     	; 0x2c9e <vfprintf+0x2fa>
    2c90:	08 c0       	rjmp	.+16     	; 0x2ca2 <vfprintf+0x2fe>
    2c92:	80 e2       	ldi	r24, 0x20	; 32
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	b3 01       	movw	r22, r6
    2c98:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    2c9c:	8a 94       	dec	r8
    2c9e:	88 20       	and	r8, r8
    2ca0:	c1 f7       	brne	.-16     	; 0x2c92 <vfprintf+0x2ee>
    2ca2:	11 23       	and	r17, r17
    2ca4:	29 f0       	breq	.+10     	; 0x2cb0 <vfprintf+0x30c>
    2ca6:	81 2f       	mov	r24, r17
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	b3 01       	movw	r22, r6
    2cac:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    2cb0:	43 fe       	sbrs	r4, 3
    2cb2:	07 c0       	rjmp	.+14     	; 0x2cc2 <vfprintf+0x31e>
    2cb4:	08 c0       	rjmp	.+16     	; 0x2cc6 <vfprintf+0x322>
    2cb6:	80 e3       	ldi	r24, 0x30	; 48
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	b3 01       	movw	r22, r6
    2cbc:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    2cc0:	8a 94       	dec	r8
    2cc2:	88 20       	and	r8, r8
    2cc4:	c1 f7       	brne	.-16     	; 0x2cb6 <vfprintf+0x312>
    2cc6:	f7 fe       	sbrs	r15, 7
    2cc8:	46 c0       	rjmp	.+140    	; 0x2d56 <vfprintf+0x3b2>
    2cca:	86 01       	movw	r16, r12
    2ccc:	d7 fe       	sbrs	r13, 7
    2cce:	02 c0       	rjmp	.+4      	; 0x2cd4 <vfprintf+0x330>
    2cd0:	00 e0       	ldi	r16, 0x00	; 0
    2cd2:	10 e0       	ldi	r17, 0x00	; 0
    2cd4:	76 01       	movw	r14, r12
    2cd6:	08 94       	sec
    2cd8:	e1 1c       	adc	r14, r1
    2cda:	f1 1c       	adc	r15, r1
    2cdc:	e0 1a       	sub	r14, r16
    2cde:	f1 0a       	sbc	r15, r17
    2ce0:	41 e0       	ldi	r20, 0x01	; 1
    2ce2:	50 e0       	ldi	r21, 0x00	; 0
    2ce4:	4c 0f       	add	r20, r28
    2ce6:	5d 1f       	adc	r21, r29
    2ce8:	e4 0e       	add	r14, r20
    2cea:	f5 1e       	adc	r15, r21
    2cec:	26 01       	movw	r4, r12
    2cee:	4b 18       	sub	r4, r11
    2cf0:	51 08       	sbc	r5, r1
    2cf2:	89 2d       	mov	r24, r9
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	aa 24       	eor	r10, r10
    2cf8:	bb 24       	eor	r11, r11
    2cfa:	a8 1a       	sub	r10, r24
    2cfc:	b9 0a       	sbc	r11, r25
    2cfe:	5f ef       	ldi	r21, 0xFF	; 255
    2d00:	0f 3f       	cpi	r16, 0xFF	; 255
    2d02:	15 07       	cpc	r17, r21
    2d04:	29 f4       	brne	.+10     	; 0x2d10 <vfprintf+0x36c>
    2d06:	8e e2       	ldi	r24, 0x2E	; 46
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	b3 01       	movw	r22, r6
    2d0c:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    2d10:	c0 16       	cp	r12, r16
    2d12:	d1 06       	cpc	r13, r17
    2d14:	34 f0       	brlt	.+12     	; 0x2d22 <vfprintf+0x37e>
    2d16:	40 16       	cp	r4, r16
    2d18:	51 06       	cpc	r5, r17
    2d1a:	1c f4       	brge	.+6      	; 0x2d22 <vfprintf+0x37e>
    2d1c:	f7 01       	movw	r30, r14
    2d1e:	80 81       	ld	r24, Z
    2d20:	01 c0       	rjmp	.+2      	; 0x2d24 <vfprintf+0x380>
    2d22:	80 e3       	ldi	r24, 0x30	; 48
    2d24:	01 50       	subi	r16, 0x01	; 1
    2d26:	10 40       	sbci	r17, 0x00	; 0
    2d28:	08 94       	sec
    2d2a:	e1 1c       	adc	r14, r1
    2d2c:	f1 1c       	adc	r15, r1
    2d2e:	0a 15       	cp	r16, r10
    2d30:	1b 05       	cpc	r17, r11
    2d32:	2c f0       	brlt	.+10     	; 0x2d3e <vfprintf+0x39a>
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	b3 01       	movw	r22, r6
    2d38:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    2d3c:	e0 cf       	rjmp	.-64     	; 0x2cfe <vfprintf+0x35a>
    2d3e:	0c 15       	cp	r16, r12
    2d40:	1d 05       	cpc	r17, r13
    2d42:	39 f4       	brne	.+14     	; 0x2d52 <vfprintf+0x3ae>
    2d44:	9a 81       	ldd	r25, Y+2	; 0x02
    2d46:	96 33       	cpi	r25, 0x36	; 54
    2d48:	18 f4       	brcc	.+6      	; 0x2d50 <vfprintf+0x3ac>
    2d4a:	95 33       	cpi	r25, 0x35	; 53
    2d4c:	11 f4       	brne	.+4      	; 0x2d52 <vfprintf+0x3ae>
    2d4e:	24 fe       	sbrs	r2, 4
    2d50:	81 e3       	ldi	r24, 0x31	; 49
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	4b c0       	rjmp	.+150    	; 0x2dec <vfprintf+0x448>
    2d56:	8a 81       	ldd	r24, Y+2	; 0x02
    2d58:	81 33       	cpi	r24, 0x31	; 49
    2d5a:	09 f0       	breq	.+2      	; 0x2d5e <vfprintf+0x3ba>
    2d5c:	0f 7e       	andi	r16, 0xEF	; 239
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	b3 01       	movw	r22, r6
    2d62:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    2d66:	99 20       	and	r9, r9
    2d68:	a1 f0       	breq	.+40     	; 0x2d92 <vfprintf+0x3ee>
    2d6a:	8e e2       	ldi	r24, 0x2E	; 46
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	b3 01       	movw	r22, r6
    2d70:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    2d74:	12 e0       	ldi	r17, 0x02	; 2
    2d76:	e1 e0       	ldi	r30, 0x01	; 1
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	ec 0f       	add	r30, r28
    2d7c:	fd 1f       	adc	r31, r29
    2d7e:	e1 0f       	add	r30, r17
    2d80:	f1 1d       	adc	r31, r1
    2d82:	1f 5f       	subi	r17, 0xFF	; 255
    2d84:	80 81       	ld	r24, Z
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	b3 01       	movw	r22, r6
    2d8a:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    2d8e:	9a 94       	dec	r9
    2d90:	91 f7       	brne	.-28     	; 0x2d76 <vfprintf+0x3d2>
    2d92:	44 fc       	sbrc	r4, 4
    2d94:	03 c0       	rjmp	.+6      	; 0x2d9c <vfprintf+0x3f8>
    2d96:	85 e6       	ldi	r24, 0x65	; 101
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	02 c0       	rjmp	.+4      	; 0x2da0 <vfprintf+0x3fc>
    2d9c:	85 e4       	ldi	r24, 0x45	; 69
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	b3 01       	movw	r22, r6
    2da2:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    2da6:	d7 fc       	sbrc	r13, 7
    2da8:	05 c0       	rjmp	.+10     	; 0x2db4 <vfprintf+0x410>
    2daa:	c1 14       	cp	r12, r1
    2dac:	d1 04       	cpc	r13, r1
    2dae:	41 f4       	brne	.+16     	; 0x2dc0 <vfprintf+0x41c>
    2db0:	04 ff       	sbrs	r16, 4
    2db2:	06 c0       	rjmp	.+12     	; 0x2dc0 <vfprintf+0x41c>
    2db4:	d0 94       	com	r13
    2db6:	c1 94       	neg	r12
    2db8:	d1 08       	sbc	r13, r1
    2dba:	d3 94       	inc	r13
    2dbc:	8d e2       	ldi	r24, 0x2D	; 45
    2dbe:	01 c0       	rjmp	.+2      	; 0x2dc2 <vfprintf+0x41e>
    2dc0:	8b e2       	ldi	r24, 0x2B	; 43
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	b3 01       	movw	r22, r6
    2dc6:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    2dca:	80 e3       	ldi	r24, 0x30	; 48
    2dcc:	05 c0       	rjmp	.+10     	; 0x2dd8 <vfprintf+0x434>
    2dce:	8f 5f       	subi	r24, 0xFF	; 255
    2dd0:	26 ef       	ldi	r18, 0xF6	; 246
    2dd2:	3f ef       	ldi	r19, 0xFF	; 255
    2dd4:	c2 0e       	add	r12, r18
    2dd6:	d3 1e       	adc	r13, r19
    2dd8:	3a e0       	ldi	r19, 0x0A	; 10
    2dda:	c3 16       	cp	r12, r19
    2ddc:	d1 04       	cpc	r13, r1
    2dde:	bc f7       	brge	.-18     	; 0x2dce <vfprintf+0x42a>
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	b3 01       	movw	r22, r6
    2de4:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    2de8:	c6 01       	movw	r24, r12
    2dea:	c0 96       	adiw	r24, 0x30	; 48
    2dec:	b3 01       	movw	r22, r6
    2dee:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    2df2:	cc 84       	ldd	r12, Y+12	; 0x0c
    2df4:	dd 84       	ldd	r13, Y+13	; 0x0d
    2df6:	52 c1       	rjmp	.+676    	; 0x309c <vfprintf+0x6f8>
    2df8:	93 36       	cpi	r25, 0x63	; 99
    2dfa:	31 f0       	breq	.+12     	; 0x2e08 <vfprintf+0x464>
    2dfc:	93 37       	cpi	r25, 0x73	; 115
    2dfe:	99 f0       	breq	.+38     	; 0x2e26 <vfprintf+0x482>
    2e00:	93 35       	cpi	r25, 0x53	; 83
    2e02:	09 f0       	breq	.+2      	; 0x2e06 <vfprintf+0x462>
    2e04:	59 c0       	rjmp	.+178    	; 0x2eb8 <vfprintf+0x514>
    2e06:	23 c0       	rjmp	.+70     	; 0x2e4e <vfprintf+0x4aa>
    2e08:	f6 01       	movw	r30, r12
    2e0a:	80 81       	ld	r24, Z
    2e0c:	89 83       	std	Y+1, r24	; 0x01
    2e0e:	5e 01       	movw	r10, r28
    2e10:	08 94       	sec
    2e12:	a1 1c       	adc	r10, r1
    2e14:	b1 1c       	adc	r11, r1
    2e16:	22 e0       	ldi	r18, 0x02	; 2
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	c2 0e       	add	r12, r18
    2e1c:	d3 1e       	adc	r13, r19
    2e1e:	21 e0       	ldi	r18, 0x01	; 1
    2e20:	e2 2e       	mov	r14, r18
    2e22:	f1 2c       	mov	r15, r1
    2e24:	12 c0       	rjmp	.+36     	; 0x2e4a <vfprintf+0x4a6>
    2e26:	f6 01       	movw	r30, r12
    2e28:	a0 80       	ld	r10, Z
    2e2a:	b1 80       	ldd	r11, Z+1	; 0x01
    2e2c:	16 fd       	sbrc	r17, 6
    2e2e:	03 c0       	rjmp	.+6      	; 0x2e36 <vfprintf+0x492>
    2e30:	6f ef       	ldi	r22, 0xFF	; 255
    2e32:	7f ef       	ldi	r23, 0xFF	; 255
    2e34:	02 c0       	rjmp	.+4      	; 0x2e3a <vfprintf+0x496>
    2e36:	69 2d       	mov	r22, r9
    2e38:	70 e0       	ldi	r23, 0x00	; 0
    2e3a:	22 e0       	ldi	r18, 0x02	; 2
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	c2 0e       	add	r12, r18
    2e40:	d3 1e       	adc	r13, r19
    2e42:	c5 01       	movw	r24, r10
    2e44:	0e 94 4b 1a 	call	0x3496	; 0x3496 <strnlen>
    2e48:	7c 01       	movw	r14, r24
    2e4a:	1f 77       	andi	r17, 0x7F	; 127
    2e4c:	13 c0       	rjmp	.+38     	; 0x2e74 <vfprintf+0x4d0>
    2e4e:	f6 01       	movw	r30, r12
    2e50:	a0 80       	ld	r10, Z
    2e52:	b1 80       	ldd	r11, Z+1	; 0x01
    2e54:	16 fd       	sbrc	r17, 6
    2e56:	03 c0       	rjmp	.+6      	; 0x2e5e <vfprintf+0x4ba>
    2e58:	6f ef       	ldi	r22, 0xFF	; 255
    2e5a:	7f ef       	ldi	r23, 0xFF	; 255
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <vfprintf+0x4be>
    2e5e:	69 2d       	mov	r22, r9
    2e60:	70 e0       	ldi	r23, 0x00	; 0
    2e62:	22 e0       	ldi	r18, 0x02	; 2
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	c2 0e       	add	r12, r18
    2e68:	d3 1e       	adc	r13, r19
    2e6a:	c5 01       	movw	r24, r10
    2e6c:	0e 94 39 1a 	call	0x3472	; 0x3472 <strnlen_P>
    2e70:	7c 01       	movw	r14, r24
    2e72:	10 68       	ori	r17, 0x80	; 128
    2e74:	13 ff       	sbrs	r17, 3
    2e76:	07 c0       	rjmp	.+14     	; 0x2e86 <vfprintf+0x4e2>
    2e78:	1b c0       	rjmp	.+54     	; 0x2eb0 <vfprintf+0x50c>
    2e7a:	80 e2       	ldi	r24, 0x20	; 32
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	b3 01       	movw	r22, r6
    2e80:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    2e84:	8a 94       	dec	r8
    2e86:	88 2d       	mov	r24, r8
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	e8 16       	cp	r14, r24
    2e8c:	f9 06       	cpc	r15, r25
    2e8e:	a8 f3       	brcs	.-22     	; 0x2e7a <vfprintf+0x4d6>
    2e90:	0f c0       	rjmp	.+30     	; 0x2eb0 <vfprintf+0x50c>
    2e92:	f5 01       	movw	r30, r10
    2e94:	17 fd       	sbrc	r17, 7
    2e96:	85 91       	lpm	r24, Z+
    2e98:	17 ff       	sbrs	r17, 7
    2e9a:	81 91       	ld	r24, Z+
    2e9c:	5f 01       	movw	r10, r30
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	b3 01       	movw	r22, r6
    2ea2:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    2ea6:	81 10       	cpse	r8, r1
    2ea8:	8a 94       	dec	r8
    2eaa:	08 94       	sec
    2eac:	e1 08       	sbc	r14, r1
    2eae:	f1 08       	sbc	r15, r1
    2eb0:	e1 14       	cp	r14, r1
    2eb2:	f1 04       	cpc	r15, r1
    2eb4:	71 f7       	brne	.-36     	; 0x2e92 <vfprintf+0x4ee>
    2eb6:	f2 c0       	rjmp	.+484    	; 0x309c <vfprintf+0x6f8>
    2eb8:	94 36       	cpi	r25, 0x64	; 100
    2eba:	11 f0       	breq	.+4      	; 0x2ec0 <vfprintf+0x51c>
    2ebc:	99 36       	cpi	r25, 0x69	; 105
    2ebe:	89 f5       	brne	.+98     	; 0x2f22 <vfprintf+0x57e>
    2ec0:	17 ff       	sbrs	r17, 7
    2ec2:	08 c0       	rjmp	.+16     	; 0x2ed4 <vfprintf+0x530>
    2ec4:	f6 01       	movw	r30, r12
    2ec6:	20 81       	ld	r18, Z
    2ec8:	31 81       	ldd	r19, Z+1	; 0x01
    2eca:	42 81       	ldd	r20, Z+2	; 0x02
    2ecc:	53 81       	ldd	r21, Z+3	; 0x03
    2ece:	84 e0       	ldi	r24, 0x04	; 4
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	0a c0       	rjmp	.+20     	; 0x2ee8 <vfprintf+0x544>
    2ed4:	f6 01       	movw	r30, r12
    2ed6:	80 81       	ld	r24, Z
    2ed8:	91 81       	ldd	r25, Z+1	; 0x01
    2eda:	9c 01       	movw	r18, r24
    2edc:	44 27       	eor	r20, r20
    2ede:	37 fd       	sbrc	r19, 7
    2ee0:	40 95       	com	r20
    2ee2:	54 2f       	mov	r21, r20
    2ee4:	82 e0       	ldi	r24, 0x02	; 2
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	c8 0e       	add	r12, r24
    2eea:	d9 1e       	adc	r13, r25
    2eec:	9f e6       	ldi	r25, 0x6F	; 111
    2eee:	f9 2e       	mov	r15, r25
    2ef0:	f1 22       	and	r15, r17
    2ef2:	57 ff       	sbrs	r21, 7
    2ef4:	09 c0       	rjmp	.+18     	; 0x2f08 <vfprintf+0x564>
    2ef6:	50 95       	com	r21
    2ef8:	40 95       	com	r20
    2efa:	30 95       	com	r19
    2efc:	21 95       	neg	r18
    2efe:	3f 4f       	sbci	r19, 0xFF	; 255
    2f00:	4f 4f       	sbci	r20, 0xFF	; 255
    2f02:	5f 4f       	sbci	r21, 0xFF	; 255
    2f04:	90 e8       	ldi	r25, 0x80	; 128
    2f06:	f9 2a       	or	r15, r25
    2f08:	ca 01       	movw	r24, r20
    2f0a:	b9 01       	movw	r22, r18
    2f0c:	ae 01       	movw	r20, r28
    2f0e:	4f 5f       	subi	r20, 0xFF	; 255
    2f10:	5f 4f       	sbci	r21, 0xFF	; 255
    2f12:	2a e0       	ldi	r18, 0x0A	; 10
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	0e 94 9f 1a 	call	0x353e	; 0x353e <__ultoa_invert>
    2f1a:	e8 2e       	mov	r14, r24
    2f1c:	e8 89       	ldd	r30, Y+16	; 0x10
    2f1e:	ee 1a       	sub	r14, r30
    2f20:	41 c0       	rjmp	.+130    	; 0x2fa4 <vfprintf+0x600>
    2f22:	95 37       	cpi	r25, 0x75	; 117
    2f24:	21 f4       	brne	.+8      	; 0x2f2e <vfprintf+0x58a>
    2f26:	1f 7e       	andi	r17, 0xEF	; 239
    2f28:	2a e0       	ldi	r18, 0x0A	; 10
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	1c c0       	rjmp	.+56     	; 0x2f66 <vfprintf+0x5c2>
    2f2e:	19 7f       	andi	r17, 0xF9	; 249
    2f30:	9f 36       	cpi	r25, 0x6F	; 111
    2f32:	61 f0       	breq	.+24     	; 0x2f4c <vfprintf+0x5a8>
    2f34:	90 37       	cpi	r25, 0x70	; 112
    2f36:	20 f4       	brcc	.+8      	; 0x2f40 <vfprintf+0x59c>
    2f38:	98 35       	cpi	r25, 0x58	; 88
    2f3a:	09 f0       	breq	.+2      	; 0x2f3e <vfprintf+0x59a>
    2f3c:	b2 c0       	rjmp	.+356    	; 0x30a2 <vfprintf+0x6fe>
    2f3e:	0f c0       	rjmp	.+30     	; 0x2f5e <vfprintf+0x5ba>
    2f40:	90 37       	cpi	r25, 0x70	; 112
    2f42:	39 f0       	breq	.+14     	; 0x2f52 <vfprintf+0x5ae>
    2f44:	98 37       	cpi	r25, 0x78	; 120
    2f46:	09 f0       	breq	.+2      	; 0x2f4a <vfprintf+0x5a6>
    2f48:	ac c0       	rjmp	.+344    	; 0x30a2 <vfprintf+0x6fe>
    2f4a:	04 c0       	rjmp	.+8      	; 0x2f54 <vfprintf+0x5b0>
    2f4c:	28 e0       	ldi	r18, 0x08	; 8
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	0a c0       	rjmp	.+20     	; 0x2f66 <vfprintf+0x5c2>
    2f52:	10 61       	ori	r17, 0x10	; 16
    2f54:	14 fd       	sbrc	r17, 4
    2f56:	14 60       	ori	r17, 0x04	; 4
    2f58:	20 e1       	ldi	r18, 0x10	; 16
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	04 c0       	rjmp	.+8      	; 0x2f66 <vfprintf+0x5c2>
    2f5e:	14 fd       	sbrc	r17, 4
    2f60:	16 60       	ori	r17, 0x06	; 6
    2f62:	20 e1       	ldi	r18, 0x10	; 16
    2f64:	32 e0       	ldi	r19, 0x02	; 2
    2f66:	17 ff       	sbrs	r17, 7
    2f68:	08 c0       	rjmp	.+16     	; 0x2f7a <vfprintf+0x5d6>
    2f6a:	f6 01       	movw	r30, r12
    2f6c:	60 81       	ld	r22, Z
    2f6e:	71 81       	ldd	r23, Z+1	; 0x01
    2f70:	82 81       	ldd	r24, Z+2	; 0x02
    2f72:	93 81       	ldd	r25, Z+3	; 0x03
    2f74:	44 e0       	ldi	r20, 0x04	; 4
    2f76:	50 e0       	ldi	r21, 0x00	; 0
    2f78:	08 c0       	rjmp	.+16     	; 0x2f8a <vfprintf+0x5e6>
    2f7a:	f6 01       	movw	r30, r12
    2f7c:	80 81       	ld	r24, Z
    2f7e:	91 81       	ldd	r25, Z+1	; 0x01
    2f80:	bc 01       	movw	r22, r24
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	42 e0       	ldi	r20, 0x02	; 2
    2f88:	50 e0       	ldi	r21, 0x00	; 0
    2f8a:	c4 0e       	add	r12, r20
    2f8c:	d5 1e       	adc	r13, r21
    2f8e:	ae 01       	movw	r20, r28
    2f90:	4f 5f       	subi	r20, 0xFF	; 255
    2f92:	5f 4f       	sbci	r21, 0xFF	; 255
    2f94:	0e 94 9f 1a 	call	0x353e	; 0x353e <__ultoa_invert>
    2f98:	e8 2e       	mov	r14, r24
    2f9a:	58 89       	ldd	r21, Y+16	; 0x10
    2f9c:	e5 1a       	sub	r14, r21
    2f9e:	8f e7       	ldi	r24, 0x7F	; 127
    2fa0:	f8 2e       	mov	r15, r24
    2fa2:	f1 22       	and	r15, r17
    2fa4:	f6 fe       	sbrs	r15, 6
    2fa6:	0b c0       	rjmp	.+22     	; 0x2fbe <vfprintf+0x61a>
    2fa8:	8e ef       	ldi	r24, 0xFE	; 254
    2faa:	f8 22       	and	r15, r24
    2fac:	e9 14       	cp	r14, r9
    2fae:	38 f4       	brcc	.+14     	; 0x2fbe <vfprintf+0x61a>
    2fb0:	f4 fe       	sbrs	r15, 4
    2fb2:	07 c0       	rjmp	.+14     	; 0x2fc2 <vfprintf+0x61e>
    2fb4:	f2 fc       	sbrc	r15, 2
    2fb6:	05 c0       	rjmp	.+10     	; 0x2fc2 <vfprintf+0x61e>
    2fb8:	9f ee       	ldi	r25, 0xEF	; 239
    2fba:	f9 22       	and	r15, r25
    2fbc:	02 c0       	rjmp	.+4      	; 0x2fc2 <vfprintf+0x61e>
    2fbe:	1e 2d       	mov	r17, r14
    2fc0:	01 c0       	rjmp	.+2      	; 0x2fc4 <vfprintf+0x620>
    2fc2:	19 2d       	mov	r17, r9
    2fc4:	f4 fe       	sbrs	r15, 4
    2fc6:	0d c0       	rjmp	.+26     	; 0x2fe2 <vfprintf+0x63e>
    2fc8:	fe 01       	movw	r30, r28
    2fca:	ee 0d       	add	r30, r14
    2fcc:	f1 1d       	adc	r31, r1
    2fce:	80 81       	ld	r24, Z
    2fd0:	80 33       	cpi	r24, 0x30	; 48
    2fd2:	19 f4       	brne	.+6      	; 0x2fda <vfprintf+0x636>
    2fd4:	e9 ee       	ldi	r30, 0xE9	; 233
    2fd6:	fe 22       	and	r15, r30
    2fd8:	08 c0       	rjmp	.+16     	; 0x2fea <vfprintf+0x646>
    2fda:	1f 5f       	subi	r17, 0xFF	; 255
    2fdc:	f2 fe       	sbrs	r15, 2
    2fde:	05 c0       	rjmp	.+10     	; 0x2fea <vfprintf+0x646>
    2fe0:	03 c0       	rjmp	.+6      	; 0x2fe8 <vfprintf+0x644>
    2fe2:	8f 2d       	mov	r24, r15
    2fe4:	86 78       	andi	r24, 0x86	; 134
    2fe6:	09 f0       	breq	.+2      	; 0x2fea <vfprintf+0x646>
    2fe8:	1f 5f       	subi	r17, 0xFF	; 255
    2fea:	0f 2d       	mov	r16, r15
    2fec:	f3 fc       	sbrc	r15, 3
    2fee:	14 c0       	rjmp	.+40     	; 0x3018 <vfprintf+0x674>
    2ff0:	f0 fe       	sbrs	r15, 0
    2ff2:	0f c0       	rjmp	.+30     	; 0x3012 <vfprintf+0x66e>
    2ff4:	18 15       	cp	r17, r8
    2ff6:	10 f0       	brcs	.+4      	; 0x2ffc <vfprintf+0x658>
    2ff8:	9e 2c       	mov	r9, r14
    2ffa:	0b c0       	rjmp	.+22     	; 0x3012 <vfprintf+0x66e>
    2ffc:	9e 2c       	mov	r9, r14
    2ffe:	98 0c       	add	r9, r8
    3000:	91 1a       	sub	r9, r17
    3002:	18 2d       	mov	r17, r8
    3004:	06 c0       	rjmp	.+12     	; 0x3012 <vfprintf+0x66e>
    3006:	80 e2       	ldi	r24, 0x20	; 32
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	b3 01       	movw	r22, r6
    300c:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    3010:	1f 5f       	subi	r17, 0xFF	; 255
    3012:	18 15       	cp	r17, r8
    3014:	c0 f3       	brcs	.-16     	; 0x3006 <vfprintf+0x662>
    3016:	04 c0       	rjmp	.+8      	; 0x3020 <vfprintf+0x67c>
    3018:	18 15       	cp	r17, r8
    301a:	10 f4       	brcc	.+4      	; 0x3020 <vfprintf+0x67c>
    301c:	81 1a       	sub	r8, r17
    301e:	01 c0       	rjmp	.+2      	; 0x3022 <vfprintf+0x67e>
    3020:	88 24       	eor	r8, r8
    3022:	04 ff       	sbrs	r16, 4
    3024:	0f c0       	rjmp	.+30     	; 0x3044 <vfprintf+0x6a0>
    3026:	80 e3       	ldi	r24, 0x30	; 48
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	b3 01       	movw	r22, r6
    302c:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    3030:	02 ff       	sbrs	r16, 2
    3032:	1d c0       	rjmp	.+58     	; 0x306e <vfprintf+0x6ca>
    3034:	01 fd       	sbrc	r16, 1
    3036:	03 c0       	rjmp	.+6      	; 0x303e <vfprintf+0x69a>
    3038:	88 e7       	ldi	r24, 0x78	; 120
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	0e c0       	rjmp	.+28     	; 0x305a <vfprintf+0x6b6>
    303e:	88 e5       	ldi	r24, 0x58	; 88
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	0b c0       	rjmp	.+22     	; 0x305a <vfprintf+0x6b6>
    3044:	80 2f       	mov	r24, r16
    3046:	86 78       	andi	r24, 0x86	; 134
    3048:	91 f0       	breq	.+36     	; 0x306e <vfprintf+0x6ca>
    304a:	01 ff       	sbrs	r16, 1
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <vfprintf+0x6ae>
    304e:	8b e2       	ldi	r24, 0x2B	; 43
    3050:	01 c0       	rjmp	.+2      	; 0x3054 <vfprintf+0x6b0>
    3052:	80 e2       	ldi	r24, 0x20	; 32
    3054:	f7 fc       	sbrc	r15, 7
    3056:	8d e2       	ldi	r24, 0x2D	; 45
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	b3 01       	movw	r22, r6
    305c:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    3060:	06 c0       	rjmp	.+12     	; 0x306e <vfprintf+0x6ca>
    3062:	80 e3       	ldi	r24, 0x30	; 48
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	b3 01       	movw	r22, r6
    3068:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    306c:	9a 94       	dec	r9
    306e:	e9 14       	cp	r14, r9
    3070:	c0 f3       	brcs	.-16     	; 0x3062 <vfprintf+0x6be>
    3072:	ea 94       	dec	r14
    3074:	e1 e0       	ldi	r30, 0x01	; 1
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	ec 0f       	add	r30, r28
    307a:	fd 1f       	adc	r31, r29
    307c:	ee 0d       	add	r30, r14
    307e:	f1 1d       	adc	r31, r1
    3080:	80 81       	ld	r24, Z
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	b3 01       	movw	r22, r6
    3086:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    308a:	ee 20       	and	r14, r14
    308c:	91 f7       	brne	.-28     	; 0x3072 <vfprintf+0x6ce>
    308e:	06 c0       	rjmp	.+12     	; 0x309c <vfprintf+0x6f8>
    3090:	80 e2       	ldi	r24, 0x20	; 32
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	b3 01       	movw	r22, r6
    3096:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <fputc>
    309a:	8a 94       	dec	r8
    309c:	88 20       	and	r8, r8
    309e:	c1 f7       	brne	.-16     	; 0x3090 <vfprintf+0x6ec>
    30a0:	99 cc       	rjmp	.-1742   	; 0x29d4 <vfprintf+0x30>
    30a2:	f3 01       	movw	r30, r6
    30a4:	66 81       	ldd	r22, Z+6	; 0x06
    30a6:	77 81       	ldd	r23, Z+7	; 0x07
    30a8:	cb 01       	movw	r24, r22
    30aa:	61 96       	adiw	r28, 0x11	; 17
    30ac:	e2 e1       	ldi	r30, 0x12	; 18
    30ae:	0c 94 89 1b 	jmp	0x3712	; 0x3712 <__epilogue_restores__>

000030b2 <malloc>:
    30b2:	cf 93       	push	r28
    30b4:	df 93       	push	r29
    30b6:	bc 01       	movw	r22, r24
    30b8:	82 30       	cpi	r24, 0x02	; 2
    30ba:	91 05       	cpc	r25, r1
    30bc:	10 f4       	brcc	.+4      	; 0x30c2 <malloc+0x10>
    30be:	62 e0       	ldi	r22, 0x02	; 2
    30c0:	70 e0       	ldi	r23, 0x00	; 0
    30c2:	a0 91 35 04 	lds	r26, 0x0435
    30c6:	b0 91 36 04 	lds	r27, 0x0436
    30ca:	ed 01       	movw	r28, r26
    30cc:	e0 e0       	ldi	r30, 0x00	; 0
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	40 e0       	ldi	r20, 0x00	; 0
    30d2:	50 e0       	ldi	r21, 0x00	; 0
    30d4:	21 c0       	rjmp	.+66     	; 0x3118 <malloc+0x66>
    30d6:	88 81       	ld	r24, Y
    30d8:	99 81       	ldd	r25, Y+1	; 0x01
    30da:	86 17       	cp	r24, r22
    30dc:	97 07       	cpc	r25, r23
    30de:	69 f4       	brne	.+26     	; 0x30fa <malloc+0x48>
    30e0:	8a 81       	ldd	r24, Y+2	; 0x02
    30e2:	9b 81       	ldd	r25, Y+3	; 0x03
    30e4:	30 97       	sbiw	r30, 0x00	; 0
    30e6:	19 f0       	breq	.+6      	; 0x30ee <malloc+0x3c>
    30e8:	93 83       	std	Z+3, r25	; 0x03
    30ea:	82 83       	std	Z+2, r24	; 0x02
    30ec:	04 c0       	rjmp	.+8      	; 0x30f6 <malloc+0x44>
    30ee:	90 93 36 04 	sts	0x0436, r25
    30f2:	80 93 35 04 	sts	0x0435, r24
    30f6:	fe 01       	movw	r30, r28
    30f8:	34 c0       	rjmp	.+104    	; 0x3162 <malloc+0xb0>
    30fa:	68 17       	cp	r22, r24
    30fc:	79 07       	cpc	r23, r25
    30fe:	38 f4       	brcc	.+14     	; 0x310e <malloc+0x5c>
    3100:	41 15       	cp	r20, r1
    3102:	51 05       	cpc	r21, r1
    3104:	19 f0       	breq	.+6      	; 0x310c <malloc+0x5a>
    3106:	84 17       	cp	r24, r20
    3108:	95 07       	cpc	r25, r21
    310a:	08 f4       	brcc	.+2      	; 0x310e <malloc+0x5c>
    310c:	ac 01       	movw	r20, r24
    310e:	fe 01       	movw	r30, r28
    3110:	8a 81       	ldd	r24, Y+2	; 0x02
    3112:	9b 81       	ldd	r25, Y+3	; 0x03
    3114:	9c 01       	movw	r18, r24
    3116:	e9 01       	movw	r28, r18
    3118:	20 97       	sbiw	r28, 0x00	; 0
    311a:	e9 f6       	brne	.-70     	; 0x30d6 <malloc+0x24>
    311c:	41 15       	cp	r20, r1
    311e:	51 05       	cpc	r21, r1
    3120:	a9 f1       	breq	.+106    	; 0x318c <malloc+0xda>
    3122:	ca 01       	movw	r24, r20
    3124:	86 1b       	sub	r24, r22
    3126:	97 0b       	sbc	r25, r23
    3128:	04 97       	sbiw	r24, 0x04	; 4
    312a:	08 f4       	brcc	.+2      	; 0x312e <malloc+0x7c>
    312c:	ba 01       	movw	r22, r20
    312e:	e0 e0       	ldi	r30, 0x00	; 0
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	2a c0       	rjmp	.+84     	; 0x3188 <malloc+0xd6>
    3134:	8d 91       	ld	r24, X+
    3136:	9c 91       	ld	r25, X
    3138:	11 97       	sbiw	r26, 0x01	; 1
    313a:	84 17       	cp	r24, r20
    313c:	95 07       	cpc	r25, r21
    313e:	f9 f4       	brne	.+62     	; 0x317e <malloc+0xcc>
    3140:	64 17       	cp	r22, r20
    3142:	75 07       	cpc	r23, r21
    3144:	81 f4       	brne	.+32     	; 0x3166 <malloc+0xb4>
    3146:	12 96       	adiw	r26, 0x02	; 2
    3148:	8d 91       	ld	r24, X+
    314a:	9c 91       	ld	r25, X
    314c:	13 97       	sbiw	r26, 0x03	; 3
    314e:	30 97       	sbiw	r30, 0x00	; 0
    3150:	19 f0       	breq	.+6      	; 0x3158 <malloc+0xa6>
    3152:	93 83       	std	Z+3, r25	; 0x03
    3154:	82 83       	std	Z+2, r24	; 0x02
    3156:	04 c0       	rjmp	.+8      	; 0x3160 <malloc+0xae>
    3158:	90 93 36 04 	sts	0x0436, r25
    315c:	80 93 35 04 	sts	0x0435, r24
    3160:	fd 01       	movw	r30, r26
    3162:	32 96       	adiw	r30, 0x02	; 2
    3164:	4f c0       	rjmp	.+158    	; 0x3204 <malloc+0x152>
    3166:	ca 01       	movw	r24, r20
    3168:	86 1b       	sub	r24, r22
    316a:	97 0b       	sbc	r25, r23
    316c:	fd 01       	movw	r30, r26
    316e:	e8 0f       	add	r30, r24
    3170:	f9 1f       	adc	r31, r25
    3172:	61 93       	st	Z+, r22
    3174:	71 93       	st	Z+, r23
    3176:	02 97       	sbiw	r24, 0x02	; 2
    3178:	8d 93       	st	X+, r24
    317a:	9c 93       	st	X, r25
    317c:	43 c0       	rjmp	.+134    	; 0x3204 <malloc+0x152>
    317e:	fd 01       	movw	r30, r26
    3180:	82 81       	ldd	r24, Z+2	; 0x02
    3182:	93 81       	ldd	r25, Z+3	; 0x03
    3184:	9c 01       	movw	r18, r24
    3186:	d9 01       	movw	r26, r18
    3188:	10 97       	sbiw	r26, 0x00	; 0
    318a:	a1 f6       	brne	.-88     	; 0x3134 <malloc+0x82>
    318c:	80 91 33 04 	lds	r24, 0x0433
    3190:	90 91 34 04 	lds	r25, 0x0434
    3194:	89 2b       	or	r24, r25
    3196:	41 f4       	brne	.+16     	; 0x31a8 <malloc+0xf6>
    3198:	80 91 f6 02 	lds	r24, 0x02F6
    319c:	90 91 f7 02 	lds	r25, 0x02F7
    31a0:	90 93 34 04 	sts	0x0434, r25
    31a4:	80 93 33 04 	sts	0x0433, r24
    31a8:	40 91 f8 02 	lds	r20, 0x02F8
    31ac:	50 91 f9 02 	lds	r21, 0x02F9
    31b0:	41 15       	cp	r20, r1
    31b2:	51 05       	cpc	r21, r1
    31b4:	41 f4       	brne	.+16     	; 0x31c6 <malloc+0x114>
    31b6:	4d b7       	in	r20, 0x3d	; 61
    31b8:	5e b7       	in	r21, 0x3e	; 62
    31ba:	80 91 f4 02 	lds	r24, 0x02F4
    31be:	90 91 f5 02 	lds	r25, 0x02F5
    31c2:	48 1b       	sub	r20, r24
    31c4:	59 0b       	sbc	r21, r25
    31c6:	20 91 33 04 	lds	r18, 0x0433
    31ca:	30 91 34 04 	lds	r19, 0x0434
    31ce:	24 17       	cp	r18, r20
    31d0:	35 07       	cpc	r19, r21
    31d2:	b0 f4       	brcc	.+44     	; 0x3200 <malloc+0x14e>
    31d4:	ca 01       	movw	r24, r20
    31d6:	82 1b       	sub	r24, r18
    31d8:	93 0b       	sbc	r25, r19
    31da:	86 17       	cp	r24, r22
    31dc:	97 07       	cpc	r25, r23
    31de:	80 f0       	brcs	.+32     	; 0x3200 <malloc+0x14e>
    31e0:	ab 01       	movw	r20, r22
    31e2:	4e 5f       	subi	r20, 0xFE	; 254
    31e4:	5f 4f       	sbci	r21, 0xFF	; 255
    31e6:	84 17       	cp	r24, r20
    31e8:	95 07       	cpc	r25, r21
    31ea:	50 f0       	brcs	.+20     	; 0x3200 <malloc+0x14e>
    31ec:	42 0f       	add	r20, r18
    31ee:	53 1f       	adc	r21, r19
    31f0:	50 93 34 04 	sts	0x0434, r21
    31f4:	40 93 33 04 	sts	0x0433, r20
    31f8:	f9 01       	movw	r30, r18
    31fa:	61 93       	st	Z+, r22
    31fc:	71 93       	st	Z+, r23
    31fe:	02 c0       	rjmp	.+4      	; 0x3204 <malloc+0x152>
    3200:	e0 e0       	ldi	r30, 0x00	; 0
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	cf 01       	movw	r24, r30
    3206:	df 91       	pop	r29
    3208:	cf 91       	pop	r28
    320a:	08 95       	ret

0000320c <free>:
    320c:	cf 93       	push	r28
    320e:	df 93       	push	r29
    3210:	00 97       	sbiw	r24, 0x00	; 0
    3212:	09 f4       	brne	.+2      	; 0x3216 <free+0xa>
    3214:	50 c0       	rjmp	.+160    	; 0x32b6 <free+0xaa>
    3216:	ec 01       	movw	r28, r24
    3218:	22 97       	sbiw	r28, 0x02	; 2
    321a:	1b 82       	std	Y+3, r1	; 0x03
    321c:	1a 82       	std	Y+2, r1	; 0x02
    321e:	a0 91 35 04 	lds	r26, 0x0435
    3222:	b0 91 36 04 	lds	r27, 0x0436
    3226:	10 97       	sbiw	r26, 0x00	; 0
    3228:	09 f1       	breq	.+66     	; 0x326c <free+0x60>
    322a:	40 e0       	ldi	r20, 0x00	; 0
    322c:	50 e0       	ldi	r21, 0x00	; 0
    322e:	ac 17       	cp	r26, r28
    3230:	bd 07       	cpc	r27, r29
    3232:	08 f1       	brcs	.+66     	; 0x3276 <free+0x6a>
    3234:	bb 83       	std	Y+3, r27	; 0x03
    3236:	aa 83       	std	Y+2, r26	; 0x02
    3238:	fe 01       	movw	r30, r28
    323a:	21 91       	ld	r18, Z+
    323c:	31 91       	ld	r19, Z+
    323e:	e2 0f       	add	r30, r18
    3240:	f3 1f       	adc	r31, r19
    3242:	ae 17       	cp	r26, r30
    3244:	bf 07       	cpc	r27, r31
    3246:	79 f4       	brne	.+30     	; 0x3266 <free+0x5a>
    3248:	8d 91       	ld	r24, X+
    324a:	9c 91       	ld	r25, X
    324c:	11 97       	sbiw	r26, 0x01	; 1
    324e:	28 0f       	add	r18, r24
    3250:	39 1f       	adc	r19, r25
    3252:	2e 5f       	subi	r18, 0xFE	; 254
    3254:	3f 4f       	sbci	r19, 0xFF	; 255
    3256:	39 83       	std	Y+1, r19	; 0x01
    3258:	28 83       	st	Y, r18
    325a:	12 96       	adiw	r26, 0x02	; 2
    325c:	8d 91       	ld	r24, X+
    325e:	9c 91       	ld	r25, X
    3260:	13 97       	sbiw	r26, 0x03	; 3
    3262:	9b 83       	std	Y+3, r25	; 0x03
    3264:	8a 83       	std	Y+2, r24	; 0x02
    3266:	41 15       	cp	r20, r1
    3268:	51 05       	cpc	r21, r1
    326a:	71 f4       	brne	.+28     	; 0x3288 <free+0x7c>
    326c:	d0 93 36 04 	sts	0x0436, r29
    3270:	c0 93 35 04 	sts	0x0435, r28
    3274:	20 c0       	rjmp	.+64     	; 0x32b6 <free+0xaa>
    3276:	12 96       	adiw	r26, 0x02	; 2
    3278:	8d 91       	ld	r24, X+
    327a:	9c 91       	ld	r25, X
    327c:	13 97       	sbiw	r26, 0x03	; 3
    327e:	ad 01       	movw	r20, r26
    3280:	00 97       	sbiw	r24, 0x00	; 0
    3282:	11 f0       	breq	.+4      	; 0x3288 <free+0x7c>
    3284:	dc 01       	movw	r26, r24
    3286:	d3 cf       	rjmp	.-90     	; 0x322e <free+0x22>
    3288:	fa 01       	movw	r30, r20
    328a:	d3 83       	std	Z+3, r29	; 0x03
    328c:	c2 83       	std	Z+2, r28	; 0x02
    328e:	21 91       	ld	r18, Z+
    3290:	31 91       	ld	r19, Z+
    3292:	e2 0f       	add	r30, r18
    3294:	f3 1f       	adc	r31, r19
    3296:	ce 17       	cp	r28, r30
    3298:	df 07       	cpc	r29, r31
    329a:	69 f4       	brne	.+26     	; 0x32b6 <free+0xaa>
    329c:	88 81       	ld	r24, Y
    329e:	99 81       	ldd	r25, Y+1	; 0x01
    32a0:	28 0f       	add	r18, r24
    32a2:	39 1f       	adc	r19, r25
    32a4:	2e 5f       	subi	r18, 0xFE	; 254
    32a6:	3f 4f       	sbci	r19, 0xFF	; 255
    32a8:	fa 01       	movw	r30, r20
    32aa:	31 83       	std	Z+1, r19	; 0x01
    32ac:	20 83       	st	Z, r18
    32ae:	8a 81       	ldd	r24, Y+2	; 0x02
    32b0:	9b 81       	ldd	r25, Y+3	; 0x03
    32b2:	93 83       	std	Z+3, r25	; 0x03
    32b4:	82 83       	std	Z+2, r24	; 0x02
    32b6:	df 91       	pop	r29
    32b8:	cf 91       	pop	r28
    32ba:	08 95       	ret

000032bc <exit>:
    32bc:	f8 94       	cli
    32be:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <_exit>

000032c2 <__ftoa_engine>:
    32c2:	28 30       	cpi	r18, 0x08	; 8
    32c4:	08 f0       	brcs	.+2      	; 0x32c8 <__ftoa_engine+0x6>
    32c6:	27 e0       	ldi	r18, 0x07	; 7
    32c8:	33 27       	eor	r19, r19
    32ca:	da 01       	movw	r26, r20
    32cc:	99 0f       	add	r25, r25
    32ce:	31 1d       	adc	r19, r1
    32d0:	87 fd       	sbrc	r24, 7
    32d2:	91 60       	ori	r25, 0x01	; 1
    32d4:	00 96       	adiw	r24, 0x00	; 0
    32d6:	61 05       	cpc	r22, r1
    32d8:	71 05       	cpc	r23, r1
    32da:	39 f4       	brne	.+14     	; 0x32ea <__ftoa_engine+0x28>
    32dc:	32 60       	ori	r19, 0x02	; 2
    32de:	2e 5f       	subi	r18, 0xFE	; 254
    32e0:	3d 93       	st	X+, r19
    32e2:	30 e3       	ldi	r19, 0x30	; 48
    32e4:	2a 95       	dec	r18
    32e6:	e1 f7       	brne	.-8      	; 0x32e0 <__ftoa_engine+0x1e>
    32e8:	08 95       	ret
    32ea:	9f 3f       	cpi	r25, 0xFF	; 255
    32ec:	30 f0       	brcs	.+12     	; 0x32fa <__ftoa_engine+0x38>
    32ee:	80 38       	cpi	r24, 0x80	; 128
    32f0:	71 05       	cpc	r23, r1
    32f2:	61 05       	cpc	r22, r1
    32f4:	09 f0       	breq	.+2      	; 0x32f8 <__ftoa_engine+0x36>
    32f6:	3c 5f       	subi	r19, 0xFC	; 252
    32f8:	3c 5f       	subi	r19, 0xFC	; 252
    32fa:	3d 93       	st	X+, r19
    32fc:	91 30       	cpi	r25, 0x01	; 1
    32fe:	08 f0       	brcs	.+2      	; 0x3302 <__ftoa_engine+0x40>
    3300:	80 68       	ori	r24, 0x80	; 128
    3302:	91 1d       	adc	r25, r1
    3304:	df 93       	push	r29
    3306:	cf 93       	push	r28
    3308:	1f 93       	push	r17
    330a:	0f 93       	push	r16
    330c:	ff 92       	push	r15
    330e:	ef 92       	push	r14
    3310:	19 2f       	mov	r17, r25
    3312:	98 7f       	andi	r25, 0xF8	; 248
    3314:	96 95       	lsr	r25
    3316:	e9 2f       	mov	r30, r25
    3318:	96 95       	lsr	r25
    331a:	96 95       	lsr	r25
    331c:	e9 0f       	add	r30, r25
    331e:	ff 27       	eor	r31, r31
    3320:	e8 5d       	subi	r30, 0xD8	; 216
    3322:	fb 4f       	sbci	r31, 0xFB	; 251
    3324:	99 27       	eor	r25, r25
    3326:	33 27       	eor	r19, r19
    3328:	ee 24       	eor	r14, r14
    332a:	ff 24       	eor	r15, r15
    332c:	a7 01       	movw	r20, r14
    332e:	e7 01       	movw	r28, r14
    3330:	05 90       	lpm	r0, Z+
    3332:	08 94       	sec
    3334:	07 94       	ror	r0
    3336:	28 f4       	brcc	.+10     	; 0x3342 <__ftoa_engine+0x80>
    3338:	36 0f       	add	r19, r22
    333a:	e7 1e       	adc	r14, r23
    333c:	f8 1e       	adc	r15, r24
    333e:	49 1f       	adc	r20, r25
    3340:	51 1d       	adc	r21, r1
    3342:	66 0f       	add	r22, r22
    3344:	77 1f       	adc	r23, r23
    3346:	88 1f       	adc	r24, r24
    3348:	99 1f       	adc	r25, r25
    334a:	06 94       	lsr	r0
    334c:	a1 f7       	brne	.-24     	; 0x3336 <__ftoa_engine+0x74>
    334e:	05 90       	lpm	r0, Z+
    3350:	07 94       	ror	r0
    3352:	28 f4       	brcc	.+10     	; 0x335e <__ftoa_engine+0x9c>
    3354:	e7 0e       	add	r14, r23
    3356:	f8 1e       	adc	r15, r24
    3358:	49 1f       	adc	r20, r25
    335a:	56 1f       	adc	r21, r22
    335c:	c1 1d       	adc	r28, r1
    335e:	77 0f       	add	r23, r23
    3360:	88 1f       	adc	r24, r24
    3362:	99 1f       	adc	r25, r25
    3364:	66 1f       	adc	r22, r22
    3366:	06 94       	lsr	r0
    3368:	a1 f7       	brne	.-24     	; 0x3352 <__ftoa_engine+0x90>
    336a:	05 90       	lpm	r0, Z+
    336c:	07 94       	ror	r0
    336e:	28 f4       	brcc	.+10     	; 0x337a <__ftoa_engine+0xb8>
    3370:	f8 0e       	add	r15, r24
    3372:	49 1f       	adc	r20, r25
    3374:	56 1f       	adc	r21, r22
    3376:	c7 1f       	adc	r28, r23
    3378:	d1 1d       	adc	r29, r1
    337a:	88 0f       	add	r24, r24
    337c:	99 1f       	adc	r25, r25
    337e:	66 1f       	adc	r22, r22
    3380:	77 1f       	adc	r23, r23
    3382:	06 94       	lsr	r0
    3384:	a1 f7       	brne	.-24     	; 0x336e <__ftoa_engine+0xac>
    3386:	05 90       	lpm	r0, Z+
    3388:	07 94       	ror	r0
    338a:	20 f4       	brcc	.+8      	; 0x3394 <__ftoa_engine+0xd2>
    338c:	49 0f       	add	r20, r25
    338e:	56 1f       	adc	r21, r22
    3390:	c7 1f       	adc	r28, r23
    3392:	d8 1f       	adc	r29, r24
    3394:	99 0f       	add	r25, r25
    3396:	66 1f       	adc	r22, r22
    3398:	77 1f       	adc	r23, r23
    339a:	88 1f       	adc	r24, r24
    339c:	06 94       	lsr	r0
    339e:	a9 f7       	brne	.-22     	; 0x338a <__ftoa_engine+0xc8>
    33a0:	84 91       	lpm	r24, Z+
    33a2:	10 95       	com	r17
    33a4:	17 70       	andi	r17, 0x07	; 7
    33a6:	41 f0       	breq	.+16     	; 0x33b8 <__ftoa_engine+0xf6>
    33a8:	d6 95       	lsr	r29
    33aa:	c7 95       	ror	r28
    33ac:	57 95       	ror	r21
    33ae:	47 95       	ror	r20
    33b0:	f7 94       	ror	r15
    33b2:	e7 94       	ror	r14
    33b4:	1a 95       	dec	r17
    33b6:	c1 f7       	brne	.-16     	; 0x33a8 <__ftoa_engine+0xe6>
    33b8:	ee ec       	ldi	r30, 0xCE	; 206
    33ba:	f3 e0       	ldi	r31, 0x03	; 3
    33bc:	68 94       	set
    33be:	15 90       	lpm	r1, Z+
    33c0:	15 91       	lpm	r17, Z+
    33c2:	35 91       	lpm	r19, Z+
    33c4:	65 91       	lpm	r22, Z+
    33c6:	95 91       	lpm	r25, Z+
    33c8:	05 90       	lpm	r0, Z+
    33ca:	7f e2       	ldi	r23, 0x2F	; 47
    33cc:	73 95       	inc	r23
    33ce:	e1 18       	sub	r14, r1
    33d0:	f1 0a       	sbc	r15, r17
    33d2:	43 0b       	sbc	r20, r19
    33d4:	56 0b       	sbc	r21, r22
    33d6:	c9 0b       	sbc	r28, r25
    33d8:	d0 09       	sbc	r29, r0
    33da:	c0 f7       	brcc	.-16     	; 0x33cc <__ftoa_engine+0x10a>
    33dc:	e1 0c       	add	r14, r1
    33de:	f1 1e       	adc	r15, r17
    33e0:	43 1f       	adc	r20, r19
    33e2:	56 1f       	adc	r21, r22
    33e4:	c9 1f       	adc	r28, r25
    33e6:	d0 1d       	adc	r29, r0
    33e8:	7e f4       	brtc	.+30     	; 0x3408 <__ftoa_engine+0x146>
    33ea:	70 33       	cpi	r23, 0x30	; 48
    33ec:	11 f4       	brne	.+4      	; 0x33f2 <__ftoa_engine+0x130>
    33ee:	8a 95       	dec	r24
    33f0:	e6 cf       	rjmp	.-52     	; 0x33be <__ftoa_engine+0xfc>
    33f2:	e8 94       	clt
    33f4:	01 50       	subi	r16, 0x01	; 1
    33f6:	30 f0       	brcs	.+12     	; 0x3404 <__ftoa_engine+0x142>
    33f8:	08 0f       	add	r16, r24
    33fa:	0a f4       	brpl	.+2      	; 0x33fe <__ftoa_engine+0x13c>
    33fc:	00 27       	eor	r16, r16
    33fe:	02 17       	cp	r16, r18
    3400:	08 f4       	brcc	.+2      	; 0x3404 <__ftoa_engine+0x142>
    3402:	20 2f       	mov	r18, r16
    3404:	23 95       	inc	r18
    3406:	02 2f       	mov	r16, r18
    3408:	7a 33       	cpi	r23, 0x3A	; 58
    340a:	28 f0       	brcs	.+10     	; 0x3416 <__ftoa_engine+0x154>
    340c:	79 e3       	ldi	r23, 0x39	; 57
    340e:	7d 93       	st	X+, r23
    3410:	2a 95       	dec	r18
    3412:	e9 f7       	brne	.-6      	; 0x340e <__ftoa_engine+0x14c>
    3414:	10 c0       	rjmp	.+32     	; 0x3436 <__ftoa_engine+0x174>
    3416:	7d 93       	st	X+, r23
    3418:	2a 95       	dec	r18
    341a:	89 f6       	brne	.-94     	; 0x33be <__ftoa_engine+0xfc>
    341c:	06 94       	lsr	r0
    341e:	97 95       	ror	r25
    3420:	67 95       	ror	r22
    3422:	37 95       	ror	r19
    3424:	17 95       	ror	r17
    3426:	17 94       	ror	r1
    3428:	e1 18       	sub	r14, r1
    342a:	f1 0a       	sbc	r15, r17
    342c:	43 0b       	sbc	r20, r19
    342e:	56 0b       	sbc	r21, r22
    3430:	c9 0b       	sbc	r28, r25
    3432:	d0 09       	sbc	r29, r0
    3434:	98 f0       	brcs	.+38     	; 0x345c <__ftoa_engine+0x19a>
    3436:	23 95       	inc	r18
    3438:	7e 91       	ld	r23, -X
    343a:	73 95       	inc	r23
    343c:	7a 33       	cpi	r23, 0x3A	; 58
    343e:	08 f0       	brcs	.+2      	; 0x3442 <__ftoa_engine+0x180>
    3440:	70 e3       	ldi	r23, 0x30	; 48
    3442:	7c 93       	st	X, r23
    3444:	20 13       	cpse	r18, r16
    3446:	b8 f7       	brcc	.-18     	; 0x3436 <__ftoa_engine+0x174>
    3448:	7e 91       	ld	r23, -X
    344a:	70 61       	ori	r23, 0x10	; 16
    344c:	7d 93       	st	X+, r23
    344e:	30 f0       	brcs	.+12     	; 0x345c <__ftoa_engine+0x19a>
    3450:	83 95       	inc	r24
    3452:	71 e3       	ldi	r23, 0x31	; 49
    3454:	7d 93       	st	X+, r23
    3456:	70 e3       	ldi	r23, 0x30	; 48
    3458:	2a 95       	dec	r18
    345a:	e1 f7       	brne	.-8      	; 0x3454 <__ftoa_engine+0x192>
    345c:	11 24       	eor	r1, r1
    345e:	ef 90       	pop	r14
    3460:	ff 90       	pop	r15
    3462:	0f 91       	pop	r16
    3464:	1f 91       	pop	r17
    3466:	cf 91       	pop	r28
    3468:	df 91       	pop	r29
    346a:	99 27       	eor	r25, r25
    346c:	87 fd       	sbrc	r24, 7
    346e:	90 95       	com	r25
    3470:	08 95       	ret

00003472 <strnlen_P>:
    3472:	fc 01       	movw	r30, r24
    3474:	05 90       	lpm	r0, Z+
    3476:	61 50       	subi	r22, 0x01	; 1
    3478:	70 40       	sbci	r23, 0x00	; 0
    347a:	01 10       	cpse	r0, r1
    347c:	d8 f7       	brcc	.-10     	; 0x3474 <strnlen_P+0x2>
    347e:	80 95       	com	r24
    3480:	90 95       	com	r25
    3482:	8e 0f       	add	r24, r30
    3484:	9f 1f       	adc	r25, r31
    3486:	08 95       	ret

00003488 <memset>:
    3488:	dc 01       	movw	r26, r24
    348a:	01 c0       	rjmp	.+2      	; 0x348e <memset+0x6>
    348c:	6d 93       	st	X+, r22
    348e:	41 50       	subi	r20, 0x01	; 1
    3490:	50 40       	sbci	r21, 0x00	; 0
    3492:	e0 f7       	brcc	.-8      	; 0x348c <memset+0x4>
    3494:	08 95       	ret

00003496 <strnlen>:
    3496:	fc 01       	movw	r30, r24
    3498:	61 50       	subi	r22, 0x01	; 1
    349a:	70 40       	sbci	r23, 0x00	; 0
    349c:	01 90       	ld	r0, Z+
    349e:	01 10       	cpse	r0, r1
    34a0:	d8 f7       	brcc	.-10     	; 0x3498 <strnlen+0x2>
    34a2:	80 95       	com	r24
    34a4:	90 95       	com	r25
    34a6:	8e 0f       	add	r24, r30
    34a8:	9f 1f       	adc	r25, r31
    34aa:	08 95       	ret

000034ac <fprintf_P>:
    34ac:	a0 e0       	ldi	r26, 0x00	; 0
    34ae:	b0 e0       	ldi	r27, 0x00	; 0
    34b0:	ec e5       	ldi	r30, 0x5C	; 92
    34b2:	fa e1       	ldi	r31, 0x1A	; 26
    34b4:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <__prologue_saves__+0x1c>
    34b8:	0f 81       	ldd	r16, Y+7	; 0x07
    34ba:	18 85       	ldd	r17, Y+8	; 0x08
    34bc:	9e 01       	movw	r18, r28
    34be:	25 5f       	subi	r18, 0xF5	; 245
    34c0:	3f 4f       	sbci	r19, 0xFF	; 255
    34c2:	f8 01       	movw	r30, r16
    34c4:	83 81       	ldd	r24, Z+3	; 0x03
    34c6:	88 60       	ori	r24, 0x08	; 8
    34c8:	83 83       	std	Z+3, r24	; 0x03
    34ca:	c8 01       	movw	r24, r16
    34cc:	69 85       	ldd	r22, Y+9	; 0x09
    34ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    34d0:	a9 01       	movw	r20, r18
    34d2:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <vfprintf>
    34d6:	f8 01       	movw	r30, r16
    34d8:	23 81       	ldd	r18, Z+3	; 0x03
    34da:	27 7f       	andi	r18, 0xF7	; 247
    34dc:	23 83       	std	Z+3, r18	; 0x03
    34de:	20 96       	adiw	r28, 0x00	; 0
    34e0:	e4 e0       	ldi	r30, 0x04	; 4
    34e2:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__epilogue_restores__+0x1c>

000034e6 <fputc>:
    34e6:	0f 93       	push	r16
    34e8:	1f 93       	push	r17
    34ea:	cf 93       	push	r28
    34ec:	df 93       	push	r29
    34ee:	8c 01       	movw	r16, r24
    34f0:	eb 01       	movw	r28, r22
    34f2:	8b 81       	ldd	r24, Y+3	; 0x03
    34f4:	81 ff       	sbrs	r24, 1
    34f6:	1b c0       	rjmp	.+54     	; 0x352e <fputc+0x48>
    34f8:	82 ff       	sbrs	r24, 2
    34fa:	0d c0       	rjmp	.+26     	; 0x3516 <fputc+0x30>
    34fc:	2e 81       	ldd	r18, Y+6	; 0x06
    34fe:	3f 81       	ldd	r19, Y+7	; 0x07
    3500:	8c 81       	ldd	r24, Y+4	; 0x04
    3502:	9d 81       	ldd	r25, Y+5	; 0x05
    3504:	28 17       	cp	r18, r24
    3506:	39 07       	cpc	r19, r25
    3508:	64 f4       	brge	.+24     	; 0x3522 <fputc+0x3c>
    350a:	e8 81       	ld	r30, Y
    350c:	f9 81       	ldd	r31, Y+1	; 0x01
    350e:	01 93       	st	Z+, r16
    3510:	f9 83       	std	Y+1, r31	; 0x01
    3512:	e8 83       	st	Y, r30
    3514:	06 c0       	rjmp	.+12     	; 0x3522 <fputc+0x3c>
    3516:	e8 85       	ldd	r30, Y+8	; 0x08
    3518:	f9 85       	ldd	r31, Y+9	; 0x09
    351a:	80 2f       	mov	r24, r16
    351c:	09 95       	icall
    351e:	89 2b       	or	r24, r25
    3520:	31 f4       	brne	.+12     	; 0x352e <fputc+0x48>
    3522:	8e 81       	ldd	r24, Y+6	; 0x06
    3524:	9f 81       	ldd	r25, Y+7	; 0x07
    3526:	01 96       	adiw	r24, 0x01	; 1
    3528:	9f 83       	std	Y+7, r25	; 0x07
    352a:	8e 83       	std	Y+6, r24	; 0x06
    352c:	02 c0       	rjmp	.+4      	; 0x3532 <fputc+0x4c>
    352e:	0f ef       	ldi	r16, 0xFF	; 255
    3530:	1f ef       	ldi	r17, 0xFF	; 255
    3532:	c8 01       	movw	r24, r16
    3534:	df 91       	pop	r29
    3536:	cf 91       	pop	r28
    3538:	1f 91       	pop	r17
    353a:	0f 91       	pop	r16
    353c:	08 95       	ret

0000353e <__ultoa_invert>:
    353e:	fa 01       	movw	r30, r20
    3540:	aa 27       	eor	r26, r26
    3542:	28 30       	cpi	r18, 0x08	; 8
    3544:	51 f1       	breq	.+84     	; 0x359a <__ultoa_invert+0x5c>
    3546:	20 31       	cpi	r18, 0x10	; 16
    3548:	81 f1       	breq	.+96     	; 0x35aa <__ultoa_invert+0x6c>
    354a:	e8 94       	clt
    354c:	6f 93       	push	r22
    354e:	6e 7f       	andi	r22, 0xFE	; 254
    3550:	6e 5f       	subi	r22, 0xFE	; 254
    3552:	7f 4f       	sbci	r23, 0xFF	; 255
    3554:	8f 4f       	sbci	r24, 0xFF	; 255
    3556:	9f 4f       	sbci	r25, 0xFF	; 255
    3558:	af 4f       	sbci	r26, 0xFF	; 255
    355a:	b1 e0       	ldi	r27, 0x01	; 1
    355c:	3e d0       	rcall	.+124    	; 0x35da <__ultoa_invert+0x9c>
    355e:	b4 e0       	ldi	r27, 0x04	; 4
    3560:	3c d0       	rcall	.+120    	; 0x35da <__ultoa_invert+0x9c>
    3562:	67 0f       	add	r22, r23
    3564:	78 1f       	adc	r23, r24
    3566:	89 1f       	adc	r24, r25
    3568:	9a 1f       	adc	r25, r26
    356a:	a1 1d       	adc	r26, r1
    356c:	68 0f       	add	r22, r24
    356e:	79 1f       	adc	r23, r25
    3570:	8a 1f       	adc	r24, r26
    3572:	91 1d       	adc	r25, r1
    3574:	a1 1d       	adc	r26, r1
    3576:	6a 0f       	add	r22, r26
    3578:	71 1d       	adc	r23, r1
    357a:	81 1d       	adc	r24, r1
    357c:	91 1d       	adc	r25, r1
    357e:	a1 1d       	adc	r26, r1
    3580:	20 d0       	rcall	.+64     	; 0x35c2 <__ultoa_invert+0x84>
    3582:	09 f4       	brne	.+2      	; 0x3586 <__ultoa_invert+0x48>
    3584:	68 94       	set
    3586:	3f 91       	pop	r19
    3588:	2a e0       	ldi	r18, 0x0A	; 10
    358a:	26 9f       	mul	r18, r22
    358c:	11 24       	eor	r1, r1
    358e:	30 19       	sub	r19, r0
    3590:	30 5d       	subi	r19, 0xD0	; 208
    3592:	31 93       	st	Z+, r19
    3594:	de f6       	brtc	.-74     	; 0x354c <__ultoa_invert+0xe>
    3596:	cf 01       	movw	r24, r30
    3598:	08 95       	ret
    359a:	46 2f       	mov	r20, r22
    359c:	47 70       	andi	r20, 0x07	; 7
    359e:	40 5d       	subi	r20, 0xD0	; 208
    35a0:	41 93       	st	Z+, r20
    35a2:	b3 e0       	ldi	r27, 0x03	; 3
    35a4:	0f d0       	rcall	.+30     	; 0x35c4 <__ultoa_invert+0x86>
    35a6:	c9 f7       	brne	.-14     	; 0x359a <__ultoa_invert+0x5c>
    35a8:	f6 cf       	rjmp	.-20     	; 0x3596 <__ultoa_invert+0x58>
    35aa:	46 2f       	mov	r20, r22
    35ac:	4f 70       	andi	r20, 0x0F	; 15
    35ae:	40 5d       	subi	r20, 0xD0	; 208
    35b0:	4a 33       	cpi	r20, 0x3A	; 58
    35b2:	18 f0       	brcs	.+6      	; 0x35ba <__ultoa_invert+0x7c>
    35b4:	49 5d       	subi	r20, 0xD9	; 217
    35b6:	31 fd       	sbrc	r19, 1
    35b8:	40 52       	subi	r20, 0x20	; 32
    35ba:	41 93       	st	Z+, r20
    35bc:	02 d0       	rcall	.+4      	; 0x35c2 <__ultoa_invert+0x84>
    35be:	a9 f7       	brne	.-22     	; 0x35aa <__ultoa_invert+0x6c>
    35c0:	ea cf       	rjmp	.-44     	; 0x3596 <__ultoa_invert+0x58>
    35c2:	b4 e0       	ldi	r27, 0x04	; 4
    35c4:	a6 95       	lsr	r26
    35c6:	97 95       	ror	r25
    35c8:	87 95       	ror	r24
    35ca:	77 95       	ror	r23
    35cc:	67 95       	ror	r22
    35ce:	ba 95       	dec	r27
    35d0:	c9 f7       	brne	.-14     	; 0x35c4 <__ultoa_invert+0x86>
    35d2:	00 97       	sbiw	r24, 0x00	; 0
    35d4:	61 05       	cpc	r22, r1
    35d6:	71 05       	cpc	r23, r1
    35d8:	08 95       	ret
    35da:	9b 01       	movw	r18, r22
    35dc:	ac 01       	movw	r20, r24
    35de:	0a 2e       	mov	r0, r26
    35e0:	06 94       	lsr	r0
    35e2:	57 95       	ror	r21
    35e4:	47 95       	ror	r20
    35e6:	37 95       	ror	r19
    35e8:	27 95       	ror	r18
    35ea:	ba 95       	dec	r27
    35ec:	c9 f7       	brne	.-14     	; 0x35e0 <__ultoa_invert+0xa2>
    35ee:	62 0f       	add	r22, r18
    35f0:	73 1f       	adc	r23, r19
    35f2:	84 1f       	adc	r24, r20
    35f4:	95 1f       	adc	r25, r21
    35f6:	a0 1d       	adc	r26, r0
    35f8:	08 95       	ret

000035fa <__mulsi3>:
    35fa:	62 9f       	mul	r22, r18
    35fc:	d0 01       	movw	r26, r0
    35fe:	73 9f       	mul	r23, r19
    3600:	f0 01       	movw	r30, r0
    3602:	82 9f       	mul	r24, r18
    3604:	e0 0d       	add	r30, r0
    3606:	f1 1d       	adc	r31, r1
    3608:	64 9f       	mul	r22, r20
    360a:	e0 0d       	add	r30, r0
    360c:	f1 1d       	adc	r31, r1
    360e:	92 9f       	mul	r25, r18
    3610:	f0 0d       	add	r31, r0
    3612:	83 9f       	mul	r24, r19
    3614:	f0 0d       	add	r31, r0
    3616:	74 9f       	mul	r23, r20
    3618:	f0 0d       	add	r31, r0
    361a:	65 9f       	mul	r22, r21
    361c:	f0 0d       	add	r31, r0
    361e:	99 27       	eor	r25, r25
    3620:	72 9f       	mul	r23, r18
    3622:	b0 0d       	add	r27, r0
    3624:	e1 1d       	adc	r30, r1
    3626:	f9 1f       	adc	r31, r25
    3628:	63 9f       	mul	r22, r19
    362a:	b0 0d       	add	r27, r0
    362c:	e1 1d       	adc	r30, r1
    362e:	f9 1f       	adc	r31, r25
    3630:	bd 01       	movw	r22, r26
    3632:	cf 01       	movw	r24, r30
    3634:	11 24       	eor	r1, r1
    3636:	08 95       	ret

00003638 <__udivmodhi4>:
    3638:	aa 1b       	sub	r26, r26
    363a:	bb 1b       	sub	r27, r27
    363c:	51 e1       	ldi	r21, 0x11	; 17
    363e:	07 c0       	rjmp	.+14     	; 0x364e <__udivmodhi4_ep>

00003640 <__udivmodhi4_loop>:
    3640:	aa 1f       	adc	r26, r26
    3642:	bb 1f       	adc	r27, r27
    3644:	a6 17       	cp	r26, r22
    3646:	b7 07       	cpc	r27, r23
    3648:	10 f0       	brcs	.+4      	; 0x364e <__udivmodhi4_ep>
    364a:	a6 1b       	sub	r26, r22
    364c:	b7 0b       	sbc	r27, r23

0000364e <__udivmodhi4_ep>:
    364e:	88 1f       	adc	r24, r24
    3650:	99 1f       	adc	r25, r25
    3652:	5a 95       	dec	r21
    3654:	a9 f7       	brne	.-22     	; 0x3640 <__udivmodhi4_loop>
    3656:	80 95       	com	r24
    3658:	90 95       	com	r25
    365a:	bc 01       	movw	r22, r24
    365c:	cd 01       	movw	r24, r26
    365e:	08 95       	ret

00003660 <__udivmodsi4>:
    3660:	a1 e2       	ldi	r26, 0x21	; 33
    3662:	1a 2e       	mov	r1, r26
    3664:	aa 1b       	sub	r26, r26
    3666:	bb 1b       	sub	r27, r27
    3668:	fd 01       	movw	r30, r26
    366a:	0d c0       	rjmp	.+26     	; 0x3686 <__udivmodsi4_ep>

0000366c <__udivmodsi4_loop>:
    366c:	aa 1f       	adc	r26, r26
    366e:	bb 1f       	adc	r27, r27
    3670:	ee 1f       	adc	r30, r30
    3672:	ff 1f       	adc	r31, r31
    3674:	a2 17       	cp	r26, r18
    3676:	b3 07       	cpc	r27, r19
    3678:	e4 07       	cpc	r30, r20
    367a:	f5 07       	cpc	r31, r21
    367c:	20 f0       	brcs	.+8      	; 0x3686 <__udivmodsi4_ep>
    367e:	a2 1b       	sub	r26, r18
    3680:	b3 0b       	sbc	r27, r19
    3682:	e4 0b       	sbc	r30, r20
    3684:	f5 0b       	sbc	r31, r21

00003686 <__udivmodsi4_ep>:
    3686:	66 1f       	adc	r22, r22
    3688:	77 1f       	adc	r23, r23
    368a:	88 1f       	adc	r24, r24
    368c:	99 1f       	adc	r25, r25
    368e:	1a 94       	dec	r1
    3690:	69 f7       	brne	.-38     	; 0x366c <__udivmodsi4_loop>
    3692:	60 95       	com	r22
    3694:	70 95       	com	r23
    3696:	80 95       	com	r24
    3698:	90 95       	com	r25
    369a:	9b 01       	movw	r18, r22
    369c:	ac 01       	movw	r20, r24
    369e:	bd 01       	movw	r22, r26
    36a0:	cf 01       	movw	r24, r30
    36a2:	08 95       	ret

000036a4 <__divmodsi4>:
    36a4:	97 fb       	bst	r25, 7
    36a6:	09 2e       	mov	r0, r25
    36a8:	05 26       	eor	r0, r21
    36aa:	0e d0       	rcall	.+28     	; 0x36c8 <__divmodsi4_neg1>
    36ac:	57 fd       	sbrc	r21, 7
    36ae:	04 d0       	rcall	.+8      	; 0x36b8 <__divmodsi4_neg2>
    36b0:	d7 df       	rcall	.-82     	; 0x3660 <__udivmodsi4>
    36b2:	0a d0       	rcall	.+20     	; 0x36c8 <__divmodsi4_neg1>
    36b4:	00 1c       	adc	r0, r0
    36b6:	38 f4       	brcc	.+14     	; 0x36c6 <__divmodsi4_exit>

000036b8 <__divmodsi4_neg2>:
    36b8:	50 95       	com	r21
    36ba:	40 95       	com	r20
    36bc:	30 95       	com	r19
    36be:	21 95       	neg	r18
    36c0:	3f 4f       	sbci	r19, 0xFF	; 255
    36c2:	4f 4f       	sbci	r20, 0xFF	; 255
    36c4:	5f 4f       	sbci	r21, 0xFF	; 255

000036c6 <__divmodsi4_exit>:
    36c6:	08 95       	ret

000036c8 <__divmodsi4_neg1>:
    36c8:	f6 f7       	brtc	.-4      	; 0x36c6 <__divmodsi4_exit>
    36ca:	90 95       	com	r25
    36cc:	80 95       	com	r24
    36ce:	70 95       	com	r23
    36d0:	61 95       	neg	r22
    36d2:	7f 4f       	sbci	r23, 0xFF	; 255
    36d4:	8f 4f       	sbci	r24, 0xFF	; 255
    36d6:	9f 4f       	sbci	r25, 0xFF	; 255
    36d8:	08 95       	ret

000036da <__prologue_saves__>:
    36da:	2f 92       	push	r2
    36dc:	3f 92       	push	r3
    36de:	4f 92       	push	r4
    36e0:	5f 92       	push	r5
    36e2:	6f 92       	push	r6
    36e4:	7f 92       	push	r7
    36e6:	8f 92       	push	r8
    36e8:	9f 92       	push	r9
    36ea:	af 92       	push	r10
    36ec:	bf 92       	push	r11
    36ee:	cf 92       	push	r12
    36f0:	df 92       	push	r13
    36f2:	ef 92       	push	r14
    36f4:	ff 92       	push	r15
    36f6:	0f 93       	push	r16
    36f8:	1f 93       	push	r17
    36fa:	cf 93       	push	r28
    36fc:	df 93       	push	r29
    36fe:	cd b7       	in	r28, 0x3d	; 61
    3700:	de b7       	in	r29, 0x3e	; 62
    3702:	ca 1b       	sub	r28, r26
    3704:	db 0b       	sbc	r29, r27
    3706:	0f b6       	in	r0, 0x3f	; 63
    3708:	f8 94       	cli
    370a:	de bf       	out	0x3e, r29	; 62
    370c:	0f be       	out	0x3f, r0	; 63
    370e:	cd bf       	out	0x3d, r28	; 61
    3710:	09 94       	ijmp

00003712 <__epilogue_restores__>:
    3712:	2a 88       	ldd	r2, Y+18	; 0x12
    3714:	39 88       	ldd	r3, Y+17	; 0x11
    3716:	48 88       	ldd	r4, Y+16	; 0x10
    3718:	5f 84       	ldd	r5, Y+15	; 0x0f
    371a:	6e 84       	ldd	r6, Y+14	; 0x0e
    371c:	7d 84       	ldd	r7, Y+13	; 0x0d
    371e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3720:	9b 84       	ldd	r9, Y+11	; 0x0b
    3722:	aa 84       	ldd	r10, Y+10	; 0x0a
    3724:	b9 84       	ldd	r11, Y+9	; 0x09
    3726:	c8 84       	ldd	r12, Y+8	; 0x08
    3728:	df 80       	ldd	r13, Y+7	; 0x07
    372a:	ee 80       	ldd	r14, Y+6	; 0x06
    372c:	fd 80       	ldd	r15, Y+5	; 0x05
    372e:	0c 81       	ldd	r16, Y+4	; 0x04
    3730:	1b 81       	ldd	r17, Y+3	; 0x03
    3732:	aa 81       	ldd	r26, Y+2	; 0x02
    3734:	b9 81       	ldd	r27, Y+1	; 0x01
    3736:	ce 0f       	add	r28, r30
    3738:	d1 1d       	adc	r29, r1
    373a:	0f b6       	in	r0, 0x3f	; 63
    373c:	f8 94       	cli
    373e:	de bf       	out	0x3e, r29	; 62
    3740:	0f be       	out	0x3f, r0	; 63
    3742:	cd bf       	out	0x3d, r28	; 61
    3744:	ed 01       	movw	r28, r26
    3746:	08 95       	ret

00003748 <__tablejump2__>:
    3748:	ee 0f       	add	r30, r30
    374a:	ff 1f       	adc	r31, r31

0000374c <__tablejump__>:
    374c:	05 90       	lpm	r0, Z+
    374e:	f4 91       	lpm	r31, Z+
    3750:	e0 2d       	mov	r30, r0
    3752:	09 94       	ijmp

00003754 <_exit>:
    3754:	f8 94       	cli

00003756 <__stop_program>:
    3756:	ff cf       	rjmp	.-2      	; 0x3756 <__stop_program>
